/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/animations/Paragraph.js":
/*!*************************************!*\
  !*** ./app/animations/Paragraph.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/each */ "./node_modules/lodash/each.js");
/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_each__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var classes_Animation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classes/Animation */ "./app/classes/Animation.js");
/* harmony import */ var utils_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/text */ "./app/utils/text.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class extends classes_Animation__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor({
    element
  }) {
    const lines = [];
    const paragraphs = element.querySelectorAll('h1, h2, p');
    if (paragraphs.length !== 0) {
      lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(paragraphs, element => {
        (0,utils_text__WEBPACK_IMPORTED_MODULE_2__.split)({
          element
        });
        (0,utils_text__WEBPACK_IMPORTED_MODULE_2__.split)({
          element
        });
        lines.push(...element.querySelectorAll('span span'));
      });
    } else {
      (0,utils_text__WEBPACK_IMPORTED_MODULE_2__.split)({
        element
      });
      (0,utils_text__WEBPACK_IMPORTED_MODULE_2__.split)({
        element
      });
      lines.push(...element.querySelectorAll('span span'));
    }
    super({
      element,
      elements: {
        lines
      }
    });
    this.onResize();
    if ('IntersectionObserver' in window) {
      this.animateOut();
    }
  }
  animateIn() {
    super.animateIn();
    lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(this.lines, (line, lineIndex) => {
      lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(line, word => {
        word.style.transition = `transform 1.5s ${0.5 + lineIndex * 0.1}s ease`;
        word.style[this.transformPrefix] = 'translateY(0)';
      });
    });
  }
  animateOut() {
    super.animateOut();
    lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(this.lines, line => {
      lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(line, word => {
        word.style[this.transformPrefix] = 'translateY(100%)';
      });
    });
  }
  onResize() {
    this.lines = (0,utils_text__WEBPACK_IMPORTED_MODULE_2__.calculate)(this.elements.lines);
  }
});

/***/ }),

/***/ "./app/classes/Animation.js":
/*!**********************************!*\
  !*** ./app/classes/Animation.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var prefix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prefix */ "./node_modules/prefix/index.js");
/* harmony import */ var prefix__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prefix__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor({
    element,
    elements
  }) {
    const {
      animationDelay,
      animationTarget
    } = element.dataset;
    this.delay = animationDelay;
    this.element = element;
    this.elements = elements;
    this.target = animationTarget ? element.closest(animationTarget) : element;
    this.transformPrefix = prefix__WEBPACK_IMPORTED_MODULE_0___default()('transform');
    this.isVisible = false;
    if ('IntersectionObserver' in window) {
      this.createObserver();
      this.animateOut();
    } else {
      this.animateIn();
    }
  }
  createObserver() {
    this.observer = new window.IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (!this.isVisible && entry.isIntersecting) {
          this.animateIn();
        }
      });
    }).observe(this.target);
  }
  animateIn() {
    this.isVisible = true;
  }
  animateOut() {
    this.isVisible = false;
  }
});

/***/ }),

/***/ "./app/classes/Detection.js":
/*!**********************************!*\
  !*** ./app/classes/Detection.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
class Detection {
  isMobile() {
    if (!this.isMobileChecked) {
      this.isMobileChecked = true;
      this.isMobileCheck = document.documentElement.classList.contains('mobile');
    }
    return this.isMobileCheck;
  }
  isWebPSupported() {
    if (!this.isWebPChecked) {
      this.isWebPChecked = true;
      const element = document.createElement('canvas');
      if (element.getContext && element.getContext('2d')) {
        this.isWebPCheck = element.toDataURL('image/webp').indexOf('data:image/webp') === 0;
      }
    }
    return this.isWebPCheck;
  }
}
const DetectionManager = new Detection();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DetectionManager);

/***/ }),

/***/ "./app/components/Page.js":
/*!********************************!*\
  !*** ./app/components/Page.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var auto_bind__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! auto-bind */ "./node_modules/auto-bind/index.js");
/* harmony import */ var auto_bind__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(auto_bind__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var normalize_wheel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! normalize-wheel */ "./node_modules/normalize-wheel/index.js");
/* harmony import */ var normalize_wheel__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(normalize_wheel__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var prefix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prefix */ "./node_modules/prefix/index.js");
/* harmony import */ var prefix__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prefix__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var animations_Paragraph__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! animations/Paragraph */ "./app/animations/Paragraph.js");
/* harmony import */ var classes_Detection__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! classes/Detection */ "./app/classes/Detection.js");
/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/each */ "./node_modules/lodash/each.js");
/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_each__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var utils_dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! utils/dom */ "./app/utils/dom.js");
/* harmony import */ var utils_math__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! utils/math */ "./app/utils/math.js");









/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class extends (events__WEBPACK_IMPORTED_MODULE_1___default()) {
  constructor({
    classes,
    element,
    elements,
    isScrollable = true
  }) {
    super();
    auto_bind__WEBPACK_IMPORTED_MODULE_0___default()(this);
    this.classes = {
      ...classes
    };
    this.selectors = {
      element,
      elements: {
        animationsParagraphs: '[data-animation="paragraph"]',
        ...elements
      }
    };
    this.scroll = {
      ease: 0.07,
      position: 0,
      current: 0,
      target: 0,
      limit: 0
    };
    this.isScrollable = isScrollable;
    this.transformPrefix = prefix__WEBPACK_IMPORTED_MODULE_3___default()('transform');
  }
  create() {
    this.animations = [];
    this.element = document.querySelector(this.selectors.element);
    this.elements = {};
    lodash_each__WEBPACK_IMPORTED_MODULE_6___default()(this.selectors.elements, (selector, key) => {
      if (selector instanceof window.HTMLElement || selector instanceof window.NodeList) {
        this.elements[key] = selector;
      } else if (Array.isArray(selector)) {
        this.elements[key] = selector;
      } else {
        this.elements[key] = this.element.querySelectorAll(selector);
        if (this.elements[key].length === 0) {
          this.elements[key] = null;
        } else if (this.elements[key].length === 1) {
          this.elements[key] = this.element.querySelector(selector);
        }
      }
    });
    if (this.isScrollable) {
      this.scroll = {
        ease: 0.07,
        position: 0,
        current: 0,
        target: 0,
        limit: this.elements.wrapper.clientHeight - window.innerHeight
      };
    }
    this.createAnimations();
  }

  /**
   * Animations.
   */
  createAnimations() {
    this.paragraphs = (0,utils_dom__WEBPACK_IMPORTED_MODULE_7__.mapEach)(this.elements.animationsParagraphs, element => {
      return new animations_Paragraph__WEBPACK_IMPORTED_MODULE_4__["default"]({
        element
      });
    });
    this.animations.push(...this.paragraphs);
  }

  /**
   * Animations.
   */
  reset() {
    this.scroll = {
      ease: 0.07,
      position: 0,
      current: 0,
      target: 0,
      limit: 0
    };
  }
  set(value) {
    this.scroll.current = this.scroll.target = this.scroll.last = value;
    this.transform(this.elements.wrapper, this.scroll.current);
  }
  show(url) {
    this.isVisible = true;
    return Promise.resolve();
  }
  hide(url) {
    this.isVisible = false;
    return Promise.resolve();
  }
  transform(element, y) {
    element.style[this.transformPrefix] = `translate3d(0, ${-Math.round(y)}px, 0)`;
  }

  /**
   * Events.
   */
  onResize() {
    if (!this.elements.wrapper) return;
    window.requestAnimationFrame(_ => {
      this.scroll.limit = this.elements.wrapper.clientHeight - window.innerHeight;
      lodash_each__WEBPACK_IMPORTED_MODULE_6___default()(this.animations, animation => {
        animation.onResize && animation.onResize();
      });
    });
  }
  onTouchDown(event) {
    if (!classes_Detection__WEBPACK_IMPORTED_MODULE_5__["default"].isMobile()) return;
    this.isDown = true;
    this.scroll.position = this.scroll.current;
    this.start = event.touches ? event.touches[0].clientY : event.clientY;
  }
  onTouchMove(event) {
    if (!classes_Detection__WEBPACK_IMPORTED_MODULE_5__["default"].isMobile() || !this.isDown) return;
    const y = event.touches ? event.touches[0].clientY : event.clientY;
    const distance = (this.start - y) * 3;
    this.scroll.target = this.scroll.position + distance;
  }
  onTouchUp(event) {
    if (!classes_Detection__WEBPACK_IMPORTED_MODULE_5__["default"].isMobile()) return;
    this.isDown = false;
  }
  onWheel(event) {
    const normalized = normalize_wheel__WEBPACK_IMPORTED_MODULE_2___default()(event);
    const speed = normalized.pixelY;
    this.scroll.target += speed;
    return speed;
  }

  /**
   * Frames.
   */
  update() {
    this.scroll.target = (0,utils_math__WEBPACK_IMPORTED_MODULE_8__.clamp)(0, this.scroll.limit, this.scroll.target);
    this.scroll.current = (0,utils_math__WEBPACK_IMPORTED_MODULE_8__.lerp)(this.scroll.current, this.scroll.target, this.scroll.ease);
    this.scroll.current = Math.floor(this.scroll.current);
    if (this.scroll.current < 0.1) {
      this.scroll.current = 0;
    }
    if (this.elements.wrapper) {
      this.transform(this.elements.wrapper, this.scroll.current);
    }
    this.scroll.last = this.scroll.current;
  }
});

/***/ }),

/***/ "./app/pages/About/index.js":
/*!**********************************!*\
  !*** ./app/pages/About/index.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var components_Page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! components/Page */ "./app/components/Page.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class extends components_Page__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      classes: {
        active: 'about--active'
      },
      element: '.about',
      elements: {
        wrapper: '.about__content'
      }
    });
  }

  /**
   * Animations.
   */
  async show(url) {
    this.element.classList.add(this.classes.active);
    return super.show(url);
  }
  async hide(url) {
    this.element.classList.remove(this.classes.active);
    return super.hide(url);
  }
});

/***/ }),

/***/ "./app/pages/Blogs/index.js":
/*!**********************************!*\
  !*** ./app/pages/Blogs/index.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var components_Page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! components/Page */ "./app/components/Page.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class extends components_Page__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      classes: {
        active: 'blogs--active'
      },
      element: '.blogs',
      elements: {
        wrapper: '.blogs__content'
      }
    });
  }

  /**
   * Animations.
   */
  async show(url) {
    this.element.classList.add(this.classes.active);
    return super.show(url);
  }
  async hide(url) {
    this.element.classList.remove(this.classes.active);
    return super.hide(url);
  }
});

/***/ }),

/***/ "./app/pages/Darkroom/index.js":
/*!*************************************!*\
  !*** ./app/pages/Darkroom/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var components_Page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! components/Page */ "./app/components/Page.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class extends components_Page__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      classes: {
        active: 'darkroom--active'
      },
      element: '.darkroom',
      elements: {
        wrapper: '.darkroom__content'
      }
    });
  }

  /**
   * Animations.
   */
  async show(url) {
    this.element.classList.add(this.classes.active);
    return super.show(url);
  }
  async hide(url) {
    this.element.classList.remove(this.classes.active);
    return super.hide(url);
  }
});

/***/ }),

/***/ "./app/pages/Home/index.js":
/*!*********************************!*\
  !*** ./app/pages/Home/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var components_Page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! components/Page */ "./app/components/Page.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class extends components_Page__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      classes: {
        active: 'home--active'
      },
      element: '.home',
      elements: {
        wrapper: '.home__content'
      }
    });
  }

  /**
   * Animations.
   */
  async show(url) {
    this.element.classList.add(this.classes.active);
    return super.show(url);
  }
  async hide(url) {
    this.element.classList.remove(this.classes.active);
    return super.hide(url);
  }
});

/***/ }),

/***/ "./app/pages/Projects/index.js":
/*!*************************************!*\
  !*** ./app/pages/Projects/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var components_Page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! components/Page */ "./app/components/Page.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class extends components_Page__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super({
      classes: {
        active: 'projects--active'
      },
      element: '.projects',
      elements: {
        wrapper: '.projects__content'
      }
    });
  }

  /**
   * Animations.
   */
  async show(url) {
    this.element.classList.add(this.classes.active);
    return super.show(url);
  }
  async hide(url) {
    this.element.classList.remove(this.classes.active);
    return super.hide(url);
  }
});

/***/ }),

/***/ "./app/utils/dom.js":
/*!**************************!*\
  !*** ./app/utils/dom.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getOffset: () => (/* binding */ getOffset),
/* harmony export */   mapEach: () => (/* binding */ mapEach)
/* harmony export */ });
/* harmony import */ var lodash_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/map */ "./node_modules/lodash/map.js");
/* harmony import */ var lodash_map__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_map__WEBPACK_IMPORTED_MODULE_0__);

const getOffset = (element, top = 0) => {
  const box = element.getBoundingClientRect();
  return {
    bottom: box.bottom,
    height: box.height,
    left: box.left,
    top: box.top + top,
    width: box.width
  };
};
function mapEach(element, callback) {
  if (element instanceof window.HTMLElement) {
    return [callback(element)];
  }
  return lodash_map__WEBPACK_IMPORTED_MODULE_0___default()(element, callback);
}

/***/ }),

/***/ "./app/utils/math.js":
/*!***************************!*\
  !*** ./app/utils/math.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   map: () => (/* binding */ map),
/* harmony export */   random: () => (/* binding */ random)
/* harmony export */ });
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");

function lerp(p1, p2, t) {
  return gsap__WEBPACK_IMPORTED_MODULE_0__["default"].utils.interpolate(p1, p2, t);
}
function clamp(min, max, number) {
  return gsap__WEBPACK_IMPORTED_MODULE_0__["default"].utils.clamp(min, max, number);
}
function random(min, max) {
  return gsap__WEBPACK_IMPORTED_MODULE_0__["default"].utils.random(min, max);
}
function map(valueToMap, inMin, inMax, outMin, outMax) {
  return gsap__WEBPACK_IMPORTED_MODULE_0__["default"].utils.mapRange(inMin, inMax, outMin, outMax, valueToMap);
}

/***/ }),

/***/ "./app/utils/polyfill.js":
/*!*******************************!*\
  !*** ./app/utils/polyfill.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var nodelist_foreach_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nodelist-foreach-polyfill */ "./node_modules/nodelist-foreach-polyfill/index.js");
/* harmony import */ var nodelist_foreach_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nodelist_foreach_polyfill__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./app/utils/scroll.js":
/*!*****************************!*\
  !*** ./app/utils/scroll.js ***!
  \*****************************/
/***/ (() => {

if (window.history.scrollRestoration) {
  window.history.scrollRestoration = 'manual';
}

/***/ }),

/***/ "./app/utils/sw.js":
/*!*************************!*\
  !*** ./app/utils/sw.js ***!
  \*************************/
/***/ (() => {

if (false) {}

/***/ }),

/***/ "./app/utils/text.js":
/*!***************************!*\
  !*** ./app/utils/text.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   calculate: () => (/* binding */ calculate),
/* harmony export */   split: () => (/* binding */ split)
/* harmony export */ });
/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/each */ "./node_modules/lodash/each.js");
/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_each__WEBPACK_IMPORTED_MODULE_0__);

function split({
  element,
  expression = ' ',
  append = true
}) {
  const words = splitText(element.innerHTML.toString().trim(), expression);
  let innerHTML = '';
  lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(words, line => {
    if (line.indexOf('<br>') > -1) {
      const lines = line.split('<br>');
      lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(lines, (line, index) => {
        innerHTML += index > 0 ? '<br>' + parseLine(line) : parseLine(line);
      });
    } else {
      innerHTML += parseLine(line);
    }
  });
  element.innerHTML = innerHTML;
  const spans = element.querySelectorAll('span');
  if (append) {
    lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(spans, span => {
      const isSingleLetter = span.textContent.length === 1;
      const isNotEmpty = span.innerHTML.trim() !== '';
      const isNotAndCharacter = span.textContent !== '&';
      const isNotDashCharacter = span.textContent !== '-';
      if (isSingleLetter && isNotEmpty && isNotAndCharacter && isNotDashCharacter) {
        span.innerHTML = `${span.textContent}&nbsp;`;
      }
    });
  }
  return spans;
}
function calculate(spans) {
  const lines = [];
  let words = [];
  let position = spans[0].offsetTop;
  lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(spans, (span, index) => {
    if (span.offsetTop === position) {
      words.push(span);
    }
    if (span.offsetTop !== position) {
      lines.push(words);
      words = [];
      words.push(span);
      position = span.offsetTop;
    }
    if (index + 1 === spans.length) {
      lines.push(words);
    }
  });
  return lines;
}
function splitText(text, expression) {
  const splits = text.split('<br>');
  let words = [];
  lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(splits, (item, index) => {
    if (index > 0) {
      words.push('<br>');
    }
    words = words.concat(item.split(expression));
    let isLink = false;
    let link = '';
    const innerHTML = [];
    lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(words, word => {
      if (!isLink && (word.includes('<a') || word.includes('<strong'))) {
        link = '';
        isLink = true;
      }
      if (isLink) {
        link += ` ${word}`;
      }
      if (isLink && (word.includes('/a>') || word.includes('/strong>'))) {
        innerHTML.push(link);
        link = '';
      }
      if (!isLink && link === '') {
        innerHTML.push(word);
      }
      if (isLink && (word.includes('/a>') || word.includes('/strong>'))) {
        isLink = false;
      }
    });
    words = innerHTML;
  });
  return words;
}
function parseLine(line) {
  line = line.trim();
  if (line === '' || line === ' ') {
    return line;
  } else {
    return line === '<br>' ? '<br>' : `<span>${line}</span>` + (line.length > 1 ? ' ' : '');
  }
}

/***/ }),

/***/ "./node_modules/ansi-html-community/index.js":
/*!***************************************************!*\
  !*** ./node_modules/ansi-html-community/index.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = ansiHTML;

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/;
var _defColors = {
  reset: ['fff', '000'],
  // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
};
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
};
var _openTags = {
  '1': 'font-weight:bold',
  // bold
  '2': 'opacity:0.5',
  // dim
  '3': '<i>',
  // italic
  '4': '<u>',
  // underscore
  '8': 'display:none',
  // hidden
  '9': '<del>' // delete
};
var _closeTags = {
  '23': '</i>',
  // reset italic
  '24': '</u>',
  // reset underscore
  '29': '</del>' // reset delete
};
[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>';
});

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML(text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text;
  }

  // Cache opened sequence.
  var ansiCodes = [];
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)m/g, function (match, seq) {
    var ot = _openTags[seq];
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) {
        // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop();
        return '</span>';
      }
      // Open tag.
      ansiCodes.push(seq);
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">';
    }
    var ct = _closeTags[seq];
    if (ct) {
      // Pop sequence
      ansiCodes.pop();
      return ct;
    }
    return '';
  });

  // Make sure tags are closed.
  var l = ansiCodes.length;
  l > 0 && (ret += Array(l + 1).join('</span>'));
  return ret;
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.');
  }
  var _finalColors = {};
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null;
    if (!hex) {
      _finalColors[key] = _defColors[key];
      continue;
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex];
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string';
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000');
      }
      var defHexColor = _defColors[key];
      if (!hex[0]) {
        hex[0] = defHexColor[0];
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]];
        hex.push(defHexColor[1]);
      }
      hex = hex.slice(0, 2);
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000');
    }
    _finalColors[key] = hex;
  }
  _setTags(_finalColors);
};

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors);
};

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {};
if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () {
      return _openTags;
    }
  });
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () {
      return _closeTags;
    }
  });
} else {
  ansiHTML.tags.open = _openTags;
  ansiHTML.tags.close = _closeTags;
}
function _setTags(colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1];
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0];
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey;
  for (var code in _styles) {
    var color = _styles[code];
    var oriColor = colors[color] || '000';
    _openTags[code] = 'color:#' + oriColor;
    code = parseInt(code);
    _openTags[(code + 10).toString()] = 'background:#' + oriColor;
  }
}
ansiHTML.reset();

/***/ }),

/***/ "./node_modules/auto-bind/index.js":
/*!*****************************************!*\
  !*** ./node_modules/auto-bind/index.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";


// Gets all non-builtin properties up the prototype chain
const getAllProperties = object => {
  const properties = new Set();
  do {
    for (const key of Reflect.ownKeys(object)) {
      properties.add([object, key]);
    }
  } while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);
  return properties;
};
module.exports = (self, {
  include,
  exclude
} = {}) => {
  const filter = key => {
    const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);
    if (include) {
      return include.some(match);
    }
    if (exclude) {
      return !exclude.some(match);
    }
    return true;
  };
  for (const [object, key] of getAllProperties(self.constructor.prototype)) {
    if (key === 'constructor' || !filter(key)) {
      continue;
    }
    const descriptor = Reflect.getOwnPropertyDescriptor(object, key);
    if (descriptor && typeof descriptor.value === 'function') {
      self[key] = self[key].bind(self);
    }
  }
  return self;
};

/***/ }),

/***/ "./node_modules/call-bind/callBound.js":
/*!*********************************************!*\
  !*** ./node_modules/call-bind/callBound.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");
var callBind = __webpack_require__(/*! ./ */ "./node_modules/call-bind/index.js");
var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));
module.exports = function callBoundIntrinsic(name, allowMissing) {
  var intrinsic = GetIntrinsic(name, !!allowMissing);
  if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
    return callBind(intrinsic);
  }
  return intrinsic;
};

/***/ }),

/***/ "./node_modules/call-bind/index.js":
/*!*****************************************!*\
  !*** ./node_modules/call-bind/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");
var setFunctionLength = __webpack_require__(/*! set-function-length */ "./node_modules/set-function-length/index.js");
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/es-errors/type.js");
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
var $defineProperty = __webpack_require__(/*! es-define-property */ "./node_modules/es-define-property/index.js");
var $max = GetIntrinsic('%Math.max%');
module.exports = function callBind(originalFunction) {
  if (typeof originalFunction !== 'function') {
    throw new $TypeError('a function is required');
  }
  var func = $reflectApply(bind, $call, arguments);
  return setFunctionLength(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);
};
var applyBind = function applyBind() {
  return $reflectApply(bind, $apply, arguments);
};
if ($defineProperty) {
  $defineProperty(module.exports, 'apply', {
    value: applyBind
  });
} else {
  module.exports.apply = applyBind;
}

/***/ }),

/***/ "./node_modules/define-data-property/index.js":
/*!****************************************************!*\
  !*** ./node_modules/define-data-property/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $defineProperty = __webpack_require__(/*! es-define-property */ "./node_modules/es-define-property/index.js");
var $SyntaxError = __webpack_require__(/*! es-errors/syntax */ "./node_modules/es-errors/syntax.js");
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/es-errors/type.js");
var gopd = __webpack_require__(/*! gopd */ "./node_modules/gopd/index.js");

/** @type {import('.')} */
module.exports = function defineDataProperty(obj, property, value) {
  if (!obj || typeof obj !== 'object' && typeof obj !== 'function') {
    throw new $TypeError('`obj` must be an object or a function`');
  }
  if (typeof property !== 'string' && typeof property !== 'symbol') {
    throw new $TypeError('`property` must be a string or a symbol`');
  }
  if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
    throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
  }
  if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
    throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
  }
  if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
    throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
  }
  if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
    throw new $TypeError('`loose`, if provided, must be a boolean');
  }
  var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
  var nonWritable = arguments.length > 4 ? arguments[4] : null;
  var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
  var loose = arguments.length > 6 ? arguments[6] : false;

  /* @type {false | TypedPropertyDescriptor<unknown>} */
  var desc = !!gopd && gopd(obj, property);
  if ($defineProperty) {
    $defineProperty(obj, property, {
      configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
      enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
      value: value,
      writable: nonWritable === null && desc ? desc.writable : !nonWritable
    });
  } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
    // must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
    obj[property] = value; // eslint-disable-line no-param-reassign
  } else {
    throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
  }
};

/***/ }),

/***/ "./node_modules/es-define-property/index.js":
/*!**************************************************!*\
  !*** ./node_modules/es-define-property/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

/** @type {import('.')} */
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;
if ($defineProperty) {
  try {
    $defineProperty({}, 'a', {
      value: 1
    });
  } catch (e) {
    // IE 8 has a broken defineProperty
    $defineProperty = false;
  }
}
module.exports = $defineProperty;

/***/ }),

/***/ "./node_modules/es-errors/eval.js":
/*!****************************************!*\
  !*** ./node_modules/es-errors/eval.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./eval')} */
module.exports = EvalError;

/***/ }),

/***/ "./node_modules/es-errors/index.js":
/*!*****************************************!*\
  !*** ./node_modules/es-errors/index.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";


/** @type {import('.')} */
module.exports = Error;

/***/ }),

/***/ "./node_modules/es-errors/range.js":
/*!*****************************************!*\
  !*** ./node_modules/es-errors/range.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./range')} */
module.exports = RangeError;

/***/ }),

/***/ "./node_modules/es-errors/ref.js":
/*!***************************************!*\
  !*** ./node_modules/es-errors/ref.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./ref')} */
module.exports = ReferenceError;

/***/ }),

/***/ "./node_modules/es-errors/syntax.js":
/*!******************************************!*\
  !*** ./node_modules/es-errors/syntax.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./syntax')} */
module.exports = SyntaxError;

/***/ }),

/***/ "./node_modules/es-errors/type.js":
/*!****************************************!*\
  !*** ./node_modules/es-errors/type.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./type')} */
module.exports = TypeError;

/***/ }),

/***/ "./node_modules/es-errors/uri.js":
/*!***************************************!*\
  !*** ./node_modules/es-errors/uri.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./uri')} */
module.exports = URIError;

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}
function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};
function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});
EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0) er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }
  var handler = events[type];
  if (handler === undefined) return false;
  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;
  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;
    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }
    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }
  return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this;

  // not listening for removeListener, no need to emit
  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;
    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }
  listeners = events[type];
  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }
  return this;
};
function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events !== undefined) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i) copy[i] = arr[i];
  return copy;
}
function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];
  list.pop();
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }
    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

/***/ }),

/***/ "./node_modules/fontfaceobserver/fontfaceobserver.standalone.js":
/*!**********************************************************************!*\
  !*** ./node_modules/fontfaceobserver/fontfaceobserver.standalone.js ***!
  \**********************************************************************/
/***/ ((module) => {

/* Font Face Observer v2.3.0 - © Bram Stein. License: BSD-3-Clause */(function () {
  function p(a, c) {
    document.addEventListener ? a.addEventListener("scroll", c, !1) : a.attachEvent("scroll", c);
  }
  function u(a) {
    document.body ? a() : document.addEventListener ? document.addEventListener("DOMContentLoaded", function b() {
      document.removeEventListener("DOMContentLoaded", b);
      a();
    }) : document.attachEvent("onreadystatechange", function g() {
      if ("interactive" == document.readyState || "complete" == document.readyState) document.detachEvent("onreadystatechange", g), a();
    });
  }
  ;
  function w(a) {
    this.g = document.createElement("div");
    this.g.setAttribute("aria-hidden", "true");
    this.g.appendChild(document.createTextNode(a));
    this.h = document.createElement("span");
    this.i = document.createElement("span");
    this.m = document.createElement("span");
    this.j = document.createElement("span");
    this.l = -1;
    this.h.style.cssText = "max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
    this.i.style.cssText = "max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
    this.j.style.cssText = "max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
    this.m.style.cssText = "display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";
    this.h.appendChild(this.m);
    this.i.appendChild(this.j);
    this.g.appendChild(this.h);
    this.g.appendChild(this.i);
  }
  function x(a, c) {
    a.g.style.cssText = "max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;white-space:nowrap;font-synthesis:none;font:" + c + ";";
  }
  function B(a) {
    var c = a.g.offsetWidth,
      b = c + 100;
    a.j.style.width = b + "px";
    a.i.scrollLeft = b;
    a.h.scrollLeft = a.h.scrollWidth + 100;
    return a.l !== c ? (a.l = c, !0) : !1;
  }
  function C(a, c) {
    function b() {
      var e = g;
      B(e) && null !== e.g.parentNode && c(e.l);
    }
    var g = a;
    p(a.h, b);
    p(a.i, b);
    B(a);
  }
  ;
  function D(a, c, b) {
    c = c || {};
    b = b || window;
    this.family = a;
    this.style = c.style || "normal";
    this.weight = c.weight || "normal";
    this.stretch = c.stretch || "normal";
    this.context = b;
  }
  var E = null,
    F = null,
    G = null,
    H = null;
  function I(a) {
    null === F && (M(a) && /Apple/.test(window.navigator.vendor) ? (a = /AppleWebKit\/([0-9]+)(?:\.([0-9]+))(?:\.([0-9]+))/.exec(window.navigator.userAgent), F = !!a && 603 > parseInt(a[1], 10)) : F = !1);
    return F;
  }
  function M(a) {
    null === H && (H = !!a.document.fonts);
    return H;
  }
  function N(a, c) {
    var b = a.style,
      g = a.weight;
    if (null === G) {
      var e = document.createElement("div");
      try {
        e.style.font = "condensed 100px sans-serif";
      } catch (q) {}
      G = "" !== e.style.font;
    }
    return [b, g, G ? a.stretch : "", "100px", c].join(" ");
  }
  D.prototype.load = function (a, c) {
    var b = this,
      g = a || "BESbswy",
      e = 0,
      q = c || 3E3,
      J = new Date().getTime();
    return new Promise(function (K, L) {
      if (M(b.context) && !I(b.context)) {
        var O = new Promise(function (r, t) {
            function h() {
              new Date().getTime() - J >= q ? t(Error("" + q + "ms timeout exceeded")) : b.context.document.fonts.load(N(b, '"' + b.family + '"'), g).then(function (n) {
                1 <= n.length ? r() : setTimeout(h, 25);
              }, t);
            }
            h();
          }),
          P = new Promise(function (r, t) {
            e = setTimeout(function () {
              t(Error("" + q + "ms timeout exceeded"));
            }, q);
          });
        Promise.race([P, O]).then(function () {
          clearTimeout(e);
          K(b);
        }, L);
      } else u(function () {
        function r() {
          var d;
          if (d = -1 != k && -1 != l || -1 != k && -1 != m || -1 != l && -1 != m) (d = k != l && k != m && l != m) || (null === E && (d = /AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent), E = !!d && (536 > parseInt(d[1], 10) || 536 === parseInt(d[1], 10) && 11 >= parseInt(d[2], 10))), d = E && (k == y && l == y && m == y || k == z && l == z && m == z || k == A && l == A && m == A)), d = !d;
          d && (null !== f.parentNode && f.parentNode.removeChild(f), clearTimeout(e), K(b));
        }
        function t() {
          if (new Date().getTime() - J >= q) null !== f.parentNode && f.parentNode.removeChild(f), L(Error("" + q + "ms timeout exceeded"));else {
            var d = b.context.document.hidden;
            if (!0 === d || void 0 === d) k = h.g.offsetWidth, l = n.g.offsetWidth, m = v.g.offsetWidth, r();
            e = setTimeout(t, 50);
          }
        }
        var h = new w(g),
          n = new w(g),
          v = new w(g),
          k = -1,
          l = -1,
          m = -1,
          y = -1,
          z = -1,
          A = -1,
          f = document.createElement("div");
        f.dir = "ltr";
        x(h, N(b, "sans-serif"));
        x(n, N(b, "serif"));
        x(v, N(b, "monospace"));
        f.appendChild(h.g);
        f.appendChild(n.g);
        f.appendChild(v.g);
        b.context.document.body.appendChild(f);
        y = h.g.offsetWidth;
        z = n.g.offsetWidth;
        A = v.g.offsetWidth;
        t();
        C(h, function (d) {
          k = d;
          r();
        });
        x(h, N(b, '"' + b.family + '",sans-serif'));
        C(n, function (d) {
          l = d;
          r();
        });
        x(n, N(b, '"' + b.family + '",serif'));
        C(v, function (d) {
          m = d;
          r();
        });
        x(v, N(b, '"' + b.family + '",monospace'));
      });
    });
  };
   true ? module.exports = D : (0);
})();

/***/ }),

/***/ "./node_modules/function-bind/implementation.js":
/*!******************************************************!*\
  !*** ./node_modules/function-bind/implementation.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */
var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';
var concatty = function concatty(a, b) {
  var arr = [];
  for (var i = 0; i < a.length; i += 1) {
    arr[i] = a[i];
  }
  for (var j = 0; j < b.length; j += 1) {
    arr[j + a.length] = b[j];
  }
  return arr;
};
var slicy = function slicy(arrLike, offset) {
  var arr = [];
  for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
    arr[j] = arrLike[i];
  }
  return arr;
};
var joiny = function (arr, joiner) {
  var str = '';
  for (var i = 0; i < arr.length; i += 1) {
    str += arr[i];
    if (i + 1 < arr.length) {
      str += joiner;
    }
  }
  return str;
};
module.exports = function bind(that) {
  var target = this;
  if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
    throw new TypeError(ERROR_MESSAGE + target);
  }
  var args = slicy(arguments, 1);
  var bound;
  var binder = function () {
    if (this instanceof bound) {
      var result = target.apply(this, concatty(args, arguments));
      if (Object(result) === result) {
        return result;
      }
      return this;
    }
    return target.apply(that, concatty(args, arguments));
  };
  var boundLength = max(0, target.length - args.length);
  var boundArgs = [];
  for (var i = 0; i < boundLength; i++) {
    boundArgs[i] = '$' + i;
  }
  bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);
  if (target.prototype) {
    var Empty = function Empty() {};
    Empty.prototype = target.prototype;
    bound.prototype = new Empty();
    Empty.prototype = null;
  }
  return bound;
};

/***/ }),

/***/ "./node_modules/function-bind/index.js":
/*!*********************************************!*\
  !*** ./node_modules/function-bind/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/function-bind/implementation.js");
module.exports = Function.prototype.bind || implementation;

/***/ }),

/***/ "./node_modules/get-intrinsic/index.js":
/*!*********************************************!*\
  !*** ./node_modules/get-intrinsic/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;
var $Error = __webpack_require__(/*! es-errors */ "./node_modules/es-errors/index.js");
var $EvalError = __webpack_require__(/*! es-errors/eval */ "./node_modules/es-errors/eval.js");
var $RangeError = __webpack_require__(/*! es-errors/range */ "./node_modules/es-errors/range.js");
var $ReferenceError = __webpack_require__(/*! es-errors/ref */ "./node_modules/es-errors/ref.js");
var $SyntaxError = __webpack_require__(/*! es-errors/syntax */ "./node_modules/es-errors/syntax.js");
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/es-errors/type.js");
var $URIError = __webpack_require__(/*! es-errors/uri */ "./node_modules/es-errors/uri.js");
var $Function = Function;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
  try {
    return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
  } catch (e) {}
};
var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
  try {
    $gOPD({}, '');
  } catch (e) {
    $gOPD = null; // this is IE 8, which has a broken gOPD
  }
}
var throwTypeError = function () {
  throw new $TypeError();
};
var ThrowTypeError = $gOPD ? function () {
  try {
    // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
    arguments.callee; // IE 8 does not throw here
    return throwTypeError;
  } catch (calleeThrows) {
    try {
      // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
      return $gOPD(arguments, 'callee').get;
    } catch (gOPDthrows) {
      return throwTypeError;
    }
  }
}() : throwTypeError;
var hasSymbols = __webpack_require__(/*! has-symbols */ "./node_modules/has-symbols/index.js")();
var hasProto = __webpack_require__(/*! has-proto */ "./node_modules/has-proto/index.js")();
var getProto = Object.getPrototypeOf || (hasProto ? function (x) {
  return x.__proto__;
} // eslint-disable-line no-proto
: null);
var needsEval = {};
var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);
var INTRINSICS = {
  __proto__: null,
  '%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
  '%Array%': Array,
  '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
  '%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
  '%AsyncFromSyncIteratorPrototype%': undefined,
  '%AsyncFunction%': needsEval,
  '%AsyncGenerator%': needsEval,
  '%AsyncGeneratorFunction%': needsEval,
  '%AsyncIteratorPrototype%': needsEval,
  '%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
  '%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
  '%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
  '%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
  '%Boolean%': Boolean,
  '%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
  '%Date%': Date,
  '%decodeURI%': decodeURI,
  '%decodeURIComponent%': decodeURIComponent,
  '%encodeURI%': encodeURI,
  '%encodeURIComponent%': encodeURIComponent,
  '%Error%': $Error,
  '%eval%': eval,
  // eslint-disable-line no-eval
  '%EvalError%': $EvalError,
  '%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
  '%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
  '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
  '%Function%': $Function,
  '%GeneratorFunction%': needsEval,
  '%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
  '%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
  '%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
  '%isFinite%': isFinite,
  '%isNaN%': isNaN,
  '%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
  '%JSON%': typeof JSON === 'object' ? JSON : undefined,
  '%Map%': typeof Map === 'undefined' ? undefined : Map,
  '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
  '%Math%': Math,
  '%Number%': Number,
  '%Object%': Object,
  '%parseFloat%': parseFloat,
  '%parseInt%': parseInt,
  '%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
  '%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
  '%RangeError%': $RangeError,
  '%ReferenceError%': $ReferenceError,
  '%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
  '%RegExp%': RegExp,
  '%Set%': typeof Set === 'undefined' ? undefined : Set,
  '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
  '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
  '%String%': String,
  '%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
  '%Symbol%': hasSymbols ? Symbol : undefined,
  '%SyntaxError%': $SyntaxError,
  '%ThrowTypeError%': ThrowTypeError,
  '%TypedArray%': TypedArray,
  '%TypeError%': $TypeError,
  '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
  '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
  '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
  '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
  '%URIError%': $URIError,
  '%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
  '%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
  '%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};
if (getProto) {
  try {
    null.error; // eslint-disable-line no-unused-expressions
  } catch (e) {
    // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
    var errorProto = getProto(getProto(e));
    INTRINSICS['%Error.prototype%'] = errorProto;
  }
}
var doEval = function doEval(name) {
  var value;
  if (name === '%AsyncFunction%') {
    value = getEvalledConstructor('async function () {}');
  } else if (name === '%GeneratorFunction%') {
    value = getEvalledConstructor('function* () {}');
  } else if (name === '%AsyncGeneratorFunction%') {
    value = getEvalledConstructor('async function* () {}');
  } else if (name === '%AsyncGenerator%') {
    var fn = doEval('%AsyncGeneratorFunction%');
    if (fn) {
      value = fn.prototype;
    }
  } else if (name === '%AsyncIteratorPrototype%') {
    var gen = doEval('%AsyncGenerator%');
    if (gen && getProto) {
      value = getProto(gen.prototype);
    }
  }
  INTRINSICS[name] = value;
  return value;
};
var LEGACY_ALIASES = {
  __proto__: null,
  '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
  '%ArrayPrototype%': ['Array', 'prototype'],
  '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
  '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
  '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
  '%ArrayProto_values%': ['Array', 'prototype', 'values'],
  '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
  '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
  '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
  '%BooleanPrototype%': ['Boolean', 'prototype'],
  '%DataViewPrototype%': ['DataView', 'prototype'],
  '%DatePrototype%': ['Date', 'prototype'],
  '%ErrorPrototype%': ['Error', 'prototype'],
  '%EvalErrorPrototype%': ['EvalError', 'prototype'],
  '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
  '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
  '%FunctionPrototype%': ['Function', 'prototype'],
  '%Generator%': ['GeneratorFunction', 'prototype'],
  '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
  '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
  '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
  '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
  '%JSONParse%': ['JSON', 'parse'],
  '%JSONStringify%': ['JSON', 'stringify'],
  '%MapPrototype%': ['Map', 'prototype'],
  '%NumberPrototype%': ['Number', 'prototype'],
  '%ObjectPrototype%': ['Object', 'prototype'],
  '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
  '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
  '%PromisePrototype%': ['Promise', 'prototype'],
  '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
  '%Promise_all%': ['Promise', 'all'],
  '%Promise_reject%': ['Promise', 'reject'],
  '%Promise_resolve%': ['Promise', 'resolve'],
  '%RangeErrorPrototype%': ['RangeError', 'prototype'],
  '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
  '%RegExpPrototype%': ['RegExp', 'prototype'],
  '%SetPrototype%': ['Set', 'prototype'],
  '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
  '%StringPrototype%': ['String', 'prototype'],
  '%SymbolPrototype%': ['Symbol', 'prototype'],
  '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
  '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
  '%TypeErrorPrototype%': ['TypeError', 'prototype'],
  '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
  '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
  '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
  '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
  '%URIErrorPrototype%': ['URIError', 'prototype'],
  '%WeakMapPrototype%': ['WeakMap', 'prototype'],
  '%WeakSetPrototype%': ['WeakSet', 'prototype']
};
var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var hasOwn = __webpack_require__(/*! hasown */ "./node_modules/hasown/index.js");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
  var first = $strSlice(string, 0, 1);
  var last = $strSlice(string, -1);
  if (first === '%' && last !== '%') {
    throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
  } else if (last === '%' && first !== '%') {
    throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
  }
  var result = [];
  $replace(string, rePropName, function (match, number, quote, subString) {
    result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
  });
  return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
  var intrinsicName = name;
  var alias;
  if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
    alias = LEGACY_ALIASES[intrinsicName];
    intrinsicName = '%' + alias[0] + '%';
  }
  if (hasOwn(INTRINSICS, intrinsicName)) {
    var value = INTRINSICS[intrinsicName];
    if (value === needsEval) {
      value = doEval(intrinsicName);
    }
    if (typeof value === 'undefined' && !allowMissing) {
      throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
    }
    return {
      alias: alias,
      name: intrinsicName,
      value: value
    };
  }
  throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};
module.exports = function GetIntrinsic(name, allowMissing) {
  if (typeof name !== 'string' || name.length === 0) {
    throw new $TypeError('intrinsic name must be a non-empty string');
  }
  if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
    throw new $TypeError('"allowMissing" argument must be a boolean');
  }
  if ($exec(/^%?[^%]*%?$/, name) === null) {
    throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
  }
  var parts = stringToPath(name);
  var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
  var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
  var intrinsicRealName = intrinsic.name;
  var value = intrinsic.value;
  var skipFurtherCaching = false;
  var alias = intrinsic.alias;
  if (alias) {
    intrinsicBaseName = alias[0];
    $spliceApply(parts, $concat([0, 1], alias));
  }
  for (var i = 1, isOwn = true; i < parts.length; i += 1) {
    var part = parts[i];
    var first = $strSlice(part, 0, 1);
    var last = $strSlice(part, -1);
    if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
      throw new $SyntaxError('property names with quotes must have matching quotes');
    }
    if (part === 'constructor' || !isOwn) {
      skipFurtherCaching = true;
    }
    intrinsicBaseName += '.' + part;
    intrinsicRealName = '%' + intrinsicBaseName + '%';
    if (hasOwn(INTRINSICS, intrinsicRealName)) {
      value = INTRINSICS[intrinsicRealName];
    } else if (value != null) {
      if (!(part in value)) {
        if (!allowMissing) {
          throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
        }
        return void undefined;
      }
      if ($gOPD && i + 1 >= parts.length) {
        var desc = $gOPD(value, part);
        isOwn = !!desc;

        // By convention, when a data property is converted to an accessor
        // property to emulate a data property that does not suffer from
        // the override mistake, that accessor's getter is marked with
        // an `originalValue` property. Here, when we detect this, we
        // uphold the illusion by pretending to see that original data
        // property, i.e., returning the value rather than the getter
        // itself.
        if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
          value = desc.get;
        } else {
          value = value[part];
        }
      } else {
        isOwn = hasOwn(value, part);
        value = value[part];
      }
      if (isOwn && !skipFurtherCaching) {
        INTRINSICS[intrinsicRealName] = value;
      }
    }
  }
  return value;
};

/***/ }),

/***/ "./node_modules/gopd/index.js":
/*!************************************!*\
  !*** ./node_modules/gopd/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");
var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
if ($gOPD) {
  try {
    $gOPD([], 'length');
  } catch (e) {
    // IE 8 has a broken gOPD
    $gOPD = null;
  }
}
module.exports = $gOPD;

/***/ }),

/***/ "./node_modules/gsap/CSSPlugin.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/CSSPlugin.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSPlugin: () => (/* binding */ CSSPlugin),
/* harmony export */   _createElement: () => (/* binding */ _createElement),
/* harmony export */   _getBBox: () => (/* binding */ _getBBox),
/* harmony export */   checkPrefix: () => (/* binding */ _checkPropPrefix),
/* harmony export */   "default": () => (/* binding */ CSSPlugin)
/* harmony export */ });
/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ "./node_modules/gsap/gsap-core.js");
/*!
 * CSSPlugin 3.12.5
 * https://gsap.com
 *
 * Copyright 2008-2024, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license or for
 * Club GSAP members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */

var _win,
  _doc,
  _docElement,
  _pluginInitted,
  _tempDiv,
  _tempDivStyler,
  _recentSetterPlugin,
  _reverting,
  _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
  _transformProps = {},
  _RAD2DEG = 180 / Math.PI,
  _DEG2RAD = Math.PI / 180,
  _atan2 = Math.atan2,
  _bigNum = 1e8,
  _capsExp = /([A-Z])/g,
  _horizontalExp = /(left|right|width|margin|padding|x)/i,
  _complexExp = /[\s,\(]\S/,
  _propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
  },
  _renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
  _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
  _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
  },
  //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
  _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
  },
  _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
  },
  _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
  },
  _setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return target.style[property] = value;
  },
  _setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
  },
  _setterTransform = function _setterTransform(target, property, value) {
    return target._gsap[property] = value;
  },
  _setterScale = function _setterScale(target, property, value) {
    return target._gsap.scaleX = target._gsap.scaleY = value;
  },
  _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
  },
  _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
  },
  _transformProp = "transform",
  _transformOriginProp = _transformProp + "Origin",
  _saveStyle = function _saveStyle(property, isNotCSS) {
    var _this = this;
    var target = this.target,
      style = target.style,
      cache = target._gsap;
    if (property in _transformProps && style) {
      this.tfm = this.tfm || {};
      if (property !== "transform") {
        property = _propertyAliases[property] || property;
        ~property.indexOf(",") ? property.split(",").forEach(function (a) {
          return _this.tfm[a] = _get(target, a);
        }) : this.tfm[property] = cache.x ? cache[property] : _get(target, property); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.

        property === _transformOriginProp && (this.tfm.zOrigin = cache.zOrigin);
      } else {
        return _propertyAliases.transform.split(",").forEach(function (p) {
          return _saveStyle.call(_this, p, isNotCSS);
        });
      }
      if (this.props.indexOf(_transformProp) >= 0) {
        return;
      }
      if (cache.svg) {
        this.svgo = target.getAttribute("data-svg-origin");
        this.props.push(_transformOriginProp, isNotCSS, "");
      }
      property = _transformProp;
    }
    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
  },
  _removeIndependentTransforms = function _removeIndependentTransforms(style) {
    if (style.translate) {
      style.removeProperty("translate");
      style.removeProperty("scale");
      style.removeProperty("rotate");
    }
  },
  _revertStyle = function _revertStyle() {
    var props = this.props,
      target = this.target,
      style = target.style,
      cache = target._gsap,
      i,
      p;
    for (i = 0; i < props.length; i += 3) {
      // stored like this: property, isNotCSS, value
      props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === "--" ? props[i] : props[i].replace(_capsExp, "-$1").toLowerCase());
    }
    if (this.tfm) {
      for (p in this.tfm) {
        cache[p] = this.tfm[p];
      }
      if (cache.svg) {
        cache.renderTransform();
        target.setAttribute("data-svg-origin", this.svgo || "");
      }
      i = _reverting();
      if ((!i || !i.isStart) && !style[_transformProp]) {
        _removeIndependentTransforms(style);
        if (cache.zOrigin && style[_transformOriginProp]) {
          style[_transformOriginProp] += " " + cache.zOrigin + "px"; // since we're uncaching, we must put the zOrigin back into the transformOrigin so that we can pull it out accurately when we parse again. Otherwise, we'd lose the z portion of the origin since we extract it to protect from Safari bugs.

          cache.zOrigin = 0;
          cache.renderTransform();
        }
        cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
      }
    }
  },
  _getStyleSaver = function _getStyleSaver(target, properties) {
    var saver = {
      target: target,
      props: [],
      revert: _revertStyle,
      save: _saveStyle
    };
    target._gsap || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.

    properties && properties.split(",").forEach(function (p) {
      return saver.save(p);
    });
    return saver;
  },
  _supports3D,
  _createElement = function _createElement(type, ns) {
    var e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

    return e && e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
  },
  _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
    var cs = getComputedStyle(target);
    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
  },
  _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
  _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
    var e = element || _tempDiv,
      s = e.style,
      i = 5;
    if (property in s && !preferPrefix) {
      return property;
    }
    property = property.charAt(0).toUpperCase() + property.substr(1);
    while (i-- && !(_prefixes[i] + property in s)) {}
    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
  },
  _initCore = function _initCore() {
    if (_windowExists() && window.document) {
      _win = window;
      _doc = _win.document;
      _docElement = _doc.documentElement;
      _tempDiv = _createElement("div") || {
        style: {}
      };
      _tempDivStyler = _createElement("div");
      _transformProp = _checkPropPrefix(_transformProp);
      _transformOriginProp = _transformProp + "Origin";
      _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

      _supports3D = !!_checkPropPrefix("perspective");
      _reverting = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.reverting;
      _pluginInitted = 1;
    }
  },
  _getBBoxHack = function _getBBoxHack(swapIfPossible) {
    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
    var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
      oldParent = this.parentNode,
      oldSibling = this.nextSibling,
      oldCSS = this.style.cssText,
      bbox;
    _docElement.appendChild(svg);
    svg.appendChild(this);
    this.style.display = "block";
    if (swapIfPossible) {
      try {
        bbox = this.getBBox();
        this._gsapBBox = this.getBBox; //store the original

        this.getBBox = _getBBoxHack;
      } catch (e) {}
    } else if (this._gsapBBox) {
      bbox = this._gsapBBox();
    }
    if (oldParent) {
      if (oldSibling) {
        oldParent.insertBefore(this, oldSibling);
      } else {
        oldParent.appendChild(this);
      }
    }
    _docElement.removeChild(svg);
    this.style.cssText = oldCSS;
    return bbox;
  },
  _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
    var i = attributesArray.length;
    while (i--) {
      if (target.hasAttribute(attributesArray[i])) {
        return target.getAttribute(attributesArray[i]);
      }
    }
  },
  _getBBox = function _getBBox(target) {
    var bounds;
    try {
      bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
    } catch (error) {
      bounds = _getBBoxHack.call(target, true);
    }
    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

    return bounds && !bounds.width && !bounds.x && !bounds.y ? {
      x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
      y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
      width: 0,
      height: 0
    } : bounds;
  },
  _isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
  },
  //reports if the element is an SVG on which getBBox() actually works
  _removeProperty = function _removeProperty(target, property) {
    if (property) {
      var style = target.style,
        first2Chars;
      if (property in _transformProps && property !== _transformOriginProp) {
        property = _transformProp;
      }
      if (style.removeProperty) {
        first2Chars = property.substr(0, 2);
        if (first2Chars === "ms" || property.substr(0, 6) === "webkit") {
          //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
          property = "-" + property;
        }
        style.removeProperty(first2Chars === "--" ? property : property.replace(_capsExp, "-$1").toLowerCase());
      } else {
        //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
        style.removeAttribute(property);
      }
    }
  },
  _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;
    plugin._props.push(property);
    return pt;
  },
  _nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1
  },
  _nonStandardLayouts = {
    grid: 1,
    flex: 1
  },
  //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
  _convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0,
      curUnit = (value + "").trim().substr((curValue + "").length) || "px",
      // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
      style = _tempDiv.style,
      horizontal = _horizontalExp.test(property),
      isRootSVG = target.tagName.toLowerCase() === "svg",
      measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
      amount = 100,
      toPixels = unit === "px",
      toPercent = unit === "%",
      px,
      parent,
      cache,
      isSVG;
    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
      return curValue;
    }
    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && _isSVG(target);
    if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
      px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
      return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPercent ? curValue / px * amount : curValue / 100 * px);
    }
    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
    parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;
    if (isSVG) {
      parent = (target.ownerSVGElement || {}).parentNode;
    }
    if (!parent || parent === _doc || !parent.appendChild) {
      parent = _doc.body;
    }
    cache = parent._gsap;
    if (cache && toPercent && cache.width && horizontal && cache.time === _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time && !cache.uncache) {
      return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(curValue / cache.width * amount);
    } else {
      if (toPercent && (property === "height" || property === "width")) {
        // if we're dealing with width/height that's inside a container with padding and/or it's a flexbox/grid container, we must apply it to the target itself rather than the _tempDiv in order to ensure complete accuracy, factoring in the parent's padding.
        var v = target.style[property];
        target.style[property] = amount + unit;
        px = target[measureProperty];
        v ? target.style[property] = v : _removeProperty(target, property);
      } else {
        (toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
        parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

        parent.appendChild(_tempDiv);
        px = _tempDiv[measureProperty];
        parent.removeChild(_tempDiv);
        style.position = "absolute";
      }
      if (horizontal && toPercent) {
        cache = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(parent);
        cache.time = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time;
        cache.width = parent[measureProperty];
      }
    }
    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
  },
  _get = function _get(target, property, unit, uncache) {
    var value;
    _pluginInitted || _initCore();
    if (property in _propertyAliases && property !== "transform") {
      property = _propertyAliases[property];
      if (~property.indexOf(",")) {
        property = property.split(",")[0];
      }
    }
    if (_transformProps[property] && property !== "transform") {
      value = _parseTransform(target, uncache);
      value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
    } else {
      value = target.style[property];
      if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getProperty)(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
      }
    }
    return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
  },
  _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
    // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    if (!start || start === "none") {
      // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://gsap.com/forums/topic/18310-clippath-doesnt-work-on-ios/
      var p = _checkPropPrefix(prop, target, 1),
        s = p && _getComputedProperty(target, p, 1);
      if (s && s !== start) {
        prop = p;
        start = s;
      } else if (prop === "borderColor") {
        start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://gsap.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
      }
    }
    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, target.style, prop, 0, 1, _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._renderComplexString),
      index = 0,
      matchIndex = 0,
      a,
      result,
      startValues,
      startNum,
      color,
      startValue,
      endValue,
      endNum,
      chunk,
      endUnit,
      startUnit,
      endValues;
    pt.b = start;
    pt.e = end;
    start += ""; // ensure values are strings

    end += "";
    if (end === "auto") {
      startValue = target.style[prop];
      target.style[prop] = end;
      end = _getComputedProperty(target, prop) || end;
      startValue ? target.style[prop] = startValue : _removeProperty(target, prop);
    }
    a = [start, end];
    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorStringFilter)(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().

    start = a[0];
    end = a[1];
    startValues = start.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];
    endValues = end.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];
    if (endValues.length) {
      while (result = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.exec(end)) {
        endValue = result[0];
        chunk = end.substring(index, result.index);
        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
          color = 1;
        }
        if (endValue !== (startValue = startValues[matchIndex++] || "")) {
          startNum = parseFloat(startValue) || 0;
          startUnit = startValue.substr((startNum + "").length);
          endValue.charAt(1) === "=" && (endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, endValue) + startUnit);
          endNum = parseFloat(endValue);
          endUnit = endValue.substr((endNum + "").length);
          index = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.lastIndex - endUnit.length;
          if (!endUnit) {
            //if something like "perspective:300" is passed in and we must add a unit to the end
            endUnit = endUnit || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[prop] || startUnit;
            if (index === end.length) {
              end += endUnit;
              pt.e += endUnit;
            }
          }
          if (startUnit !== endUnit) {
            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
          } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
            s: startNum,
            c: endNum - startNum,
            m: color && color < 4 || prop === "zIndex" ? Math.round : 0
          };
        }
      }
      pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
    } else {
      pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
    }
    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).

    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

    return pt;
  },
  _keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
  },
  _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
    var split = value.split(" "),
      x = split[0],
      y = split[1] || "50%";
    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
      //the user provided them in the wrong order, so flip them
      value = x;
      x = y;
      y = value;
    }
    split[0] = _keywordToPercent[x] || x;
    split[1] = _keywordToPercent[y] || y;
    return split.join(" ");
  },
  _renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
      var target = data.t,
        style = target.style,
        props = data.u,
        cache = target._gsap,
        prop,
        clearTransforms,
        i;
      if (props === "all" || props === true) {
        style.cssText = "";
        clearTransforms = 1;
      } else {
        props = props.split(",");
        i = props.length;
        while (--i > -1) {
          prop = props[i];
          if (_transformProps[prop]) {
            clearTransforms = 1;
            prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
          }
          _removeProperty(target, prop);
        }
      }
      if (clearTransforms) {
        _removeProperty(target, _transformProp);
        if (cache) {
          cache.svg && target.removeAttribute("transform");
          _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.

          cache.uncache = 1;
          _removeIndependentTransforms(style);
        }
      }
    }
  },
  // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
  _specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
      if (tween.data !== "isFromStart") {
        var pt = plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
        pt.u = endValue;
        pt.pr = -10;
        pt.tween = tween;
        plugin._props.push(property);
        return 1;
      }
    }
    /* className feature (about 0.4kb gzipped).
    , className(plugin, target, property, endValue, tween) {
    	let _renderClassName = (ratio, data) => {
    			data.css.render(ratio, data.css);
    			if (!ratio || ratio === 1) {
    				let inline = data.rmv,
    					target = data.t,
    					p;
    				target.setAttribute("class", ratio ? data.e : data.b);
    				for (p in inline) {
    					_removeProperty(target, p);
    				}
    			}
    		},
    		_getAllStyles = (target) => {
    			let styles = {},
    				computed = getComputedStyle(target),
    				p;
    			for (p in computed) {
    				if (isNaN(p) && p !== "cssText" && p !== "length") {
    					styles[p] = computed[p];
    				}
    			}
    			_setDefaults(styles, _parseTransform(target, 1));
    			return styles;
    		},
    		startClassList = target.getAttribute("class"),
    		style = target.style,
    		cssText = style.cssText,
    		cache = target._gsap,
    		classPT = cache.classPT,
    		inlineToRemoveAtEnd = {},
    		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
    		changingVars = {},
    		startVars = _getAllStyles(target),
    		transformRelated = /(transform|perspective)/i,
    		endVars, p;
    	if (classPT) {
    		classPT.r(1, classPT.d);
    		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
    	}
    	target.setAttribute("class", data.e);
    	endVars = _getAllStyles(target, true);
    	target.setAttribute("class", startClassList);
    	for (p in endVars) {
    		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
    			changingVars[p] = endVars[p];
    			if (!style[p] && style[p] !== "0") {
    				inlineToRemoveAtEnd[p] = 1;
    			}
    		}
    	}
    	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
    	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://gsap.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
    		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
    	}
    	_parseTransform(target, true); //to clear the caching of transforms
    	data.css = new gsap.plugins.css();
    	data.css.init(target, changingVars, tween);
    	plugin._props.push(...data.css._props);
    	return 1;
    }
    */
  },
  /*
   * --------------------------------------------------------------------------------------
   * TRANSFORMS
   * --------------------------------------------------------------------------------------
   */
  _identity2DMatrix = [1, 0, 0, 1, 0, 0],
  _rotationalProperties = {},
  _isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
  },
  _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
    var matrixString = _getComputedProperty(target, _transformProp);
    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numExp).map(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round);
  },
  _getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(target),
      style = target.style,
      matrix = _getComputedTransformMatrixAsArray(target),
      parent,
      nextSibling,
      temp,
      addedToDOM;
    if (cache.svg && target.getAttribute("transform")) {
      temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
      //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
      //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
      temp = style.display;
      style.display = "block";
      parent = target.parentNode;
      if (!parent || !target.offsetParent) {
        // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
        addedToDOM = 1; //flag

        nextSibling = target.nextElementSibling;
        _docElement.appendChild(target); //we must add it to the DOM in order to get values properly
      }
      matrix = _getComputedTransformMatrixAsArray(target);
      temp ? style.display = temp : _removeProperty(target, "display");
      if (addedToDOM) {
        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
      }
    }
    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
  },
  _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
    var cache = target._gsap,
      matrix = matrixArray || _getMatrix(target, true),
      xOriginOld = cache.xOrigin || 0,
      yOriginOld = cache.yOrigin || 0,
      xOffsetOld = cache.xOffset || 0,
      yOffsetOld = cache.yOffset || 0,
      a = matrix[0],
      b = matrix[1],
      c = matrix[2],
      d = matrix[3],
      tx = matrix[4],
      ty = matrix[5],
      originSplit = origin.split(" "),
      xOrigin = parseFloat(originSplit[0]) || 0,
      yOrigin = parseFloat(originSplit[1]) || 0,
      bounds,
      determinant,
      x,
      y;
    if (!originIsAbsolute) {
      bounds = _getBBox(target);
      xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin); // if (!("xOrigin" in cache) && (xOrigin || yOrigin)) { // added in 3.12.3, reverted in 3.12.4; requires more exploration
      // 	xOrigin -= bounds.x;
      // 	yOrigin -= bounds.y;
      // }
    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
      //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
      xOrigin = x;
      yOrigin = y; // theory: we only had to do this for smoothing and it assumes that the previous one was not originIsAbsolute.
    }
    if (smooth || smooth !== false && cache.smooth) {
      tx = xOrigin - xOriginOld;
      ty = yOrigin - yOriginOld;
      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else {
      cache.xOffset = cache.yOffset = 0;
    }
    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

    if (pluginToAddPropTweensTo) {
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
    }
    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
  },
  _parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.GSCache(target);
    if ("x" in cache && !uncache && !cache.uncache) {
      return cache;
    }
    var style = target.style,
      invertedScaleX = cache.scaleX < 0,
      px = "px",
      deg = "deg",
      cs = getComputedStyle(target),
      origin = _getComputedProperty(target, _transformOriginProp) || "0",
      x,
      y,
      z,
      scaleX,
      scaleY,
      rotation,
      rotationX,
      rotationY,
      skewX,
      skewY,
      perspective,
      xOrigin,
      yOrigin,
      matrix,
      angle,
      cos,
      sin,
      a,
      b,
      c,
      d,
      a12,
      a22,
      t1,
      t2,
      t3,
      a13,
      a23,
      a33,
      a42,
      a43,
      a32;
    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && _isSVG(target));
    if (cs.translate) {
      // accommodate independent transforms by combining them into normal ones.
      if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
        style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
      }
      style.scale = style.rotate = style.translate = "none";
    }
    matrix = _getMatrix(target, cache.svg);
    if (cache.svg) {
      if (cache.uncache) {
        // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
        t2 = target.getBBox();
        origin = cache.xOrigin - t2.x + "px " + (cache.yOrigin - t2.y) + "px";
        t1 = "";
      } else {
        t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
      }
      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
    }
    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;
    if (matrix !== _identity2DMatrix) {
      a = matrix[0]; //a11

      b = matrix[1]; //a21

      c = matrix[2]; //a31

      d = matrix[3]; //a41

      x = a12 = matrix[4];
      y = a22 = matrix[5]; //2D matrix

      if (matrix.length === 6) {
        scaleX = Math.sqrt(a * a + b * b);
        scaleY = Math.sqrt(d * d + c * c);
        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));
        if (cache.svg) {
          x -= xOrigin - (xOrigin * a + yOrigin * c);
          y -= yOrigin - (xOrigin * b + yOrigin * d);
        } //3D matrix
      } else {
        a32 = matrix[6];
        a42 = matrix[7];
        a13 = matrix[8];
        a23 = matrix[9];
        a33 = matrix[10];
        a43 = matrix[11];
        x = matrix[12];
        y = matrix[13];
        z = matrix[14];
        angle = _atan2(a32, a33);
        rotationX = angle * _RAD2DEG; //rotationX

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a12 * cos + a13 * sin;
          t2 = a22 * cos + a23 * sin;
          t3 = a32 * cos + a33 * sin;
          a13 = a12 * -sin + a13 * cos;
          a23 = a22 * -sin + a23 * cos;
          a33 = a32 * -sin + a33 * cos;
          a43 = a42 * -sin + a43 * cos;
          a12 = t1;
          a22 = t2;
          a32 = t3;
        } //rotationY

        angle = _atan2(-c, a33);
        rotationY = angle * _RAD2DEG;
        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a * cos - a13 * sin;
          t2 = b * cos - a23 * sin;
          t3 = c * cos - a33 * sin;
          a43 = d * sin + a43 * cos;
          a = t1;
          b = t2;
          c = t3;
        } //rotationZ

        angle = _atan2(b, a);
        rotation = angle * _RAD2DEG;
        if (angle) {
          cos = Math.cos(angle);
          sin = Math.sin(angle);
          t1 = a * cos + b * sin;
          t2 = a12 * cos + a22 * sin;
          b = b * cos - a * sin;
          a22 = a22 * cos - a12 * sin;
          a = t1;
          a12 = t2;
        }
        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
          //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
          rotationX = rotation = 0;
          rotationY = 180 - rotationY;
        }
        scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a * a + b * b + c * c));
        scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a22 * a22 + a32 * a32));
        angle = _atan2(a12, a22);
        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
      }
      if (cache.svg) {
        //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
        t1 = target.getAttribute("transform");
        cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
        t1 && target.setAttribute("transform", t1);
      }
    }
    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
      if (invertedScaleX) {
        scaleX *= -1;
        skewX += rotation <= 0 ? 180 : -180;
        rotation += rotation <= 0 ? 180 : -180;
      } else {
        scaleY *= -1;
        skewX += skewX <= 0 ? 180 : -180;
      }
    }
    uncache = uncache || cache.uncache;
    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
    cache.z = z + px;
    cache.scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleX);
    cache.scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleY);
    cache.rotation = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotation) + deg;
    cache.rotationX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationX) + deg;
    cache.rotationY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;
    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || !uncache && cache.zOrigin || 0) {
      style[_transformOriginProp] = _firstTwoOnly(origin);
    }
    cache.xOffset = cache.yOffset = 0;
    cache.force3D = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.force3D;
    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
  },
  _firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
  },
  //for handling transformOrigin values, stripping out the 3rd dimension
  _addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(start);
    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
  },
  _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;
    _renderCSSTransforms(ratio, cache);
  },
  _zeroDeg = "0deg",
  _zeroPx = "0px",
  _endParenthesis = ") ",
  _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this,
      xPercent = _ref.xPercent,
      yPercent = _ref.yPercent,
      x = _ref.x,
      y = _ref.y,
      z = _ref.z,
      rotation = _ref.rotation,
      rotationY = _ref.rotationY,
      rotationX = _ref.rotationX,
      skewX = _ref.skewX,
      skewY = _ref.skewY,
      scaleX = _ref.scaleX,
      scaleY = _ref.scaleY,
      transformPerspective = _ref.transformPerspective,
      force3D = _ref.force3D,
      target = _ref.target,
      zOrigin = _ref.zOrigin,
      transforms = "",
      use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)

    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
      var angle = parseFloat(rotationY) * _DEG2RAD,
        a13 = Math.sin(angle),
        a33 = Math.cos(angle),
        cos;
      angle = parseFloat(rotationX) * _DEG2RAD;
      cos = Math.cos(angle);
      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }
    if (transformPerspective !== _zeroPx) {
      transforms += "perspective(" + transformPerspective + _endParenthesis;
    }
    if (xPercent || yPercent) {
      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    }
    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
      transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
    }
    if (rotation !== _zeroDeg) {
      transforms += "rotate(" + rotation + _endParenthesis;
    }
    if (rotationY !== _zeroDeg) {
      transforms += "rotateY(" + rotationY + _endParenthesis;
    }
    if (rotationX !== _zeroDeg) {
      transforms += "rotateX(" + rotationX + _endParenthesis;
    }
    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
    }
    if (scaleX !== 1 || scaleY !== 1) {
      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
    }
    target.style[_transformProp] = transforms || "translate(0, 0)";
  },
  _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this,
      xPercent = _ref2.xPercent,
      yPercent = _ref2.yPercent,
      x = _ref2.x,
      y = _ref2.y,
      rotation = _ref2.rotation,
      skewX = _ref2.skewX,
      skewY = _ref2.skewY,
      scaleX = _ref2.scaleX,
      scaleY = _ref2.scaleY,
      target = _ref2.target,
      xOrigin = _ref2.xOrigin,
      yOrigin = _ref2.yOrigin,
      xOffset = _ref2.xOffset,
      yOffset = _ref2.yOffset,
      forceCSS = _ref2.forceCSS,
      tx = parseFloat(x),
      ty = parseFloat(y),
      a11,
      a21,
      a12,
      a22,
      temp;
    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);
    if (skewY) {
      //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
      skewY = parseFloat(skewY);
      skewX += skewY;
      rotation += skewY;
    }
    if (rotation || skewX) {
      rotation *= _DEG2RAD;
      skewX *= _DEG2RAD;
      a11 = Math.cos(rotation) * scaleX;
      a21 = Math.sin(rotation) * scaleX;
      a12 = Math.sin(rotation - skewX) * -scaleY;
      a22 = Math.cos(rotation - skewX) * scaleY;
      if (skewX) {
        skewY *= _DEG2RAD;
        temp = Math.tan(skewX - skewY);
        temp = Math.sqrt(1 + temp * temp);
        a12 *= temp;
        a22 *= temp;
        if (skewY) {
          temp = Math.tan(skewY);
          temp = Math.sqrt(1 + temp * temp);
          a11 *= temp;
          a21 *= temp;
        }
      }
      a11 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a11);
      a21 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a21);
      a12 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a12);
      a22 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a22);
    } else {
      a11 = scaleX;
      a22 = scaleY;
      a21 = a12 = 0;
    }
    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
      tx = _convertToUnit(target, "x", x, "px");
      ty = _convertToUnit(target, "y", y, "px");
    }
    if (xOrigin || yOrigin || xOffset || yOffset) {
      tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
      ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }
    if (xPercent || yPercent) {
      //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
      temp = target.getBBox();
      tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xPercent / 100 * temp.width);
      ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yPercent / 100 * temp.height);
    }
    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
    target.setAttribute("transform", temp);
    forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
  },
  _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {
    var cap = 360,
      isString = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(endValue),
      endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
      change = endNum - startNum,
      finalValue = startNum + change + "deg",
      direction,
      pt;
    if (isString) {
      direction = endValue.split("_")[1];
      if (direction === "short") {
        change %= cap;
        if (change !== change % (cap / 2)) {
          change += change < 0 ? cap : -cap;
        }
      }
      if (direction === "cw" && change < 0) {
        change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;
      } else if (direction === "ccw" && change > 0) {
        change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;
      }
    }
    plugin._pt = pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
    pt.e = finalValue;
    pt.u = "deg";
    plugin._props.push(property);
    return pt;
  },
  _assign = function _assign(target, source) {
    // Internet Explorer doesn't have Object.assign(), so we recreate it here.
    for (var p in source) {
      target[p] = source[p];
    }
    return target;
  },
  _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
    //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
    var startCache = _assign({}, target._gsap),
      exclude = "perspective,force3D,transformOrigin,svgOrigin",
      style = target.style,
      endCache,
      p,
      startValue,
      endValue,
      startNum,
      endNum,
      startUnit,
      endUnit;
    if (startCache.svg) {
      startValue = target.getAttribute("transform");
      target.setAttribute("transform", "");
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      _removeProperty(target, _transformProp);
      target.setAttribute("transform", startValue);
    } else {
      startValue = getComputedStyle(target)[_transformProp];
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      style[_transformProp] = startValue;
    }
    for (p in _transformProps) {
      startValue = startCache[p];
      endValue = endCache[p];
      if (startValue !== endValue && exclude.indexOf(p) < 0) {
        //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
        startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);
        endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);
        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
        endNum = parseFloat(endValue);
        plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
        plugin._pt.u = endUnit || 0;
        plugin._props.push(p);
      }
    }
    _assign(endCache, startCache);
  }; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.

(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)("padding,margin,Width,Radius", function (name, index) {
  var t = "Top",
    r = "Right",
    b = "Bottom",
    l = "Left",
    props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
      return index < 2 ? name + side : "border" + side + name;
    });
  _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
    var a, vars;
    if (arguments.length < 4) {
      // getter, passed target, property, and unit (from _get())
      a = props.map(function (prop) {
        return _get(plugin, prop, property);
      });
      vars = a.join(" ");
      return vars.split(a[0]).length === 5 ? a[0] : vars;
    }
    a = (endValue + "").split(" ");
    vars = {};
    props.forEach(function (prop, i) {
      return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
    });
    plugin.init(target, vars, tween);
  };
});
var CSSPlugin = {
  name: "css",
  register: _initCore,
  targetTest: function targetTest(target) {
    return target.style && target.nodeType;
  },
  init: function init(target, vars, tween, index, targets) {
    var props = this._props,
      style = target.style,
      startAt = tween.vars.startAt,
      startValue,
      endValue,
      endNum,
      startNum,
      type,
      specialProp,
      p,
      startUnit,
      endUnit,
      relative,
      isTransformRelated,
      transformPropTween,
      cache,
      smooth,
      hasPriority,
      inlineProps;
    _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps

    this.styles = this.styles || _getStyleSaver(target);
    inlineProps = this.styles.props;
    this.tween = tween;
    for (p in vars) {
      if (p === "autoRound") {
        continue;
      }
      endValue = vars[p];
      if (_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._plugins[p] && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._checkPlugin)(p, vars, tween, index, target, targets)) {
        // plugins
        continue;
      }
      type = typeof endValue;
      specialProp = _specialProps[p];
      if (type === "function") {
        endValue = endValue.call(tween, index, target, targets);
        type = typeof endValue;
      }
      if (type === "string" && ~endValue.indexOf("random(")) {
        endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(endValue);
      }
      if (specialProp) {
        specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
      } else if (p.substr(0, 2) === "--") {
        //CSS variable
        startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
        endValue += "";
        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.lastIndex = 0;
        if (!_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.test(startValue)) {
          // colors don't have units
          startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);
          endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);
        }
        endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
        this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
        props.push(p);
        inlineProps.push(p, 0, style[p]);
      } else if (type !== "undefined") {
        if (startAt && p in startAt) {
          // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
          startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
          (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(startValue) && ~startValue.indexOf("random(") && (startValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(startValue));
          (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue + "") || startValue === "auto" || (startValue += _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.

          (startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
        } else {
          startValue = _get(target, p);
        }
        startNum = parseFloat(startValue);
        relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
        relative && (endValue = endValue.substr(2));
        endNum = parseFloat(endValue);
        if (p in _propertyAliases) {
          if (p === "autoAlpha") {
            //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
            if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
              //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
              startNum = 0;
            }
            inlineProps.push("visibility", 0, style.visibility);
            _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
          }
          if (p !== "scale" && p !== "transform") {
            p = _propertyAliases[p];
            ~p.indexOf(",") && (p = p.split(",")[0]);
          }
        }
        isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

        if (isTransformRelated) {
          this.styles.save(p);
          if (!transformPropTween) {
            cache = target._gsap;
            cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

            smooth = vars.smoothOrigin !== false && cache.smooth;
            transformPropTween = this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

            transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
          }
          if (p === "scale") {
            this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);
            this._pt.u = 0;
            props.push("scaleY", p);
            p += "X";
          } else if (p === "transformOrigin") {
            inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
            endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

            if (cache.svg) {
              _applySVGOrigin(target, endValue, 0, smooth, 0, this);
            } else {
              endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

              endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
              _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
            }
            continue;
          } else if (p === "svgOrigin") {
            _applySVGOrigin(target, endValue, 1, smooth, 0, this);
            continue;
          } else if (p in _rotationalProperties) {
            _addRotationalPropTween(this, cache, p, startNum, relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endValue) : endValue);
            continue;
          } else if (p === "smoothOrigin") {
            _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);
            continue;
          } else if (p === "force3D") {
            cache[p] = endValue;
            continue;
          } else if (p === "transform") {
            _addRawTransformPTs(this, endValue, target);
            continue;
          }
        } else if (!(p in style)) {
          p = _checkPropPrefix(p) || p;
        }
        if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
          startUnit = (startValue + "").substr((startNum + "").length);
          endNum || (endNum = 0); // protect against NaN

          endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue) || (p in _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units ? _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] : startUnit);
          startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
          this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
          this._pt.u = endUnit || 0;
          if (startUnit !== endUnit && endUnit !== "%") {
            //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
            this._pt.b = startValue;
            this._pt.r = _renderCSSPropWithBeginning;
          }
        } else if (!(p in style)) {
          if (p in target) {
            //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
            this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
          } else if (p !== "parseTransform") {
            (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._missingPlugin)(p, endValue);
            continue;
          }
        } else {
          _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
        }
        isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));
        props.push(p);
      }
    }
    hasPriority && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._sortPropTweensByPriority)(this);
  },
  render: function render(ratio, data) {
    if (data.tween._time || !_reverting()) {
      var pt = data._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
    } else {
      data.styles.revert();
    }
  },
  get: _get,
  aliases: _propertyAliases,
  getSetter: function getSetter(target, property, plugin) {
    //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
    var p = _propertyAliases[property];
    p && p.indexOf(",") < 0 && (property = p);
    return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isUndefined)(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getSetter)(target, property);
  },
  core: {
    _removeProperty: _removeProperty,
    _getMatrix: _getMatrix
  }
};
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.utils.checkPrefix = _checkPropPrefix;
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getStyleSaver = _getStyleSaver;
(function (positionAndScale, rotation, others, aliases) {
  var all = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(positionAndScale + "," + rotation + "," + others, function (name) {
    _transformProps[name] = 1;
  });
  (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(rotation, function (name) {
    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = "deg";
    _rotationalProperties[name] = 1;
  });
  _propertyAliases[all[13]] = positionAndScale + "," + rotation;
  (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(aliases, function (name) {
    var split = name.split(":");
    _propertyAliases[split[1]] = all[split[0]];
  });
})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
  _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = "px";
});
_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(CSSPlugin);


/***/ }),

/***/ "./node_modules/gsap/gsap-core.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/gsap-core.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Animation: () => (/* binding */ Animation),
/* harmony export */   Back: () => (/* binding */ Back),
/* harmony export */   Bounce: () => (/* binding */ Bounce),
/* harmony export */   Circ: () => (/* binding */ Circ),
/* harmony export */   Cubic: () => (/* binding */ Cubic),
/* harmony export */   Elastic: () => (/* binding */ Elastic),
/* harmony export */   Expo: () => (/* binding */ Expo),
/* harmony export */   GSCache: () => (/* binding */ GSCache),
/* harmony export */   Linear: () => (/* binding */ Linear),
/* harmony export */   Power0: () => (/* binding */ Power0),
/* harmony export */   Power1: () => (/* binding */ Power1),
/* harmony export */   Power2: () => (/* binding */ Power2),
/* harmony export */   Power3: () => (/* binding */ Power3),
/* harmony export */   Power4: () => (/* binding */ Power4),
/* harmony export */   PropTween: () => (/* binding */ PropTween),
/* harmony export */   Quad: () => (/* binding */ Quad),
/* harmony export */   Quart: () => (/* binding */ Quart),
/* harmony export */   Quint: () => (/* binding */ Quint),
/* harmony export */   Sine: () => (/* binding */ Sine),
/* harmony export */   SteppedEase: () => (/* binding */ SteppedEase),
/* harmony export */   Strong: () => (/* binding */ Strong),
/* harmony export */   Timeline: () => (/* binding */ Timeline),
/* harmony export */   TimelineLite: () => (/* binding */ Timeline),
/* harmony export */   TimelineMax: () => (/* binding */ Timeline),
/* harmony export */   Tween: () => (/* binding */ Tween),
/* harmony export */   TweenLite: () => (/* binding */ Tween),
/* harmony export */   TweenMax: () => (/* binding */ Tween),
/* harmony export */   _checkPlugin: () => (/* binding */ _checkPlugin),
/* harmony export */   _colorExp: () => (/* binding */ _colorExp),
/* harmony export */   _colorStringFilter: () => (/* binding */ _colorStringFilter),
/* harmony export */   _config: () => (/* binding */ _config),
/* harmony export */   _forEachName: () => (/* binding */ _forEachName),
/* harmony export */   _getCache: () => (/* binding */ _getCache),
/* harmony export */   _getProperty: () => (/* binding */ _getProperty),
/* harmony export */   _getSetter: () => (/* binding */ _getSetter),
/* harmony export */   _isString: () => (/* binding */ _isString),
/* harmony export */   _isUndefined: () => (/* binding */ _isUndefined),
/* harmony export */   _missingPlugin: () => (/* binding */ _missingPlugin),
/* harmony export */   _numExp: () => (/* binding */ _numExp),
/* harmony export */   _numWithUnitExp: () => (/* binding */ _numWithUnitExp),
/* harmony export */   _parseRelative: () => (/* binding */ _parseRelative),
/* harmony export */   _plugins: () => (/* binding */ _plugins),
/* harmony export */   _relExp: () => (/* binding */ _relExp),
/* harmony export */   _removeLinkedListItem: () => (/* binding */ _removeLinkedListItem),
/* harmony export */   _renderComplexString: () => (/* binding */ _renderComplexString),
/* harmony export */   _replaceRandom: () => (/* binding */ _replaceRandom),
/* harmony export */   _round: () => (/* binding */ _round),
/* harmony export */   _roundModifier: () => (/* binding */ _roundModifier),
/* harmony export */   _setDefaults: () => (/* binding */ _setDefaults),
/* harmony export */   _sortPropTweensByPriority: () => (/* binding */ _sortPropTweensByPriority),
/* harmony export */   _ticker: () => (/* binding */ _ticker),
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   "default": () => (/* binding */ gsap),
/* harmony export */   distribute: () => (/* binding */ distribute),
/* harmony export */   getUnit: () => (/* binding */ getUnit),
/* harmony export */   gsap: () => (/* binding */ gsap),
/* harmony export */   interpolate: () => (/* binding */ interpolate),
/* harmony export */   mapRange: () => (/* binding */ mapRange),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   pipe: () => (/* binding */ pipe),
/* harmony export */   random: () => (/* binding */ random),
/* harmony export */   selector: () => (/* binding */ selector),
/* harmony export */   shuffle: () => (/* binding */ shuffle),
/* harmony export */   snap: () => (/* binding */ snap),
/* harmony export */   splitColor: () => (/* binding */ splitColor),
/* harmony export */   toArray: () => (/* binding */ toArray),
/* harmony export */   unitize: () => (/* binding */ unitize),
/* harmony export */   wrap: () => (/* binding */ wrap),
/* harmony export */   wrapYoyo: () => (/* binding */ wrapYoyo)
/* harmony export */ });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

/*!
 * GSAP 3.12.5
 * https://gsap.com
 *
 * @license Copyright 2008-2024, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license or for
 * Club GSAP members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/

/* eslint-disable */
var _config = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: ""
    }
  },
  _defaults = {
    duration: .5,
    overwrite: false,
    delay: 0
  },
  _suppressOverwrites,
  _reverting,
  _context,
  _bigNum = 1e8,
  _tinyNum = 1 / _bigNum,
  _2PI = Math.PI * 2,
  _HALF_PI = _2PI / 4,
  _gsID = 0,
  _sqrt = Math.sqrt,
  _cos = Math.cos,
  _sin = Math.sin,
  _isString = function _isString(value) {
    return typeof value === "string";
  },
  _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
  _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
  _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
  _isObject = function _isObject(value) {
    return typeof value === "object";
  },
  _isNotFalse = function _isNotFalse(value) {
    return value !== false;
  },
  _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
  _isFuncOrString = function _isFuncOrString(value) {
    return _isFunction(value) || _isString(value);
  },
  _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
  // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
  _isArray = Array.isArray,
  _strictNumExp = /(?:-?\.?\d|\.)+/gi,
  //only numbers (including negatives and decimals) but NOT relative values.
  _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
  //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
  _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
  _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
  //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
  _relExp = /[+-]=-?[.\d]+/,
  _delimitedValueExp = /[^,'"\[\]\s]+/gi,
  // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
  _unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
  _globalTimeline,
  _win,
  _coreInitted,
  _doc,
  _globals = {},
  _installScope = {},
  _coreReady,
  _install = function _install(scope) {
    return (_installScope = _merge(scope, _globals)) && gsap;
  },
  _missingPlugin = function _missingPlugin(property, value) {
    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
  },
  _warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
  },
  _addGlobal = function _addGlobal(name, obj) {
    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
  },
  _emptyFunc = function _emptyFunc() {
    return 0;
  },
  _startAtRevertConfig = {
    suppressEvents: true,
    isStart: true,
    kill: false
  },
  _revertConfigNoKill = {
    suppressEvents: true,
    kill: false
  },
  _revertConfig = {
    suppressEvents: true
  },
  _reservedProps = {},
  _lazyTweens = [],
  _lazyLookup = {},
  _lastRenderedFrame,
  _plugins = {},
  _effects = {},
  _nextGCFrame = 30,
  _harnessPlugins = [],
  _callbackNames = "",
  _harness = function _harness(targets) {
    var target = targets[0],
      harnessPlugin,
      i;
    _isObject(target) || _isFunction(target) || (targets = [targets]);
    if (!(harnessPlugin = (target._gsap || {}).harness)) {
      // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
      i = _harnessPlugins.length;
      while (i-- && !_harnessPlugins[i].targetTest(target)) {}
      harnessPlugin = _harnessPlugins[i];
    }
    i = targets.length;
    while (i--) {
      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
    }
    return targets;
  },
  _getCache = function _getCache(target) {
    return target._gsap || _harness(toArray(target))[0]._gsap;
  },
  _getProperty = function _getProperty(target, property, v) {
    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
  },
  _forEachName = function _forEachName(names, func) {
    return (names = names.split(",")).forEach(func) || names;
  },
  //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
  _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
  _roundPrecise = function _roundPrecise(value) {
    return Math.round(value * 10000000) / 10000000 || 0;
  },
  // increased precision mostly for timing values.
  _parseRelative = function _parseRelative(start, value) {
    var operator = value.charAt(0),
      end = parseFloat(value.substr(2));
    start = parseFloat(start);
    return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
  },
  _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
    var l = toFind.length,
      i = 0;
    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}
    return i < l;
  },
  _lazyRender = function _lazyRender() {
    var l = _lazyTweens.length,
      a = _lazyTweens.slice(0),
      i,
      tween;
    _lazyLookup = {};
    _lazyTweens.length = 0;
    for (i = 0; i < l; i++) {
      tween = a[i];
      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
  },
  _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
    _lazyTweens.length && !_reverting && _lazyRender();
    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));
    _lazyTweens.length && !_reverting && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
  },
  _numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
  },
  _passThrough = function _passThrough(p) {
    return p;
  },
  _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }
    return obj;
  },
  _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
    return function (obj, defaults) {
      for (var p in defaults) {
        p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
      }
    };
  },
  _merge = function _merge(base, toMerge) {
    for (var p in toMerge) {
      base[p] = toMerge[p];
    }
    return base;
  },
  _mergeDeep = function _mergeDeep(base, toMerge) {
    for (var p in toMerge) {
      p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
    }
    return base;
  },
  _copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {},
      p;
    for (p in obj) {
      p in excluding || (copy[p] = obj[p]);
    }
    return copy;
  },
  _inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || _globalTimeline,
      func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;
    if (_isNotFalse(vars.inherit)) {
      while (parent) {
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
      }
    }
    return vars;
  },
  _arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length,
      match = i === a2.length;
    while (match && i-- && a1[i] === a2[i]) {}
    return i < 0;
  },
  _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }
    if (lastProp === void 0) {
      lastProp = "_last";
    }
    var prev = parent[lastProp],
      t;
    if (sortBy) {
      t = child[sortBy];
      while (prev && prev[sortBy] > t) {
        prev = prev._prev;
      }
    }
    if (prev) {
      child._next = prev._next;
      prev._next = child;
    } else {
      child._next = parent[firstProp];
      parent[firstProp] = child;
    }
    if (child._next) {
      child._next._prev = child;
    } else {
      parent[lastProp] = child;
    }
    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
  },
  _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }
    if (lastProp === void 0) {
      lastProp = "_last";
    }
    var prev = child._prev,
      next = child._next;
    if (prev) {
      prev._next = next;
    } else if (parent[firstProp] === child) {
      parent[firstProp] = next;
    }
    if (next) {
      next._prev = prev;
    } else if (parent[lastProp] === child) {
      parent[lastProp] = prev;
    }
    child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
  },
  _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);
    child._act = 0;
  },
  _uncache = function _uncache(animation, child) {
    if (animation && (!child || child._end > animation._dur || child._start < 0)) {
      // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
      var a = animation;
      while (a) {
        a._dirty = 1;
        a = a.parent;
      }
    }
    return animation;
  },
  _recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;
    while (parent && parent.parent) {
      //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
      parent._dirty = 1;
      parent.totalDuration();
      parent = parent.parent;
    }
    return animation;
  },
  _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {
    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));
  },
  _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
  },
  _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
  },
  // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
  _animationCycle = function _animationCycle(tTime, cycleDuration) {
    var whole = Math.floor(tTime /= cycleDuration);
    return tTime && whole === tTime ? whole - 1 : whole;
  },
  _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
  },
  _setEnd = function _setEnd(animation) {
    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
  },
  _alignPlayhead = function _alignPlayhead(animation, totalTime) {
    // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
    var parent = animation._dp;
    if (parent && parent.smoothChildTiming && animation._ts) {
      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));
      _setEnd(animation);
      parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
    }
    return animation;
  },
  /*
  _totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
  	let cycleDuration = duration + repeatDelay,
  		time = _round(clampedTotalTime % cycleDuration);
  	if (time > duration) {
  		time = duration;
  	}
  	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
  },
  */
  _postAddChecks = function _postAddChecks(timeline, child) {
    var t;
    if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {
      // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).
      t = _parentToChildTotalTime(timeline.rawTime(), child);
      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
        child.render(t, true);
      }
    } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.

    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
      //in case any of the ancestors had completed but should now be enabled...
      if (timeline._dur < timeline.duration()) {
        t = timeline;
        while (t._dp) {
          t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

          t = t._dp;
        }
      }
      timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
    }
  },
  _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
    child.parent && _removeFromParent(child);
    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));
    _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);
    _isFromOrFromStart(child) || (timeline._recent = child);
    skipChecks || _postAddChecks(timeline, child);
    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)

    return timeline;
  },
  _scrollTrigger = function _scrollTrigger(animation, trigger) {
    return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
  },
  _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {
    _initTween(tween, time, tTime);
    if (!tween._initted) {
      return 1;
    }
    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
      _lazyTweens.push(tween);
      tween._lazy = [tTime, suppressEvents];
      return 1;
    }
  },
  _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
    var parent = _ref.parent;
    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
  },
  // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
  _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
    var data = _ref2.data;
    return data === "isFromStart" || data === "isStart";
  },
  _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
    var prevRatio = tween.ratio,
      ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
      // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
      repeatDelay = tween._rDelay,
      tTime = 0,
      pt,
      iteration,
      prevIteration;
    if (repeatDelay && tween._repeat) {
      // in case there's a zero-duration tween that has a repeat with a repeatDelay
      tTime = _clamp(0, tween._tDur, totalTime);
      iteration = _animationCycle(tTime, repeatDelay);
      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);
      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
        // if iteration changed
        prevRatio = 1 - ratio;
        tween.vars.repeatRefresh && tween._initted && tween.invalidate();
      }
    }
    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {
        // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
        return;
      }
      prevIteration = tween._zTime;
      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

      suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

      tween.ratio = ratio;
      tween._from && (ratio = 1 - ratio);
      tween._time = 0;
      tween._tTime = tTime;
      pt = tween._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
      tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");
      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
        ratio && _removeFromParent(tween, 1);
        if (!suppressEvents && !_reverting) {
          _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);
          tween._prom && tween._prom();
        }
      }
    } else if (!tween._zTime) {
      tween._zTime = totalTime;
    }
  },
  _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
    var child;
    if (time > prevTime) {
      child = animation._first;
      while (child && child._start <= time) {
        if (child.data === "isPause" && child._start > prevTime) {
          return child;
        }
        child = child._next;
      }
    } else {
      child = animation._last;
      while (child && child._start >= time) {
        if (child.data === "isPause" && child._start < prevTime) {
          return child;
        }
        child = child._prev;
      }
    }
  },
  _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
    var repeat = animation._repeat,
      dur = _roundPrecise(duration) || 0,
      totalProgress = animation._tTime / animation._tDur;
    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
    animation._dur = dur;
    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);
    animation.parent && _setEnd(animation);
    skipUncache || _uncache(animation.parent, animation);
    return animation;
  },
  _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
  },
  _zeroPosition = {
    _start: 0,
    endTime: _emptyFunc,
    totalDuration: _emptyFunc
  },
  _parsePosition = function _parsePosition(animation, position, percentAnimation) {
    var labels = animation.labels,
      recent = animation._recent || _zeroPosition,
      clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
      //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
      i,
      offset,
      isPercent;
    if (_isString(position) && (isNaN(position) || position in labels)) {
      //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
      offset = position.charAt(0);
      isPercent = position.substr(-1) === "%";
      i = position.indexOf("=");
      if (offset === "<" || offset === ">") {
        i >= 0 && (position = position.replace(/=/, ""));
        return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
      }
      if (i < 0) {
        position in labels || (labels[position] = clippedDuration);
        return labels[position];
      }
      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));
      if (isPercent && percentAnimation) {
        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
      }
      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
    }
    return position == null ? clippedDuration : +position;
  },
  _createTweenType = function _createTweenType(type, params, timeline) {
    var isLegacy = _isNumber(params[1]),
      varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
      vars = params[varsIndex],
      irVars,
      parent;
    isLegacy && (vars.duration = params[1]);
    vars.parent = timeline;
    if (type) {
      irVars = vars;
      parent = timeline;
      while (parent && !("immediateRender" in irVars)) {
        // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
        irVars = parent.vars.defaults || {};
        parent = _isNotFalse(parent.vars.inherit) && parent.parent;
      }
      vars.immediateRender = _isNotFalse(irVars.immediateRender);
      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
    }
    return new Tween(params[0], vars, params[varsIndex + 1]);
  },
  _conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
  },
  _clamp = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
  },
  getUnit = function getUnit(value, v) {
    return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
  },
  // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
  clamp = function clamp(min, max, value) {
    return _conditionalReturn(value, function (v) {
      return _clamp(min, max, v);
    });
  },
  _slice = [].slice,
  _isArrayLike = function _isArrayLike(value, nonEmpty) {
    return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
  },
  _flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) {
      accumulator = [];
    }
    return ar.forEach(function (value) {
      var _accumulator;
      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
    }) || accumulator;
  },
  //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
  toArray = function toArray(value, scope, leaveStrings) {
    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
  },
  selector = function selector(value) {
    value = toArray(value)[0] || _warn("Invalid scope") || {};
    return function (v) {
      var el = value.current || value.nativeElement || value;
      return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
    };
  },
  shuffle = function shuffle(a) {
    return a.sort(function () {
      return .5 - Math.random();
    });
  },
  // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
  //for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
  distribute = function distribute(v) {
    if (_isFunction(v)) {
      return v;
    }
    var vars = _isObject(v) ? v : {
        each: v
      },
      //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
      ease = _parseEase(vars.ease),
      from = vars.from || 0,
      base = parseFloat(vars.base) || 0,
      cache = {},
      isDecimal = from > 0 && from < 1,
      ratios = isNaN(from) || isDecimal,
      axis = vars.axis,
      ratioX = from,
      ratioY = from;
    if (_isString(from)) {
      ratioX = ratioY = {
        center: .5,
        edges: .5,
        end: 1
      }[from] || 0;
    } else if (!isDecimal && ratios) {
      ratioX = from[0];
      ratioY = from[1];
    }
    return function (i, target, a) {
      var l = (a || vars).length,
        distances = cache[l],
        originX,
        originY,
        x,
        y,
        d,
        j,
        max,
        min,
        wrapAt;
      if (!distances) {
        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];
        if (!wrapAt) {
          max = -_bigNum;
          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}
          wrapAt < l && wrapAt--;
        }
        distances = cache[l] = [];
        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
        originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
        max = 0;
        min = _bigNum;
        for (j = 0; j < l; j++) {
          x = j % wrapAt - originX;
          y = originY - (j / wrapAt | 0);
          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
          d > max && (max = d);
          d < min && (min = d);
        }
        from === "random" && shuffle(distances);
        distances.max = max - min;
        distances.min = min;
        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
        distances.b = l < 0 ? base - l : base;
        distances.u = getUnit(vars.amount || vars.each) || 0; //unit

        ease = ease && l < 0 ? _invertEase(ease) : ease;
      }
      l = (distances[i] - distances.min) / distances.max || 0;
      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
    };
  },
  _roundModifier = function _roundModifier(v) {
    //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
    var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())

    return function (raw) {
      var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);
      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
    };
  },
  snap = function snap(snapTo, value) {
    var isArray = _isArray(snapTo),
      radius,
      is2D;
    if (!isArray && _isObject(snapTo)) {
      radius = isArray = snapTo.radius || _bigNum;
      if (snapTo.values) {
        snapTo = toArray(snapTo.values);
        if (is2D = !_isNumber(snapTo[0])) {
          radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
        }
      } else {
        snapTo = _roundModifier(snapTo.increment);
      }
    }
    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
      is2D = snapTo(raw);
      return Math.abs(is2D - raw) <= radius ? is2D : raw;
    } : function (raw) {
      var x = parseFloat(is2D ? raw.x : raw),
        y = parseFloat(is2D ? raw.y : 0),
        min = _bigNum,
        closest = 0,
        i = snapTo.length,
        dx,
        dy;
      while (i--) {
        if (is2D) {
          dx = snapTo[i].x - x;
          dy = snapTo[i].y - y;
          dx = dx * dx + dy * dy;
        } else {
          dx = Math.abs(snapTo[i] - x);
        }
        if (dx < min) {
          min = dx;
          closest = i;
        }
      }
      closest = !radius || min <= radius ? snapTo[closest] : raw;
      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
    });
  },
  random = function random(min, max, roundingIncrement, returnFunction) {
    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
    });
  },
  pipe = function pipe() {
    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
      functions[_key] = arguments[_key];
    }
    return function (value) {
      return functions.reduce(function (v, f) {
        return f(v);
      }, value);
    };
  },
  unitize = function unitize(func, unit) {
    return function (value) {
      return func(parseFloat(value)) + (unit || getUnit(value));
    };
  },
  normalize = function normalize(min, max, value) {
    return mapRange(min, max, 0, 1, value);
  },
  _wrapArray = function _wrapArray(a, wrapper, value) {
    return _conditionalReturn(value, function (index) {
      return a[~~wrapper(index)];
    });
  },
  wrap = function wrap(min, max, value) {
    // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
    var range = max - min;
    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
      return (range + (value - min) % range) % range + min;
    });
  },
  wrapYoyo = function wrapYoyo(min, max, value) {
    var range = max - min,
      total = range * 2;
    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
      value = (total + (value - min) % total) % total || 0;
      return min + (value > range ? total - value : value);
    });
  },
  _replaceRandom = function _replaceRandom(value) {
    //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
    var prev = 0,
      s = "",
      i,
      nums,
      end,
      isArray;
    while (~(i = value.indexOf("random(", prev))) {
      end = value.indexOf(")", i);
      isArray = value.charAt(i + 7) === "[";
      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
      prev = end + 1;
    }
    return s + value.substr(prev, value.length - prev);
  },
  mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
    var inRange = inMax - inMin,
      outRange = outMax - outMin;
    return _conditionalReturn(value, function (value) {
      return outMin + ((value - inMin) / inRange * outRange || 0);
    });
  },
  interpolate = function interpolate(start, end, progress, mutate) {
    var func = isNaN(start + end) ? 0 : function (p) {
      return (1 - p) * start + p * end;
    };
    if (!func) {
      var isString = _isString(start),
        master = {},
        p,
        i,
        interpolators,
        l,
        il;
      progress === true && (mutate = 1) && (progress = null);
      if (isString) {
        start = {
          p: start
        };
        end = {
          p: end
        };
      } else if (_isArray(start) && !_isArray(end)) {
        interpolators = [];
        l = start.length;
        il = l - 2;
        for (i = 1; i < l; i++) {
          interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
        }
        l--;
        func = function func(p) {
          p *= l;
          var i = Math.min(il, ~~p);
          return interpolators[i](p - i);
        };
        progress = end;
      } else if (!mutate) {
        start = _merge(_isArray(start) ? [] : {}, start);
      }
      if (!interpolators) {
        for (p in end) {
          _addPropTween.call(master, start, p, "get", end[p]);
        }
        func = function func(p) {
          return _renderPropTweens(p, master) || (isString ? start.p : start);
        };
      }
    }
    return _conditionalReturn(progress, func);
  },
  _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
    //used for nextLabel() and previousLabel()
    var labels = timeline.labels,
      min = _bigNum,
      p,
      distance,
      label;
    for (p in labels) {
      distance = labels[p] - fromTime;
      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
        label = p;
        min = distance;
      }
    }
    return label;
  },
  _callback = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars,
      callback = v[type],
      prevContext = _context,
      context = animation._ctx,
      params,
      scope,
      result;
    if (!callback) {
      return;
    }
    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

    context && (_context = context);
    result = params ? callback.apply(scope, params) : callback.call(scope);
    _context = prevContext;
    return result;
  },
  _interrupt = function _interrupt(animation) {
    _removeFromParent(animation);
    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);
    animation.progress() < 1 && _callback(animation, "onInterrupt");
    return animation;
  },
  _quickTween,
  _registerPluginQueue = [],
  _createPlugin = function _createPlugin(config) {
    if (!config) return;
    config = !config.name && config["default"] || config; // UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

    if (_windowExists() || config.headless) {
      // edge case: some build tools may pass in a null/undefined value
      var name = config.name,
        isFunc = _isFunction(config),
        Plugin = name && !isFunc && config.init ? function () {
          this._props = [];
        } : config,
        //in case someone passes in an object that's not a plugin, like CustomEase
        instanceDefaults = {
          init: _emptyFunc,
          render: _renderPropTweens,
          add: _addPropTween,
          kill: _killPropTweensOf,
          modifier: _addPluginModifier,
          rawVars: 0
        },
        statics = {
          targetTest: 0,
          get: 0,
          getSetter: _getSetter,
          aliases: {},
          register: 0
        };
      _wake();
      if (config !== Plugin) {
        if (_plugins[name]) {
          return;
        }
        _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods

        _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods

        _plugins[Plugin.prop = name] = Plugin;
        if (config.targetTest) {
          _harnessPlugins.push(Plugin);
          _reservedProps[name] = 1;
        }
        name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
      }
      _addGlobal(name, Plugin);
      config.register && config.register(gsap, Plugin, PropTween);
    } else {
      _registerPluginQueue.push(config);
    }
  },
  /*
   * --------------------------------------------------------------------------------------
   * COLORS
   * --------------------------------------------------------------------------------------
   */
  _255 = 255,
  _colorLookup = {
    aqua: [0, _255, _255],
    lime: [0, _255, 0],
    silver: [192, 192, 192],
    black: [0, 0, 0],
    maroon: [128, 0, 0],
    teal: [0, 128, 128],
    blue: [0, 0, _255],
    navy: [0, 0, 128],
    white: [_255, _255, _255],
    olive: [128, 128, 0],
    yellow: [_255, _255, 0],
    orange: [_255, 165, 0],
    gray: [128, 128, 128],
    purple: [128, 0, 128],
    green: [0, 128, 0],
    red: [_255, 0, 0],
    pink: [_255, 192, 203],
    cyan: [0, _255, _255],
    transparent: [_255, _255, _255, 0]
  },
  // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
  // let ctx = _doc.createElement("canvas").getContext("2d");
  // _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
  _hue = function _hue(h, m1, m2) {
    h += h < 0 ? 1 : h > 1 ? -1 : 0;
    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
  },
  splitColor = function splitColor(v, toHSL, forceAlpha) {
    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
      r,
      g,
      b,
      h,
      s,
      l,
      max,
      min,
      d,
      wasHSL;
    if (!a) {
      if (v.substr(-1) === ",") {
        //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
        v = v.substr(0, v.length - 1);
      }
      if (_colorLookup[v]) {
        a = _colorLookup[v];
      } else if (v.charAt(0) === "#") {
        if (v.length < 6) {
          //for shorthand like #9F0 or #9F0F (could have alpha)
          r = v.charAt(1);
          g = v.charAt(2);
          b = v.charAt(3);
          v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
        }
        if (v.length === 9) {
          // hex with alpha, like #fd5e53ff
          a = parseInt(v.substr(1, 6), 16);
          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
        }
        v = parseInt(v.substr(1), 16);
        a = [v >> 16, v >> 8 & _255, v & _255];
      } else if (v.substr(0, 3) === "hsl") {
        a = wasHSL = v.match(_strictNumExp);
        if (!toHSL) {
          h = +a[0] % 360 / 360;
          s = +a[1] / 100;
          l = +a[2] / 100;
          g = l <= .5 ? l * (s + 1) : l + s - l * s;
          r = l * 2 - g;
          a.length > 3 && (a[3] *= 1); //cast as number

          a[0] = _hue(h + 1 / 3, r, g);
          a[1] = _hue(h, r, g);
          a[2] = _hue(h - 1 / 3, r, g);
        } else if (~v.indexOf("=")) {
          //if relative values are found, just return the raw strings with the relative prefixes in place.
          a = v.match(_numExp);
          forceAlpha && a.length < 4 && (a[3] = 1);
          return a;
        }
      } else {
        a = v.match(_strictNumExp) || _colorLookup.transparent;
      }
      a = a.map(Number);
    }
    if (toHSL && !wasHSL) {
      r = a[0] / _255;
      g = a[1] / _255;
      b = a[2] / _255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;
      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
        h *= 60;
      }
      a[0] = ~~(h + .5);
      a[1] = ~~(s * 100 + .5);
      a[2] = ~~(l * 100 + .5);
    }
    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
  },
  _colorOrderData = function _colorOrderData(v) {
    // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
    var values = [],
      c = [],
      i = -1;
    v.split(_colorExp).forEach(function (v) {
      var a = v.match(_numWithUnitExp) || [];
      values.push.apply(values, a);
      c.push(i += a.length + 1);
    });
    values.c = c;
    return values;
  },
  _formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "",
      colors = (s + result).match(_colorExp),
      type = toHSL ? "hsla(" : "rgba(",
      i = 0,
      c,
      shell,
      d,
      l;
    if (!colors) {
      return s;
    }
    colors = colors.map(function (color) {
      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
    });
    if (orderMatchData) {
      d = _colorOrderData(s);
      c = orderMatchData.c;
      if (c.join(result) !== d.c.join(result)) {
        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
        l = shell.length - 1;
        for (; i < l; i++) {
          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
        }
      }
    }
    if (!shell) {
      shell = s.split(_colorExp);
      l = shell.length - 1;
      for (; i < l; i++) {
        result += shell[i] + colors[i];
      }
    }
    return result + shell[l];
  },
  _colorExp = function () {
    var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
      //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
      p;
    for (p in _colorLookup) {
      s += "|" + p + "\\b";
    }
    return new RegExp(s + ")", "gi");
  }(),
  _hslExp = /hsl[a]?\(/,
  _colorStringFilter = function _colorStringFilter(a) {
    var combined = a.join(" "),
      toHSL;
    _colorExp.lastIndex = 0;
    if (_colorExp.test(combined)) {
      toHSL = _hslExp.test(combined);
      a[1] = _formatColors(a[1], toHSL);
      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

      return true;
    }
  },
  /*
   * --------------------------------------------------------------------------------------
   * TICKER
   * --------------------------------------------------------------------------------------
   */
  _tickerActive,
  _ticker = function () {
    var _getTime = Date.now,
      _lagThreshold = 500,
      _adjustedLag = 33,
      _startTime = _getTime(),
      _lastUpdate = _startTime,
      _gap = 1000 / 240,
      _nextTime = _gap,
      _listeners = [],
      _id,
      _req,
      _raf,
      _self,
      _delta,
      _i,
      _tick = function _tick(v) {
        var elapsed = _getTime() - _lastUpdate,
          manual = v === true,
          overlap,
          dispatch,
          time,
          frame;
        (elapsed > _lagThreshold || elapsed < 0) && (_startTime += elapsed - _adjustedLag);
        _lastUpdate += elapsed;
        time = _lastUpdate - _startTime;
        overlap = time - _nextTime;
        if (overlap > 0 || manual) {
          frame = ++_self.frame;
          _delta = time - _self.time * 1000;
          _self.time = time = time / 1000;
          _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
          dispatch = 1;
        }
        manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

        if (dispatch) {
          for (_i = 0; _i < _listeners.length; _i++) {
            // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
            _listeners[_i](time, _delta, frame, v);
          }
        }
      };
    _self = {
      time: 0,
      frame: 0,
      tick: function tick() {
        _tick(true);
      },
      deltaRatio: function deltaRatio(fps) {
        return _delta / (1000 / (fps || 60));
      },
      wake: function wake() {
        if (_coreReady) {
          if (!_coreInitted && _windowExists()) {
            _win = _coreInitted = window;
            _doc = _win.document || {};
            _globals.gsap = gsap;
            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);
            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});
            _registerPluginQueue.forEach(_createPlugin);
          }
          _raf = typeof requestAnimationFrame !== "undefined" && requestAnimationFrame;
          _id && _self.sleep();
          _req = _raf || function (f) {
            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
          };
          _tickerActive = 1;
          _tick(2);
        }
      },
      sleep: function sleep() {
        (_raf ? cancelAnimationFrame : clearTimeout)(_id);
        _tickerActive = 0;
        _req = _emptyFunc;
      },
      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
        _lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited

        _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
      },
      fps: function fps(_fps) {
        _gap = 1000 / (_fps || 240);
        _nextTime = _self.time * 1000 + _gap;
      },
      add: function add(callback, once, prioritize) {
        var func = once ? function (t, d, f, v) {
          callback(t, d, f, v);
          _self.remove(func);
        } : callback;
        _self.remove(callback);
        _listeners[prioritize ? "unshift" : "push"](func);
        _wake();
        return func;
      },
      remove: function remove(callback, i) {
        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
      },
      _listeners: _listeners
    };
    return _self;
  }(),
  _wake = function _wake() {
    return !_tickerActive && _ticker.wake();
  },
  //also ensures the core classes are initialized.

  /*
  * -------------------------------------------------
  * EASING
  * -------------------------------------------------
  */
  _easeMap = {},
  _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
  _quotesExp = /["']/g,
  _parseObjectInString = function _parseObjectInString(value) {
    //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
    var obj = {},
      split = value.substr(1, value.length - 3).split(":"),
      key = split[0],
      i = 1,
      l = split.length,
      index,
      val,
      parsedVal;
    for (; i < l; i++) {
      val = split[i];
      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
      parsedVal = val.substr(0, index);
      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
      key = val.substr(index + 1).trim();
    }
    return obj;
  },
  _valueInParentheses = function _valueInParentheses(value) {
    var open = value.indexOf("(") + 1,
      close = value.indexOf(")"),
      nested = value.indexOf("(", open);
    return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
  },
  _configEaseFromString = function _configEaseFromString(name) {
    //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
    var split = (name + "").split("("),
      ease = _easeMap[split[0]];
    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
  },
  _invertEase = function _invertEase(ease) {
    return function (p) {
      return 1 - ease(1 - p);
    };
  },
  // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
  _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first,
      ease;
    while (child) {
      if (child instanceof Timeline) {
        _propagateYoyoEase(child, isYoyo);
      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
        if (child.timeline) {
          _propagateYoyoEase(child.timeline, isYoyo);
        } else {
          ease = child._ease;
          child._ease = child._yEase;
          child._yEase = ease;
          child._yoyo = isYoyo;
        }
      }
      child = child._next;
    }
  },
  _parseEase = function _parseEase(ease, defaultEase) {
    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
  },
  _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) {
      easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
      };
    }
    if (easeInOut === void 0) {
      easeInOut = function easeInOut(p) {
        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
      };
    }
    var ease = {
        easeIn: easeIn,
        easeOut: easeOut,
        easeInOut: easeInOut
      },
      lowercaseName;
    _forEachName(names, function (name) {
      _easeMap[name] = _globals[name] = ease;
      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;
      for (var p in ease) {
        _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
      }
    });
    return ease;
  },
  _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function (p) {
      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
    };
  },
  _configElastic = function _configElastic(type, amplitude, period) {
    var p1 = amplitude >= 1 ? amplitude : 1,
      //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
      p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
      p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
      easeOut = function easeOut(p) {
        return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
      },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);
    p2 = _2PI / p2; //precalculate to optimize

    ease.config = function (amplitude, period) {
      return _configElastic(type, amplitude, period);
    };
    return ease;
  },
  _configBack = function _configBack(type, overshoot) {
    if (overshoot === void 0) {
      overshoot = 1.70158;
    }
    var easeOut = function easeOut(p) {
        return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
      },
      ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);
    ease.config = function (overshoot) {
      return _configBack(type, overshoot);
    };
    return ease;
  }; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEase = ratio => {
// 	let y = 0.5 + ratio / 2;
// 	return p => (2 * (1 - p) * p * y + p * p);
// },
// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEaseStrong = ratio => {
// 	ratio = .5 + ratio / 2;
// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
// 		b = ratio - o,
// 		c = ratio + o;
// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
// };

_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
  var power = i < 5 ? i + 1 : i;
  _insertEase(name + ",Power" + (power - 1), i ? function (p) {
    return Math.pow(p, power);
  } : function (p) {
    return p;
  }, function (p) {
    return 1 - Math.pow(1 - p, power);
  }, function (p) {
    return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
  });
});
_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;
_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());
(function (n, c) {
  var n1 = 1 / c,
    n2 = 2 * n1,
    n3 = 2.5 * n1,
    easeOut = function easeOut(p) {
      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
    };
  _insertEase("Bounce", function (p) {
    return 1 - easeOut(1 - p);
  }, easeOut);
})(7.5625, 2.75);
_insertEase("Expo", function (p) {
  return p ? Math.pow(2, 10 * (p - 1)) : 0;
});
_insertEase("Circ", function (p) {
  return -(_sqrt(1 - p * p) - 1);
});
_insertEase("Sine", function (p) {
  return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
});
_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());
_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
  config: function config(steps, immediateStart) {
    if (steps === void 0) {
      steps = 1;
    }
    var p1 = 1 / steps,
      p2 = steps + (immediateStart ? 0 : 1),
      p3 = immediateStart ? 1 : 0,
      max = 1 - _tinyNum;
    return function (p) {
      return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
    };
  }
};
_defaults.ease = _easeMap["quad.out"];
_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
  return _callbackNames += name + "," + name + "Params,";
});
/*
 * --------------------------------------------------------------------------------------
 * CACHE
 * --------------------------------------------------------------------------------------
 */

var GSCache = function GSCache(target, harness) {
  this.id = _gsID++;
  target._gsap = this;
  this.target = target;
  this.harness = harness;
  this.get = harness ? harness.get : _getProperty;
  this.set = harness ? harness.getSetter : _getSetter;
};
/*
 * --------------------------------------------------------------------------------------
 * ANIMATION
 * --------------------------------------------------------------------------------------
 */

var Animation = /*#__PURE__*/function () {
  function Animation(vars) {
    this.vars = vars;
    this._delay = +vars.delay || 0;
    if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
      // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
      this._rDelay = vars.repeatDelay || 0;
      this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
    }
    this._ts = 1;
    _setDuration(this, +vars.duration, 1, 1);
    this.data = vars.data;
    if (_context) {
      this._ctx = _context;
      _context.data.push(this);
    }
    _tickerActive || _ticker.wake();
  }
  var _proto = Animation.prototype;
  _proto.delay = function delay(value) {
    if (value || value === 0) {
      this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
      this._delay = value;
      return this;
    }
    return this._delay;
  };
  _proto.duration = function duration(value) {
    return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
  };
  _proto.totalDuration = function totalDuration(value) {
    if (!arguments.length) {
      return this._tDur;
    }
    this._dirty = 0;
    return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
  };
  _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
    _wake();
    if (!arguments.length) {
      return this._tTime;
    }
    var parent = this._dp;
    if (parent && parent.smoothChildTiming && this._ts) {
      _alignPlayhead(this, _totalTime);
      !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
      //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

      while (parent && parent.parent) {
        if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
          parent.totalTime(parent._tTime, true);
        }
        parent = parent.parent;
      }
      if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
        //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
        _addToTimeline(this._dp, this, this._start - this._delay);
      }
    }
    if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
      // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
      this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
      //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
      //   this._lock = 1;

      _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
      //}
    }
    return this;
  };
  _proto.time = function time(value, suppressEvents) {
    return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
  };
  _proto.totalProgress = function totalProgress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.rawTime() > 0 ? 1 : 0;
  };
  _proto.progress = function progress(value, suppressEvents) {
    return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.rawTime() > 0 ? 1 : 0;
  };
  _proto.iteration = function iteration(value, suppressEvents) {
    var cycleDuration = this.duration() + this._rDelay;
    return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
  } // potential future addition:
  // isPlayingBackwards() {
  // 	let animation = this,
  // 		orientation = 1; // 1 = forward, -1 = backward
  // 	while (animation) {
  // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
  // 		animation = animation.parent;
  // 	}
  // 	return orientation < 0;
  // }
  ;
  _proto.timeScale = function timeScale(value, suppressEvents) {
    if (!arguments.length) {
      return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
    }
    if (this._rts === value) {
      return this;
    }
    var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
    // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
    //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
    // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

    this._rts = +value || 0;
    this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

    this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), suppressEvents !== false);
    _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.

    return _recacheAncestors(this);
  };
  _proto.paused = function paused(value) {
    if (!arguments.length) {
      return this._ps;
    }
    if (this._ps !== value) {
      this._ps = value;
      if (value) {
        this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

        this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
      } else {
        _wake();
        this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

        this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
      }
    }
    return this;
  };
  _proto.startTime = function startTime(value) {
    if (arguments.length) {
      this._start = value;
      var parent = this.parent || this._dp;
      parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
      return this;
    }
    return this._start;
  };
  _proto.endTime = function endTime(includeRepeats) {
    return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
  };
  _proto.rawTime = function rawTime(wrapRepeats) {
    var parent = this.parent || this._dp; // _dp = detached parent

    return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
  };
  _proto.revert = function revert(config) {
    if (config === void 0) {
      config = _revertConfig;
    }
    var prevIsReverting = _reverting;
    _reverting = config;
    if (this._initted || this._startAt) {
      this.timeline && this.timeline.revert(config);
      this.totalTime(-0.01, config.suppressEvents);
    }
    this.data !== "nested" && config.kill !== false && this.kill();
    _reverting = prevIsReverting;
    return this;
  };
  _proto.globalTime = function globalTime(rawTime) {
    var animation = this,
      time = arguments.length ? rawTime : animation.rawTime();
    while (animation) {
      time = animation._start + time / (Math.abs(animation._ts) || 1);
      animation = animation._dp;
    }
    return !this.parent && this._sat ? this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). "_sat" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().
  };
  _proto.repeat = function repeat(value) {
    if (arguments.length) {
      this._repeat = value === Infinity ? -2 : value;
      return _onUpdateTotalDuration(this);
    }
    return this._repeat === -2 ? Infinity : this._repeat;
  };
  _proto.repeatDelay = function repeatDelay(value) {
    if (arguments.length) {
      var time = this._time;
      this._rDelay = value;
      _onUpdateTotalDuration(this);
      return time ? this.time(time) : this;
    }
    return this._rDelay;
  };
  _proto.yoyo = function yoyo(value) {
    if (arguments.length) {
      this._yoyo = value;
      return this;
    }
    return this._yoyo;
  };
  _proto.seek = function seek(position, suppressEvents) {
    return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
  };
  _proto.restart = function restart(includeDelay, suppressEvents) {
    return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
  };
  _proto.play = function play(from, suppressEvents) {
    from != null && this.seek(from, suppressEvents);
    return this.reversed(false).paused(false);
  };
  _proto.reverse = function reverse(from, suppressEvents) {
    from != null && this.seek(from || this.totalDuration(), suppressEvents);
    return this.reversed(true).paused(false);
  };
  _proto.pause = function pause(atTime, suppressEvents) {
    atTime != null && this.seek(atTime, suppressEvents);
    return this.paused(true);
  };
  _proto.resume = function resume() {
    return this.paused(false);
  };
  _proto.reversed = function reversed(value) {
    if (arguments.length) {
      !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

      return this;
    }
    return this._rts < 0;
  };
  _proto.invalidate = function invalidate() {
    this._initted = this._act = 0;
    this._zTime = -_tinyNum;
    return this;
  };
  _proto.isActive = function isActive() {
    var parent = this.parent || this._dp,
      start = this._start,
      rawTime;
    return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
  };
  _proto.eventCallback = function eventCallback(type, callback, params) {
    var vars = this.vars;
    if (arguments.length > 1) {
      if (!callback) {
        delete vars[type];
      } else {
        vars[type] = callback;
        params && (vars[type + "Params"] = params);
        type === "onUpdate" && (this._onUpdate = callback);
      }
      return this;
    }
    return vars[type];
  };
  _proto.then = function then(onFulfilled) {
    var self = this;
    return new Promise(function (resolve) {
      var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
        _resolve = function _resolve() {
          var _then = self.then;
          self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
          resolve(f);
          self.then = _then;
        };
      if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
        _resolve();
      } else {
        self._prom = _resolve;
      }
    });
  };
  _proto.kill = function kill() {
    _interrupt(this);
  };
  return Animation;
}();
_setDefaults(Animation.prototype, {
  _time: 0,
  _start: 0,
  _end: 0,
  _tTime: 0,
  _tDur: 0,
  _dirty: 0,
  _repeat: 0,
  _yoyo: false,
  parent: null,
  _initted: false,
  _rDelay: 0,
  _ts: 1,
  _dp: 0,
  ratio: 0,
  _zTime: -_tinyNum,
  _prom: 0,
  _ps: false,
  _rts: 1
});
/*
 * -------------------------------------------------
 * TIMELINE
 * -------------------------------------------------
 */

var Timeline = /*#__PURE__*/function (_Animation) {
  _inheritsLoose(Timeline, _Animation);
  function Timeline(vars, position) {
    var _this;
    if (vars === void 0) {
      vars = {};
    }
    _this = _Animation.call(this, vars) || this;
    _this.labels = {};
    _this.smoothChildTiming = !!vars.smoothChildTiming;
    _this.autoRemoveChildren = !!vars.autoRemoveChildren;
    _this._sort = _isNotFalse(vars.sortChildren);
    _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
    vars.reversed && _this.reverse();
    vars.paused && _this.paused(true);
    vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
    return _this;
  }
  var _proto2 = Timeline.prototype;
  _proto2.to = function to(targets, vars, position) {
    _createTweenType(0, arguments, this);
    return this;
  };
  _proto2.from = function from(targets, vars, position) {
    _createTweenType(1, arguments, this);
    return this;
  };
  _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
    _createTweenType(2, arguments, this);
    return this;
  };
  _proto2.set = function set(targets, vars, position) {
    vars.duration = 0;
    vars.parent = this;
    _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
    vars.immediateRender = !!vars.immediateRender;
    new Tween(targets, vars, _parsePosition(this, position), 1);
    return this;
  };
  _proto2.call = function call(callback, params, position) {
    return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
  } //ONLY for backward compatibility! Maybe delete?
  ;
  _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.duration = duration;
    vars.stagger = vars.stagger || stagger;
    vars.onComplete = onCompleteAll;
    vars.onCompleteParams = onCompleteAllParams;
    vars.parent = this;
    new Tween(targets, vars, _parsePosition(this, position));
    return this;
  };
  _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
    vars.runBackwards = 1;
    _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
    return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
  };
  _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
    toVars.startAt = fromVars;
    _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
    return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
  };
  _proto2.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
      tDur = this._dirty ? this.totalDuration() : this._tDur,
      dur = this._dur,
      tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
      // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
      crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
      time,
      child,
      next,
      iteration,
      cycleDuration,
      prevPaused,
      pauseTween,
      timeScale,
      prevStart,
      prevIteration,
      yoyo,
      isYoyo;
    this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);
    if (tTime !== this._tTime || force || crossingStart) {
      if (prevTime !== this._time && dur) {
        //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
        tTime += this._time - prevTime;
        totalTime += this._time - prevTime;
      }
      time = tTime;
      prevStart = this._start;
      timeScale = this._ts;
      prevPaused = !timeScale;
      if (crossingStart) {
        dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

        (totalTime || !suppressEvents) && (this._zTime = totalTime);
      }
      if (this._repeat) {
        //adjust the time for repeats and yoyos
        yoyo = this._yoyo;
        cycleDuration = dur + this._rDelay;
        if (this._repeat < -1 && totalTime < 0) {
          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
        }
        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          iteration = ~~(tTime / cycleDuration);
          if (iteration && iteration === tTime / cycleDuration) {
            time = dur;
            iteration--;
          }
          time > dur && (time = dur);
        }
        prevIteration = _animationCycle(this._tTime, cycleDuration);
        !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://gsap.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the "repeatDelay" portion

        if (yoyo && iteration & 1) {
          time = dur - time;
          isYoyo = 1;
        }
        /*
        make sure children at the end/beginning of the timeline are rendered properly. If, for example,
        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
        ensure that zero-duration tweens at the very beginning or end of the Timeline work.
        */

        if (iteration !== prevIteration && !this._lock) {
          var rewinding = yoyo && prevIteration & 1,
            doesWrap = rewinding === (yoyo && iteration & 1);
          iteration < prevIteration && (rewinding = !rewinding);
          prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.

          this._lock = 1;
          this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
          this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.

          !suppressEvents && this.parent && _callback(this, "onRepeat");
          this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);
          if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
            // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
            return this;
          }
          dur = this._dur; // in case the duration changed in the onRepeat

          tDur = this._tDur;
          if (doesWrap) {
            this._lock = 2;
            prevTime = rewinding ? dur : -0.0001;
            this.render(prevTime, true);
            this.vars.repeatRefresh && !isYoyo && this.invalidate();
          }
          this._lock = 0;
          if (!this._ts && !prevPaused) {
            return this;
          } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.

          _propagateYoyoEase(this, isYoyo);
        }
      }
      if (this._hasPause && !this._forcing && this._lock < 2) {
        pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));
        if (pauseTween) {
          tTime -= time - (time = pauseTween._start);
        }
      }
      this._tTime = tTime;
      this._time = time;
      this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

      if (!this._initted) {
        this._onUpdate = this.vars.onUpdate;
        this._initted = 1;
        this._zTime = totalTime;
        prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
      }
      if (!prevTime && time && !suppressEvents && !iteration) {
        _callback(this, "onStart");
        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }
      if (time >= prevTime && totalTime >= 0) {
        child = this._first;
        while (child) {
          next = child._next;
          if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }
            child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);
            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }
          child = next;
        }
      } else {
        child = this._last;
        var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

        while (child) {
          next = child._prev;
          if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
            if (child.parent !== this) {
              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
              return this.render(totalTime, suppressEvents, force);
            }
            child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt)); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.

            if (time !== this._time || !this._ts && !prevPaused) {
              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
              pauseTween = 0;
              next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

              break;
            }
          }
          child = next;
        }
      }
      if (pauseTween && !suppressEvents) {
        this.pause();
        pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;
        if (this._ts) {
          //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
          this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

          _setEnd(this);
          return this.render(totalTime, suppressEvents, force);
        }
      }
      this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
      if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
        // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
          _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);
          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }
    return this;
  };
  _proto2.add = function add(child, position) {
    var _this2 = this;
    _isNumber(position) || (position = _parsePosition(this, position, child));
    if (!(child instanceof Animation)) {
      if (_isArray(child)) {
        child.forEach(function (obj) {
          return _this2.add(obj, position);
        });
        return this;
      }
      if (_isString(child)) {
        return this.addLabel(child, position);
      }
      if (_isFunction(child)) {
        child = Tween.delayedCall(0, child);
      } else {
        return this;
      }
    }
    return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
  };
  _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
    if (nested === void 0) {
      nested = true;
    }
    if (tweens === void 0) {
      tweens = true;
    }
    if (timelines === void 0) {
      timelines = true;
    }
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = -_bigNum;
    }
    var a = [],
      child = this._first;
    while (child) {
      if (child._start >= ignoreBeforeTime) {
        if (child instanceof Tween) {
          tweens && a.push(child);
        } else {
          timelines && a.push(child);
          nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
        }
      }
      child = child._next;
    }
    return a;
  };
  _proto2.getById = function getById(id) {
    var animations = this.getChildren(1, 1, 1),
      i = animations.length;
    while (i--) {
      if (animations[i].vars.id === id) {
        return animations[i];
      }
    }
  };
  _proto2.remove = function remove(child) {
    if (_isString(child)) {
      return this.removeLabel(child);
    }
    if (_isFunction(child)) {
      return this.killTweensOf(child);
    }
    _removeLinkedListItem(this, child);
    if (child === this._recent) {
      this._recent = this._last;
    }
    return _uncache(this);
  };
  _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
    if (!arguments.length) {
      return this._tTime;
    }
    this._forcing = 1;
    if (!this._dp && this._ts) {
      //special case for the global timeline (or any other that has no parent or detached parent).
      this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
    }
    _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);
    this._forcing = 0;
    return this;
  };
  _proto2.addLabel = function addLabel(label, position) {
    this.labels[label] = _parsePosition(this, position);
    return this;
  };
  _proto2.removeLabel = function removeLabel(label) {
    delete this.labels[label];
    return this;
  };
  _proto2.addPause = function addPause(position, callback, params) {
    var t = Tween.delayedCall(0, callback || _emptyFunc, params);
    t.data = "isPause";
    this._hasPause = 1;
    return _addToTimeline(this, t, _parsePosition(this, position));
  };
  _proto2.removePause = function removePause(position) {
    var child = this._first;
    position = _parsePosition(this, position);
    while (child) {
      if (child._start === position && child.data === "isPause") {
        _removeFromParent(child);
      }
      child = child._next;
    }
  };
  _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    var tweens = this.getTweensOf(targets, onlyActive),
      i = tweens.length;
    while (i--) {
      _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
    }
    return this;
  };
  _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
    var a = [],
      parsedTargets = toArray(targets),
      child = this._first,
      isGlobalTime = _isNumber(onlyActive),
      // a number is interpreted as a global time. If the animation spans
      children;
    while (child) {
      if (child instanceof Tween) {
        if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
          // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
          a.push(child);
        }
      } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
        a.push.apply(a, children);
      }
      child = child._next;
    }
    return a;
  } // potential future feature - targets() on timelines
  // targets() {
  // 	let result = [];
  // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
  // 	return result.filter((v, i) => result.indexOf(v) === i);
  // }
  ;
  _proto2.tweenTo = function tweenTo(position, vars) {
    vars = vars || {};
    var tl = this,
      endTime = _parsePosition(tl, position),
      _vars = vars,
      startAt = _vars.startAt,
      _onStart = _vars.onStart,
      onStartParams = _vars.onStartParams,
      immediateRender = _vars.immediateRender,
      initted,
      tween = Tween.to(tl, _setDefaults({
        ease: vars.ease || "none",
        lazy: false,
        immediateRender: false,
        time: endTime,
        overwrite: "auto",
        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
        onStart: function onStart() {
          tl.pause();
          if (!initted) {
            var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
            initted = 1;
          }
          _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
        }
      }, vars));
    return immediateRender ? tween.render(0) : tween;
  };
  _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
    return this.tweenTo(toPosition, _setDefaults({
      startAt: {
        time: _parsePosition(this, fromPosition)
      }
    }, vars));
  };
  _proto2.recent = function recent() {
    return this._recent;
  };
  _proto2.nextLabel = function nextLabel(afterTime) {
    if (afterTime === void 0) {
      afterTime = this._time;
    }
    return _getLabelInDirection(this, _parsePosition(this, afterTime));
  };
  _proto2.previousLabel = function previousLabel(beforeTime) {
    if (beforeTime === void 0) {
      beforeTime = this._time;
    }
    return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
  };
  _proto2.currentLabel = function currentLabel(value) {
    return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
  };
  _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
    if (ignoreBeforeTime === void 0) {
      ignoreBeforeTime = 0;
    }
    var child = this._first,
      labels = this.labels,
      p;
    while (child) {
      if (child._start >= ignoreBeforeTime) {
        child._start += amount;
        child._end += amount;
      }
      child = child._next;
    }
    if (adjustLabels) {
      for (p in labels) {
        if (labels[p] >= ignoreBeforeTime) {
          labels[p] += amount;
        }
      }
    }
    return _uncache(this);
  };
  _proto2.invalidate = function invalidate(soft) {
    var child = this._first;
    this._lock = 0;
    while (child) {
      child.invalidate(soft);
      child = child._next;
    }
    return _Animation.prototype.invalidate.call(this, soft);
  };
  _proto2.clear = function clear(includeLabels) {
    if (includeLabels === void 0) {
      includeLabels = true;
    }
    var child = this._first,
      next;
    while (child) {
      next = child._next;
      this.remove(child);
      child = next;
    }
    this._dp && (this._time = this._tTime = this._pTime = 0);
    includeLabels && (this.labels = {});
    return _uncache(this);
  };
  _proto2.totalDuration = function totalDuration(value) {
    var max = 0,
      self = this,
      child = self._last,
      prevStart = _bigNum,
      prev,
      start,
      parent;
    if (arguments.length) {
      return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
    }
    if (self._dirty) {
      parent = self.parent;
      while (child) {
        prev = child._prev; //record it here in case the tween changes position in the sequence...

        child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

        start = child._start;
        if (start > prevStart && self._sort && child._ts && !self._lock) {
          //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
          self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

          _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
        } else {
          prevStart = start;
        }
        if (start < 0 && child._ts) {
          //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
          max -= start;
          if (!parent && !self._dp || parent && parent.smoothChildTiming) {
            self._start += start / self._ts;
            self._time -= start;
            self._tTime -= start;
          }
          self.shiftChildren(-start, false, -1e999);
          prevStart = 0;
        }
        child._end > max && child._ts && (max = child._end);
        child = prev;
      }
      _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);
      self._dirty = 0;
    }
    return self._tDur;
  };
  Timeline.updateRoot = function updateRoot(time) {
    if (_globalTimeline._ts) {
      _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));
      _lastRenderedFrame = _ticker.frame;
    }
    if (_ticker.frame >= _nextGCFrame) {
      _nextGCFrame += _config.autoSleep || 120;
      var child = _globalTimeline._first;
      if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
        while (child && !child._ts) {
          child = child._next;
        }
        child || _ticker.sleep();
      }
    }
  };
  return Timeline;
}(Animation);
_setDefaults(Timeline.prototype, {
  _lock: 0,
  _hasPause: 0,
  _forcing: 0
});
var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
    //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
      index = 0,
      matchIndex = 0,
      result,
      startNums,
      color,
      endNum,
      chunk,
      startNum,
      hasRandom,
      a;
    pt.b = start;
    pt.e = end;
    start += ""; //ensure values are strings

    end += "";
    if (hasRandom = ~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }
    if (stringFilter) {
      a = [start, end];
      stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

      start = a[0];
      end = a[1];
    }
    startNums = start.match(_complexStringNumExp) || [];
    while (result = _complexStringNumExp.exec(end)) {
      endNum = result[0];
      chunk = end.substring(index, result.index);
      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(") {
        color = 1;
      }
      if (endNum !== startNums[matchIndex++]) {
        startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
          s: startNum,
          c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
          m: color && color < 4 ? Math.round : 0
        };
        index = _complexStringNumExp.lastIndex;
      }
    }
    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

    pt.fp = funcParam;
    if (_relExp.test(end) || hasRandom) {
      pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
    }
    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

    return pt;
  },
  _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
    _isFunction(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop],
      parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
      setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
      pt;
    if (_isString(end)) {
      if (~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }
      if (end.charAt(1) === "=") {
        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);
        if (pt || pt === 0) {
          // to avoid isNaN, like if someone passes in a value like "!= whatever"
          end = pt;
        }
      }
    }
    if (!optional || parsedStart !== end || _forceAllPropTweens) {
      if (!isNaN(parsedStart * end) && end !== "") {
        // fun fact: any number multiplied by "" is evaluated as the number 0!
        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
        funcParam && (pt.fp = funcParam);
        modifier && pt.modifier(modifier, this, target);
        return this._pt = pt;
      }
      !currentValue && !(prop in target) && _missingPlugin(prop, end);
      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
    }
  },
  //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
  _processVars = function _processVars(vars, index, target, targets, tween) {
    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));
    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
    }
    var copy = {},
      p;
    for (p in vars) {
      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
    }
    return copy;
  },
  _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
    var plugin, pt, ptLookup, i;
    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);
      if (tween !== _quickTween) {
        ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

        i = plugin._props.length;
        while (i--) {
          ptLookup[plugin._props[i]] = pt;
        }
      }
    }
    return plugin;
  },
  _overwritingTween,
  //store a reference temporarily so we can avoid overwriting itself.
  _forceAllPropTweens,
  _initTween = function _initTween(tween, time, tTime) {
    var vars = tween.vars,
      ease = vars.ease,
      startAt = vars.startAt,
      immediateRender = vars.immediateRender,
      lazy = vars.lazy,
      onUpdate = vars.onUpdate,
      runBackwards = vars.runBackwards,
      yoyoEase = vars.yoyoEase,
      keyframes = vars.keyframes,
      autoRevert = vars.autoRevert,
      dur = tween._dur,
      prevStartAt = tween._startAt,
      targets = tween._targets,
      parent = tween.parent,
      fullTargets = parent && parent.data === "nested" ? parent.vars.targets : targets,
      autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
      tl = tween.timeline,
      cleanVars,
      i,
      p,
      pt,
      target,
      hasPriority,
      gsData,
      harness,
      plugin,
      ptLookup,
      index,
      harnessVars,
      overwritten;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = _parseEase(ease, _defaults.ease);
    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;
    if (yoyoEase && tween._yoyo && !tween._repeat) {
      //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
      yoyoEase = tween._yEase;
      tween._yEase = tween._ease;
      tween._ease = yoyoEase;
    }
    tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

    if (!tl || keyframes && !vars.stagger) {
      //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
      harness = targets[0] ? _getCache(targets[0]).harness : 0;
      harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

      cleanVars = _copyExcluding(vars, _reservedProps);
      if (prevStartAt) {
        prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.

        time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
        // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.

        prevStartAt._lazy = 0;
      }
      if (startAt) {
        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
          data: "isStart",
          overwrite: false,
          parent: parent,
          immediateRender: true,
          lazy: !prevStartAt && _isNotFalse(lazy),
          startAt: null,
          delay: 0,
          onUpdate: onUpdate && function () {
            return _callback(tween, "onUpdate");
          },
          stagger: 0
        }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);

        tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.

        tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween

        time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.

        if (immediateRender) {
          if (dur && time <= 0 && tTime <= 0) {
            // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
            time && (tween._zTime = time);
            return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
          }
        }
      } else if (runBackwards && dur) {
        //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
        if (!prevStartAt) {
          time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

          p = _setDefaults({
            overwrite: false,
            data: "isFromStart",
            //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
            lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
            immediateRender: immediateRender,
            //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
            stagger: 0,
            parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})
          }, cleanVars);
          harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

          _removeFromParent(tween._startAt = Tween.set(targets, p));
          tween._startAt._dp = 0; // don't allow it to get put back into root timeline!

          tween._startAt._sat = tween; // used in globalTime()

          time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
          tween._zTime = time;
          if (!immediateRender) {
            _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded
          } else if (!time) {
            return;
          }
        }
      }
      tween._pt = tween._ptCache = 0;
      lazy = dur && _isNotFalse(lazy) || lazy && !dur;
      for (i = 0; i < targets.length; i++) {
        target = targets[i];
        gsData = target._gsap || _harness(targets)[i]._gsap;
        tween._ptLookup[i] = ptLookup = {};
        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

        index = fullTargets === targets ? i : fullTargets.indexOf(target);
        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);
          plugin._props.forEach(function (name) {
            ptLookup[name] = pt;
          });
          plugin.priority && (hasPriority = 1);
        }
        if (!harness || harnessVars) {
          for (p in cleanVars) {
            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
              plugin.priority && (hasPriority = 1);
            } else {
              ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
            }
          }
        }
        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);
        if (autoOverwrite && tween._pt) {
          _overwritingTween = tween;
          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!

          overwritten = !tween.parent;
          _overwritingTween = 0;
        }
        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
      }
      hasPriority && _sortPropTweensByPriority(tween);
      tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
    }
    tween._onUpdate = onUpdate;
    tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.

    keyframes && time <= 0 && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
  },
  _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time, skipRecursion) {
    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],
      pt,
      rootPT,
      lookup,
      i;
    if (!ptCache) {
      ptCache = tween._ptCache[property] = [];
      lookup = tween._ptLookup;
      i = tween._targets.length;
      while (i--) {
        pt = lookup[i][property];
        if (pt && pt.d && pt.d._pt) {
          // it's a plugin, so find the nested PropTween
          pt = pt.d._pt;
          while (pt && pt.p !== property && pt.fp !== property) {
            // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
            pt = pt._next;
          }
        }
        if (!pt) {
          // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
          // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
          _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.

          tween.vars[property] = "+=0";
          _initTween(tween, time);
          _forceAllPropTweens = 0;
          return skipRecursion ? _warn(property + " not eligible for reset") : 1; // if someone tries to do a quickTo() on a special property like borderRadius which must get split into 4 different properties, that's not eligible for .resetTo().
        }
        ptCache.push(pt);
      }
    }
    i = ptCache.length;
    while (i--) {
      rootPT = ptCache[i];
      pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.

      pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
      pt.c = value - pt.s;
      rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)

      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)
    }
  },
  _addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? _getCache(targets[0]).harness : 0,
      propertyAliases = harness && harness.aliases,
      copy,
      p,
      i,
      aliases;
    if (!propertyAliases) {
      return vars;
    }
    copy = _merge({}, vars);
    for (p in propertyAliases) {
      if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;
        while (i--) {
          copy[aliases[i]] = copy[p];
        }
      }
    }
    return copy;
  },
  // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
  _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
    var ease = obj.ease || easeEach || "power1.inOut",
      p,
      a;
    if (_isArray(obj)) {
      a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease

      obj.forEach(function (value, i) {
        return a.push({
          t: i / (obj.length - 1) * 100,
          v: value,
          e: ease
        });
      });
    } else {
      for (p in obj) {
        a = allProps[p] || (allProps[p] = []);
        p === "ease" || a.push({
          t: parseFloat(prop),
          v: obj[p],
          e: ease
        });
      }
    }
  },
  _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
  },
  _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
  _staggerPropsToSkip = {};
_forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
  return _staggerPropsToSkip[name] = 1;
});
/*
 * --------------------------------------------------------------------------------------
 * TWEEN
 * --------------------------------------------------------------------------------------
 */

var Tween = /*#__PURE__*/function (_Animation2) {
  _inheritsLoose(Tween, _Animation2);
  function Tween(targets, vars, position, skipInherit) {
    var _this3;
    if (typeof vars === "number") {
      position.duration = vars;
      vars = position;
      position = null;
    }
    _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
    var _this3$vars = _this3.vars,
      duration = _this3$vars.duration,
      delay = _this3$vars.delay,
      immediateRender = _this3$vars.immediateRender,
      stagger = _this3$vars.stagger,
      overwrite = _this3$vars.overwrite,
      keyframes = _this3$vars.keyframes,
      defaults = _this3$vars.defaults,
      scrollTrigger = _this3$vars.scrollTrigger,
      yoyoEase = _this3$vars.yoyoEase,
      parent = vars.parent || _globalTimeline,
      parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
      tl,
      i,
      copy,
      l,
      p,
      curTarget,
      staggerFunc,
      staggerVarsToMerge;
    _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://gsap.com", !_config.nullTargetWarn) || [];
    _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

    _this3._overwrite = overwrite;
    if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
      vars = _this3.vars;
      tl = _this3.timeline = new Timeline({
        data: "nested",
        defaults: defaults || {},
        targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets
      }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.

      tl.kill();
      tl.parent = tl._dp = _assertThisInitialized(_this3);
      tl._start = 0;
      if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        l = parsedTargets.length;
        staggerFunc = stagger && distribute(stagger);
        if (_isObject(stagger)) {
          //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
          for (p in stagger) {
            if (~_staggerTweenProps.indexOf(p)) {
              staggerVarsToMerge || (staggerVarsToMerge = {});
              staggerVarsToMerge[p] = stagger[p];
            }
          }
        }
        for (i = 0; i < l; i++) {
          copy = _copyExcluding(vars, _staggerPropsToSkip);
          copy.stagger = 0;
          yoyoEase && (copy.yoyoEase = yoyoEase);
          staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
          curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

          copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
          copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;
          if (!stagger && l === 1 && copy.delay) {
            // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
            _this3._delay = delay = copy.delay;
            _this3._start += delay;
            copy.delay = 0;
          }
          tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
          tl._ease = _easeMap.none;
        }
        tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
      } else if (keyframes) {
        _inheritDefaults(_setDefaults(tl.vars.defaults, {
          ease: "none"
        }));
        tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
        var time = 0,
          a,
          kf,
          v;
        if (_isArray(keyframes)) {
          keyframes.forEach(function (frame) {
            return tl.to(parsedTargets, frame, ">");
          });
          tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
        } else {
          copy = {};
          for (p in keyframes) {
            p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
          }
          for (p in copy) {
            a = copy[p].sort(function (a, b) {
              return a.t - b.t;
            });
            time = 0;
            for (i = 0; i < a.length; i++) {
              kf = a[i];
              v = {
                ease: kf.e,
                duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
              };
              v[p] = kf.v;
              tl.to(parsedTargets, v, time);
              time += v.duration;
            }
          }
          tl.duration() < duration && tl.to({}, {
            duration: duration - tl.duration()
          }); // in case keyframes didn't go to 100%
        }
      }
      duration || _this3.duration(duration = tl.duration());
    } else {
      _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
    }
    if (overwrite === true && !_suppressOverwrites) {
      _overwritingTween = _assertThisInitialized(_this3);
      _globalTimeline.killTweensOf(parsedTargets);
      _overwritingTween = 0;
    }
    _addToTimeline(parent, _assertThisInitialized(_this3), position);
    vars.reversed && _this3.reverse();
    vars.paused && _this3.paused(true);
    if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
      _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

      _this3.render(Math.max(0, -delay) || 0); //in case delay is negative
    }
    scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
    return _this3;
  }
  var _proto3 = Tween.prototype;
  _proto3.render = function render(totalTime, suppressEvents, force) {
    var prevTime = this._time,
      tDur = this._tDur,
      dur = this._dur,
      isNegative = totalTime < 0,
      tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,
      time,
      pt,
      iteration,
      cycleDuration,
      prevIteration,
      isYoyo,
      ratio,
      timeline,
      yoyoEase;
    if (!dur) {
      _renderZeroDurationTween(this, totalTime, suppressEvents, force);
    } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {
      //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
      time = tTime;
      timeline = this.timeline;
      if (this._repeat) {
        //adjust the time for repeats and yoyos
        cycleDuration = dur + this._rDelay;
        if (this._repeat < -1 && isNegative) {
          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
        }
        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

        if (tTime === tDur) {
          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
          iteration = this._repeat;
          time = dur;
        } else {
          iteration = ~~(tTime / cycleDuration);
          if (iteration && iteration === _roundPrecise(tTime / cycleDuration)) {
            time = dur;
            iteration--;
          }
          time > dur && (time = dur);
        }
        isYoyo = this._yoyo && iteration & 1;
        if (isYoyo) {
          yoyoEase = this._yEase;
          time = dur - time;
        }
        prevIteration = _animationCycle(this._tTime, cycleDuration);
        if (time === prevTime && !force && this._initted && iteration === prevIteration) {
          //could be during the repeatDelay part. No need to render and fire callbacks.
          this._tTime = tTime;
          return this;
        }
        if (iteration !== prevIteration) {
          timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

          if (this.vars.repeatRefresh && !isYoyo && !this._lock && this._time !== cycleDuration && this._initted) {
            // this._time will === cycleDuration when we render at EXACTLY the end of an iteration. Without this condition, it'd often do the repeatRefresh render TWICE (again on the very next tick).
            this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

            this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
          }
        }
      }
      if (!this._initted) {
        if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
          this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

          return this;
        }
        if (prevTime !== this._time && !(force && this.vars.repeatRefresh && iteration !== prevIteration)) {
          // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values. But we also don't want to dump if we're doing a repeatRefresh render!
          return this;
        }
        if (dur !== this._dur) {
          // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
          return this.render(totalTime, suppressEvents, force);
        }
      }
      this._tTime = tTime;
      this._time = time;
      if (!this._act && this._ts) {
        this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

        this._lazy = 0;
      }
      this.ratio = ratio = (yoyoEase || this._ease)(time / dur);
      if (this._from) {
        this.ratio = ratio = 1 - ratio;
      }
      if (time && !prevTime && !suppressEvents && !iteration) {
        _callback(this, "onStart");
        if (this._tTime !== tTime) {
          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
          return this;
        }
      }
      pt = this._pt;
      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
      timeline && timeline.render(totalTime < 0 ? totalTime : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);
      if (this._onUpdate && !suppressEvents) {
        isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

        _callback(this, "onUpdate");
      }
      this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");
      if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
        isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
        (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

        if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {
          // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
          _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);
          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
        }
      }
    }
    return this;
  };
  _proto3.targets = function targets() {
    return this._targets;
  };
  _proto3.invalidate = function invalidate(soft) {
    // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
    (!soft || !this.vars.runBackwards) && (this._startAt = 0);
    this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
    this._ptLookup = [];
    this.timeline && this.timeline.invalidate(soft);
    return _Animation2.prototype.invalidate.call(this, soft);
  };
  _proto3.resetTo = function resetTo(property, value, start, startIsRelative, skipRecursion) {
    _tickerActive || _ticker.wake();
    this._ts || this.play();
    var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
      ratio;
    this._initted || _initTween(this, time);
    ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
    // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
    // if (_isObject(property)) { // performance optimization
    // 	for (p in property) {
    // 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
    // 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    // 		}
    // 	}
    // } else {

    if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time, skipRecursion)) {
      return this.resetTo(property, value, start, startIsRelative, 1); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
    } //}

    _alignPlayhead(this, 0);
    this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
    return this.render(0);
  };
  _proto3.kill = function kill(targets, vars) {
    if (vars === void 0) {
      vars = "all";
    }
    if (!targets && (!vars || vars === "all")) {
      this._lazy = this._pt = 0;
      return this.parent ? _interrupt(this) : this;
    }
    if (this.timeline) {
      var tDur = this.timeline.totalDuration();
      this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.

      this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

      return this;
    }
    var parsedTargets = this._targets,
      killingTargets = targets ? toArray(targets) : parsedTargets,
      propTweenLookup = this._ptLookup,
      firstPT = this._pt,
      overwrittenProps,
      curLookup,
      curOverwriteProps,
      props,
      p,
      pt,
      i;
    if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
      vars === "all" && (this._pt = 0);
      return _interrupt(this);
    }
    overwrittenProps = this._op = this._op || [];
    if (vars !== "all") {
      //so people can pass in a comma-delimited list of property names
      if (_isString(vars)) {
        p = {};
        _forEachName(vars, function (name) {
          return p[name] = 1;
        });
        vars = p;
      }
      vars = _addAliasesToVars(parsedTargets, vars);
    }
    i = parsedTargets.length;
    while (i--) {
      if (~killingTargets.indexOf(parsedTargets[i])) {
        curLookup = propTweenLookup[i];
        if (vars === "all") {
          overwrittenProps[i] = vars;
          props = curLookup;
          curOverwriteProps = {};
        } else {
          curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
          props = vars;
        }
        for (p in props) {
          pt = curLookup && curLookup[p];
          if (pt) {
            if (!("kill" in pt.d) || pt.d.kill(p) === true) {
              _removeLinkedListItem(this, pt, "_pt");
            }
            delete curLookup[p];
          }
          if (curOverwriteProps !== "all") {
            curOverwriteProps[p] = 1;
          }
        }
      }
    }
    this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

    return this;
  };
  Tween.to = function to(targets, vars) {
    return new Tween(targets, vars, arguments[2]);
  };
  Tween.from = function from(targets, vars) {
    return _createTweenType(1, arguments);
  };
  Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
    return new Tween(callback, 0, {
      immediateRender: false,
      lazy: false,
      overwrite: false,
      delay: delay,
      onComplete: callback,
      onReverseComplete: callback,
      onCompleteParams: params,
      onReverseCompleteParams: params,
      callbackScope: scope
    }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
  };
  Tween.fromTo = function fromTo(targets, fromVars, toVars) {
    return _createTweenType(2, arguments);
  };
  Tween.set = function set(targets, vars) {
    vars.duration = 0;
    vars.repeatDelay || (vars.repeat = 0);
    return new Tween(targets, vars);
  };
  Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
    return _globalTimeline.killTweensOf(targets, props, onlyActive);
  };
  return Tween;
}(Animation);
_setDefaults(Tween.prototype, {
  _targets: [],
  _lazy: 0,
  _startAt: 0,
  _op: 0,
  _onInit: 0
}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
// 	Tween.prototype[name] = function() {
// 		let tl = new Timeline();
// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
// 	}
// });
//for backward compatibility. Leverage the timeline calls.

_forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
  Tween[name] = function () {
    var tl = new Timeline(),
      params = _slice.call(arguments, 0);
    params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
    return tl[name].apply(tl, params);
  };
});
/*
 * --------------------------------------------------------------------------------------
 * PROPTWEEN
 * --------------------------------------------------------------------------------------
 */

var _setterPlain = function _setterPlain(target, property, value) {
    return target[property] = value;
  },
  _setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
  },
  _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
    return target[property](data.fp, value);
  },
  _setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
  },
  _getSetter = function _getSetter(target, property) {
    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
  },
  _renderPlain = function _renderPlain(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
  },
  _renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
  },
  _renderComplexString = function _renderComplexString(ratio, data) {
    var pt = data._pt,
      s = "";
    if (!ratio && data.b) {
      //b = beginning string
      s = data.b;
    } else if (ratio === 1 && data.e) {
      //e = ending string
      s = data.e;
    } else {
      while (pt) {
        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

        pt = pt._next;
      }
      s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
    }
    data.set(data.t, data.p, s, data);
  },
  _renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;
    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }
  },
  _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
    var pt = this._pt,
      next;
    while (pt) {
      next = pt._next;
      pt.p === property && pt.modifier(modifier, tween, target);
      pt = next;
    }
  },
  _killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt,
      hasNonDependentRemaining,
      next;
    while (pt) {
      next = pt._next;
      if (pt.p === property && !pt.op || pt.op === property) {
        _removeLinkedListItem(this, pt, "_pt");
      } else if (!pt.dep) {
        hasNonDependentRemaining = 1;
      }
      pt = next;
    }
    return !hasNonDependentRemaining;
  },
  _setterWithModifier = function _setterWithModifier(target, property, value, data) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
  },
  _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
    var pt = parent._pt,
      next,
      pt2,
      first,
      last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

    while (pt) {
      next = pt._next;
      pt2 = first;
      while (pt2 && pt2.pr > pt.pr) {
        pt2 = pt2._next;
      }
      if (pt._prev = pt2 ? pt2._prev : last) {
        pt._prev._next = pt;
      } else {
        first = pt;
      }
      if (pt._next = pt2) {
        pt2._prev = pt;
      } else {
        last = pt;
      }
      pt = next;
    }
    parent._pt = first;
  }; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)

var PropTween = /*#__PURE__*/function () {
  function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
    this.t = target;
    this.s = start;
    this.c = change;
    this.p = prop;
    this.r = renderer || _renderPlain;
    this.d = data || this;
    this.set = setter || _setterPlain;
    this.pr = priority || 0;
    this._next = next;
    if (next) {
      next._prev = this;
    }
  }
  var _proto4 = PropTween.prototype;
  _proto4.modifier = function modifier(func, tween, target) {
    this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

    this.set = _setterWithModifier;
    this.m = func;
    this.mt = target; //modifier target

    this.tween = tween;
  };
  return PropTween;
}(); //Initialization tasks

_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
  return _reservedProps[name] = 1;
});
_globals.TweenMax = _globals.TweenLite = Tween;
_globals.TimelineLite = _globals.TimelineMax = Timeline;
_globalTimeline = new Timeline({
  sortChildren: false,
  defaults: _defaults,
  autoRemoveChildren: true,
  id: "root",
  smoothChildTiming: true
});
_config.stringFilter = _colorStringFilter;
var _media = [],
  _listeners = {},
  _emptyArray = [],
  _lastMediaTime = 0,
  _contextID = 0,
  _dispatch = function _dispatch(type) {
    return (_listeners[type] || _emptyArray).map(function (f) {
      return f();
    });
  },
  _onMediaChange = function _onMediaChange() {
    var time = Date.now(),
      matches = [];
    if (time - _lastMediaTime > 2) {
      _dispatch("matchMediaInit");
      _media.forEach(function (c) {
        var queries = c.queries,
          conditions = c.conditions,
          match,
          p,
          anyMatch,
          toggled;
        for (p in queries) {
          match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.

          match && (anyMatch = 1);
          if (match !== conditions[p]) {
            conditions[p] = match;
            toggled = 1;
          }
        }
        if (toggled) {
          c.revert();
          anyMatch && matches.push(c);
        }
      });
      _dispatch("matchMediaRevert");
      matches.forEach(function (c) {
        return c.onMatch(c, function (func) {
          return c.add(null, func);
        });
      });
      _lastMediaTime = time;
      _dispatch("matchMedia");
    }
  };
var Context = /*#__PURE__*/function () {
  function Context(func, scope) {
    this.selector = scope && selector(scope);
    this.data = [];
    this._r = []; // returned/cleanup functions

    this.isReverted = false;
    this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because "this" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely

    func && this.add(func);
  }
  var _proto5 = Context.prototype;
  _proto5.add = function add(name, func, scope) {
    // possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.
    // if (name && _isFunction(name.revert)) {
    // 	this.data.push(name);
    // 	return (name._ctx = this);
    // }
    if (_isFunction(name)) {
      scope = func;
      func = name;
      name = _isFunction;
    }
    var self = this,
      f = function f() {
        var prev = _context,
          prevSelector = self.selector,
          result;
        prev && prev !== self && prev.data.push(self);
        scope && (self.selector = selector(scope));
        _context = self;
        result = func.apply(self, arguments);
        _isFunction(result) && self._r.push(result);
        _context = prev;
        self.selector = prevSelector;
        self.isReverted = false;
        return result;
      };
    self.last = f;
    return name === _isFunction ? f(self, function (func) {
      return self.add(null, func);
    }) : name ? self[name] = f : f;
  };
  _proto5.ignore = function ignore(func) {
    var prev = _context;
    _context = null;
    func(this);
    _context = prev;
  };
  _proto5.getTweens = function getTweens() {
    var a = [];
    this.data.forEach(function (e) {
      return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === "nested") && a.push(e);
    });
    return a;
  };
  _proto5.clear = function clear() {
    this._r.length = this.data.length = 0;
  };
  _proto5.kill = function kill(revert, matchMedia) {
    var _this4 = this;
    if (revert) {
      (function () {
        var tweens = _this4.getTweens(),
          i = _this4.data.length,
          t;
        while (i--) {
          // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
          t = _this4.data[i];
          if (t.data === "isFlip") {
            t.revert();
            t.getChildren(true, true, false).forEach(function (tween) {
              return tweens.splice(tweens.indexOf(tween), 1);
            });
          }
        } // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort

        tweens.map(function (t) {
          return {
            g: t._dur || t._delay || t._sat && !t._sat.vars.immediateRender ? t.globalTime(0) : -Infinity,
            t: t
          };
        }).sort(function (a, b) {
          return b.g - a.g || -Infinity;
        }).forEach(function (o) {
          return o.t.revert(revert);
        }); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.

        i = _this4.data.length;
        while (i--) {
          // make sure we loop backwards so that, for example, SplitTexts that were created later on the same element get reverted first
          t = _this4.data[i];
          if (t instanceof Timeline) {
            if (t.data !== "nested") {
              t.scrollTrigger && t.scrollTrigger.revert();
              t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens
            }
          } else {
            !(t instanceof Tween) && t.revert && t.revert(revert);
          }
        }
        _this4._r.forEach(function (f) {
          return f(revert, _this4);
        });
        _this4.isReverted = true;
      })();
    } else {
      this.data.forEach(function (e) {
        return e.kill && e.kill();
      });
    }
    this.clear();
    if (matchMedia) {
      var i = _media.length;
      while (i--) {
        // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.
        _media[i].id === this.id && _media.splice(i, 1);
      }
    }
  };
  _proto5.revert = function revert(config) {
    this.kill(config || {});
  };
  return Context;
}();
var MatchMedia = /*#__PURE__*/function () {
  function MatchMedia(scope) {
    this.contexts = [];
    this.scope = scope;
    _context && _context.data.push(this);
  }
  var _proto6 = MatchMedia.prototype;
  _proto6.add = function add(conditions, func, scope) {
    _isObject(conditions) || (conditions = {
      matches: conditions
    });
    var context = new Context(0, scope || this.scope),
      cond = context.conditions = {},
      mq,
      p,
      active;
    _context && !context.selector && (context.selector = _context.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()

    this.contexts.push(context);
    func = context.add("onMatch", func);
    context.queries = conditions;
    for (p in conditions) {
      if (p === "all") {
        active = 1;
      } else {
        mq = _win.matchMedia(conditions[p]);
        if (mq) {
          _media.indexOf(context) < 0 && _media.push(context);
          (cond[p] = mq.matches) && (active = 1);
          mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
        }
      }
    }
    active && func(context, function (f) {
      return context.add(null, f);
    });
    return this;
  } // refresh() {
  // 	let time = _lastMediaTime,
  // 		media = _media;
  // 	_lastMediaTime = -1;
  // 	_media = this.contexts;
  // 	_onMediaChange();
  // 	_lastMediaTime = time;
  // 	_media = media;
  // }
  ;
  _proto6.revert = function revert(config) {
    this.kill(config || {});
  };
  _proto6.kill = function kill(revert) {
    this.contexts.forEach(function (c) {
      return c.kill(revert, true);
    });
  };
  return MatchMedia;
}();
/*
 * --------------------------------------------------------------------------------------
 * GSAP
 * --------------------------------------------------------------------------------------
 */

var _gsap = {
  registerPlugin: function registerPlugin() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    args.forEach(function (config) {
      return _createPlugin(config);
    });
  },
  timeline: function timeline(vars) {
    return new Timeline(vars);
  },
  getTweensOf: function getTweensOf(targets, onlyActive) {
    return _globalTimeline.getTweensOf(targets, onlyActive);
  },
  getProperty: function getProperty(target, property, unit, uncache) {
    _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

    var getter = _getCache(target || {}).get,
      format = unit ? _passThrough : _numericIfPossible;
    unit === "native" && (unit = "");
    return !target ? target : !property ? function (property, unit, uncache) {
      return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
  },
  quickSetter: function quickSetter(target, property, unit) {
    target = toArray(target);
    if (target.length > 1) {
      var setters = target.map(function (t) {
          return gsap.quickSetter(t, property, unit);
        }),
        l = setters.length;
      return function (value) {
        var i = l;
        while (i--) {
          setters[i](value);
        }
      };
    }
    target = target[0] || {};
    var Plugin = _plugins[property],
      cache = _getCache(target),
      p = cache.harness && (cache.harness.aliases || {})[property] || property,
      // in case it's an alias, like "rotate" for "rotation".
      setter = Plugin ? function (value) {
        var p = new Plugin();
        _quickTween._pt = 0;
        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
        p.render(1, p);
        _quickTween._pt && _renderPropTweens(1, _quickTween);
      } : cache.set(target, p);
    return Plugin ? setter : function (value) {
      return setter(target, p, unit ? value + unit : value, cache, 1);
    };
  },
  quickTo: function quickTo(target, property, vars) {
    var _merge2;
    var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = "+=0.1", _merge2.paused = true, _merge2), vars || {})),
      func = function func(value, start, startIsRelative) {
        return tween.resetTo(property, value, start, startIsRelative);
      };
    func.tween = tween;
    return func;
  },
  isTweening: function isTweening(targets) {
    return _globalTimeline.getTweensOf(targets, true).length > 0;
  },
  defaults: function defaults(value) {
    value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
    return _mergeDeep(_defaults, value || {});
  },
  config: function config(value) {
    return _mergeDeep(_config, value || {});
  },
  registerEffect: function registerEffect(_ref3) {
    var name = _ref3.name,
      effect = _ref3.effect,
      plugins = _ref3.plugins,
      defaults = _ref3.defaults,
      extendTimeline = _ref3.extendTimeline;
    (plugins || "").split(",").forEach(function (pluginName) {
      return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
    });
    _effects[name] = function (targets, vars, tl) {
      return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
    };
    if (extendTimeline) {
      Timeline.prototype[name] = function (targets, vars, position) {
        return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
      };
    }
  },
  registerEase: function registerEase(name, ease) {
    _easeMap[name] = _parseEase(ease);
  },
  parseEase: function parseEase(ease, defaultEase) {
    return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
  },
  getById: function getById(id) {
    return _globalTimeline.getById(id);
  },
  exportRoot: function exportRoot(vars, includeDelayedCalls) {
    if (vars === void 0) {
      vars = {};
    }
    var tl = new Timeline(vars),
      child,
      next;
    tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);
    _globalTimeline.remove(tl);
    tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

    tl._time = tl._tTime = _globalTimeline._time;
    child = _globalTimeline._first;
    while (child) {
      next = child._next;
      if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
        _addToTimeline(tl, child, child._start - child._delay);
      }
      child = next;
    }
    _addToTimeline(_globalTimeline, tl, 0);
    return tl;
  },
  context: function context(func, scope) {
    return func ? new Context(func, scope) : _context;
  },
  matchMedia: function matchMedia(scope) {
    return new MatchMedia(scope);
  },
  matchMediaRefresh: function matchMediaRefresh() {
    return _media.forEach(function (c) {
      var cond = c.conditions,
        found,
        p;
      for (p in cond) {
        if (cond[p]) {
          cond[p] = false;
          found = 1;
        }
      }
      found && c.revert();
    }) || _onMediaChange();
  },
  addEventListener: function addEventListener(type, callback) {
    var a = _listeners[type] || (_listeners[type] = []);
    ~a.indexOf(callback) || a.push(callback);
  },
  removeEventListener: function removeEventListener(type, callback) {
    var a = _listeners[type],
      i = a && a.indexOf(callback);
    i >= 0 && a.splice(i, 1);
  },
  utils: {
    wrap: wrap,
    wrapYoyo: wrapYoyo,
    distribute: distribute,
    random: random,
    snap: snap,
    normalize: normalize,
    getUnit: getUnit,
    clamp: clamp,
    splitColor: splitColor,
    toArray: toArray,
    selector: selector,
    mapRange: mapRange,
    pipe: pipe,
    unitize: unitize,
    interpolate: interpolate,
    shuffle: shuffle
  },
  install: _install,
  effects: _effects,
  ticker: _ticker,
  updateRoot: Timeline.updateRoot,
  plugins: _plugins,
  globalTimeline: _globalTimeline,
  core: {
    PropTween: PropTween,
    globals: _addGlobal,
    Tween: Tween,
    Timeline: Timeline,
    Animation: Animation,
    getCache: _getCache,
    _removeLinkedListItem: _removeLinkedListItem,
    reverting: function reverting() {
      return _reverting;
    },
    context: function context(toAdd) {
      if (toAdd && _context) {
        _context.data.push(toAdd);
        toAdd._ctx = _context;
      }
      return _context;
    },
    suppressOverwrites: function suppressOverwrites(value) {
      return _suppressOverwrites = value;
    }
  }
};
_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
  return _gsap[name] = Tween[name];
});
_ticker.add(Timeline.updateRoot);
_quickTween = _gsap.to({}, {
  duration: 0
}); // ---- EXTRA PLUGINS --------------------------------------------------------

var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;
    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
      pt = pt._next;
    }
    return pt;
  },
  _addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets,
      p,
      i,
      pt;
    for (p in modifiers) {
      i = targets.length;
      while (i--) {
        pt = tween._ptLookup[i][p];
        if (pt && (pt = pt.d)) {
          if (pt._pt) {
            // is a plugin
            pt = _getPluginPropTween(pt, p);
          }
          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
        }
      }
    }
  },
  _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
      name: name,
      rawVars: 1,
      //don't pre-process function-based values or "random()" strings.
      init: function init(target, vars, tween) {
        tween._onInit = function (tween) {
          var temp, p;
          if (_isString(vars)) {
            temp = {};
            _forEachName(vars, function (name) {
              return temp[name] = 1;
            }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.

            vars = temp;
          }
          if (modifier) {
            temp = {};
            for (p in vars) {
              temp[p] = modifier(vars[p]);
            }
            vars = temp;
          }
          _addModifiers(tween, vars);
        };
      }
    };
  }; //register core plugins

var gsap = _gsap.registerPlugin({
  name: "attr",
  init: function init(target, vars, tween, index, targets) {
    var p, pt, v;
    this.tween = tween;
    for (p in vars) {
      v = target.getAttribute(p) || "";
      pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
      pt.op = p;
      pt.b = v; // record the beginning value so we can revert()

      this._props.push(p);
    }
  },
  render: function render(ratio, data) {
    var pt = data._pt;
    while (pt) {
      _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)

      pt = pt._next;
    }
  }
}, {
  name: "endArray",
  init: function init(target, value) {
    var i = value.length;
    while (i--) {
      this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
    }
  }
}, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

Tween.version = Timeline.version = gsap.version = "3.12.5";
_coreReady = 1;
_windowExists() && _wake();
var Power0 = _easeMap.Power0,
  Power1 = _easeMap.Power1,
  Power2 = _easeMap.Power2,
  Power3 = _easeMap.Power3,
  Power4 = _easeMap.Power4,
  Linear = _easeMap.Linear,
  Quad = _easeMap.Quad,
  Cubic = _easeMap.Cubic,
  Quart = _easeMap.Quart,
  Quint = _easeMap.Quint,
  Strong = _easeMap.Strong,
  Elastic = _easeMap.Elastic,
  Back = _easeMap.Back,
  SteppedEase = _easeMap.SteppedEase,
  Bounce = _easeMap.Bounce,
  Sine = _easeMap.Sine,
  Expo = _easeMap.Expo,
  Circ = _easeMap.Circ;

 //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.



/***/ }),

/***/ "./node_modules/gsap/index.js":
/*!************************************!*\
  !*** ./node_modules/gsap/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Back: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Back),
/* harmony export */   Bounce: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Bounce),
/* harmony export */   CSSPlugin: () => (/* reexport safe */ _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin),
/* harmony export */   Circ: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Circ),
/* harmony export */   Cubic: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Cubic),
/* harmony export */   Elastic: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Elastic),
/* harmony export */   Expo: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Expo),
/* harmony export */   Linear: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Linear),
/* harmony export */   Power0: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power0),
/* harmony export */   Power1: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power1),
/* harmony export */   Power2: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power2),
/* harmony export */   Power3: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power3),
/* harmony export */   Power4: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power4),
/* harmony export */   Quad: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quad),
/* harmony export */   Quart: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quart),
/* harmony export */   Quint: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quint),
/* harmony export */   Sine: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Sine),
/* harmony export */   SteppedEase: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.SteppedEase),
/* harmony export */   Strong: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Strong),
/* harmony export */   TimelineLite: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineLite),
/* harmony export */   TimelineMax: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineMax),
/* harmony export */   TweenLite: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TweenLite),
/* harmony export */   TweenMax: () => (/* binding */ TweenMaxWithCSS),
/* harmony export */   "default": () => (/* binding */ gsapWithCSS),
/* harmony export */   gsap: () => (/* binding */ gsapWithCSS)
/* harmony export */ });
/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ "./node_modules/gsap/gsap-core.js");
/* harmony import */ var _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSSPlugin.js */ "./node_modules/gsap/CSSPlugin.js");


var gsapWithCSS = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(_CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin) || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap,
  // to protect from tree shaking
  TweenMaxWithCSS = gsapWithCSS.core.Tween;


/***/ }),

/***/ "./node_modules/has-property-descriptors/index.js":
/*!********************************************************!*\
  !*** ./node_modules/has-property-descriptors/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $defineProperty = __webpack_require__(/*! es-define-property */ "./node_modules/es-define-property/index.js");
var hasPropertyDescriptors = function hasPropertyDescriptors() {
  return !!$defineProperty;
};
hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
  // node v0.6 has a bug where array lengths can be Set but not Defined
  if (!$defineProperty) {
    return null;
  }
  try {
    return $defineProperty([], 'length', {
      value: 1
    }).length !== 1;
  } catch (e) {
    // In Firefox 4-22, defining length on an array throws an exception.
    return true;
  }
};
module.exports = hasPropertyDescriptors;

/***/ }),

/***/ "./node_modules/has-proto/index.js":
/*!*****************************************!*\
  !*** ./node_modules/has-proto/index.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";


var test = {
  __proto__: null,
  foo: {}
};
var $Object = Object;

/** @type {import('.')} */
module.exports = function hasProto() {
  // @ts-expect-error: TS errors on an inherited property for some reason
  return {
    __proto__: test
  }.foo === test.foo && !(test instanceof $Object);
};

/***/ }),

/***/ "./node_modules/has-symbols/index.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(/*! ./shams */ "./node_modules/has-symbols/shams.js");
module.exports = function hasNativeSymbols() {
  if (typeof origSymbol !== 'function') {
    return false;
  }
  if (typeof Symbol !== 'function') {
    return false;
  }
  if (typeof origSymbol('foo') !== 'symbol') {
    return false;
  }
  if (typeof Symbol('bar') !== 'symbol') {
    return false;
  }
  return hasSymbolSham();
};

/***/ }),

/***/ "./node_modules/has-symbols/shams.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/shams.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
  if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
    return false;
  }
  if (typeof Symbol.iterator === 'symbol') {
    return true;
  }
  var obj = {};
  var sym = Symbol('test');
  var symObj = Object(sym);
  if (typeof sym === 'string') {
    return false;
  }
  if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
    return false;
  }
  if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
    return false;
  }

  // temp disabled per https://github.com/ljharb/object.assign/issues/17
  // if (sym instanceof Symbol) { return false; }
  // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
  // if (!(symObj instanceof Symbol)) { return false; }

  // if (typeof Symbol.prototype.toString !== 'function') { return false; }
  // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

  var symVal = 42;
  obj[sym] = symVal;
  for (sym in obj) {
    return false;
  } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
  if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
    return false;
  }
  if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
    return false;
  }
  var syms = Object.getOwnPropertySymbols(obj);
  if (syms.length !== 1 || syms[0] !== sym) {
    return false;
  }
  if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
    return false;
  }
  if (typeof Object.getOwnPropertyDescriptor === 'function') {
    var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
    if (descriptor.value !== symVal || descriptor.enumerable !== true) {
      return false;
    }
  }
  return true;
};

/***/ }),

/***/ "./node_modules/hasown/index.js":
/*!**************************************!*\
  !*** ./node_modules/hasown/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");

/** @type {import('.')} */
module.exports = bind.call(call, $hasOwn);

/***/ }),

/***/ "./node_modules/html-entities/lib/html4-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html4-entities.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var surrogate_pairs_1 = __webpack_require__(/*! ./surrogate-pairs */ "./node_modules/html-entities/lib/surrogate-pairs.js");
var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'AElig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];
var alphaIndex = {};
var numIndex = {};
(function () {
  var i = 0;
  var length = HTML_ALPHA.length;
  while (i < length) {
    var a = HTML_ALPHA[i];
    var c = HTML_CODES[i];
    alphaIndex[a] = String.fromCharCode(c);
    numIndex[c] = a;
    i++;
  }
})();
var Html4Entities = /** @class */function () {
  function Html4Entities() {}
  Html4Entities.prototype.decode = function (str) {
    if (!str || !str.length) {
      return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function (s, entity) {
      var chr;
      if (entity.charAt(0) === "#") {
        var code = entity.charAt(1).toLowerCase() === 'x' ? parseInt(entity.substr(2), 16) : parseInt(entity.substr(1));
        if (!isNaN(code) || code >= -32768) {
          if (code <= 65535) {
            chr = String.fromCharCode(code);
          } else {
            chr = surrogate_pairs_1.fromCodePoint(code);
          }
        }
      } else {
        chr = alphaIndex[entity];
      }
      return chr || s;
    });
  };
  Html4Entities.decode = function (str) {
    return new Html4Entities().decode(str);
  };
  Html4Entities.prototype.encode = function (str) {
    if (!str || !str.length) {
      return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
      var alpha = numIndex[str.charCodeAt(i)];
      result += alpha ? "&" + alpha + ";" : str.charAt(i);
      i++;
    }
    return result;
  };
  Html4Entities.encode = function (str) {
    return new Html4Entities().encode(str);
  };
  Html4Entities.prototype.encodeNonUTF = function (str) {
    if (!str || !str.length) {
      return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
      var cc = str.charCodeAt(i);
      var alpha = numIndex[cc];
      if (alpha) {
        result += "&" + alpha + ";";
      } else if (cc < 32 || cc > 126) {
        if (cc >= surrogate_pairs_1.highSurrogateFrom && cc <= surrogate_pairs_1.highSurrogateTo) {
          result += '&#' + surrogate_pairs_1.getCodePoint(str, i) + ';';
          i++;
        } else {
          result += '&#' + cc + ';';
        }
      } else {
        result += str.charAt(i);
      }
      i++;
    }
    return result;
  };
  Html4Entities.encodeNonUTF = function (str) {
    return new Html4Entities().encodeNonUTF(str);
  };
  Html4Entities.prototype.encodeNonASCII = function (str) {
    if (!str || !str.length) {
      return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
      var c = str.charCodeAt(i);
      if (c <= 255) {
        result += str[i++];
        continue;
      }
      if (c >= surrogate_pairs_1.highSurrogateFrom && c <= surrogate_pairs_1.highSurrogateTo) {
        result += '&#' + surrogate_pairs_1.getCodePoint(str, i) + ';';
        i++;
      } else {
        result += '&#' + c + ';';
      }
      i++;
    }
    return result;
  };
  Html4Entities.encodeNonASCII = function (str) {
    return new Html4Entities().encodeNonASCII(str);
  };
  return Html4Entities;
}();
exports.Html4Entities = Html4Entities;

/***/ }),

/***/ "./node_modules/html-entities/lib/html5-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html5-entities.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var surrogate_pairs_1 = __webpack_require__(/*! ./surrogate-pairs */ "./node_modules/html-entities/lib/surrogate-pairs.js");
var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];
var DECODE_ONLY_ENTITIES = [['NewLine', [10]]];
var alphaIndex = {};
var charIndex = {};
createIndexes(alphaIndex, charIndex);
var Html5Entities = /** @class */function () {
  function Html5Entities() {}
  Html5Entities.prototype.decode = function (str) {
    if (!str || !str.length) {
      return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function (s, entity) {
      var chr;
      if (entity.charAt(0) === "#") {
        var code = entity.charAt(1) === 'x' ? parseInt(entity.substr(2).toLowerCase(), 16) : parseInt(entity.substr(1));
        if (!isNaN(code) || code >= -32768) {
          if (code <= 65535) {
            chr = String.fromCharCode(code);
          } else {
            chr = surrogate_pairs_1.fromCodePoint(code);
          }
        }
      } else {
        chr = alphaIndex[entity];
      }
      return chr || s;
    });
  };
  Html5Entities.decode = function (str) {
    return new Html5Entities().decode(str);
  };
  Html5Entities.prototype.encode = function (str) {
    if (!str || !str.length) {
      return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
      var charInfo = charIndex[str.charCodeAt(i)];
      if (charInfo) {
        var alpha = charInfo[str.charCodeAt(i + 1)];
        if (alpha) {
          i++;
        } else {
          alpha = charInfo[''];
        }
        if (alpha) {
          result += "&" + alpha + ";";
          i++;
          continue;
        }
      }
      result += str.charAt(i);
      i++;
    }
    return result;
  };
  Html5Entities.encode = function (str) {
    return new Html5Entities().encode(str);
  };
  Html5Entities.prototype.encodeNonUTF = function (str) {
    if (!str || !str.length) {
      return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
      var c = str.charCodeAt(i);
      var charInfo = charIndex[c];
      if (charInfo) {
        var alpha = charInfo[str.charCodeAt(i + 1)];
        if (alpha) {
          i++;
        } else {
          alpha = charInfo[''];
        }
        if (alpha) {
          result += "&" + alpha + ";";
          i++;
          continue;
        }
      }
      if (c < 32 || c > 126) {
        if (c >= surrogate_pairs_1.highSurrogateFrom && c <= surrogate_pairs_1.highSurrogateTo) {
          result += '&#' + surrogate_pairs_1.getCodePoint(str, i) + ';';
          i++;
        } else {
          result += '&#' + c + ';';
        }
      } else {
        result += str.charAt(i);
      }
      i++;
    }
    return result;
  };
  Html5Entities.encodeNonUTF = function (str) {
    return new Html5Entities().encodeNonUTF(str);
  };
  Html5Entities.prototype.encodeNonASCII = function (str) {
    if (!str || !str.length) {
      return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
      var c = str.charCodeAt(i);
      if (c <= 255) {
        result += str[i++];
        continue;
      }
      if (c >= surrogate_pairs_1.highSurrogateFrom && c <= surrogate_pairs_1.highSurrogateTo) {
        result += '&#' + surrogate_pairs_1.getCodePoint(str, i) + ';';
        i += 2;
      } else {
        result += '&#' + c + ';';
        i++;
      }
    }
    return result;
  };
  Html5Entities.encodeNonASCII = function (str) {
    return new Html5Entities().encodeNonASCII(str);
  };
  return Html5Entities;
}();
exports.Html5Entities = Html5Entities;
function createIndexes(alphaIndex, charIndex) {
  var i = ENTITIES.length;
  while (i--) {
    var _a = ENTITIES[i],
      alpha = _a[0],
      _b = _a[1],
      chr = _b[0],
      chr2 = _b[1];
    var addChar = chr < 32 || chr > 126 || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
    var charInfo = void 0;
    if (addChar) {
      charInfo = charIndex[chr] = charIndex[chr] || {};
    }
    if (chr2) {
      alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);
      addChar && (charInfo[chr2] = alpha);
    } else {
      alphaIndex[alpha] = String.fromCharCode(chr);
      addChar && (charInfo[''] = alpha);
    }
  }
  i = DECODE_ONLY_ENTITIES.length;
  while (i--) {
    var _c = DECODE_ONLY_ENTITIES[i],
      alpha = _c[0],
      _d = _c[1],
      chr = _d[0],
      chr2 = _d[1];
    alphaIndex[alpha] = String.fromCharCode(chr) + (chr2 ? String.fromCharCode(chr2) : '');
  }
}

/***/ }),

/***/ "./node_modules/html-entities/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/html-entities/lib/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var xml_entities_1 = __webpack_require__(/*! ./xml-entities */ "./node_modules/html-entities/lib/xml-entities.js");
exports.XmlEntities = xml_entities_1.XmlEntities;
var html4_entities_1 = __webpack_require__(/*! ./html4-entities */ "./node_modules/html-entities/lib/html4-entities.js");
exports.Html4Entities = html4_entities_1.Html4Entities;
var html5_entities_1 = __webpack_require__(/*! ./html5-entities */ "./node_modules/html-entities/lib/html5-entities.js");
exports.Html5Entities = html5_entities_1.Html5Entities;
exports.AllHtmlEntities = html5_entities_1.Html5Entities;

/***/ }),

/***/ "./node_modules/html-entities/lib/surrogate-pairs.js":
/*!***********************************************************!*\
  !*** ./node_modules/html-entities/lib/surrogate-pairs.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.fromCodePoint = String.fromCodePoint || function (astralCodePoint) {
  return String.fromCharCode(Math.floor((astralCodePoint - 0x10000) / 0x400) + 0xD800, (astralCodePoint - 0x10000) % 0x400 + 0xDC00);
};
exports.getCodePoint = String.prototype.codePointAt ? function (input, position) {
  return input.codePointAt(position);
} : function (input, position) {
  return (input.charCodeAt(position) - 0xD800) * 0x400 + input.charCodeAt(position + 1) - 0xDC00 + 0x10000;
};
exports.highSurrogateFrom = 0xD800;
exports.highSurrogateTo = 0xDBFF;

/***/ }),

/***/ "./node_modules/html-entities/lib/xml-entities.js":
/*!********************************************************!*\
  !*** ./node_modules/html-entities/lib/xml-entities.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var surrogate_pairs_1 = __webpack_require__(/*! ./surrogate-pairs */ "./node_modules/html-entities/lib/surrogate-pairs.js");
var ALPHA_INDEX = {
  '&lt': '<',
  '&gt': '>',
  '&quot': '"',
  '&apos': '\'',
  '&amp': '&',
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&apos;': '\'',
  '&amp;': '&'
};
var CHAR_INDEX = {
  60: 'lt',
  62: 'gt',
  34: 'quot',
  39: 'apos',
  38: 'amp'
};
var CHAR_S_INDEX = {
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  '\'': '&apos;',
  '&': '&amp;'
};
var XmlEntities = /** @class */function () {
  function XmlEntities() {}
  XmlEntities.prototype.encode = function (str) {
    if (!str || !str.length) {
      return '';
    }
    return str.replace(/[<>"'&]/g, function (s) {
      return CHAR_S_INDEX[s];
    });
  };
  XmlEntities.encode = function (str) {
    return new XmlEntities().encode(str);
  };
  XmlEntities.prototype.decode = function (str) {
    if (!str || !str.length) {
      return '';
    }
    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function (s) {
      if (s.charAt(1) === '#') {
        var code = s.charAt(2).toLowerCase() === 'x' ? parseInt(s.substr(3), 16) : parseInt(s.substr(2));
        if (!isNaN(code) || code >= -32768) {
          if (code <= 65535) {
            return String.fromCharCode(code);
          } else {
            return surrogate_pairs_1.fromCodePoint(code);
          }
        }
        return '';
      }
      return ALPHA_INDEX[s] || s;
    });
  };
  XmlEntities.decode = function (str) {
    return new XmlEntities().decode(str);
  };
  XmlEntities.prototype.encodeNonUTF = function (str) {
    if (!str || !str.length) {
      return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
      var c = str.charCodeAt(i);
      var alpha = CHAR_INDEX[c];
      if (alpha) {
        result += "&" + alpha + ";";
        i++;
        continue;
      }
      if (c < 32 || c > 126) {
        if (c >= surrogate_pairs_1.highSurrogateFrom && c <= surrogate_pairs_1.highSurrogateTo) {
          result += '&#' + surrogate_pairs_1.getCodePoint(str, i) + ';';
          i++;
        } else {
          result += '&#' + c + ';';
        }
      } else {
        result += str.charAt(i);
      }
      i++;
    }
    return result;
  };
  XmlEntities.encodeNonUTF = function (str) {
    return new XmlEntities().encodeNonUTF(str);
  };
  XmlEntities.prototype.encodeNonASCII = function (str) {
    if (!str || !str.length) {
      return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
      var c = str.charCodeAt(i);
      if (c <= 255) {
        result += str[i++];
        continue;
      }
      if (c >= surrogate_pairs_1.highSurrogateFrom && c <= surrogate_pairs_1.highSurrogateTo) {
        result += '&#' + surrogate_pairs_1.getCodePoint(str, i) + ';';
        i++;
      } else {
        result += '&#' + c + ';';
      }
      i++;
    }
    return result;
  };
  XmlEntities.encodeNonASCII = function (str) {
    return new XmlEntities().encodeNonASCII(str);
  };
  return XmlEntities;
}();
exports.XmlEntities = XmlEntities;

/***/ }),

/***/ "./node_modules/lodash/_DataView.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_DataView.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
  root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');
module.exports = DataView;

/***/ }),

/***/ "./node_modules/lodash/_Hash.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_Hash.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hashClear = __webpack_require__(/*! ./_hashClear */ "./node_modules/lodash/_hashClear.js"),
  hashDelete = __webpack_require__(/*! ./_hashDelete */ "./node_modules/lodash/_hashDelete.js"),
  hashGet = __webpack_require__(/*! ./_hashGet */ "./node_modules/lodash/_hashGet.js"),
  hashHas = __webpack_require__(/*! ./_hashHas */ "./node_modules/lodash/_hashHas.js"),
  hashSet = __webpack_require__(/*! ./_hashSet */ "./node_modules/lodash/_hashSet.js");

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
    length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;

/***/ }),

/***/ "./node_modules/lodash/_ListCache.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_ListCache.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var listCacheClear = __webpack_require__(/*! ./_listCacheClear */ "./node_modules/lodash/_listCacheClear.js"),
  listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ "./node_modules/lodash/_listCacheDelete.js"),
  listCacheGet = __webpack_require__(/*! ./_listCacheGet */ "./node_modules/lodash/_listCacheGet.js"),
  listCacheHas = __webpack_require__(/*! ./_listCacheHas */ "./node_modules/lodash/_listCacheHas.js"),
  listCacheSet = __webpack_require__(/*! ./_listCacheSet */ "./node_modules/lodash/_listCacheSet.js");

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
    length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;

/***/ }),

/***/ "./node_modules/lodash/_Map.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Map.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
  root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');
module.exports = Map;

/***/ }),

/***/ "./node_modules/lodash/_MapCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_MapCache.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mapCacheClear = __webpack_require__(/*! ./_mapCacheClear */ "./node_modules/lodash/_mapCacheClear.js"),
  mapCacheDelete = __webpack_require__(/*! ./_mapCacheDelete */ "./node_modules/lodash/_mapCacheDelete.js"),
  mapCacheGet = __webpack_require__(/*! ./_mapCacheGet */ "./node_modules/lodash/_mapCacheGet.js"),
  mapCacheHas = __webpack_require__(/*! ./_mapCacheHas */ "./node_modules/lodash/_mapCacheHas.js"),
  mapCacheSet = __webpack_require__(/*! ./_mapCacheSet */ "./node_modules/lodash/_mapCacheSet.js");

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
    length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;

/***/ }),

/***/ "./node_modules/lodash/_Promise.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_Promise.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
  root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');
module.exports = Promise;

/***/ }),

/***/ "./node_modules/lodash/_Set.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Set.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
  root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');
module.exports = Set;

/***/ }),

/***/ "./node_modules/lodash/_SetCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_SetCache.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js"),
  setCacheAdd = __webpack_require__(/*! ./_setCacheAdd */ "./node_modules/lodash/_setCacheAdd.js"),
  setCacheHas = __webpack_require__(/*! ./_setCacheHas */ "./node_modules/lodash/_setCacheHas.js");

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
    length = values == null ? 0 : values.length;
  this.__data__ = new MapCache();
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
module.exports = SetCache;

/***/ }),

/***/ "./node_modules/lodash/_Stack.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_Stack.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
  stackClear = __webpack_require__(/*! ./_stackClear */ "./node_modules/lodash/_stackClear.js"),
  stackDelete = __webpack_require__(/*! ./_stackDelete */ "./node_modules/lodash/_stackDelete.js"),
  stackGet = __webpack_require__(/*! ./_stackGet */ "./node_modules/lodash/_stackGet.js"),
  stackHas = __webpack_require__(/*! ./_stackHas */ "./node_modules/lodash/_stackHas.js"),
  stackSet = __webpack_require__(/*! ./_stackSet */ "./node_modules/lodash/_stackSet.js");

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
module.exports = Stack;

/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;
module.exports = Symbol;

/***/ }),

/***/ "./node_modules/lodash/_Uint8Array.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_Uint8Array.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Uint8Array = root.Uint8Array;
module.exports = Uint8Array;

/***/ }),

/***/ "./node_modules/lodash/_WeakMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_WeakMap.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
  root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');
module.exports = WeakMap;

/***/ }),

/***/ "./node_modules/lodash/_arrayEach.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayEach.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
    length = array == null ? 0 : array.length;
  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}
module.exports = arrayEach;

/***/ }),

/***/ "./node_modules/lodash/_arrayFilter.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayFilter.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
    length = array == null ? 0 : array.length,
    resIndex = 0,
    result = [];
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}
module.exports = arrayFilter;

/***/ }),

/***/ "./node_modules/lodash/_arrayLikeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayLikeKeys.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTimes = __webpack_require__(/*! ./_baseTimes */ "./node_modules/lodash/_baseTimes.js"),
  isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
  isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
  isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
  isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
  isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
    isArg = !isArr && isArguments(value),
    isBuff = !isArr && !isArg && isBuffer(value),
    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
    skipIndexes = isArr || isArg || isBuff || isType,
    result = skipIndexes ? baseTimes(value.length, String) : [],
    length = result.length;
  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
    // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' ||
    // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') ||
    // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
    // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
module.exports = arrayLikeKeys;

/***/ }),

/***/ "./node_modules/lodash/_arrayMap.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_arrayMap.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
    length = array == null ? 0 : array.length,
    result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}
module.exports = arrayMap;

/***/ }),

/***/ "./node_modules/lodash/_arrayPush.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayPush.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
    length = values.length,
    offset = array.length;
  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}
module.exports = arrayPush;

/***/ }),

/***/ "./node_modules/lodash/_arraySome.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arraySome.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
    length = array == null ? 0 : array.length;
  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}
module.exports = arraySome;

/***/ }),

/***/ "./node_modules/lodash/_assocIndexOf.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_assocIndexOf.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
module.exports = assocIndexOf;

/***/ }),

/***/ "./node_modules/lodash/_baseEach.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseEach.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseForOwn = __webpack_require__(/*! ./_baseForOwn */ "./node_modules/lodash/_baseForOwn.js"),
  createBaseEach = __webpack_require__(/*! ./_createBaseEach */ "./node_modules/lodash/_createBaseEach.js");

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);
module.exports = baseEach;

/***/ }),

/***/ "./node_modules/lodash/_baseFor.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseFor.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createBaseFor = __webpack_require__(/*! ./_createBaseFor */ "./node_modules/lodash/_createBaseFor.js");

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();
module.exports = baseFor;

/***/ }),

/***/ "./node_modules/lodash/_baseForOwn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseForOwn.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFor = __webpack_require__(/*! ./_baseFor */ "./node_modules/lodash/_baseFor.js"),
  keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}
module.exports = baseForOwn;

/***/ }),

/***/ "./node_modules/lodash/_baseGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseGet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
  toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);
  var index = 0,
    length = path.length;
  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return index && index == length ? object : undefined;
}
module.exports = baseGet;

/***/ }),

/***/ "./node_modules/lodash/_baseGetAllKeys.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_baseGetAllKeys.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
  isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}
module.exports = baseGetAllKeys;

/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
  getRawTag = __webpack_require__(/*! ./_getRawTag */ "./node_modules/lodash/_getRawTag.js"),
  objectToString = __webpack_require__(/*! ./_objectToString */ "./node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
  undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
module.exports = baseGetTag;

/***/ }),

/***/ "./node_modules/lodash/_baseHasIn.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseHasIn.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}
module.exports = baseHasIn;

/***/ }),

/***/ "./node_modules/lodash/_baseIsArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsArguments.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
  isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}
module.exports = baseIsArguments;

/***/ }),

/***/ "./node_modules/lodash/_baseIsEqual.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsEqual.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqualDeep = __webpack_require__(/*! ./_baseIsEqualDeep */ "./node_modules/lodash/_baseIsEqualDeep.js"),
  isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}
module.exports = baseIsEqual;

/***/ }),

/***/ "./node_modules/lodash/_baseIsEqualDeep.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsEqualDeep.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
  equalArrays = __webpack_require__(/*! ./_equalArrays */ "./node_modules/lodash/_equalArrays.js"),
  equalByTag = __webpack_require__(/*! ./_equalByTag */ "./node_modules/lodash/_equalByTag.js"),
  equalObjects = __webpack_require__(/*! ./_equalObjects */ "./node_modules/lodash/_equalObjects.js"),
  getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
  isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
  isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
  isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
  arrayTag = '[object Array]',
  objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
    othIsArr = isArray(other),
    objTag = objIsArr ? arrayTag : getTag(object),
    othTag = othIsArr ? arrayTag : getTag(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag,
    othIsObj = othTag == objectTag,
    isSameTag = objTag == othTag;
  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
      othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
        othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}
module.exports = baseIsEqualDeep;

/***/ }),

/***/ "./node_modules/lodash/_baseIsMatch.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsMatch.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
  baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
  COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
    length = index,
    noCustomizer = !customizer;
  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
      objValue = object[key],
      srcValue = data[1];
    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}
module.exports = baseIsMatch;

/***/ }),

/***/ "./node_modules/lodash/_baseIsNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIsNative.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
  isMasked = __webpack_require__(/*! ./_isMasked */ "./node_modules/lodash/_isMasked.js"),
  isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
  toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
  objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}
module.exports = baseIsNative;

/***/ }),

/***/ "./node_modules/lodash/_baseIsTypedArray.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_baseIsTypedArray.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
  isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js"),
  isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
  arrayTag = '[object Array]',
  boolTag = '[object Boolean]',
  dateTag = '[object Date]',
  errorTag = '[object Error]',
  funcTag = '[object Function]',
  mapTag = '[object Map]',
  numberTag = '[object Number]',
  objectTag = '[object Object]',
  regexpTag = '[object RegExp]',
  setTag = '[object Set]',
  stringTag = '[object String]',
  weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
  dataViewTag = '[object DataView]',
  float32Tag = '[object Float32Array]',
  float64Tag = '[object Float64Array]',
  int8Tag = '[object Int8Array]',
  int16Tag = '[object Int16Array]',
  int32Tag = '[object Int32Array]',
  uint8Tag = '[object Uint8Array]',
  uint8ClampedTag = '[object Uint8ClampedArray]',
  uint16Tag = '[object Uint16Array]',
  uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
module.exports = baseIsTypedArray;

/***/ }),

/***/ "./node_modules/lodash/_baseIteratee.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIteratee.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMatches = __webpack_require__(/*! ./_baseMatches */ "./node_modules/lodash/_baseMatches.js"),
  baseMatchesProperty = __webpack_require__(/*! ./_baseMatchesProperty */ "./node_modules/lodash/_baseMatchesProperty.js"),
  identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js"),
  isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
  property = __webpack_require__(/*! ./property */ "./node_modules/lodash/property.js");

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }
  return property(value);
}
module.exports = baseIteratee;

/***/ }),

/***/ "./node_modules/lodash/_baseKeys.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseKeys.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
  nativeKeys = __webpack_require__(/*! ./_nativeKeys */ "./node_modules/lodash/_nativeKeys.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}
module.exports = baseKeys;

/***/ }),

/***/ "./node_modules/lodash/_baseMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseMap.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js"),
  isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
    result = isArrayLike(collection) ? Array(collection.length) : [];
  baseEach(collection, function (value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}
module.exports = baseMap;

/***/ }),

/***/ "./node_modules/lodash/_baseMatches.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseMatches.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsMatch = __webpack_require__(/*! ./_baseIsMatch */ "./node_modules/lodash/_baseIsMatch.js"),
  getMatchData = __webpack_require__(/*! ./_getMatchData */ "./node_modules/lodash/_getMatchData.js"),
  matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ "./node_modules/lodash/_matchesStrictComparable.js");

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function (object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}
module.exports = baseMatches;

/***/ }),

/***/ "./node_modules/lodash/_baseMatchesProperty.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash/_baseMatchesProperty.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js"),
  get = __webpack_require__(/*! ./get */ "./node_modules/lodash/get.js"),
  hasIn = __webpack_require__(/*! ./hasIn */ "./node_modules/lodash/hasIn.js"),
  isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
  isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ "./node_modules/lodash/_isStrictComparable.js"),
  matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ "./node_modules/lodash/_matchesStrictComparable.js"),
  toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
  COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function (object) {
    var objValue = get(object, path);
    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}
module.exports = baseMatchesProperty;

/***/ }),

/***/ "./node_modules/lodash/_baseProperty.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseProperty.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}
module.exports = baseProperty;

/***/ }),

/***/ "./node_modules/lodash/_basePropertyDeep.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_basePropertyDeep.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js");

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function (object) {
    return baseGet(object, path);
  };
}
module.exports = basePropertyDeep;

/***/ }),

/***/ "./node_modules/lodash/_baseTimes.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseTimes.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
    result = Array(n);
  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}
module.exports = baseTimes;

/***/ }),

/***/ "./node_modules/lodash/_baseToString.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseToString.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
  arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
  isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
  isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
  symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
module.exports = baseToString;

/***/ }),

/***/ "./node_modules/lodash/_baseUnary.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseUnary.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}
module.exports = baseUnary;

/***/ }),

/***/ "./node_modules/lodash/_cacheHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_cacheHas.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}
module.exports = cacheHas;

/***/ }),

/***/ "./node_modules/lodash/_castFunction.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_castFunction.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js");

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}
module.exports = castFunction;

/***/ }),

/***/ "./node_modules/lodash/_castPath.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_castPath.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
  isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
  stringToPath = __webpack_require__(/*! ./_stringToPath */ "./node_modules/lodash/_stringToPath.js"),
  toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}
module.exports = castPath;

/***/ }),

/***/ "./node_modules/lodash/_coreJsData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_coreJsData.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];
module.exports = coreJsData;

/***/ }),

/***/ "./node_modules/lodash/_createBaseEach.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createBaseEach.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function (collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
      index = fromRight ? length : -1,
      iterable = Object(collection);
    while (fromRight ? index-- : ++index < length) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}
module.exports = createBaseEach;

/***/ }),

/***/ "./node_modules/lodash/_createBaseFor.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createBaseFor.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function (object, iteratee, keysFunc) {
    var index = -1,
      iterable = Object(object),
      props = keysFunc(object),
      length = props.length;
    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}
module.exports = createBaseFor;

/***/ }),

/***/ "./node_modules/lodash/_equalArrays.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_equalArrays.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__(/*! ./_SetCache */ "./node_modules/lodash/_SetCache.js"),
  arraySome = __webpack_require__(/*! ./_arraySome */ "./node_modules/lodash/_arraySome.js"),
  cacheHas = __webpack_require__(/*! ./_cacheHas */ "./node_modules/lodash/_cacheHas.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
  COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    arrLength = array.length,
    othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
    result = true,
    seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
      othValue = other[index];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}
module.exports = equalArrays;

/***/ }),

/***/ "./node_modules/lodash/_equalByTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_equalByTag.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
  Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "./node_modules/lodash/_Uint8Array.js"),
  eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js"),
  equalArrays = __webpack_require__(/*! ./_equalArrays */ "./node_modules/lodash/_equalArrays.js"),
  mapToArray = __webpack_require__(/*! ./_mapToArray */ "./node_modules/lodash/_mapToArray.js"),
  setToArray = __webpack_require__(/*! ./_setToArray */ "./node_modules/lodash/_setToArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
  COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
  dateTag = '[object Date]',
  errorTag = '[object Error]',
  mapTag = '[object Map]',
  numberTag = '[object Number]',
  regexpTag = '[object RegExp]',
  setTag = '[object Set]',
  stringTag = '[object String]',
  symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]',
  dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
  symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;
    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;
    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);
    case errorTag:
      return object.name == other.name && object.message == other.message;
    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == other + '';
    case mapTag:
      var convert = mapToArray;
    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);
      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;
    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}
module.exports = equalByTag;

/***/ }),

/***/ "./node_modules/lodash/_equalObjects.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_equalObjects.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    objProps = getAllKeys(object),
    objLength = objProps.length,
    othProps = getAllKeys(other),
    othLength = othProps.length;
  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
      othValue = other[key];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
      othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}
module.exports = equalObjects;

/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;
module.exports = freeGlobal;

/***/ }),

/***/ "./node_modules/lodash/_getAllKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getAllKeys.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
  getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
  keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}
module.exports = getAllKeys;

/***/ }),

/***/ "./node_modules/lodash/_getMapData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getMapData.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isKeyable = __webpack_require__(/*! ./_isKeyable */ "./node_modules/lodash/_isKeyable.js");

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
module.exports = getMapData;

/***/ }),

/***/ "./node_modules/lodash/_getMatchData.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getMatchData.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ "./node_modules/lodash/_isStrictComparable.js"),
  keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
    length = result.length;
  while (length--) {
    var key = result[length],
      value = object[key];
    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}
module.exports = getMatchData;

/***/ }),

/***/ "./node_modules/lodash/_getNative.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsNative = __webpack_require__(/*! ./_baseIsNative */ "./node_modules/lodash/_baseIsNative.js"),
  getValue = __webpack_require__(/*! ./_getValue */ "./node_modules/lodash/_getValue.js");

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}
module.exports = getNative;

/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
    tag = value[symToStringTag];
  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
module.exports = getRawTag;

/***/ }),

/***/ "./node_modules/lodash/_getSymbols.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getSymbols.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ "./node_modules/lodash/_arrayFilter.js"),
  stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};
module.exports = getSymbols;

/***/ }),

/***/ "./node_modules/lodash/_getTag.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_getTag.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DataView = __webpack_require__(/*! ./_DataView */ "./node_modules/lodash/_DataView.js"),
  Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
  Promise = __webpack_require__(/*! ./_Promise */ "./node_modules/lodash/_Promise.js"),
  Set = __webpack_require__(/*! ./_Set */ "./node_modules/lodash/_Set.js"),
  WeakMap = __webpack_require__(/*! ./_WeakMap */ "./node_modules/lodash/_WeakMap.js"),
  baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
  toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
  objectTag = '[object Object]',
  promiseTag = '[object Promise]',
  setTag = '[object Set]',
  weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
  mapCtorString = toSource(Map),
  promiseCtorString = toSource(Promise),
  setCtorString = toSource(Set),
  weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
  getTag = function (value) {
    var result = baseGetTag(value),
      Ctor = result == objectTag ? value.constructor : undefined,
      ctorString = Ctor ? toSource(Ctor) : '';
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;
        case mapCtorString:
          return mapTag;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag;
        case weakMapCtorString:
          return weakMapTag;
      }
    }
    return result;
  };
}
module.exports = getTag;

/***/ }),

/***/ "./node_modules/lodash/_getValue.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_getValue.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}
module.exports = getValue;

/***/ }),

/***/ "./node_modules/lodash/_hasPath.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hasPath.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
  isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
  isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
  isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
  isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js"),
  toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);
  var index = -1,
    length = path.length,
    result = false;
  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}
module.exports = hasPath;

/***/ }),

/***/ "./node_modules/lodash/_hashClear.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_hashClear.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}
module.exports = hashClear;

/***/ }),

/***/ "./node_modules/lodash/_hashDelete.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hashDelete.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
module.exports = hashDelete;

/***/ }),

/***/ "./node_modules/lodash/_hashGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashGet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
module.exports = hashGet;

/***/ }),

/***/ "./node_modules/lodash/_hashHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashHas.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
module.exports = hashHas;

/***/ }),

/***/ "./node_modules/lodash/_hashSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashSet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}
module.exports = hashSet;

/***/ }),

/***/ "./node_modules/lodash/_isIndex.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_isIndex.js ***!
  \*****************************************/
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
module.exports = isIndex;

/***/ }),

/***/ "./node_modules/lodash/_isKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_isKey.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
  isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
  reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
module.exports = isKey;

/***/ }),

/***/ "./node_modules/lodash/_isKeyable.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_isKeyable.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
module.exports = isKeyable;

/***/ }),

/***/ "./node_modules/lodash/_isMasked.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_isMasked.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var coreJsData = __webpack_require__(/*! ./_coreJsData */ "./node_modules/lodash/_coreJsData.js");

/** Used to detect methods masquerading as native. */
var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
module.exports = isMasked;

/***/ }),

/***/ "./node_modules/lodash/_isPrototype.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_isPrototype.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
    proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
  return value === proto;
}
module.exports = isPrototype;

/***/ }),

/***/ "./node_modules/lodash/_isStrictComparable.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash/_isStrictComparable.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}
module.exports = isStrictComparable;

/***/ }),

/***/ "./node_modules/lodash/_listCacheClear.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_listCacheClear.js ***!
  \************************************************/
/***/ ((module) => {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
module.exports = listCacheClear;

/***/ }),

/***/ "./node_modules/lodash/_listCacheDelete.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_listCacheDelete.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
    index = assocIndexOf(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
module.exports = listCacheDelete;

/***/ }),

/***/ "./node_modules/lodash/_listCacheGet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheGet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
    index = assocIndexOf(data, key);
  return index < 0 ? undefined : data[index][1];
}
module.exports = listCacheGet;

/***/ }),

/***/ "./node_modules/lodash/_listCacheHas.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheHas.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}
module.exports = listCacheHas;

/***/ }),

/***/ "./node_modules/lodash/_listCacheSet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheSet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
    index = assocIndexOf(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
module.exports = listCacheSet;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheClear.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_mapCacheClear.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Hash = __webpack_require__(/*! ./_Hash */ "./node_modules/lodash/_Hash.js"),
  ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
  Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js");

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}
module.exports = mapCacheClear;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheDelete.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_mapCacheDelete.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}
module.exports = mapCacheDelete;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheGet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheGet.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}
module.exports = mapCacheGet;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheHas.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}
module.exports = mapCacheHas;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheSet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheSet.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
    size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}
module.exports = mapCacheSet;

/***/ }),

/***/ "./node_modules/lodash/_mapToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_mapToArray.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
    result = Array(map.size);
  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}
module.exports = mapToArray;

/***/ }),

/***/ "./node_modules/lodash/_matchesStrictComparable.js":
/*!*********************************************************!*\
  !*** ./node_modules/lodash/_matchesStrictComparable.js ***!
  \*********************************************************/
/***/ ((module) => {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function (object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
  };
}
module.exports = matchesStrictComparable;

/***/ }),

/***/ "./node_modules/lodash/_memoizeCapped.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_memoizeCapped.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoize = __webpack_require__(/*! ./memoize */ "./node_modules/lodash/memoize.js");

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function (key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
module.exports = memoizeCapped;

/***/ }),

/***/ "./node_modules/lodash/_nativeCreate.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeCreate.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');
module.exports = nativeCreate;

/***/ }),

/***/ "./node_modules/lodash/_nativeKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_nativeKeys.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);
module.exports = nativeKeys;

/***/ }),

/***/ "./node_modules/lodash/_nodeUtil.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_nodeUtil.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = function () {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;
    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();
module.exports = nodeUtil;

/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}
module.exports = objectToString;

/***/ }),

/***/ "./node_modules/lodash/_overArg.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_overArg.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}
module.exports = overArg;

/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;

/***/ }),

/***/ "./node_modules/lodash/_setCacheAdd.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheAdd.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}
module.exports = setCacheAdd;

/***/ }),

/***/ "./node_modules/lodash/_setCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheHas.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}
module.exports = setCacheHas;

/***/ }),

/***/ "./node_modules/lodash/_setToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_setToArray.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
    result = Array(set.size);
  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}
module.exports = setToArray;

/***/ }),

/***/ "./node_modules/lodash/_stackClear.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stackClear.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js");

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}
module.exports = stackClear;

/***/ }),

/***/ "./node_modules/lodash/_stackDelete.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_stackDelete.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
    result = data['delete'](key);
  this.size = data.size;
  return result;
}
module.exports = stackDelete;

/***/ }),

/***/ "./node_modules/lodash/_stackGet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackGet.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}
module.exports = stackGet;

/***/ }),

/***/ "./node_modules/lodash/_stackHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackHas.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}
module.exports = stackHas;

/***/ }),

/***/ "./node_modules/lodash/_stackSet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackSet.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
  Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
  MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}
module.exports = stackSet;

/***/ }),

/***/ "./node_modules/lodash/_stringToPath.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_stringToPath.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoizeCapped = __webpack_require__(/*! ./_memoizeCapped */ "./node_modules/lodash/_memoizeCapped.js");

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function (string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function (match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});
module.exports = stringToPath;

/***/ }),

/***/ "./node_modules/lodash/_toKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_toKey.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
module.exports = toKey;

/***/ }),

/***/ "./node_modules/lodash/_toSource.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_toSource.js ***!
  \******************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return func + '';
    } catch (e) {}
  }
  return '';
}
module.exports = toSource;

/***/ }),

/***/ "./node_modules/lodash/each.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/each.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./forEach */ "./node_modules/lodash/forEach.js");

/***/ }),

/***/ "./node_modules/lodash/eq.js":
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/***/ ((module) => {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
module.exports = eq;

/***/ }),

/***/ "./node_modules/lodash/forEach.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/forEach.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
  baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js"),
  castFunction = __webpack_require__(/*! ./_castFunction */ "./node_modules/lodash/_castFunction.js"),
  isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, castFunction(iteratee));
}
module.exports = forEach;

/***/ }),

/***/ "./node_modules/lodash/get.js":
/*!************************************!*\
  !*** ./node_modules/lodash/get.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js");

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}
module.exports = get;

/***/ }),

/***/ "./node_modules/lodash/hasIn.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/hasIn.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseHasIn = __webpack_require__(/*! ./_baseHasIn */ "./node_modules/lodash/_baseHasIn.js"),
  hasPath = __webpack_require__(/*! ./_hasPath */ "./node_modules/lodash/_hasPath.js");

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}
module.exports = hasIn;

/***/ }),

/***/ "./node_modules/lodash/identity.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/identity.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}
module.exports = identity;

/***/ }),

/***/ "./node_modules/lodash/isArguments.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArguments.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsArguments = __webpack_require__(/*! ./_baseIsArguments */ "./node_modules/lodash/_baseIsArguments.js"),
  isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function () {
  return arguments;
}()) ? baseIsArguments : function (value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
module.exports = isArguments;

/***/ }),

/***/ "./node_modules/lodash/isArray.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/***/ ((module) => {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;
module.exports = isArray;

/***/ }),

/***/ "./node_modules/lodash/isArrayLike.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
  isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js");

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}
module.exports = isArrayLike;

/***/ }),

/***/ "./node_modules/lodash/isBuffer.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isBuffer.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js"),
  stubFalse = __webpack_require__(/*! ./stubFalse */ "./node_modules/lodash/stubFalse.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;

/***/ }),

/***/ "./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
  isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
  funcTag = '[object Function]',
  genTag = '[object GeneratorFunction]',
  proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
module.exports = isFunction;

/***/ }),

/***/ "./node_modules/lodash/isLength.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
module.exports = isLength;

/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}
module.exports = isObject;

/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}
module.exports = isObjectLike;

/***/ }),

/***/ "./node_modules/lodash/isSymbol.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
  isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
module.exports = isSymbol;

/***/ }),

/***/ "./node_modules/lodash/isTypedArray.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isTypedArray.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsTypedArray = __webpack_require__(/*! ./_baseIsTypedArray */ "./node_modules/lodash/_baseIsTypedArray.js"),
  baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
  nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;

/***/ }),

/***/ "./node_modules/lodash/keys.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/keys.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
  baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
  isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
module.exports = keys;

/***/ }),

/***/ "./node_modules/lodash/map.js":
/*!************************************!*\
  !*** ./node_modules/lodash/map.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
  baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
  baseMap = __webpack_require__(/*! ./_baseMap */ "./node_modules/lodash/_baseMap.js"),
  isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}
module.exports = map;

/***/ }),

/***/ "./node_modules/lodash/memoize.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/memoize.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function () {
    var args = arguments,
      key = resolver ? resolver.apply(this, args) : args[0],
      cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;
module.exports = memoize;

/***/ }),

/***/ "./node_modules/lodash/property.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/property.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseProperty = __webpack_require__(/*! ./_baseProperty */ "./node_modules/lodash/_baseProperty.js"),
  basePropertyDeep = __webpack_require__(/*! ./_basePropertyDeep */ "./node_modules/lodash/_basePropertyDeep.js"),
  isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
  toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}
module.exports = property;

/***/ }),

/***/ "./node_modules/lodash/stubArray.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubArray.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}
module.exports = stubArray;

/***/ }),

/***/ "./node_modules/lodash/stubFalse.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubFalse.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}
module.exports = stubFalse;

/***/ }),

/***/ "./node_modules/lodash/toString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toString.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__(/*! ./_baseToString */ "./node_modules/lodash/_baseToString.js");

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}
module.exports = toString;

/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
  "use strict";

  if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function () {
  "use strict";

  // Slightly dubious tricks to cut down minimized file size
  var noop = function () {};
  var undefinedType = "undefined";
  var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\/|MSIE /.test(window.navigator.userAgent);
  var logMethods = ["trace", "debug", "info", "warn", "error"];
  var _loggersByName = {};
  var defaultLogger = null;

  // Cross-browser bind equivalent that works at least back to IE6
  function bindMethod(obj, methodName) {
    var method = obj[methodName];
    if (typeof method.bind === 'function') {
      return method.bind(obj);
    } else {
      try {
        return Function.prototype.bind.call(method, obj);
      } catch (e) {
        // Missing bind shim or IE8 + Modernizr, fallback to wrapping
        return function () {
          return Function.prototype.apply.apply(method, [obj, arguments]);
        };
      }
    }
  }

  // Trace() doesn't print the message in IE, so for that case we need to wrap it
  function traceForIE() {
    if (console.log) {
      if (console.log.apply) {
        console.log.apply(console, arguments);
      } else {
        // In old IE, native console methods themselves don't have apply().
        Function.prototype.apply.apply(console.log, [console, arguments]);
      }
    }
    if (console.trace) console.trace();
  }

  // Build the best logging method possible for this env
  // Wherever possible we want to bind, not wrap, to preserve stack traces
  function realMethod(methodName) {
    if (methodName === 'debug') {
      methodName = 'log';
    }
    if (typeof console === undefinedType) {
      return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
    } else if (methodName === 'trace' && isIE) {
      return traceForIE;
    } else if (console[methodName] !== undefined) {
      return bindMethod(console, methodName);
    } else if (console.log !== undefined) {
      return bindMethod(console, 'log');
    } else {
      return noop;
    }
  }

  // These private functions always need `this` to be set properly

  function replaceLoggingMethods() {
    /*jshint validthis:true */
    var level = this.getLevel();

    // Replace the actual methods.
    for (var i = 0; i < logMethods.length; i++) {
      var methodName = logMethods[i];
      this[methodName] = i < level ? noop : this.methodFactory(methodName, level, this.name);
    }

    // Define log.log as an alias for log.debug
    this.log = this.debug;

    // Return any important warnings.
    if (typeof console === undefinedType && level < this.levels.SILENT) {
      return "No console available for logging";
    }
  }

  // In old IE versions, the console isn't present until you first open it.
  // We build realMethod() replacements here that regenerate logging methods
  function enableLoggingWhenConsoleArrives(methodName) {
    return function () {
      if (typeof console !== undefinedType) {
        replaceLoggingMethods.call(this);
        this[methodName].apply(this, arguments);
      }
    };
  }

  // By default, we use closely bound real methods wherever possible, and
  // otherwise we wait for a console to appear, and then try again.
  function defaultMethodFactory(methodName, _level, _loggerName) {
    /*jshint validthis:true */
    return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);
  }
  function Logger(name, factory) {
    // Private instance variables.
    var self = this;
    /**
     * The level inherited from a parent logger (or a global default). We
     * cache this here rather than delegating to the parent so that it stays
     * in sync with the actual logging methods that we have installed (the
     * parent could change levels but we might not have rebuilt the loggers
     * in this child yet).
     * @type {number}
     */
    var inheritedLevel;
    /**
     * The default level for this logger, if any. If set, this overrides
     * `inheritedLevel`.
     * @type {number|null}
     */
    var defaultLevel;
    /**
     * A user-specific level for this logger. If set, this overrides
     * `defaultLevel`.
     * @type {number|null}
     */
    var userLevel;
    var storageKey = "loglevel";
    if (typeof name === "string") {
      storageKey += ":" + name;
    } else if (typeof name === "symbol") {
      storageKey = undefined;
    }
    function persistLevelIfPossible(levelNum) {
      var levelName = (logMethods[levelNum] || 'silent').toUpperCase();
      if (typeof window === undefinedType || !storageKey) return;

      // Use localStorage if available
      try {
        window.localStorage[storageKey] = levelName;
        return;
      } catch (ignore) {}

      // Use session cookie as fallback
      try {
        window.document.cookie = encodeURIComponent(storageKey) + "=" + levelName + ";";
      } catch (ignore) {}
    }
    function getPersistedLevel() {
      var storedLevel;
      if (typeof window === undefinedType || !storageKey) return;
      try {
        storedLevel = window.localStorage[storageKey];
      } catch (ignore) {}

      // Fallback to cookies if local storage gives us nothing
      if (typeof storedLevel === undefinedType) {
        try {
          var cookie = window.document.cookie;
          var cookieName = encodeURIComponent(storageKey);
          var location = cookie.indexOf(cookieName + "=");
          if (location !== -1) {
            storedLevel = /^([^;]+)/.exec(cookie.slice(location + cookieName.length + 1))[1];
          }
        } catch (ignore) {}
      }

      // If the stored level is not valid, treat it as if nothing was stored.
      if (self.levels[storedLevel] === undefined) {
        storedLevel = undefined;
      }
      return storedLevel;
    }
    function clearPersistedLevel() {
      if (typeof window === undefinedType || !storageKey) return;

      // Use localStorage if available
      try {
        window.localStorage.removeItem(storageKey);
      } catch (ignore) {}

      // Use session cookie as fallback
      try {
        window.document.cookie = encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
      } catch (ignore) {}
    }
    function normalizeLevel(input) {
      var level = input;
      if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
        level = self.levels[level.toUpperCase()];
      }
      if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
        return level;
      } else {
        throw new TypeError("log.setLevel() called with invalid level: " + input);
      }
    }

    /*
     *
     * Public logger API - see https://github.com/pimterry/loglevel for details
     *
     */

    self.name = name;
    self.levels = {
      "TRACE": 0,
      "DEBUG": 1,
      "INFO": 2,
      "WARN": 3,
      "ERROR": 4,
      "SILENT": 5
    };
    self.methodFactory = factory || defaultMethodFactory;
    self.getLevel = function () {
      if (userLevel != null) {
        return userLevel;
      } else if (defaultLevel != null) {
        return defaultLevel;
      } else {
        return inheritedLevel;
      }
    };
    self.setLevel = function (level, persist) {
      userLevel = normalizeLevel(level);
      if (persist !== false) {
        // defaults to true
        persistLevelIfPossible(userLevel);
      }

      // NOTE: in v2, this should call rebuild(), which updates children.
      return replaceLoggingMethods.call(self);
    };
    self.setDefaultLevel = function (level) {
      defaultLevel = normalizeLevel(level);
      if (!getPersistedLevel()) {
        self.setLevel(level, false);
      }
    };
    self.resetLevel = function () {
      userLevel = null;
      clearPersistedLevel();
      replaceLoggingMethods.call(self);
    };
    self.enableAll = function (persist) {
      self.setLevel(self.levels.TRACE, persist);
    };
    self.disableAll = function (persist) {
      self.setLevel(self.levels.SILENT, persist);
    };
    self.rebuild = function () {
      if (defaultLogger !== self) {
        inheritedLevel = normalizeLevel(defaultLogger.getLevel());
      }
      replaceLoggingMethods.call(self);
      if (defaultLogger === self) {
        for (var childName in _loggersByName) {
          _loggersByName[childName].rebuild();
        }
      }
    };

    // Initialize all the internal levels.
    inheritedLevel = normalizeLevel(defaultLogger ? defaultLogger.getLevel() : "WARN");
    var initialLevel = getPersistedLevel();
    if (initialLevel != null) {
      userLevel = normalizeLevel(initialLevel);
    }
    replaceLoggingMethods.call(self);
  }

  /*
   *
   * Top-level API
   *
   */

  defaultLogger = new Logger();
  defaultLogger.getLogger = function getLogger(name) {
    if (typeof name !== "symbol" && typeof name !== "string" || name === "") {
      throw new TypeError("You must supply a name when creating a logger.");
    }
    var logger = _loggersByName[name];
    if (!logger) {
      logger = _loggersByName[name] = new Logger(name, defaultLogger.methodFactory);
    }
    return logger;
  };

  // Grab the current global log variable in case of overwrite
  var _log = typeof window !== undefinedType ? window.log : undefined;
  defaultLogger.noConflict = function () {
    if (typeof window !== undefinedType && window.log === defaultLogger) {
      window.log = _log;
    }
    return defaultLogger;
  };
  defaultLogger.getLoggers = function getLoggers() {
    return _loggersByName;
  };

  // ES6 default export, for compatibility
  defaultLogger['default'] = defaultLogger;
  return defaultLogger;
});

/***/ }),

/***/ "./node_modules/nodelist-foreach-polyfill/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/nodelist-foreach-polyfill/index.js ***!
  \*********************************************************/
/***/ (() => {

if (window.NodeList && !NodeList.prototype.forEach) {
  NodeList.prototype.forEach = function (callback, thisArg) {
    thisArg = thisArg || window;
    for (var i = 0; i < this.length; i++) {
      callback.call(thisArg, this[i], i, this);
    }
  };
}

/***/ }),

/***/ "./node_modules/normalize-wheel/index.js":
/*!***********************************************!*\
  !*** ./node_modules/normalize-wheel/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./src/normalizeWheel.js */ "./node_modules/normalize-wheel/src/normalizeWheel.js");

/***/ }),

/***/ "./node_modules/normalize-wheel/src/ExecutionEnvironment.js":
/*!******************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/ExecutionEnvironment.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {
  canUseDOM: canUseDOM,
  canUseWorkers: typeof Worker !== 'undefined',
  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
  canUseViewport: canUseDOM && !!window.screen,
  isInWorker: !canUseDOM // For now, this is true - might change in the future.
};
module.exports = ExecutionEnvironment;

/***/ }),

/***/ "./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":
/*!******************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js ***!
  \******************************************************************/
/***/ ((module) => {

/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * @providesModule UserAgent_DEPRECATED
 */

/**
 *  Provides entirely client-side User Agent and OS detection. You should prefer
 *  the non-deprecated UserAgent module when possible, which exposes our
 *  authoritative server-side PHP-based detection to the client.
 *
 *  Usage is straightforward:
 *
 *    if (UserAgent_DEPRECATED.ie()) {
 *      //  IE
 *    }
 *
 *  You can also do version checks:
 *
 *    if (UserAgent_DEPRECATED.ie() >= 7) {
 *      //  IE7 or better
 *    }
 *
 *  The browser functions will return NaN if the browser does not match, so
 *  you can also do version compares the other way:
 *
 *    if (UserAgent_DEPRECATED.ie() < 7) {
 *      //  IE6 or worse
 *    }
 *
 *  Note that the version is a float and may include a minor version number,
 *  so you should always use range operators to perform comparisons, not
 *  strict equality.
 *
 *  **Note:** You should **strongly** prefer capability detection to browser
 *  version detection where it's reasonable:
 *
 *    http://www.quirksmode.org/js/support.html
 *
 *  Further, we have a large number of mature wrapper functions and classes
 *  which abstract away many browser irregularities. Check the documentation,
 *  grep for things, or ask on javascript@lists.facebook.com before writing yet
 *  another copy of "event || window.event".
 *
 */

var _populated = false;

// Browsers
var _ie, _firefox, _opera, _webkit, _chrome;

// Actual IE browser for compatibility mode
var _ie_real_version;

// Platforms
var _osx, _windows, _linux, _android;

// Architectures
var _win64;

// Devices
var _iphone, _ipad, _native;
var _mobile;
function _populate() {
  if (_populated) {
    return;
  }
  _populated = true;

  // To work around buggy JS libraries that can't handle multi-digit
  // version numbers, Opera 10's user agent string claims it's Opera
  // 9, then later includes a Version/X.Y field:
  //
  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10
  var uas = navigator.userAgent;
  var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);
  _iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
  _ipad = /\b(iP[ao]d)/.exec(uas);
  _android = /Android/i.exec(uas);
  _native = /FBAN\/\w+;/i.exec(uas);
  _mobile = /Mobile/i.exec(uas);

  // Note that the IE team blog would have you believe you should be checking
  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming
  // from either x64 or ia64;  so ultimately, you should just check for Win64
  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit
  // Windows will send 'WOW64' instead.
  _win64 = !!/Win64/.exec(uas);
  if (agent) {
    _ie = agent[1] ? parseFloat(agent[1]) : agent[5] ? parseFloat(agent[5]) : NaN;
    // IE compatibility mode
    if (_ie && document && document.documentMode) {
      _ie = document.documentMode;
    }
    // grab the "true" ie version from the trident token if available
    var trident = /(?:Trident\/(\d+.\d+))/.exec(uas);
    _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;
    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;
    _opera = agent[3] ? parseFloat(agent[3]) : NaN;
    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;
    if (_webkit) {
      // We do not add the regexp to the above test, because it will always
      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in
      // the userAgent string.
      agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
    } else {
      _chrome = NaN;
    }
  } else {
    _ie = _firefox = _opera = _chrome = _webkit = NaN;
  }
  if (os) {
    if (os[1]) {
      // Detect OS X version.  If no version number matches, set _osx to true.
      // Version examples:  10, 10_6_1, 10.7
      // Parses version number as a float, taking only first two sets of
      // digits.  If only one set of digits is found, returns just the major
      // version number.
      var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);
      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;
    } else {
      _osx = false;
    }
    _windows = !!os[2];
    _linux = !!os[3];
  } else {
    _osx = _windows = _linux = false;
  }
}
var UserAgent_DEPRECATED = {
  /**
   *  Check if the UA is Internet Explorer.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  ie: function () {
    return _populate() || _ie;
  },
  /**
   * Check if we're in Internet Explorer compatibility mode.
   *
   * @return bool true if in compatibility mode, false if
   * not compatibility mode or not ie
   */
  ieCompatibilityMode: function () {
    return _populate() || _ie_real_version > _ie;
  },
  /**
   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we
   * only need this because Skype can't handle 64-bit IE yet.  We need to remove
   * this when we don't need it -- tracked by #601957.
   */
  ie64: function () {
    return UserAgent_DEPRECATED.ie() && _win64;
  },
  /**
   *  Check if the UA is Firefox.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  firefox: function () {
    return _populate() || _firefox;
  },
  /**
   *  Check if the UA is Opera.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  opera: function () {
    return _populate() || _opera;
  },
  /**
   *  Check if the UA is WebKit.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  webkit: function () {
    return _populate() || _webkit;
  },
  /**
   *  For Push
   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit
   */
  safari: function () {
    return UserAgent_DEPRECATED.webkit();
  },
  /**
   *  Check if the UA is a Chrome browser.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  chrome: function () {
    return _populate() || _chrome;
  },
  /**
   *  Check if the user is running Windows.
   *
   *  @return bool `true' if the user's OS is Windows.
   */
  windows: function () {
    return _populate() || _windows;
  },
  /**
   *  Check if the user is running Mac OS X.
   *
   *  @return float|bool   Returns a float if a version number is detected,
   *                       otherwise true/false.
   */
  osx: function () {
    return _populate() || _osx;
  },
  /**
   * Check if the user is running Linux.
   *
   * @return bool `true' if the user's OS is some flavor of Linux.
   */
  linux: function () {
    return _populate() || _linux;
  },
  /**
   * Check if the user is running on an iPhone or iPod platform.
   *
   * @return bool `true' if the user is running some flavor of the
   *    iPhone OS.
   */
  iphone: function () {
    return _populate() || _iphone;
  },
  mobile: function () {
    return _populate() || _iphone || _ipad || _android || _mobile;
  },
  nativeApp: function () {
    // webviews inside of the native apps
    return _populate() || _native;
  },
  android: function () {
    return _populate() || _android;
  },
  ipad: function () {
    return _populate() || _ipad;
  }
};
module.exports = UserAgent_DEPRECATED;

/***/ }),

/***/ "./node_modules/normalize-wheel/src/isEventSupported.js":
/*!**************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/isEventSupported.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */



var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ "./node_modules/normalize-wheel/src/ExecutionEnvironment.js");
var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }
  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);
  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }
  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }
  return isSupported;
}
module.exports = isEventSupported;

/***/ }),

/***/ "./node_modules/normalize-wheel/src/normalizeWheel.js":
/*!************************************************************!*\
  !*** ./node_modules/normalize-wheel/src/normalizeWheel.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule normalizeWheel
 * @typechecks
 */



var UserAgent_DEPRECATED = __webpack_require__(/*! ./UserAgent_DEPRECATED */ "./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js");
var isEventSupported = __webpack_require__(/*! ./isEventSupported */ "./node_modules/normalize-wheel/src/isEventSupported.js");

// Reasonable defaults
var PIXEL_STEP = 10;
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;

/**
 * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
 * complicated, thus this doc is long and (hopefully) detailed enough to answer
 * your questions.
 *
 * If you need to react to the mouse wheel in a predictable way, this code is
 * like your bestest friend. * hugs *
 *
 * As of today, there are 4 DOM event types you can listen to:
 *
 *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
 *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
 *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
 *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
 *
 * So what to do?  The is the best:
 *
 *   normalizeWheel.getEventType();
 *
 * In your event callback, use this code to get sane interpretation of the
 * deltas.  This code will return an object with properties:
 *
 *   spinX   -- normalized spin speed (use for zoom) - x plane
 *   spinY   -- " - y plane
 *   pixelX  -- normalized distance (to pixels) - x plane
 *   pixelY  -- " - y plane
 *
 * Wheel values are provided by the browser assuming you are using the wheel to
 * scroll a web page by a number of lines or pixels (or pages).  Values can vary
 * significantly on different platforms and browsers, forgetting that you can
 * scroll at different speeds.  Some devices (like trackpads) emit more events
 * at smaller increments with fine granularity, and some emit massive jumps with
 * linear speed or acceleration.
 *
 * This code does its best to normalize the deltas for you:
 *
 *   - spin is trying to normalize how far the wheel was spun (or trackpad
 *     dragged).  This is super useful for zoom support where you want to
 *     throw away the chunky scroll steps on the PC and make those equal to
 *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
 *     resolve a single slow step on a wheel to 1.
 *
 *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
 *     get the crazy differences between browsers, but at least it'll be in
 *     pixels!
 *
 *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
 *     should translate to positive value zooming IN, negative zooming OUT.
 *     This matches the newer 'wheel' event.
 *
 * Why are there spinX, spinY (or pixels)?
 *
 *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
 *     with a mouse.  It results in side-scrolling in the browser by default.
 *
 *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
 *
 *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
 *     probably is by browsers in conjunction with fancy 3D controllers .. but
 *     you know.
 *
 * Implementation info:
 *
 * Examples of 'wheel' event if you scroll slowly (down) by one step with an
 * average mouse:
 *
 *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
 *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
 *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
 *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
 *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
 *
 * On the trackpad:
 *
 *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
 *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
 *
 * On other/older browsers.. it's more complicated as there can be multiple and
 * also missing delta values.
 *
 * The 'wheel' event is more standard:
 *
 * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
 *
 * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
 * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
 * backward compatibility with older events.  Those other values help us
 * better normalize spin speed.  Example of what the browsers provide:
 *
 *                          | event.wheelDelta | event.detail
 *        ------------------+------------------+--------------
 *          Safari v5/OS X  |       -120       |       0
 *          Safari v5/Win7  |       -120       |       0
 *         Chrome v17/OS X  |       -120       |       0
 *         Chrome v17/Win7  |       -120       |       0
 *                IE9/Win7  |       -120       |   undefined
 *         Firefox v4/OS X  |     undefined    |       1
 *         Firefox v4/Win7  |     undefined    |       3
 *
 */
function normalizeWheel( /*object*/event) /*object*/{
  var sX = 0,
    sY = 0,
    // spinX, spinY
    pX = 0,
    pY = 0; // pixelX, pixelY

  // Legacy
  if ('detail' in event) {
    sY = event.detail;
  }
  if ('wheelDelta' in event) {
    sY = -event.wheelDelta / 120;
  }
  if ('wheelDeltaY' in event) {
    sY = -event.wheelDeltaY / 120;
  }
  if ('wheelDeltaX' in event) {
    sX = -event.wheelDeltaX / 120;
  }

  // side scrolling on FF with DOMMouseScroll
  if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
    sX = sY;
    sY = 0;
  }
  pX = sX * PIXEL_STEP;
  pY = sY * PIXEL_STEP;
  if ('deltaY' in event) {
    pY = event.deltaY;
  }
  if ('deltaX' in event) {
    pX = event.deltaX;
  }
  if ((pX || pY) && event.deltaMode) {
    if (event.deltaMode == 1) {
      // delta in LINE units
      pX *= LINE_HEIGHT;
      pY *= LINE_HEIGHT;
    } else {
      // delta in PAGE units
      pX *= PAGE_HEIGHT;
      pY *= PAGE_HEIGHT;
    }
  }

  // Fall-back if spin cannot be determined
  if (pX && !sX) {
    sX = pX < 1 ? -1 : 1;
  }
  if (pY && !sY) {
    sY = pY < 1 ? -1 : 1;
  }
  return {
    spinX: sX,
    spinY: sY,
    pixelX: pX,
    pixelY: pY
  };
}

/**
 * The best combination if you prefer spinX + spinY normalization.  It favors
 * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with
 * 'wheel' event, making spin speed determination impossible.
 */
normalizeWheel.getEventType = function () /*string*/{
  return UserAgent_DEPRECATED.firefox() ? 'DOMMouseScroll' : isEventSupported('wheel') ? 'wheel' : 'mousewheel';
};
module.exports = normalizeWheel;

/***/ }),

/***/ "./node_modules/object-inspect/index.js":
/*!**********************************************!*\
  !*** ./node_modules/object-inspect/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var $match = String.prototype.match;
var $slice = String.prototype.slice;
var $replace = String.prototype.replace;
var $toUpperCase = String.prototype.toUpperCase;
var $toLowerCase = String.prototype.toLowerCase;
var $test = RegExp.prototype.test;
var $concat = Array.prototype.concat;
var $join = Array.prototype.join;
var $arrSlice = Array.prototype.slice;
var $floor = Math.floor;
var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
// ie, `has-tostringtag/shams
var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol') ? Symbol.toStringTag : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;
var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype // eslint-disable-line no-proto
? function (O) {
  return O.__proto__; // eslint-disable-line no-proto
} : null);
function addNumericSeparator(num, str) {
  if (num === Infinity || num === -Infinity || num !== num || num && num > -1000 && num < 1000 || $test.call(/e/, str)) {
    return str;
  }
  var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
  if (typeof num === 'number') {
    var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
    if (int !== num) {
      var intStr = String(int);
      var dec = $slice.call(str, intStr.length + 1);
      return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
    }
  }
  return $replace.call(str, sepRegex, '$&_');
}
var utilInspect = __webpack_require__(/*! ./util.inspect */ "?4f7e");
var inspectCustom = utilInspect.custom;
var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
module.exports = function inspect_(obj, options, depth, seen) {
  var opts = options || {};
  if (has(opts, 'quoteStyle') && opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double') {
    throw new TypeError('option "quoteStyle" must be "single" or "double"');
  }
  if (has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number' ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
    throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
  }
  var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
  if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
    throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
  }
  if (has(opts, 'indent') && opts.indent !== null && opts.indent !== '\t' && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
    throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
  }
  if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
    throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
  }
  var numericSeparator = opts.numericSeparator;
  if (typeof obj === 'undefined') {
    return 'undefined';
  }
  if (obj === null) {
    return 'null';
  }
  if (typeof obj === 'boolean') {
    return obj ? 'true' : 'false';
  }
  if (typeof obj === 'string') {
    return inspectString(obj, opts);
  }
  if (typeof obj === 'number') {
    if (obj === 0) {
      return Infinity / obj > 0 ? '0' : '-0';
    }
    var str = String(obj);
    return numericSeparator ? addNumericSeparator(obj, str) : str;
  }
  if (typeof obj === 'bigint') {
    var bigIntStr = String(obj) + 'n';
    return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
  }
  var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
  if (typeof depth === 'undefined') {
    depth = 0;
  }
  if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
    return isArray(obj) ? '[Array]' : '[Object]';
  }
  var indent = getIndent(opts, depth);
  if (typeof seen === 'undefined') {
    seen = [];
  } else if (indexOf(seen, obj) >= 0) {
    return '[Circular]';
  }
  function inspect(value, from, noIndent) {
    if (from) {
      seen = $arrSlice.call(seen);
      seen.push(from);
    }
    if (noIndent) {
      var newOpts = {
        depth: opts.depth
      };
      if (has(opts, 'quoteStyle')) {
        newOpts.quoteStyle = opts.quoteStyle;
      }
      return inspect_(value, newOpts, depth + 1, seen);
    }
    return inspect_(value, opts, depth + 1, seen);
  }
  if (typeof obj === 'function' && !isRegExp(obj)) {
    // in older engines, regexes are callable
    var name = nameOf(obj);
    var keys = arrObjKeys(obj, inspect);
    return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
  }
  if (isSymbol(obj)) {
    var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
    return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
  }
  if (isElement(obj)) {
    var s = '<' + $toLowerCase.call(String(obj.nodeName));
    var attrs = obj.attributes || [];
    for (var i = 0; i < attrs.length; i++) {
      s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
    }
    s += '>';
    if (obj.childNodes && obj.childNodes.length) {
      s += '...';
    }
    s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
    return s;
  }
  if (isArray(obj)) {
    if (obj.length === 0) {
      return '[]';
    }
    var xs = arrObjKeys(obj, inspect);
    if (indent && !singleLineValues(xs)) {
      return '[' + indentedJoin(xs, indent) + ']';
    }
    return '[ ' + $join.call(xs, ', ') + ' ]';
  }
  if (isError(obj)) {
    var parts = arrObjKeys(obj, inspect);
    if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
      return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
    }
    if (parts.length === 0) {
      return '[' + String(obj) + ']';
    }
    return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
  }
  if (typeof obj === 'object' && customInspect) {
    if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
      return utilInspect(obj, {
        depth: maxDepth - depth
      });
    } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
      return obj.inspect();
    }
  }
  if (isMap(obj)) {
    var mapParts = [];
    if (mapForEach) {
      mapForEach.call(obj, function (value, key) {
        mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
      });
    }
    return collectionOf('Map', mapSize.call(obj), mapParts, indent);
  }
  if (isSet(obj)) {
    var setParts = [];
    if (setForEach) {
      setForEach.call(obj, function (value) {
        setParts.push(inspect(value, obj));
      });
    }
    return collectionOf('Set', setSize.call(obj), setParts, indent);
  }
  if (isWeakMap(obj)) {
    return weakCollectionOf('WeakMap');
  }
  if (isWeakSet(obj)) {
    return weakCollectionOf('WeakSet');
  }
  if (isWeakRef(obj)) {
    return weakCollectionOf('WeakRef');
  }
  if (isNumber(obj)) {
    return markBoxed(inspect(Number(obj)));
  }
  if (isBigInt(obj)) {
    return markBoxed(inspect(bigIntValueOf.call(obj)));
  }
  if (isBoolean(obj)) {
    return markBoxed(booleanValueOf.call(obj));
  }
  if (isString(obj)) {
    return markBoxed(inspect(String(obj)));
  }
  // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other
  /* eslint-env browser */
  if (typeof window !== 'undefined' && obj === window) {
    return '{ [object Window] }';
  }
  if (obj === __webpack_require__.g) {
    return '{ [object globalThis] }';
  }
  if (!isDate(obj) && !isRegExp(obj)) {
    var ys = arrObjKeys(obj, inspect);
    var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
    var protoTag = obj instanceof Object ? '' : 'null prototype';
    var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
    var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
    var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
    if (ys.length === 0) {
      return tag + '{}';
    }
    if (indent) {
      return tag + '{' + indentedJoin(ys, indent) + '}';
    }
    return tag + '{ ' + $join.call(ys, ', ') + ' }';
  }
  return String(obj);
};
function wrapQuotes(s, defaultStyle, opts) {
  var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
  return quoteChar + s + quoteChar;
}
function quote(s) {
  return $replace.call(String(s), /"/g, '&quot;');
}
function isArray(obj) {
  return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}
function isDate(obj) {
  return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}
function isRegExp(obj) {
  return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}
function isError(obj) {
  return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}
function isString(obj) {
  return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}
function isNumber(obj) {
  return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}
function isBoolean(obj) {
  return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
}

// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
function isSymbol(obj) {
  if (hasShammedSymbols) {
    return obj && typeof obj === 'object' && obj instanceof Symbol;
  }
  if (typeof obj === 'symbol') {
    return true;
  }
  if (!obj || typeof obj !== 'object' || !symToString) {
    return false;
  }
  try {
    symToString.call(obj);
    return true;
  } catch (e) {}
  return false;
}
function isBigInt(obj) {
  if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
    return false;
  }
  try {
    bigIntValueOf.call(obj);
    return true;
  } catch (e) {}
  return false;
}
var hasOwn = Object.prototype.hasOwnProperty || function (key) {
  return key in this;
};
function has(obj, key) {
  return hasOwn.call(obj, key);
}
function toStr(obj) {
  return objectToString.call(obj);
}
function nameOf(f) {
  if (f.name) {
    return f.name;
  }
  var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
  if (m) {
    return m[1];
  }
  return null;
}
function indexOf(xs, x) {
  if (xs.indexOf) {
    return xs.indexOf(x);
  }
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) {
      return i;
    }
  }
  return -1;
}
function isMap(x) {
  if (!mapSize || !x || typeof x !== 'object') {
    return false;
  }
  try {
    mapSize.call(x);
    try {
      setSize.call(x);
    } catch (s) {
      return true;
    }
    return x instanceof Map; // core-js workaround, pre-v2.5.0
  } catch (e) {}
  return false;
}
function isWeakMap(x) {
  if (!weakMapHas || !x || typeof x !== 'object') {
    return false;
  }
  try {
    weakMapHas.call(x, weakMapHas);
    try {
      weakSetHas.call(x, weakSetHas);
    } catch (s) {
      return true;
    }
    return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
  } catch (e) {}
  return false;
}
function isWeakRef(x) {
  if (!weakRefDeref || !x || typeof x !== 'object') {
    return false;
  }
  try {
    weakRefDeref.call(x);
    return true;
  } catch (e) {}
  return false;
}
function isSet(x) {
  if (!setSize || !x || typeof x !== 'object') {
    return false;
  }
  try {
    setSize.call(x);
    try {
      mapSize.call(x);
    } catch (m) {
      return true;
    }
    return x instanceof Set; // core-js workaround, pre-v2.5.0
  } catch (e) {}
  return false;
}
function isWeakSet(x) {
  if (!weakSetHas || !x || typeof x !== 'object') {
    return false;
  }
  try {
    weakSetHas.call(x, weakSetHas);
    try {
      weakMapHas.call(x, weakMapHas);
    } catch (s) {
      return true;
    }
    return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
  } catch (e) {}
  return false;
}
function isElement(x) {
  if (!x || typeof x !== 'object') {
    return false;
  }
  if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
    return true;
  }
  return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
}
function inspectString(str, opts) {
  if (str.length > opts.maxStringLength) {
    var remaining = str.length - opts.maxStringLength;
    var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
    return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
  }
  // eslint-disable-next-line no-control-regex
  var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
  return wrapQuotes(s, 'single', opts);
}
function lowbyte(c) {
  var n = c.charCodeAt(0);
  var x = {
    8: 'b',
    9: 't',
    10: 'n',
    12: 'f',
    13: 'r'
  }[n];
  if (x) {
    return '\\' + x;
  }
  return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
}
function markBoxed(str) {
  return 'Object(' + str + ')';
}
function weakCollectionOf(type) {
  return type + ' { ? }';
}
function collectionOf(type, size, entries, indent) {
  var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
  return type + ' (' + size + ') {' + joinedEntries + '}';
}
function singleLineValues(xs) {
  for (var i = 0; i < xs.length; i++) {
    if (indexOf(xs[i], '\n') >= 0) {
      return false;
    }
  }
  return true;
}
function getIndent(opts, depth) {
  var baseIndent;
  if (opts.indent === '\t') {
    baseIndent = '\t';
  } else if (typeof opts.indent === 'number' && opts.indent > 0) {
    baseIndent = $join.call(Array(opts.indent + 1), ' ');
  } else {
    return null;
  }
  return {
    base: baseIndent,
    prev: $join.call(Array(depth + 1), baseIndent)
  };
}
function indentedJoin(xs, indent) {
  if (xs.length === 0) {
    return '';
  }
  var lineJoiner = '\n' + indent.prev + indent.base;
  return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
}
function arrObjKeys(obj, inspect) {
  var isArr = isArray(obj);
  var xs = [];
  if (isArr) {
    xs.length = obj.length;
    for (var i = 0; i < obj.length; i++) {
      xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
    }
  }
  var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
  var symMap;
  if (hasShammedSymbols) {
    symMap = {};
    for (var k = 0; k < syms.length; k++) {
      symMap['$' + syms[k]] = syms[k];
    }
  }
  for (var key in obj) {
    // eslint-disable-line no-restricted-syntax
    if (!has(obj, key)) {
      continue;
    } // eslint-disable-line no-restricted-syntax, no-continue
    if (isArr && String(Number(key)) === key && key < obj.length) {
      continue;
    } // eslint-disable-line no-restricted-syntax, no-continue
    if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
      // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
      continue; // eslint-disable-line no-restricted-syntax, no-continue
    } else if ($test.call(/[^\w$]/, key)) {
      xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
    } else {
      xs.push(key + ': ' + inspect(obj[key], obj));
    }
  }
  if (typeof gOPS === 'function') {
    for (var j = 0; j < syms.length; j++) {
      if (isEnumerable.call(obj, syms[j])) {
        xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
      }
    }
  }
  return xs;
}

/***/ }),

/***/ "./node_modules/prefix/index.js":
/*!**************************************!*\
  !*** ./node_modules/prefix/index.js ***!
  \**************************************/
/***/ ((module) => {

// check document first so it doesn't error in node.js
var style = typeof document != 'undefined' ? document.createElement('p').style : {};
var prefixes = ['O', 'ms', 'Moz', 'Webkit'];
var upper = /([A-Z])/g;
var memo = {};

/**
 * prefix `key`
 *
 *   prefix('transform') // => WebkitTransform
 *
 * @param {String} key
 * @return {String}
 * @api public
 */
function prefix(key) {
  // Camel case
  key = key.replace(/-([a-z])/g, function (_, char) {
    return char.toUpperCase();
  });

  // Without prefix
  if (style[key] !== undefined) return key;

  // With prefix
  var Key = key.charAt(0).toUpperCase() + key.slice(1);
  var i = prefixes.length;
  while (i--) {
    var name = prefixes[i] + Key;
    if (style[name] !== undefined) return name;
  }
  return key;
}

/**
 * Memoized version of `prefix`
 *
 * @param {String} key
 * @return {String}
 * @api public
 */
function prefixMemozied(key) {
  return key in memo ? memo[key] : memo[key] = prefix(key);
}

/**
 * Create a dashed prefix
 *
 * @param {String} key
 * @return {String}
 * @api public
 */
function prefixDashed(key) {
  key = prefix(key);
  if (upper.test(key)) {
    key = '-' + key.replace(upper, '-$1');
    upper.lastIndex = 0;
  }
  return key.toLowerCase();
}
module.exports = prefixMemozied;
module.exports.dash = prefixDashed;

/***/ }),

/***/ "./node_modules/set-function-length/index.js":
/*!***************************************************!*\
  !*** ./node_modules/set-function-length/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");
var define = __webpack_require__(/*! define-data-property */ "./node_modules/define-data-property/index.js");
var hasDescriptors = __webpack_require__(/*! has-property-descriptors */ "./node_modules/has-property-descriptors/index.js")();
var gOPD = __webpack_require__(/*! gopd */ "./node_modules/gopd/index.js");
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/es-errors/type.js");
var $floor = GetIntrinsic('%Math.floor%');

/** @typedef {(...args: unknown[]) => unknown} Func */

/** @type {<T extends Func = Func>(fn: T, length: number, loose?: boolean) => T} */
module.exports = function setFunctionLength(fn, length) {
  if (typeof fn !== 'function') {
    throw new $TypeError('`fn` is not a function');
  }
  if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
    throw new $TypeError('`length` must be a positive 32-bit integer');
  }
  var loose = arguments.length > 2 && !!arguments[2];
  var functionLengthIsConfigurable = true;
  var functionLengthIsWritable = true;
  if ('length' in fn && gOPD) {
    var desc = gOPD(fn, 'length');
    if (desc && !desc.configurable) {
      functionLengthIsConfigurable = false;
    }
    if (desc && !desc.writable) {
      functionLengthIsWritable = false;
    }
  }
  if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
    if (hasDescriptors) {
      define( /** @type {Parameters<define>[0]} */fn, 'length', length, true, true);
    } else {
      define( /** @type {Parameters<define>[0]} */fn, 'length', length);
    }
  }
  return fn;
};

/***/ }),

/***/ "./node_modules/side-channel/index.js":
/*!********************************************!*\
  !*** ./node_modules/side-channel/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");
var callBound = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js");
var inspect = __webpack_require__(/*! object-inspect */ "./node_modules/object-inspect/index.js");
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/es-errors/type.js");
var $WeakMap = GetIntrinsic('%WeakMap%', true);
var $Map = GetIntrinsic('%Map%', true);
var $weakMapGet = callBound('WeakMap.prototype.get', true);
var $weakMapSet = callBound('WeakMap.prototype.set', true);
var $weakMapHas = callBound('WeakMap.prototype.has', true);
var $mapGet = callBound('Map.prototype.get', true);
var $mapSet = callBound('Map.prototype.set', true);
var $mapHas = callBound('Map.prototype.has', true);

/*
* This function traverses the list returning the node corresponding to the given key.
*
* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.
*/
/** @type {import('.').listGetNode} */
var listGetNode = function (list, key) {
  // eslint-disable-line consistent-return
  /** @type {typeof list | NonNullable<(typeof list)['next']>} */
  var prev = list;
  /** @type {(typeof list)['next']} */
  var curr;
  for (; (curr = prev.next) !== null; prev = curr) {
    if (curr.key === key) {
      prev.next = curr.next;
      // eslint-disable-next-line no-extra-parens
      curr.next = /** @type {NonNullable<typeof list.next>} */list.next;
      list.next = curr; // eslint-disable-line no-param-reassign
      return curr;
    }
  }
};

/** @type {import('.').listGet} */
var listGet = function (objects, key) {
  var node = listGetNode(objects, key);
  return node && node.value;
};
/** @type {import('.').listSet} */
var listSet = function (objects, key, value) {
  var node = listGetNode(objects, key);
  if (node) {
    node.value = value;
  } else {
    // Prepend the new node to the beginning of the list
    objects.next = /** @type {import('.').ListNode<typeof value>} */{
      // eslint-disable-line no-param-reassign, no-extra-parens
      key: key,
      next: objects.next,
      value: value
    };
  }
};
/** @type {import('.').listHas} */
var listHas = function (objects, key) {
  return !!listGetNode(objects, key);
};

/** @type {import('.')} */
module.exports = function getSideChannel() {
  /** @type {WeakMap<object, unknown>} */var $wm;
  /** @type {Map<object, unknown>} */
  var $m;
  /** @type {import('.').RootNode<unknown>} */
  var $o;

  /** @type {import('.').Channel} */
  var channel = {
    assert: function (key) {
      if (!channel.has(key)) {
        throw new $TypeError('Side channel does not contain ' + inspect(key));
      }
    },
    get: function (key) {
      // eslint-disable-line consistent-return
      if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
        if ($wm) {
          return $weakMapGet($wm, key);
        }
      } else if ($Map) {
        if ($m) {
          return $mapGet($m, key);
        }
      } else {
        if ($o) {
          // eslint-disable-line no-lonely-if
          return listGet($o, key);
        }
      }
    },
    has: function (key) {
      if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
        if ($wm) {
          return $weakMapHas($wm, key);
        }
      } else if ($Map) {
        if ($m) {
          return $mapHas($m, key);
        }
      } else {
        if ($o) {
          // eslint-disable-line no-lonely-if
          return listHas($o, key);
        }
      }
      return false;
    },
    set: function (key, value) {
      if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
        if (!$wm) {
          $wm = new $WeakMap();
        }
        $weakMapSet($wm, key, value);
      } else if ($Map) {
        if (!$m) {
          $m = new $Map();
        }
        $mapSet($m, key, value);
      } else {
        if (!$o) {
          // Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head
          $o = {
            key: {},
            next: null
          };
        }
        listSet($o, key, value);
      }
    }
  };
  return channel;
};

/***/ }),

/***/ "./node_modules/sockjs-client/dist/sockjs.js":
/*!***************************************************!*\
  !*** ./node_modules/sockjs-client/dist/sockjs.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* sockjs-client v1.6.1 | http://sockjs.org | MIT license */
(function (f) {
  if (true) {
    module.exports = f();
  } else { var g; }
})(function () {
  var define, module, exports;
  return function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = undefined;
            if (!f && c) return require(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw a.code = "MODULE_NOT_FOUND", a;
          }
          var p = n[i] = {
            exports: {}
          };
          e[i][0].call(p.exports, function (r) {
            var n = e[i][1][r];
            return o(n || r);
          }, p, p.exports, r, e, n, t);
        }
        return n[i].exports;
      }
      for (var u = undefined, i = 0; i < t.length; i++) o(t[i]);
      return o;
    }
    return r;
  }()({
    1: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var transportList = require('./transport-list');
          module.exports = require('./main')(transportList);

          // TODO can't get rid of this until all servers do
          if ('_sockjs_onload' in global) {
            setTimeout(global._sockjs_onload, 1);
          }
        }).call(this);
      }).call(this, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./main": 14,
      "./transport-list": 16
    }],
    2: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
        Event = require('./event');
      function CloseEvent() {
        Event.call(this);
        this.initEvent('close', false, false);
        this.wasClean = false;
        this.code = 0;
        this.reason = '';
      }
      inherits(CloseEvent, Event);
      module.exports = CloseEvent;
    }, {
      "./event": 4,
      "inherits": 57
    }],
    3: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
        EventTarget = require('./eventtarget');
      function EventEmitter() {
        EventTarget.call(this);
      }
      inherits(EventEmitter, EventTarget);
      EventEmitter.prototype.removeAllListeners = function (type) {
        if (type) {
          delete this._listeners[type];
        } else {
          this._listeners = {};
        }
      };
      EventEmitter.prototype.once = function (type, listener) {
        var self = this,
          fired = false;
        function g() {
          self.removeListener(type, g);
          if (!fired) {
            fired = true;
            listener.apply(this, arguments);
          }
        }
        this.on(type, g);
      };
      EventEmitter.prototype.emit = function () {
        var type = arguments[0];
        var listeners = this._listeners[type];
        if (!listeners) {
          return;
        }
        // equivalent of Array.prototype.slice.call(arguments, 1);
        var l = arguments.length;
        var args = new Array(l - 1);
        for (var ai = 1; ai < l; ai++) {
          args[ai - 1] = arguments[ai];
        }
        for (var i = 0; i < listeners.length; i++) {
          listeners[i].apply(this, args);
        }
      };
      EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
      EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;
      module.exports.EventEmitter = EventEmitter;
    }, {
      "./eventtarget": 5,
      "inherits": 57
    }],
    4: [function (require, module, exports) {
      'use strict';

      function Event(eventType) {
        this.type = eventType;
      }
      Event.prototype.initEvent = function (eventType, canBubble, cancelable) {
        this.type = eventType;
        this.bubbles = canBubble;
        this.cancelable = cancelable;
        this.timeStamp = +new Date();
        return this;
      };
      Event.prototype.stopPropagation = function () {};
      Event.prototype.preventDefault = function () {};
      Event.CAPTURING_PHASE = 1;
      Event.AT_TARGET = 2;
      Event.BUBBLING_PHASE = 3;
      module.exports = Event;
    }, {}],
    5: [function (require, module, exports) {
      'use strict';

      /* Simplified implementation of DOM2 EventTarget.
       *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
       */
      function EventTarget() {
        this._listeners = {};
      }
      EventTarget.prototype.addEventListener = function (eventType, listener) {
        if (!(eventType in this._listeners)) {
          this._listeners[eventType] = [];
        }
        var arr = this._listeners[eventType];
        // #4
        if (arr.indexOf(listener) === -1) {
          // Make a copy so as not to interfere with a current dispatchEvent.
          arr = arr.concat([listener]);
        }
        this._listeners[eventType] = arr;
      };
      EventTarget.prototype.removeEventListener = function (eventType, listener) {
        var arr = this._listeners[eventType];
        if (!arr) {
          return;
        }
        var idx = arr.indexOf(listener);
        if (idx !== -1) {
          if (arr.length > 1) {
            // Make a copy so as not to interfere with a current dispatchEvent.
            this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
          } else {
            delete this._listeners[eventType];
          }
          return;
        }
      };
      EventTarget.prototype.dispatchEvent = function () {
        var event = arguments[0];
        var t = event.type;
        // equivalent of Array.prototype.slice.call(arguments, 0);
        var args = arguments.length === 1 ? [event] : Array.apply(null, arguments);
        // TODO: This doesn't match the real behavior; per spec, onfoo get
        // their place in line from the /first/ time they're set from
        // non-null. Although WebKit bumps it to the end every time it's
        // set.
        if (this['on' + t]) {
          this['on' + t].apply(this, args);
        }
        if (t in this._listeners) {
          // Grab a reference to the listeners list. removeEventListener may alter the list.
          var listeners = this._listeners[t];
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].apply(this, args);
          }
        }
      };
      module.exports = EventTarget;
    }, {}],
    6: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
        Event = require('./event');
      function TransportMessageEvent(data) {
        Event.call(this);
        this.initEvent('message', false, false);
        this.data = data;
      }
      inherits(TransportMessageEvent, Event);
      module.exports = TransportMessageEvent;
    }, {
      "./event": 4,
      "inherits": 57
    }],
    7: [function (require, module, exports) {
      'use strict';

      var iframeUtils = require('./utils/iframe');
      function FacadeJS(transport) {
        this._transport = transport;
        transport.on('message', this._transportMessage.bind(this));
        transport.on('close', this._transportClose.bind(this));
      }
      FacadeJS.prototype._transportClose = function (code, reason) {
        iframeUtils.postMessage('c', JSON.stringify([code, reason]));
      };
      FacadeJS.prototype._transportMessage = function (frame) {
        iframeUtils.postMessage('t', frame);
      };
      FacadeJS.prototype._send = function (data) {
        this._transport.send(data);
      };
      FacadeJS.prototype._close = function () {
        this._transport.close();
        this._transport.removeAllListeners();
      };
      module.exports = FacadeJS;
    }, {
      "./utils/iframe": 47
    }],
    8: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          var urlUtils = require('./utils/url'),
            eventUtils = require('./utils/event'),
            FacadeJS = require('./facade'),
            InfoIframeReceiver = require('./info-iframe-receiver'),
            iframeUtils = require('./utils/iframe'),
            loc = require('./location');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:iframe-bootstrap');
          }
          module.exports = function (SockJS, availableTransports) {
            var transportMap = {};
            availableTransports.forEach(function (at) {
              if (at.facadeTransport) {
                transportMap[at.facadeTransport.transportName] = at.facadeTransport;
              }
            });

            // hard-coded for the info iframe
            // TODO see if we can make this more dynamic
            transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
            var parentOrigin;

            /* eslint-disable camelcase */
            SockJS.bootstrap_iframe = function () {
              /* eslint-enable camelcase */
              var facade;
              iframeUtils.currentWindowId = loc.hash.slice(1);
              var onMessage = function (e) {
                if (e.source !== parent) {
                  return;
                }
                if (typeof parentOrigin === 'undefined') {
                  parentOrigin = e.origin;
                }
                if (e.origin !== parentOrigin) {
                  return;
                }
                var iframeMessage;
                try {
                  iframeMessage = JSON.parse(e.data);
                } catch (ignored) {
                  debug('bad json', e.data);
                  return;
                }
                if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
                  return;
                }
                switch (iframeMessage.type) {
                  case 's':
                    var p;
                    try {
                      p = JSON.parse(iframeMessage.data);
                    } catch (ignored) {
                      debug('bad json', iframeMessage.data);
                      break;
                    }
                    var version = p[0];
                    var transport = p[1];
                    var transUrl = p[2];
                    var baseUrl = p[3];
                    debug(version, transport, transUrl, baseUrl);
                    // change this to semver logic
                    if (version !== SockJS.version) {
                      throw new Error('Incompatible SockJS! Main site uses:' + ' "' + version + '", the iframe:' + ' "' + SockJS.version + '".');
                    }
                    if (!urlUtils.isOriginEqual(transUrl, loc.href) || !urlUtils.isOriginEqual(baseUrl, loc.href)) {
                      throw new Error('Can\'t connect to different domain from within an ' + 'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
                    }
                    facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
                    break;
                  case 'm':
                    facade._send(iframeMessage.data);
                    break;
                  case 'c':
                    if (facade) {
                      facade._close();
                    }
                    facade = null;
                    break;
                }
              };
              eventUtils.attachEvent('message', onMessage);

              // Start
              iframeUtils.postMessage('s');
            };
          };
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "./facade": 7,
      "./info-iframe-receiver": 10,
      "./location": 13,
      "./utils/event": 46,
      "./utils/iframe": 47,
      "./utils/url": 52,
      "debug": 55
    }],
    9: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            objectUtils = require('./utils/object');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:info-ajax');
          }
          function InfoAjax(url, AjaxObject) {
            EventEmitter.call(this);
            var self = this;
            var t0 = +new Date();
            this.xo = new AjaxObject('GET', url);
            this.xo.once('finish', function (status, text) {
              var info, rtt;
              if (status === 200) {
                rtt = +new Date() - t0;
                if (text) {
                  try {
                    info = JSON.parse(text);
                  } catch (e) {
                    debug('bad json', text);
                  }
                }
                if (!objectUtils.isObject(info)) {
                  info = {};
                }
              }
              self.emit('finish', info, rtt);
              self.removeAllListeners();
            });
          }
          inherits(InfoAjax, EventEmitter);
          InfoAjax.prototype.close = function () {
            this.removeAllListeners();
            this.xo.close();
          };
          module.exports = InfoAjax;
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "./utils/object": 49,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    10: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
        EventEmitter = require('events').EventEmitter,
        XHRLocalObject = require('./transport/sender/xhr-local'),
        InfoAjax = require('./info-ajax');
      function InfoReceiverIframe(transUrl) {
        var self = this;
        EventEmitter.call(this);
        this.ir = new InfoAjax(transUrl, XHRLocalObject);
        this.ir.once('finish', function (info, rtt) {
          self.ir = null;
          self.emit('message', JSON.stringify([info, rtt]));
        });
      }
      inherits(InfoReceiverIframe, EventEmitter);
      InfoReceiverIframe.transportName = 'iframe-info-receiver';
      InfoReceiverIframe.prototype.close = function () {
        if (this.ir) {
          this.ir.close();
          this.ir = null;
        }
        this.removeAllListeners();
      };
      module.exports = InfoReceiverIframe;
    }, {
      "./info-ajax": 9,
      "./transport/sender/xhr-local": 37,
      "events": 3,
      "inherits": 57
    }],
    11: [function (require, module, exports) {
      (function (process, global) {
        (function () {
          'use strict';

          var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            utils = require('./utils/event'),
            IframeTransport = require('./transport/iframe'),
            InfoReceiverIframe = require('./info-iframe-receiver');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:info-iframe');
          }
          function InfoIframe(baseUrl, url) {
            var self = this;
            EventEmitter.call(this);
            var go = function () {
              var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);
              ifr.once('message', function (msg) {
                if (msg) {
                  var d;
                  try {
                    d = JSON.parse(msg);
                  } catch (e) {
                    debug('bad json', msg);
                    self.emit('finish');
                    self.close();
                    return;
                  }
                  var info = d[0],
                    rtt = d[1];
                  self.emit('finish', info, rtt);
                }
                self.close();
              });
              ifr.once('close', function () {
                self.emit('finish');
                self.close();
              });
            };

            // TODO this seems the same as the 'needBody' from transports
            if (!global.document.body) {
              utils.attachEvent('load', go);
            } else {
              go();
            }
          }
          inherits(InfoIframe, EventEmitter);
          InfoIframe.enabled = function () {
            return IframeTransport.enabled();
          };
          InfoIframe.prototype.close = function () {
            if (this.ifr) {
              this.ifr.close();
            }
            this.removeAllListeners();
            this.ifr = null;
          };
          module.exports = InfoIframe;
        }).call(this);
      }).call(this, {
        env: {}
      }, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./info-iframe-receiver": 10,
      "./transport/iframe": 22,
      "./utils/event": 46,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    12: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            urlUtils = require('./utils/url'),
            XDR = require('./transport/sender/xdr'),
            XHRCors = require('./transport/sender/xhr-cors'),
            XHRLocal = require('./transport/sender/xhr-local'),
            XHRFake = require('./transport/sender/xhr-fake'),
            InfoIframe = require('./info-iframe'),
            InfoAjax = require('./info-ajax');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:info-receiver');
          }
          function InfoReceiver(baseUrl, urlInfo) {
            debug(baseUrl);
            var self = this;
            EventEmitter.call(this);
            setTimeout(function () {
              self.doXhr(baseUrl, urlInfo);
            }, 0);
          }
          inherits(InfoReceiver, EventEmitter);

          // TODO this is currently ignoring the list of available transports and the whitelist

          InfoReceiver._getReceiver = function (baseUrl, url, urlInfo) {
            // determine method of CORS support (if needed)
            if (urlInfo.sameOrigin) {
              return new InfoAjax(url, XHRLocal);
            }
            if (XHRCors.enabled) {
              return new InfoAjax(url, XHRCors);
            }
            if (XDR.enabled && urlInfo.sameScheme) {
              return new InfoAjax(url, XDR);
            }
            if (InfoIframe.enabled()) {
              return new InfoIframe(baseUrl, url);
            }
            return new InfoAjax(url, XHRFake);
          };
          InfoReceiver.prototype.doXhr = function (baseUrl, urlInfo) {
            var self = this,
              url = urlUtils.addPath(baseUrl, '/info');
            debug('doXhr', url);
            this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);
            this.timeoutRef = setTimeout(function () {
              debug('timeout');
              self._cleanup(false);
              self.emit('finish');
            }, InfoReceiver.timeout);
            this.xo.once('finish', function (info, rtt) {
              debug('finish', info, rtt);
              self._cleanup(true);
              self.emit('finish', info, rtt);
            });
          };
          InfoReceiver.prototype._cleanup = function (wasClean) {
            debug('_cleanup');
            clearTimeout(this.timeoutRef);
            this.timeoutRef = null;
            if (!wasClean && this.xo) {
              this.xo.close();
            }
            this.xo = null;
          };
          InfoReceiver.prototype.close = function () {
            debug('close');
            this.removeAllListeners();
            this._cleanup(false);
          };
          InfoReceiver.timeout = 8000;
          module.exports = InfoReceiver;
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "./info-ajax": 9,
      "./info-iframe": 11,
      "./transport/sender/xdr": 34,
      "./transport/sender/xhr-cors": 35,
      "./transport/sender/xhr-fake": 36,
      "./transport/sender/xhr-local": 37,
      "./utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    13: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          module.exports = global.location || {
            origin: 'http://localhost:80',
            protocol: 'http:',
            host: 'localhost',
            port: 80,
            href: 'http://localhost/',
            hash: ''
          };
        }).call(this);
      }).call(this, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    14: [function (require, module, exports) {
      (function (process, global) {
        (function () {
          'use strict';

          require('./shims');
          var URL = require('url-parse'),
            inherits = require('inherits'),
            random = require('./utils/random'),
            escape = require('./utils/escape'),
            urlUtils = require('./utils/url'),
            eventUtils = require('./utils/event'),
            transport = require('./utils/transport'),
            objectUtils = require('./utils/object'),
            browser = require('./utils/browser'),
            log = require('./utils/log'),
            Event = require('./event/event'),
            EventTarget = require('./event/eventtarget'),
            loc = require('./location'),
            CloseEvent = require('./event/close'),
            TransportMessageEvent = require('./event/trans-message'),
            InfoReceiver = require('./info-receiver');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:main');
          }
          var transports;

          // follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface
          function SockJS(url, protocols, options) {
            if (!(this instanceof SockJS)) {
              return new SockJS(url, protocols, options);
            }
            if (arguments.length < 1) {
              throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
            }
            EventTarget.call(this);
            this.readyState = SockJS.CONNECTING;
            this.extensions = '';
            this.protocol = '';

            // non-standard extension
            options = options || {};
            if (options.protocols_whitelist) {
              log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
            }
            this._transportsWhitelist = options.transports;
            this._transportOptions = options.transportOptions || {};
            this._timeout = options.timeout || 0;
            var sessionId = options.sessionId || 8;
            if (typeof sessionId === 'function') {
              this._generateSessionId = sessionId;
            } else if (typeof sessionId === 'number') {
              this._generateSessionId = function () {
                return random.string(sessionId);
              };
            } else {
              throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
            }
            this._server = options.server || random.numberString(1000);

            // Step 1 of WS spec - parse and validate the url. Issue #8
            var parsedUrl = new URL(url);
            if (!parsedUrl.host || !parsedUrl.protocol) {
              throw new SyntaxError("The URL '" + url + "' is invalid");
            } else if (parsedUrl.hash) {
              throw new SyntaxError('The URL must not contain a fragment');
            } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
              throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
            }
            var secure = parsedUrl.protocol === 'https:';
            // Step 2 - don't allow secure origin with an insecure protocol
            if (loc.protocol === 'https:' && !secure) {
              // exception is 127.0.0.0/8 and ::1 urls
              if (!urlUtils.isLoopbackAddr(parsedUrl.hostname)) {
                throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
              }
            }

            // Step 3 - check port access - no need here
            // Step 4 - parse protocols argument
            if (!protocols) {
              protocols = [];
            } else if (!Array.isArray(protocols)) {
              protocols = [protocols];
            }

            // Step 5 - check protocols argument
            var sortedProtocols = protocols.sort();
            sortedProtocols.forEach(function (proto, i) {
              if (!proto) {
                throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
              }
              if (i < sortedProtocols.length - 1 && proto === sortedProtocols[i + 1]) {
                throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
              }
            });

            // Step 6 - convert origin
            var o = urlUtils.getOrigin(loc.href);
            this._origin = o ? o.toLowerCase() : null;

            // remove the trailing slash
            parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, ''));

            // store the sanitized url
            this.url = parsedUrl.href;
            debug('using url', this.url);

            // Step 7 - start connection in background
            // obtain server info
            // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26
            this._urlInfo = {
              nullOrigin: !browser.hasDomain(),
              sameOrigin: urlUtils.isOriginEqual(this.url, loc.href),
              sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
            };
            this._ir = new InfoReceiver(this.url, this._urlInfo);
            this._ir.once('finish', this._receiveInfo.bind(this));
          }
          inherits(SockJS, EventTarget);
          function userSetCode(code) {
            return code === 1000 || code >= 3000 && code <= 4999;
          }
          SockJS.prototype.close = function (code, reason) {
            // Step 1
            if (code && !userSetCode(code)) {
              throw new Error('InvalidAccessError: Invalid code');
            }
            // Step 2.4 states the max is 123 bytes, but we are just checking length
            if (reason && reason.length > 123) {
              throw new SyntaxError('reason argument has an invalid length');
            }

            // Step 3.1
            if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
              return;
            }

            // TODO look at docs to determine how to set this
            var wasClean = true;
            this._close(code || 1000, reason || 'Normal closure', wasClean);
          };
          SockJS.prototype.send = function (data) {
            // #13 - convert anything non-string to string
            // TODO this currently turns objects into [object Object]
            if (typeof data !== 'string') {
              data = '' + data;
            }
            if (this.readyState === SockJS.CONNECTING) {
              throw new Error('InvalidStateError: The connection has not been established yet');
            }
            if (this.readyState !== SockJS.OPEN) {
              return;
            }
            this._transport.send(escape.quote(data));
          };
          SockJS.version = require('./version');
          SockJS.CONNECTING = 0;
          SockJS.OPEN = 1;
          SockJS.CLOSING = 2;
          SockJS.CLOSED = 3;
          SockJS.prototype._receiveInfo = function (info, rtt) {
            debug('_receiveInfo', rtt);
            this._ir = null;
            if (!info) {
              this._close(1002, 'Cannot connect to server');
              return;
            }

            // establish a round-trip timeout (RTO) based on the
            // round-trip time (RTT)
            this._rto = this.countRTO(rtt);
            // allow server to override url used for the actual transport
            this._transUrl = info.base_url ? info.base_url : this.url;
            info = objectUtils.extend(info, this._urlInfo);
            debug('info', info);
            // determine list of desired and supported transports
            var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
            this._transports = enabledTransports.main;
            debug(this._transports.length + ' enabled transports');
            this._connect();
          };
          SockJS.prototype._connect = function () {
            for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
              debug('attempt', Transport.transportName);
              if (Transport.needBody) {
                if (!global.document.body || typeof global.document.readyState !== 'undefined' && global.document.readyState !== 'complete' && global.document.readyState !== 'interactive') {
                  debug('waiting for body');
                  this._transports.unshift(Transport);
                  eventUtils.attachEvent('load', this._connect.bind(this));
                  return;
                }
              }

              // calculate timeout based on RTO and round trips. Default to 5s
              var timeoutMs = Math.max(this._timeout, this._rto * Transport.roundTrips || 5000);
              this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
              debug('using timeout', timeoutMs);
              var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
              var options = this._transportOptions[Transport.transportName];
              debug('transport url', transportUrl);
              var transportObj = new Transport(transportUrl, this._transUrl, options);
              transportObj.on('message', this._transportMessage.bind(this));
              transportObj.once('close', this._transportClose.bind(this));
              transportObj.transportName = Transport.transportName;
              this._transport = transportObj;
              return;
            }
            this._close(2000, 'All transports failed', false);
          };
          SockJS.prototype._transportTimeout = function () {
            debug('_transportTimeout');
            if (this.readyState === SockJS.CONNECTING) {
              if (this._transport) {
                this._transport.close();
              }
              this._transportClose(2007, 'Transport timed out');
            }
          };
          SockJS.prototype._transportMessage = function (msg) {
            debug('_transportMessage', msg);
            var self = this,
              type = msg.slice(0, 1),
              content = msg.slice(1),
              payload;

            // first check for messages that don't need a payload
            switch (type) {
              case 'o':
                this._open();
                return;
              case 'h':
                this.dispatchEvent(new Event('heartbeat'));
                debug('heartbeat', this.transport);
                return;
            }
            if (content) {
              try {
                payload = JSON.parse(content);
              } catch (e) {
                debug('bad json', content);
              }
            }
            if (typeof payload === 'undefined') {
              debug('empty payload', content);
              return;
            }
            switch (type) {
              case 'a':
                if (Array.isArray(payload)) {
                  payload.forEach(function (p) {
                    debug('message', self.transport, p);
                    self.dispatchEvent(new TransportMessageEvent(p));
                  });
                }
                break;
              case 'm':
                debug('message', this.transport, payload);
                this.dispatchEvent(new TransportMessageEvent(payload));
                break;
              case 'c':
                if (Array.isArray(payload) && payload.length === 2) {
                  this._close(payload[0], payload[1], true);
                }
                break;
            }
          };
          SockJS.prototype._transportClose = function (code, reason) {
            debug('_transportClose', this.transport, code, reason);
            if (this._transport) {
              this._transport.removeAllListeners();
              this._transport = null;
              this.transport = null;
            }
            if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
              this._connect();
              return;
            }
            this._close(code, reason);
          };
          SockJS.prototype._open = function () {
            debug('_open', this._transport && this._transport.transportName, this.readyState);
            if (this.readyState === SockJS.CONNECTING) {
              if (this._transportTimeoutId) {
                clearTimeout(this._transportTimeoutId);
                this._transportTimeoutId = null;
              }
              this.readyState = SockJS.OPEN;
              this.transport = this._transport.transportName;
              this.dispatchEvent(new Event('open'));
              debug('connected', this.transport);
            } else {
              // The server might have been restarted, and lost track of our
              // connection.
              this._close(1006, 'Server lost session');
            }
          };
          SockJS.prototype._close = function (code, reason, wasClean) {
            debug('_close', this.transport, code, reason, wasClean, this.readyState);
            var forceFail = false;
            if (this._ir) {
              forceFail = true;
              this._ir.close();
              this._ir = null;
            }
            if (this._transport) {
              this._transport.close();
              this._transport = null;
              this.transport = null;
            }
            if (this.readyState === SockJS.CLOSED) {
              throw new Error('InvalidStateError: SockJS has already been closed');
            }
            this.readyState = SockJS.CLOSING;
            setTimeout(function () {
              this.readyState = SockJS.CLOSED;
              if (forceFail) {
                this.dispatchEvent(new Event('error'));
              }
              var e = new CloseEvent('close');
              e.wasClean = wasClean || false;
              e.code = code || 1000;
              e.reason = reason;
              this.dispatchEvent(e);
              this.onmessage = this.onclose = this.onerror = null;
              debug('disconnected');
            }.bind(this), 0);
          };

          // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
          // and RFC 2988.
          SockJS.prototype.countRTO = function (rtt) {
            // In a local environment, when using IE8/9 and the `jsonp-polling`
            // transport the time needed to establish a connection (the time that pass
            // from the opening of the transport to the call of `_dispatchOpen`) is
            // around 200msec (the lower bound used in the article above) and this
            // causes spurious timeouts. For this reason we calculate a value slightly
            // larger than that used in the article.
            if (rtt > 100) {
              return 4 * rtt; // rto > 400msec
            }
            return 300 + rtt; // 300msec < rto <= 400msec
          };
          module.exports = function (availableTransports) {
            transports = transport(availableTransports);
            require('./iframe-bootstrap')(SockJS, availableTransports);
            return SockJS;
          };
        }).call(this);
      }).call(this, {
        env: {}
      }, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./event/close": 2,
      "./event/event": 4,
      "./event/eventtarget": 5,
      "./event/trans-message": 6,
      "./iframe-bootstrap": 8,
      "./info-receiver": 12,
      "./location": 13,
      "./shims": 15,
      "./utils/browser": 44,
      "./utils/escape": 45,
      "./utils/event": 46,
      "./utils/log": 48,
      "./utils/object": 49,
      "./utils/random": 50,
      "./utils/transport": 51,
      "./utils/url": 52,
      "./version": 53,
      "debug": 55,
      "inherits": 57,
      "url-parse": 60
    }],
    15: [function (require, module, exports) {
      /* eslint-disable */
      /* jscs: disable */
      'use strict';

      // pulled specific shims from https://github.com/es-shims/es5-shim
      var ArrayPrototype = Array.prototype;
      var ObjectPrototype = Object.prototype;
      var FunctionPrototype = Function.prototype;
      var StringPrototype = String.prototype;
      var array_slice = ArrayPrototype.slice;
      var _toString = ObjectPrototype.toString;
      var isFunction = function (val) {
        return ObjectPrototype.toString.call(val) === '[object Function]';
      };
      var isArray = function isArray(obj) {
        return _toString.call(obj) === '[object Array]';
      };
      var isString = function isString(obj) {
        return _toString.call(obj) === '[object String]';
      };
      var supportsDescriptors = Object.defineProperty && function () {
        try {
          Object.defineProperty({}, 'x', {});
          return true;
        } catch (e) {
          /* this is ES3 */
          return false;
        }
      }();

      // Define configurable, writable and non-enumerable props
      // if they don't exist.
      var defineProperty;
      if (supportsDescriptors) {
        defineProperty = function (object, name, method, forceAssign) {
          if (!forceAssign && name in object) {
            return;
          }
          Object.defineProperty(object, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: method
          });
        };
      } else {
        defineProperty = function (object, name, method, forceAssign) {
          if (!forceAssign && name in object) {
            return;
          }
          object[name] = method;
        };
      }
      var defineProperties = function (object, map, forceAssign) {
        for (var name in map) {
          if (ObjectPrototype.hasOwnProperty.call(map, name)) {
            defineProperty(object, name, map[name], forceAssign);
          }
        }
      };
      var toObject = function (o) {
        if (o == null) {
          // this matches both null and undefined
          throw new TypeError("can't convert " + o + ' to object');
        }
        return Object(o);
      };

      //
      // Util
      // ======
      //

      // ES5 9.4
      // http://es5.github.com/#x9.4
      // http://jsperf.com/to-integer

      function toInteger(num) {
        var n = +num;
        if (n !== n) {
          // isNaN
          n = 0;
        } else if (n !== 0 && n !== 1 / 0 && n !== -(1 / 0)) {
          n = (n > 0 || -1) * Math.floor(Math.abs(n));
        }
        return n;
      }
      function ToUint32(x) {
        return x >>> 0;
      }

      //
      // Function
      // ========
      //

      // ES-5 15.3.4.5
      // http://es5.github.com/#x15.3.4.5

      function Empty() {}
      defineProperties(FunctionPrototype, {
        bind: function bind(that) {
          // .length is 1
          // 1. Let Target be the this value.
          var target = this;
          // 2. If IsCallable(Target) is false, throw a TypeError exception.
          if (!isFunction(target)) {
            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
          }
          // 3. Let A be a new (possibly empty) internal list of all of the
          //   argument values provided after thisArg (arg1, arg2 etc), in order.
          // XXX slicedArgs will stand in for "A" if used
          var args = array_slice.call(arguments, 1); // for normal call
          // 4. Let F be a new native ECMAScript object.
          // 11. Set the [[Prototype]] internal property of F to the standard
          //   built-in Function prototype object as specified in 15.3.3.1.
          // 12. Set the [[Call]] internal property of F as described in
          //   15.3.4.5.1.
          // 13. Set the [[Construct]] internal property of F as described in
          //   15.3.4.5.2.
          // 14. Set the [[HasInstance]] internal property of F as described in
          //   15.3.4.5.3.
          var binder = function () {
            if (this instanceof bound) {
              // 15.3.4.5.2 [[Construct]]
              // When the [[Construct]] internal method of a function object,
              // F that was created using the bind function is called with a
              // list of arguments ExtraArgs, the following steps are taken:
              // 1. Let target be the value of F's [[TargetFunction]]
              //   internal property.
              // 2. If target has no [[Construct]] internal method, a
              //   TypeError exception is thrown.
              // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
              //   property.
              // 4. Let args be a new list containing the same values as the
              //   list boundArgs in the same order followed by the same
              //   values as the list ExtraArgs in the same order.
              // 5. Return the result of calling the [[Construct]] internal
              //   method of target providing args as the arguments.

              var result = target.apply(this, args.concat(array_slice.call(arguments)));
              if (Object(result) === result) {
                return result;
              }
              return this;
            } else {
              // 15.3.4.5.1 [[Call]]
              // When the [[Call]] internal method of a function object, F,
              // which was created using the bind function is called with a
              // this value and a list of arguments ExtraArgs, the following
              // steps are taken:
              // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
              //   property.
              // 2. Let boundThis be the value of F's [[BoundThis]] internal
              //   property.
              // 3. Let target be the value of F's [[TargetFunction]] internal
              //   property.
              // 4. Let args be a new list containing the same values as the
              //   list boundArgs in the same order followed by the same
              //   values as the list ExtraArgs in the same order.
              // 5. Return the result of calling the [[Call]] internal method
              //   of target providing boundThis as the this value and
              //   providing args as the arguments.

              // equiv: target.call(this, ...boundArgs, ...args)
              return target.apply(that, args.concat(array_slice.call(arguments)));
            }
          };

          // 15. If the [[Class]] internal property of Target is "Function", then
          //     a. Let L be the length property of Target minus the length of A.
          //     b. Set the length own property of F to either 0 or L, whichever is
          //       larger.
          // 16. Else set the length own property of F to 0.

          var boundLength = Math.max(0, target.length - args.length);

          // 17. Set the attributes of the length own property of F to the values
          //   specified in 15.3.5.1.
          var boundArgs = [];
          for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
          }

          // XXX Build a dynamic function with desired amount of arguments is the only
          // way to set the length property of a function.
          // In environments where Content Security Policies enabled (Chrome extensions,
          // for ex.) all use of eval or Function costructor throws an exception.
          // However in all of these environments Function.prototype.bind exists
          // and so this code will never be executed.
          var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);
          if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            // Clean up dangling references.
            Empty.prototype = null;
          }

          // TODO
          // 18. Set the [[Extensible]] internal property of F to true.

          // TODO
          // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
          // 20. Call the [[DefineOwnProperty]] internal method of F with
          //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
          //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
          //   false.
          // 21. Call the [[DefineOwnProperty]] internal method of F with
          //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
          //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
          //   and false.

          // TODO
          // NOTE Function objects created using Function.prototype.bind do not
          // have a prototype property or the [[Code]], [[FormalParameters]], and
          // [[Scope]] internal properties.
          // XXX can't delete prototype in pure-js.

          // 22. Return F.
          return bound;
        }
      });

      //
      // Array
      // =====
      //

      // ES5 15.4.3.2
      // http://es5.github.com/#x15.4.3.2
      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
      defineProperties(Array, {
        isArray: isArray
      });
      var boxedString = Object('a');
      var splitString = boxedString[0] !== 'a' || !(0 in boxedString);
      var properlyBoxesContext = function properlyBoxed(method) {
        // Check node 0.6.21 bug where third parameter is not boxed
        var properlyBoxesNonStrict = true;
        var properlyBoxesStrict = true;
        if (method) {
          method.call('foo', function (_, __, context) {
            if (typeof context !== 'object') {
              properlyBoxesNonStrict = false;
            }
          });
          method.call([1], function () {
            'use strict';

            properlyBoxesStrict = typeof this === 'string';
          }, 'x');
        }
        return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
      };
      defineProperties(ArrayPrototype, {
        forEach: function forEach(fun /*, thisp*/) {
          var object = toObject(this),
            self = splitString && isString(this) ? this.split('') : object,
            thisp = arguments[1],
            i = -1,
            length = self.length >>> 0;

          // If no callback function or if callback is not a callable function
          if (!isFunction(fun)) {
            throw new TypeError(); // TODO message
          }
          while (++i < length) {
            if (i in self) {
              // Invoke the callback function with call, passing arguments:
              // context, property value, property key, thisArg object
              // context
              fun.call(thisp, self[i], i, object);
            }
          }
        }
      }, !properlyBoxesContext(ArrayPrototype.forEach));

      // ES5 15.4.4.14
      // http://es5.github.com/#x15.4.4.14
      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
      var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
      defineProperties(ArrayPrototype, {
        indexOf: function indexOf(sought /*, fromIndex */) {
          var self = splitString && isString(this) ? this.split('') : toObject(this),
            length = self.length >>> 0;
          if (!length) {
            return -1;
          }
          var i = 0;
          if (arguments.length > 1) {
            i = toInteger(arguments[1]);
          }

          // handle negative indices
          i = i >= 0 ? i : Math.max(0, length + i);
          for (; i < length; i++) {
            if (i in self && self[i] === sought) {
              return i;
            }
          }
          return -1;
        }
      }, hasFirefox2IndexOfBug);

      //
      // String
      // ======
      //

      // ES5 15.5.4.14
      // http://es5.github.com/#x15.5.4.14

      // [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
      // Many browsers do not split properly with regular expressions or they
      // do not perform the split correctly under obscure conditions.
      // See http://blog.stevenlevithan.com/archives/cross-browser-split
      // I've tested in many browsers and this seems to cover the deviant ones:
      //    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
      //    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
      //    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
      //       [undefined, "t", undefined, "e", ...]
      //    ''.split(/.?/) should be [], not [""]
      //    '.'.split(/()()/) should be ["."], not ["", "", "."]

      var string_split = StringPrototype.split;
      if ('ab'.split(/(?:ab)*/).length !== 2 || '.'.split(/(.?)(.?)/).length !== 4 || 'tesst'.split(/(s)*/)[1] === 't' || 'test'.split(/(?:)/, -1).length !== 4 || ''.split(/.?/).length || '.'.split(/()()/).length > 1) {
        (function () {
          var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

          StringPrototype.split = function (separator, limit) {
            var string = this;
            if (separator === void 0 && limit === 0) {
              return [];
            }

            // If `separator` is not a regex, use native split
            if (_toString.call(separator) !== '[object RegExp]') {
              return string_split.call(this, separator, limit);
            }
            var output = [],
              flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.extended ? 'x' : '') + (
              // Proposed for ES6
              separator.sticky ? 'y' : ''),
              // Firefox 3+
              lastLastIndex = 0,
              // Make `global` and avoid `lastIndex` issues by working with a copy
              separator2,
              match,
              lastIndex,
              lastLength;
            separator = new RegExp(separator.source, flags + 'g');
            string += ''; // Type-convert
            if (!compliantExecNpcg) {
              // Doesn't need flags gy, but they don't hurt
              separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // Math.pow(2, 32) - 1
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */
            limit = limit === void 0 ? -1 >>> 0 :
            // Math.pow(2, 32) - 1
            ToUint32(limit);
            while (match = separator.exec(string)) {
              // `separator.lastIndex` is not reliable cross-browser
              lastIndex = match.index + match[0].length;
              if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index));
                // Fix browsers whose `exec` methods don't consistently return `undefined` for
                // nonparticipating capturing groups
                if (!compliantExecNpcg && match.length > 1) {
                  match[0].replace(separator2, function () {
                    for (var i = 1; i < arguments.length - 2; i++) {
                      if (arguments[i] === void 0) {
                        match[i] = void 0;
                      }
                    }
                  });
                }
                if (match.length > 1 && match.index < string.length) {
                  ArrayPrototype.push.apply(output, match.slice(1));
                }
                lastLength = match[0].length;
                lastLastIndex = lastIndex;
                if (output.length >= limit) {
                  break;
                }
              }
              if (separator.lastIndex === match.index) {
                separator.lastIndex++; // Avoid an infinite loop
              }
            }
            if (lastLastIndex === string.length) {
              if (lastLength || !separator.test('')) {
                output.push('');
              }
            } else {
              output.push(string.slice(lastLastIndex));
            }
            return output.length > limit ? output.slice(0, limit) : output;
          };
        })();

        // [bugfix, chrome]
        // If separator is undefined, then the result array contains just one String,
        // which is the this value (converted to a String). If limit is not undefined,
        // then the output array is truncated so that it contains no more than limit
        // elements.
        // "0".split(undefined, 0) -> []
      } else if ('0'.split(void 0, 0).length) {
        StringPrototype.split = function split(separator, limit) {
          if (separator === void 0 && limit === 0) {
            return [];
          }
          return string_split.call(this, separator, limit);
        };
      }

      // ECMA-262, 3rd B.2.3
      // Not an ECMAScript standard, although ECMAScript 3rd Edition has a
      // non-normative section suggesting uniform semantics and it should be
      // normalized across all browsers
      // [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
      var string_substr = StringPrototype.substr;
      var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
      defineProperties(StringPrototype, {
        substr: function substr(start, length) {
          return string_substr.call(this, start < 0 ? (start = this.length + start) < 0 ? 0 : start : start, length);
        }
      }, hasNegativeSubstrBug);
    }, {}],
    16: [function (require, module, exports) {
      'use strict';

      module.exports = [
      // streaming transports
      require('./transport/websocket'), require('./transport/xhr-streaming'), require('./transport/xdr-streaming'), require('./transport/eventsource'), require('./transport/lib/iframe-wrap')(require('./transport/eventsource'))

      // polling transports
      , require('./transport/htmlfile'), require('./transport/lib/iframe-wrap')(require('./transport/htmlfile')), require('./transport/xhr-polling'), require('./transport/xdr-polling'), require('./transport/lib/iframe-wrap')(require('./transport/xhr-polling')), require('./transport/jsonp-polling')];
    }, {
      "./transport/eventsource": 20,
      "./transport/htmlfile": 21,
      "./transport/jsonp-polling": 23,
      "./transport/lib/iframe-wrap": 26,
      "./transport/websocket": 38,
      "./transport/xdr-polling": 39,
      "./transport/xdr-streaming": 40,
      "./transport/xhr-polling": 41,
      "./transport/xhr-streaming": 42
    }],
    17: [function (require, module, exports) {
      (function (process, global) {
        (function () {
          'use strict';

          var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            utils = require('../../utils/event'),
            urlUtils = require('../../utils/url'),
            XHR = global.XMLHttpRequest;
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:browser:xhr');
          }
          function AbstractXHRObject(method, url, payload, opts) {
            debug(method, url);
            var self = this;
            EventEmitter.call(this);
            setTimeout(function () {
              self._start(method, url, payload, opts);
            }, 0);
          }
          inherits(AbstractXHRObject, EventEmitter);
          AbstractXHRObject.prototype._start = function (method, url, payload, opts) {
            var self = this;
            try {
              this.xhr = new XHR();
            } catch (x) {
              // intentionally empty
            }
            if (!this.xhr) {
              debug('no xhr');
              this.emit('finish', 0, 'no xhr support');
              this._cleanup();
              return;
            }

            // several browsers cache POSTs
            url = urlUtils.addQuery(url, 't=' + +new Date());

            // Explorer tends to keep connection open, even after the
            // tab gets closed: http://bugs.jquery.com/ticket/5280
            this.unloadRef = utils.unloadAdd(function () {
              debug('unload cleanup');
              self._cleanup(true);
            });
            try {
              this.xhr.open(method, url, true);
              if (this.timeout && 'timeout' in this.xhr) {
                this.xhr.timeout = this.timeout;
                this.xhr.ontimeout = function () {
                  debug('xhr timeout');
                  self.emit('finish', 0, '');
                  self._cleanup(false);
                };
              }
            } catch (e) {
              debug('exception', e);
              // IE raises an exception on wrong port.
              this.emit('finish', 0, '');
              this._cleanup(false);
              return;
            }
            if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
              debug('withCredentials');
              // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
              // "This never affects same-site requests."

              this.xhr.withCredentials = true;
            }
            if (opts && opts.headers) {
              for (var key in opts.headers) {
                this.xhr.setRequestHeader(key, opts.headers[key]);
              }
            }
            this.xhr.onreadystatechange = function () {
              if (self.xhr) {
                var x = self.xhr;
                var text, status;
                debug('readyState', x.readyState);
                switch (x.readyState) {
                  case 3:
                    // IE doesn't like peeking into responseText or status
                    // on Microsoft.XMLHTTP and readystate=3
                    try {
                      status = x.status;
                      text = x.responseText;
                    } catch (e) {
                      // intentionally empty
                    }
                    debug('status', status);
                    // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
                    if (status === 1223) {
                      status = 204;
                    }

                    // IE does return readystate == 3 for 404 answers.
                    if (status === 200 && text && text.length > 0) {
                      debug('chunk');
                      self.emit('chunk', status, text);
                    }
                    break;
                  case 4:
                    status = x.status;
                    debug('status', status);
                    // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
                    if (status === 1223) {
                      status = 204;
                    }
                    // IE returns this for a bad port
                    // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx
                    if (status === 12005 || status === 12029) {
                      status = 0;
                    }
                    debug('finish', status, x.responseText);
                    self.emit('finish', status, x.responseText);
                    self._cleanup(false);
                    break;
                }
              }
            };
            try {
              self.xhr.send(payload);
            } catch (e) {
              self.emit('finish', 0, '');
              self._cleanup(false);
            }
          };
          AbstractXHRObject.prototype._cleanup = function (abort) {
            debug('cleanup');
            if (!this.xhr) {
              return;
            }
            this.removeAllListeners();
            utils.unloadDel(this.unloadRef);

            // IE needs this field to be a function
            this.xhr.onreadystatechange = function () {};
            if (this.xhr.ontimeout) {
              this.xhr.ontimeout = null;
            }
            if (abort) {
              try {
                this.xhr.abort();
              } catch (x) {
                // intentionally empty
              }
            }
            this.unloadRef = this.xhr = null;
          };
          AbstractXHRObject.prototype.close = function () {
            debug('close');
            this._cleanup(true);
          };
          AbstractXHRObject.enabled = !!XHR;
          // override XMLHttpRequest for IE6/7
          // obfuscate to avoid firewalls
          var axo = ['Active'].concat('Object').join('X');
          if (!AbstractXHRObject.enabled && axo in global) {
            debug('overriding xmlhttprequest');
            XHR = function () {
              try {
                return new global[axo]('Microsoft.XMLHTTP');
              } catch (e) {
                return null;
              }
            };
            AbstractXHRObject.enabled = !!new XHR();
          }
          var cors = false;
          try {
            cors = 'withCredentials' in new XHR();
          } catch (ignored) {
            // intentionally empty
          }
          AbstractXHRObject.supportsCORS = cors;
          module.exports = AbstractXHRObject;
        }).call(this);
      }).call(this, {
        env: {}
      }, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/event": 46,
      "../../utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    18: [function (require, module, exports) {
      (function (global) {
        (function () {
          module.exports = global.EventSource;
        }).call(this);
      }).call(this, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    19: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var Driver = global.WebSocket || global.MozWebSocket;
          if (Driver) {
            module.exports = function WebSocketBrowserDriver(url) {
              return new Driver(url);
            };
          } else {
            module.exports = undefined;
          }
        }).call(this);
      }).call(this, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    20: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
        AjaxBasedTransport = require('./lib/ajax-based'),
        EventSourceReceiver = require('./receiver/eventsource'),
        XHRCorsObject = require('./sender/xhr-cors'),
        EventSourceDriver = require('eventsource');
      function EventSourceTransport(transUrl) {
        if (!EventSourceTransport.enabled()) {
          throw new Error('Transport created when disabled');
        }
        AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
      }
      inherits(EventSourceTransport, AjaxBasedTransport);
      EventSourceTransport.enabled = function () {
        return !!EventSourceDriver;
      };
      EventSourceTransport.transportName = 'eventsource';
      EventSourceTransport.roundTrips = 2;
      module.exports = EventSourceTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/eventsource": 29,
      "./sender/xhr-cors": 35,
      "eventsource": 18,
      "inherits": 57
    }],
    21: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
        HtmlfileReceiver = require('./receiver/htmlfile'),
        XHRLocalObject = require('./sender/xhr-local'),
        AjaxBasedTransport = require('./lib/ajax-based');
      function HtmlFileTransport(transUrl) {
        if (!HtmlfileReceiver.enabled) {
          throw new Error('Transport created when disabled');
        }
        AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
      }
      inherits(HtmlFileTransport, AjaxBasedTransport);
      HtmlFileTransport.enabled = function (info) {
        return HtmlfileReceiver.enabled && info.sameOrigin;
      };
      HtmlFileTransport.transportName = 'htmlfile';
      HtmlFileTransport.roundTrips = 2;
      module.exports = HtmlFileTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/htmlfile": 30,
      "./sender/xhr-local": 37,
      "inherits": 57
    }],
    22: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          // Few cool transports do work only for same-origin. In order to make
          // them work cross-domain we shall use iframe, served from the
          // remote domain. New browsers have capabilities to communicate with
          // cross domain iframe using postMessage(). In IE it was implemented
          // from IE 8+, but of course, IE got some details wrong:
          //    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
          //    http://stevesouders.com/misc/test-postmessage.php
          var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter,
            version = require('../version'),
            urlUtils = require('../utils/url'),
            iframeUtils = require('../utils/iframe'),
            eventUtils = require('../utils/event'),
            random = require('../utils/random');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:transport:iframe');
          }
          function IframeTransport(transport, transUrl, baseUrl) {
            if (!IframeTransport.enabled()) {
              throw new Error('Transport created when disabled');
            }
            EventEmitter.call(this);
            var self = this;
            this.origin = urlUtils.getOrigin(baseUrl);
            this.baseUrl = baseUrl;
            this.transUrl = transUrl;
            this.transport = transport;
            this.windowId = random.string(8);
            var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
            debug(transport, transUrl, iframeUrl);
            this.iframeObj = iframeUtils.createIframe(iframeUrl, function (r) {
              debug('err callback');
              self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
              self.close();
            });
            this.onmessageCallback = this._message.bind(this);
            eventUtils.attachEvent('message', this.onmessageCallback);
          }
          inherits(IframeTransport, EventEmitter);
          IframeTransport.prototype.close = function () {
            debug('close');
            this.removeAllListeners();
            if (this.iframeObj) {
              eventUtils.detachEvent('message', this.onmessageCallback);
              try {
                // When the iframe is not loaded, IE raises an exception
                // on 'contentWindow'.
                this.postMessage('c');
              } catch (x) {
                // intentionally empty
              }
              this.iframeObj.cleanup();
              this.iframeObj = null;
              this.onmessageCallback = this.iframeObj = null;
            }
          };
          IframeTransport.prototype._message = function (e) {
            debug('message', e.data);
            if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
              debug('not same origin', e.origin, this.origin);
              return;
            }
            var iframeMessage;
            try {
              iframeMessage = JSON.parse(e.data);
            } catch (ignored) {
              debug('bad json', e.data);
              return;
            }
            if (iframeMessage.windowId !== this.windowId) {
              debug('mismatched window id', iframeMessage.windowId, this.windowId);
              return;
            }
            switch (iframeMessage.type) {
              case 's':
                this.iframeObj.loaded();
                // window global dependency
                this.postMessage('s', JSON.stringify([version, this.transport, this.transUrl, this.baseUrl]));
                break;
              case 't':
                this.emit('message', iframeMessage.data);
                break;
              case 'c':
                var cdata;
                try {
                  cdata = JSON.parse(iframeMessage.data);
                } catch (ignored) {
                  debug('bad json', iframeMessage.data);
                  return;
                }
                this.emit('close', cdata[0], cdata[1]);
                this.close();
                break;
            }
          };
          IframeTransport.prototype.postMessage = function (type, data) {
            debug('postMessage', type, data);
            this.iframeObj.post(JSON.stringify({
              windowId: this.windowId,
              type: type,
              data: data || ''
            }), this.origin);
          };
          IframeTransport.prototype.send = function (message) {
            debug('send', message);
            this.postMessage('m', message);
          };
          IframeTransport.enabled = function () {
            return iframeUtils.iframeEnabled;
          };
          IframeTransport.transportName = 'iframe';
          IframeTransport.roundTrips = 2;
          module.exports = IframeTransport;
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "../utils/event": 46,
      "../utils/iframe": 47,
      "../utils/random": 50,
      "../utils/url": 52,
      "../version": 53,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    23: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          // The simplest and most robust transport, using the well-know cross
          // domain hack - JSONP. This transport is quite inefficient - one
          // message could use up to one http request. But at least it works almost
          // everywhere.
          // Known limitations:
          //   o you will get a spinning cursor
          //   o for Konqueror a dumb timer is needed to detect errors
          var inherits = require('inherits'),
            SenderReceiver = require('./lib/sender-receiver'),
            JsonpReceiver = require('./receiver/jsonp'),
            jsonpSender = require('./sender/jsonp');
          function JsonPTransport(transUrl) {
            if (!JsonPTransport.enabled()) {
              throw new Error('Transport created when disabled');
            }
            SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
          }
          inherits(JsonPTransport, SenderReceiver);
          JsonPTransport.enabled = function () {
            return !!global.document;
          };
          JsonPTransport.transportName = 'jsonp-polling';
          JsonPTransport.roundTrips = 1;
          JsonPTransport.needBody = true;
          module.exports = JsonPTransport;
        }).call(this);
      }).call(this, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./lib/sender-receiver": 28,
      "./receiver/jsonp": 31,
      "./sender/jsonp": 33,
      "inherits": 57
    }],
    24: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          var inherits = require('inherits'),
            urlUtils = require('../../utils/url'),
            SenderReceiver = require('./sender-receiver');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:ajax-based');
          }
          function createAjaxSender(AjaxObject) {
            return function (url, payload, callback) {
              debug('create ajax sender', url, payload);
              var opt = {};
              if (typeof payload === 'string') {
                opt.headers = {
                  'Content-type': 'text/plain'
                };
              }
              var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
              var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
              xo.once('finish', function (status) {
                debug('finish', status);
                xo = null;
                if (status !== 200 && status !== 204) {
                  return callback(new Error('http status ' + status));
                }
                callback();
              });
              return function () {
                debug('abort');
                xo.close();
                xo = null;
                var err = new Error('Aborted');
                err.code = 1000;
                callback(err);
              };
            };
          }
          function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
            SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
          }
          inherits(AjaxBasedTransport, SenderReceiver);
          module.exports = AjaxBasedTransport;
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "../../utils/url": 52,
      "./sender-receiver": 28,
      "debug": 55,
      "inherits": 57
    }],
    25: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter;
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:buffered-sender');
          }
          function BufferedSender(url, sender) {
            debug(url);
            EventEmitter.call(this);
            this.sendBuffer = [];
            this.sender = sender;
            this.url = url;
          }
          inherits(BufferedSender, EventEmitter);
          BufferedSender.prototype.send = function (message) {
            debug('send', message);
            this.sendBuffer.push(message);
            if (!this.sendStop) {
              this.sendSchedule();
            }
          };

          // For polling transports in a situation when in the message callback,
          // new message is being send. If the sending connection was started
          // before receiving one, it is possible to saturate the network and
          // timeout due to the lack of receiving socket. To avoid that we delay
          // sending messages by some small time, in order to let receiving
          // connection be started beforehand. This is only a halfmeasure and
          // does not fix the big problem, but it does make the tests go more
          // stable on slow networks.
          BufferedSender.prototype.sendScheduleWait = function () {
            debug('sendScheduleWait');
            var self = this;
            var tref;
            this.sendStop = function () {
              debug('sendStop');
              self.sendStop = null;
              clearTimeout(tref);
            };
            tref = setTimeout(function () {
              debug('timeout');
              self.sendStop = null;
              self.sendSchedule();
            }, 25);
          };
          BufferedSender.prototype.sendSchedule = function () {
            debug('sendSchedule', this.sendBuffer.length);
            var self = this;
            if (this.sendBuffer.length > 0) {
              var payload = '[' + this.sendBuffer.join(',') + ']';
              this.sendStop = this.sender(this.url, payload, function (err) {
                self.sendStop = null;
                if (err) {
                  debug('error', err);
                  self.emit('close', err.code || 1006, 'Sending error: ' + err);
                  self.close();
                } else {
                  self.sendScheduleWait();
                }
              });
              this.sendBuffer = [];
            }
          };
          BufferedSender.prototype._cleanup = function () {
            debug('_cleanup');
            this.removeAllListeners();
          };
          BufferedSender.prototype.close = function () {
            debug('close');
            this._cleanup();
            if (this.sendStop) {
              this.sendStop();
              this.sendStop = null;
            }
          };
          module.exports = BufferedSender;
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    26: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var inherits = require('inherits'),
            IframeTransport = require('../iframe'),
            objectUtils = require('../../utils/object');
          module.exports = function (transport) {
            function IframeWrapTransport(transUrl, baseUrl) {
              IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
            }
            inherits(IframeWrapTransport, IframeTransport);
            IframeWrapTransport.enabled = function (url, info) {
              if (!global.document) {
                return false;
              }
              var iframeInfo = objectUtils.extend({}, info);
              iframeInfo.sameOrigin = true;
              return transport.enabled(iframeInfo) && IframeTransport.enabled();
            };
            IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
            IframeWrapTransport.needBody = true;
            IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

            IframeWrapTransport.facadeTransport = transport;
            return IframeWrapTransport;
          };
        }).call(this);
      }).call(this, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/object": 49,
      "../iframe": 22,
      "inherits": 57
    }],
    27: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter;
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:polling');
          }
          function Polling(Receiver, receiveUrl, AjaxObject) {
            debug(receiveUrl);
            EventEmitter.call(this);
            this.Receiver = Receiver;
            this.receiveUrl = receiveUrl;
            this.AjaxObject = AjaxObject;
            this._scheduleReceiver();
          }
          inherits(Polling, EventEmitter);
          Polling.prototype._scheduleReceiver = function () {
            debug('_scheduleReceiver');
            var self = this;
            var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);
            poll.on('message', function (msg) {
              debug('message', msg);
              self.emit('message', msg);
            });
            poll.once('close', function (code, reason) {
              debug('close', code, reason, self.pollIsClosing);
              self.poll = poll = null;
              if (!self.pollIsClosing) {
                if (reason === 'network') {
                  self._scheduleReceiver();
                } else {
                  self.emit('close', code || 1006, reason);
                  self.removeAllListeners();
                }
              }
            });
          };
          Polling.prototype.abort = function () {
            debug('abort');
            this.removeAllListeners();
            this.pollIsClosing = true;
            if (this.poll) {
              this.poll.abort();
            }
          };
          module.exports = Polling;
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    28: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          var inherits = require('inherits'),
            urlUtils = require('../../utils/url'),
            BufferedSender = require('./buffered-sender'),
            Polling = require('./polling');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:sender-receiver');
          }
          function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
            var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
            debug(pollUrl);
            var self = this;
            BufferedSender.call(this, transUrl, senderFunc);
            this.poll = new Polling(Receiver, pollUrl, AjaxObject);
            this.poll.on('message', function (msg) {
              debug('poll message', msg);
              self.emit('message', msg);
            });
            this.poll.once('close', function (code, reason) {
              debug('poll close', code, reason);
              self.poll = null;
              self.emit('close', code, reason);
              self.close();
            });
          }
          inherits(SenderReceiver, BufferedSender);
          SenderReceiver.prototype.close = function () {
            BufferedSender.prototype.close.call(this);
            debug('close');
            this.removeAllListeners();
            if (this.poll) {
              this.poll.abort();
              this.poll = null;
            }
          };
          module.exports = SenderReceiver;
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "../../utils/url": 52,
      "./buffered-sender": 25,
      "./polling": 27,
      "debug": 55,
      "inherits": 57
    }],
    29: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter,
            EventSourceDriver = require('eventsource');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:receiver:eventsource');
          }
          function EventSourceReceiver(url) {
            debug(url);
            EventEmitter.call(this);
            var self = this;
            var es = this.es = new EventSourceDriver(url);
            es.onmessage = function (e) {
              debug('message', e.data);
              self.emit('message', decodeURI(e.data));
            };
            es.onerror = function (e) {
              debug('error', es.readyState, e);
              // ES on reconnection has readyState = 0 or 1.
              // on network error it's CLOSED = 2
              var reason = es.readyState !== 2 ? 'network' : 'permanent';
              self._cleanup();
              self._close(reason);
            };
          }
          inherits(EventSourceReceiver, EventEmitter);
          EventSourceReceiver.prototype.abort = function () {
            debug('abort');
            this._cleanup();
            this._close('user');
          };
          EventSourceReceiver.prototype._cleanup = function () {
            debug('cleanup');
            var es = this.es;
            if (es) {
              es.onmessage = es.onerror = null;
              es.close();
              this.es = null;
            }
          };
          EventSourceReceiver.prototype._close = function (reason) {
            debug('close', reason);
            var self = this;
            // Safari and chrome < 15 crash if we close window before
            // waiting for ES cleanup. See:
            // https://code.google.com/p/chromium/issues/detail?id=89155
            setTimeout(function () {
              self.emit('close', null, reason);
              self.removeAllListeners();
            }, 200);
          };
          module.exports = EventSourceReceiver;
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "events": 3,
      "eventsource": 18,
      "inherits": 57
    }],
    30: [function (require, module, exports) {
      (function (process, global) {
        (function () {
          'use strict';

          var inherits = require('inherits'),
            iframeUtils = require('../../utils/iframe'),
            urlUtils = require('../../utils/url'),
            EventEmitter = require('events').EventEmitter,
            random = require('../../utils/random');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:receiver:htmlfile');
          }
          function HtmlfileReceiver(url) {
            debug(url);
            EventEmitter.call(this);
            var self = this;
            iframeUtils.polluteGlobalNamespace();
            this.id = 'a' + random.string(6);
            url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));
            debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
            var constructFunc = HtmlfileReceiver.htmlfileEnabled ? iframeUtils.createHtmlfile : iframeUtils.createIframe;
            global[iframeUtils.WPrefix][this.id] = {
              start: function () {
                debug('start');
                self.iframeObj.loaded();
              },
              message: function (data) {
                debug('message', data);
                self.emit('message', data);
              },
              stop: function () {
                debug('stop');
                self._cleanup();
                self._close('network');
              }
            };
            this.iframeObj = constructFunc(url, function () {
              debug('callback');
              self._cleanup();
              self._close('permanent');
            });
          }
          inherits(HtmlfileReceiver, EventEmitter);
          HtmlfileReceiver.prototype.abort = function () {
            debug('abort');
            this._cleanup();
            this._close('user');
          };
          HtmlfileReceiver.prototype._cleanup = function () {
            debug('_cleanup');
            if (this.iframeObj) {
              this.iframeObj.cleanup();
              this.iframeObj = null;
            }
            delete global[iframeUtils.WPrefix][this.id];
          };
          HtmlfileReceiver.prototype._close = function (reason) {
            debug('_close', reason);
            this.emit('close', null, reason);
            this.removeAllListeners();
          };
          HtmlfileReceiver.htmlfileEnabled = false;

          // obfuscate to avoid firewalls
          var axo = ['Active'].concat('Object').join('X');
          if (axo in global) {
            try {
              HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
            } catch (x) {
              // intentionally empty
            }
          }
          HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;
          module.exports = HtmlfileReceiver;
        }).call(this);
      }).call(this, {
        env: {}
      }, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/iframe": 47,
      "../../utils/random": 50,
      "../../utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    31: [function (require, module, exports) {
      (function (process, global) {
        (function () {
          'use strict';

          var utils = require('../../utils/iframe'),
            random = require('../../utils/random'),
            browser = require('../../utils/browser'),
            urlUtils = require('../../utils/url'),
            inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter;
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:receiver:jsonp');
          }
          function JsonpReceiver(url) {
            debug(url);
            var self = this;
            EventEmitter.call(this);
            utils.polluteGlobalNamespace();
            this.id = 'a' + random.string(6);
            var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));
            global[utils.WPrefix][this.id] = this._callback.bind(this);
            this._createScript(urlWithId);

            // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.
            this.timeoutId = setTimeout(function () {
              debug('timeout');
              self._abort(new Error('JSONP script loaded abnormally (timeout)'));
            }, JsonpReceiver.timeout);
          }
          inherits(JsonpReceiver, EventEmitter);
          JsonpReceiver.prototype.abort = function () {
            debug('abort');
            if (global[utils.WPrefix][this.id]) {
              var err = new Error('JSONP user aborted read');
              err.code = 1000;
              this._abort(err);
            }
          };
          JsonpReceiver.timeout = 35000;
          JsonpReceiver.scriptErrorTimeout = 1000;
          JsonpReceiver.prototype._callback = function (data) {
            debug('_callback', data);
            this._cleanup();
            if (this.aborting) {
              return;
            }
            if (data) {
              debug('message', data);
              this.emit('message', data);
            }
            this.emit('close', null, 'network');
            this.removeAllListeners();
          };
          JsonpReceiver.prototype._abort = function (err) {
            debug('_abort', err);
            this._cleanup();
            this.aborting = true;
            this.emit('close', err.code, err.message);
            this.removeAllListeners();
          };
          JsonpReceiver.prototype._cleanup = function () {
            debug('_cleanup');
            clearTimeout(this.timeoutId);
            if (this.script2) {
              this.script2.parentNode.removeChild(this.script2);
              this.script2 = null;
            }
            if (this.script) {
              var script = this.script;
              // Unfortunately, you can't really abort script loading of
              // the script.
              script.parentNode.removeChild(script);
              script.onreadystatechange = script.onerror = script.onload = script.onclick = null;
              this.script = null;
            }
            delete global[utils.WPrefix][this.id];
          };
          JsonpReceiver.prototype._scriptError = function () {
            debug('_scriptError');
            var self = this;
            if (this.errorTimer) {
              return;
            }
            this.errorTimer = setTimeout(function () {
              if (!self.loadedOkay) {
                self._abort(new Error('JSONP script loaded abnormally (onerror)'));
              }
            }, JsonpReceiver.scriptErrorTimeout);
          };
          JsonpReceiver.prototype._createScript = function (url) {
            debug('_createScript', url);
            var self = this;
            var script = this.script = global.document.createElement('script');
            var script2; // Opera synchronous load trick.

            script.id = 'a' + random.string(8);
            script.src = url;
            script.type = 'text/javascript';
            script.charset = 'UTF-8';
            script.onerror = this._scriptError.bind(this);
            script.onload = function () {
              debug('onload');
              self._abort(new Error('JSONP script loaded abnormally (onload)'));
            };

            // IE9 fires 'error' event after onreadystatechange or before, in random order.
            // Use loadedOkay to determine if actually errored
            script.onreadystatechange = function () {
              debug('onreadystatechange', script.readyState);
              if (/loaded|closed/.test(script.readyState)) {
                if (script && script.htmlFor && script.onclick) {
                  self.loadedOkay = true;
                  try {
                    // In IE, actually execute the script.
                    script.onclick();
                  } catch (x) {
                    // intentionally empty
                  }
                }
                if (script) {
                  self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
                }
              }
            };
            // IE: event/htmlFor/onclick trick.
            // One can't rely on proper order for onreadystatechange. In order to
            // make sure, set a 'htmlFor' and 'event' properties, so that
            // script code will be installed as 'onclick' handler for the
            // script object. Later, onreadystatechange, manually execute this
            // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
            // set. For reference see:
            //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
            // Also, read on that about script ordering:
            //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order
            if (typeof script.async === 'undefined' && global.document.attachEvent) {
              // According to mozilla docs, in recent browsers script.async defaults
              // to 'true', so we may use it to detect a good browser:
              // https://developer.mozilla.org/en/HTML/Element/script
              if (!browser.isOpera()) {
                // Naively assume we're in IE
                try {
                  script.htmlFor = script.id;
                  script.event = 'onclick';
                } catch (x) {
                  // intentionally empty
                }
                script.async = true;
              } else {
                // Opera, second sync script hack
                script2 = this.script2 = global.document.createElement('script');
                script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
                script.async = script2.async = false;
              }
            }
            if (typeof script.async !== 'undefined') {
              script.async = true;
            }
            var head = global.document.getElementsByTagName('head')[0];
            head.insertBefore(script, head.firstChild);
            if (script2) {
              head.insertBefore(script2, head.firstChild);
            }
          };
          module.exports = JsonpReceiver;
        }).call(this);
      }).call(this, {
        env: {}
      }, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/browser": 44,
      "../../utils/iframe": 47,
      "../../utils/random": 50,
      "../../utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    32: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter;
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:receiver:xhr');
          }
          function XhrReceiver(url, AjaxObject) {
            debug(url);
            EventEmitter.call(this);
            var self = this;
            this.bufferPosition = 0;
            this.xo = new AjaxObject('POST', url, null);
            this.xo.on('chunk', this._chunkHandler.bind(this));
            this.xo.once('finish', function (status, text) {
              debug('finish', status, text);
              self._chunkHandler(status, text);
              self.xo = null;
              var reason = status === 200 ? 'network' : 'permanent';
              debug('close', reason);
              self.emit('close', null, reason);
              self._cleanup();
            });
          }
          inherits(XhrReceiver, EventEmitter);
          XhrReceiver.prototype._chunkHandler = function (status, text) {
            debug('_chunkHandler', status);
            if (status !== 200 || !text) {
              return;
            }
            for (var idx = -1;; this.bufferPosition += idx + 1) {
              var buf = text.slice(this.bufferPosition);
              idx = buf.indexOf('\n');
              if (idx === -1) {
                break;
              }
              var msg = buf.slice(0, idx);
              if (msg) {
                debug('message', msg);
                this.emit('message', msg);
              }
            }
          };
          XhrReceiver.prototype._cleanup = function () {
            debug('_cleanup');
            this.removeAllListeners();
          };
          XhrReceiver.prototype.abort = function () {
            debug('abort');
            if (this.xo) {
              this.xo.close();
              debug('close');
              this.emit('close', null, 'user');
              this.xo = null;
            }
            this._cleanup();
          };
          module.exports = XhrReceiver;
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    33: [function (require, module, exports) {
      (function (process, global) {
        (function () {
          'use strict';

          var random = require('../../utils/random'),
            urlUtils = require('../../utils/url');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:sender:jsonp');
          }
          var form, area;
          function createIframe(id) {
            debug('createIframe', id);
            try {
              // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
              return global.document.createElement('<iframe name="' + id + '">');
            } catch (x) {
              var iframe = global.document.createElement('iframe');
              iframe.name = id;
              return iframe;
            }
          }
          function createForm() {
            debug('createForm');
            form = global.document.createElement('form');
            form.style.display = 'none';
            form.style.position = 'absolute';
            form.method = 'POST';
            form.enctype = 'application/x-www-form-urlencoded';
            form.acceptCharset = 'UTF-8';
            area = global.document.createElement('textarea');
            area.name = 'd';
            form.appendChild(area);
            global.document.body.appendChild(form);
          }
          module.exports = function (url, payload, callback) {
            debug(url, payload);
            if (!form) {
              createForm();
            }
            var id = 'a' + random.string(8);
            form.target = id;
            form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);
            var iframe = createIframe(id);
            iframe.id = id;
            iframe.style.display = 'none';
            form.appendChild(iframe);
            try {
              area.value = payload;
            } catch (e) {
              // seriously broken browsers get here
            }
            form.submit();
            var completed = function (err) {
              debug('completed', id, err);
              if (!iframe.onerror) {
                return;
              }
              iframe.onreadystatechange = iframe.onerror = iframe.onload = null;
              // Opera mini doesn't like if we GC iframe
              // immediately, thus this timeout.
              setTimeout(function () {
                debug('cleaning up', id);
                iframe.parentNode.removeChild(iframe);
                iframe = null;
              }, 500);
              area.value = '';
              // It is not possible to detect if the iframe succeeded or
              // failed to submit our form.
              callback(err);
            };
            iframe.onerror = function () {
              debug('onerror', id);
              completed();
            };
            iframe.onload = function () {
              debug('onload', id);
              completed();
            };
            iframe.onreadystatechange = function (e) {
              debug('onreadystatechange', id, iframe.readyState, e);
              if (iframe.readyState === 'complete') {
                completed();
              }
            };
            return function () {
              debug('aborted', id);
              completed(new Error('Aborted'));
            };
          };
        }).call(this);
      }).call(this, {
        env: {}
      }, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/random": 50,
      "../../utils/url": 52,
      "debug": 55
    }],
    34: [function (require, module, exports) {
      (function (process, global) {
        (function () {
          'use strict';

          var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            eventUtils = require('../../utils/event'),
            browser = require('../../utils/browser'),
            urlUtils = require('../../utils/url');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:sender:xdr');
          }

          // References:
          //   http://ajaxian.com/archives/100-line-ajax-wrapper
          //   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

          function XDRObject(method, url, payload) {
            debug(method, url);
            var self = this;
            EventEmitter.call(this);
            setTimeout(function () {
              self._start(method, url, payload);
            }, 0);
          }
          inherits(XDRObject, EventEmitter);
          XDRObject.prototype._start = function (method, url, payload) {
            debug('_start');
            var self = this;
            var xdr = new global.XDomainRequest();
            // IE caches even POSTs
            url = urlUtils.addQuery(url, 't=' + +new Date());
            xdr.onerror = function () {
              debug('onerror');
              self._error();
            };
            xdr.ontimeout = function () {
              debug('ontimeout');
              self._error();
            };
            xdr.onprogress = function () {
              debug('progress', xdr.responseText);
              self.emit('chunk', 200, xdr.responseText);
            };
            xdr.onload = function () {
              debug('load');
              self.emit('finish', 200, xdr.responseText);
              self._cleanup(false);
            };
            this.xdr = xdr;
            this.unloadRef = eventUtils.unloadAdd(function () {
              self._cleanup(true);
            });
            try {
              // Fails with AccessDenied if port number is bogus
              this.xdr.open(method, url);
              if (this.timeout) {
                this.xdr.timeout = this.timeout;
              }
              this.xdr.send(payload);
            } catch (x) {
              this._error();
            }
          };
          XDRObject.prototype._error = function () {
            this.emit('finish', 0, '');
            this._cleanup(false);
          };
          XDRObject.prototype._cleanup = function (abort) {
            debug('cleanup', abort);
            if (!this.xdr) {
              return;
            }
            this.removeAllListeners();
            eventUtils.unloadDel(this.unloadRef);
            this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;
            if (abort) {
              try {
                this.xdr.abort();
              } catch (x) {
                // intentionally empty
              }
            }
            this.unloadRef = this.xdr = null;
          };
          XDRObject.prototype.close = function () {
            debug('close');
            this._cleanup(true);
          };

          // IE 8/9 if the request target uses the same scheme - #79
          XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());
          module.exports = XDRObject;
        }).call(this);
      }).call(this, {
        env: {}
      }, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/browser": 44,
      "../../utils/event": 46,
      "../../utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    35: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
        XhrDriver = require('../driver/xhr');
      function XHRCorsObject(method, url, payload, opts) {
        XhrDriver.call(this, method, url, payload, opts);
      }
      inherits(XHRCorsObject, XhrDriver);
      XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;
      module.exports = XHRCorsObject;
    }, {
      "../driver/xhr": 17,
      "inherits": 57
    }],
    36: [function (require, module, exports) {
      'use strict';

      var EventEmitter = require('events').EventEmitter,
        inherits = require('inherits');
      function XHRFake( /* method, url, payload, opts */
      ) {
        var self = this;
        EventEmitter.call(this);
        this.to = setTimeout(function () {
          self.emit('finish', 200, '{}');
        }, XHRFake.timeout);
      }
      inherits(XHRFake, EventEmitter);
      XHRFake.prototype.close = function () {
        clearTimeout(this.to);
      };
      XHRFake.timeout = 2000;
      module.exports = XHRFake;
    }, {
      "events": 3,
      "inherits": 57
    }],
    37: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
        XhrDriver = require('../driver/xhr');
      function XHRLocalObject(method, url, payload /*, opts */) {
        XhrDriver.call(this, method, url, payload, {
          noCredentials: true
        });
      }
      inherits(XHRLocalObject, XhrDriver);
      XHRLocalObject.enabled = XhrDriver.enabled;
      module.exports = XHRLocalObject;
    }, {
      "../driver/xhr": 17,
      "inherits": 57
    }],
    38: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          var utils = require('../utils/event'),
            urlUtils = require('../utils/url'),
            inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter,
            WebsocketDriver = require('./driver/websocket');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:websocket');
          }
          function WebSocketTransport(transUrl, ignore, options) {
            if (!WebSocketTransport.enabled()) {
              throw new Error('Transport created when disabled');
            }
            EventEmitter.call(this);
            debug('constructor', transUrl);
            var self = this;
            var url = urlUtils.addPath(transUrl, '/websocket');
            if (url.slice(0, 5) === 'https') {
              url = 'wss' + url.slice(5);
            } else {
              url = 'ws' + url.slice(4);
            }
            this.url = url;
            this.ws = new WebsocketDriver(this.url, [], options);
            this.ws.onmessage = function (e) {
              debug('message event', e.data);
              self.emit('message', e.data);
            };
            // Firefox has an interesting bug. If a websocket connection is
            // created after onunload, it stays alive even when user
            // navigates away from the page. In such situation let's lie -
            // let's not open the ws connection at all. See:
            // https://github.com/sockjs/sockjs-client/issues/28
            // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
            this.unloadRef = utils.unloadAdd(function () {
              debug('unload');
              self.ws.close();
            });
            this.ws.onclose = function (e) {
              debug('close event', e.code, e.reason);
              self.emit('close', e.code, e.reason);
              self._cleanup();
            };
            this.ws.onerror = function (e) {
              debug('error event', e);
              self.emit('close', 1006, 'WebSocket connection broken');
              self._cleanup();
            };
          }
          inherits(WebSocketTransport, EventEmitter);
          WebSocketTransport.prototype.send = function (data) {
            var msg = '[' + data + ']';
            debug('send', msg);
            this.ws.send(msg);
          };
          WebSocketTransport.prototype.close = function () {
            debug('close');
            var ws = this.ws;
            this._cleanup();
            if (ws) {
              ws.close();
            }
          };
          WebSocketTransport.prototype._cleanup = function () {
            debug('_cleanup');
            var ws = this.ws;
            if (ws) {
              ws.onmessage = ws.onclose = ws.onerror = null;
            }
            utils.unloadDel(this.unloadRef);
            this.unloadRef = this.ws = null;
            this.removeAllListeners();
          };
          WebSocketTransport.enabled = function () {
            debug('enabled');
            return !!WebsocketDriver;
          };
          WebSocketTransport.transportName = 'websocket';

          // In theory, ws should require 1 round trip. But in chrome, this is
          // not very stable over SSL. Most likely a ws connection requires a
          // separate SSL connection, in which case 2 round trips are an
          // absolute minumum.
          WebSocketTransport.roundTrips = 2;
          module.exports = WebSocketTransport;
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "../utils/event": 46,
      "../utils/url": 52,
      "./driver/websocket": 19,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    39: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
        AjaxBasedTransport = require('./lib/ajax-based'),
        XdrStreamingTransport = require('./xdr-streaming'),
        XhrReceiver = require('./receiver/xhr'),
        XDRObject = require('./sender/xdr');
      function XdrPollingTransport(transUrl) {
        if (!XDRObject.enabled) {
          throw new Error('Transport created when disabled');
        }
        AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
      }
      inherits(XdrPollingTransport, AjaxBasedTransport);
      XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
      XdrPollingTransport.transportName = 'xdr-polling';
      XdrPollingTransport.roundTrips = 2; // preflight, ajax

      module.exports = XdrPollingTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/xhr": 32,
      "./sender/xdr": 34,
      "./xdr-streaming": 40,
      "inherits": 57
    }],
    40: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
        AjaxBasedTransport = require('./lib/ajax-based'),
        XhrReceiver = require('./receiver/xhr'),
        XDRObject = require('./sender/xdr');

      // According to:
      //   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
      //   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/

      function XdrStreamingTransport(transUrl) {
        if (!XDRObject.enabled) {
          throw new Error('Transport created when disabled');
        }
        AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
      }
      inherits(XdrStreamingTransport, AjaxBasedTransport);
      XdrStreamingTransport.enabled = function (info) {
        if (info.cookie_needed || info.nullOrigin) {
          return false;
        }
        return XDRObject.enabled && info.sameScheme;
      };
      XdrStreamingTransport.transportName = 'xdr-streaming';
      XdrStreamingTransport.roundTrips = 2; // preflight, ajax

      module.exports = XdrStreamingTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/xhr": 32,
      "./sender/xdr": 34,
      "inherits": 57
    }],
    41: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
        AjaxBasedTransport = require('./lib/ajax-based'),
        XhrReceiver = require('./receiver/xhr'),
        XHRCorsObject = require('./sender/xhr-cors'),
        XHRLocalObject = require('./sender/xhr-local');
      function XhrPollingTransport(transUrl) {
        if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
          throw new Error('Transport created when disabled');
        }
        AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
      }
      inherits(XhrPollingTransport, AjaxBasedTransport);
      XhrPollingTransport.enabled = function (info) {
        if (info.nullOrigin) {
          return false;
        }
        if (XHRLocalObject.enabled && info.sameOrigin) {
          return true;
        }
        return XHRCorsObject.enabled;
      };
      XhrPollingTransport.transportName = 'xhr-polling';
      XhrPollingTransport.roundTrips = 2; // preflight, ajax

      module.exports = XhrPollingTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/xhr": 32,
      "./sender/xhr-cors": 35,
      "./sender/xhr-local": 37,
      "inherits": 57
    }],
    42: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var inherits = require('inherits'),
            AjaxBasedTransport = require('./lib/ajax-based'),
            XhrReceiver = require('./receiver/xhr'),
            XHRCorsObject = require('./sender/xhr-cors'),
            XHRLocalObject = require('./sender/xhr-local'),
            browser = require('../utils/browser');
          function XhrStreamingTransport(transUrl) {
            if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
              throw new Error('Transport created when disabled');
            }
            AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
          }
          inherits(XhrStreamingTransport, AjaxBasedTransport);
          XhrStreamingTransport.enabled = function (info) {
            if (info.nullOrigin) {
              return false;
            }
            // Opera doesn't support xhr-streaming #60
            // But it might be able to #92
            if (browser.isOpera()) {
              return false;
            }
            return XHRCorsObject.enabled;
          };
          XhrStreamingTransport.transportName = 'xhr-streaming';
          XhrStreamingTransport.roundTrips = 2; // preflight, ajax

          // Safari gets confused when a streaming ajax request is started
          // before onload. This causes the load indicator to spin indefinetely.
          // Only require body when used in a browser
          XhrStreamingTransport.needBody = !!global.document;
          module.exports = XhrStreamingTransport;
        }).call(this);
      }).call(this, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../utils/browser": 44,
      "./lib/ajax-based": 24,
      "./receiver/xhr": 32,
      "./sender/xhr-cors": 35,
      "./sender/xhr-local": 37,
      "inherits": 57
    }],
    43: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          if (global.crypto && global.crypto.getRandomValues) {
            module.exports.randomBytes = function (length) {
              var bytes = new Uint8Array(length);
              global.crypto.getRandomValues(bytes);
              return bytes;
            };
          } else {
            module.exports.randomBytes = function (length) {
              var bytes = new Array(length);
              for (var i = 0; i < length; i++) {
                bytes[i] = Math.floor(Math.random() * 256);
              }
              return bytes;
            };
          }
        }).call(this);
      }).call(this, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    44: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          module.exports = {
            isOpera: function () {
              return global.navigator && /opera/i.test(global.navigator.userAgent);
            },
            isKonqueror: function () {
              return global.navigator && /konqueror/i.test(global.navigator.userAgent);
            }

            // #187 wrap document.domain in try/catch because of WP8 from file:///
            ,
            hasDomain: function () {
              // non-browser client always has a domain
              if (!global.document) {
                return true;
              }
              try {
                return !!global.document.domain;
              } catch (e) {
                return false;
              }
            }
          };
        }).call(this);
      }).call(this, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    45: [function (require, module, exports) {
      'use strict';

      // Some extra characters that Chrome gets wrong, and substitutes with
      // something else on the wire.
      // eslint-disable-next-line no-control-regex, no-misleading-character-class
      var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
        extraLookup;

      // This may be quite slow, so let's delay until user actually uses bad
      // characters.
      var unrollLookup = function (escapable) {
        var i;
        var unrolled = {};
        var c = [];
        for (i = 0; i < 65536; i++) {
          c.push(String.fromCharCode(i));
        }
        escapable.lastIndex = 0;
        c.join('').replace(escapable, function (a) {
          unrolled[a] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
          return '';
        });
        escapable.lastIndex = 0;
        return unrolled;
      };

      // Quote string, also taking care of unicode characters that browsers
      // often break. Especially, take care of unicode surrogates:
      // http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates
      module.exports = {
        quote: function (string) {
          var quoted = JSON.stringify(string);

          // In most cases this should be very fast and good enough.
          extraEscapable.lastIndex = 0;
          if (!extraEscapable.test(quoted)) {
            return quoted;
          }
          if (!extraLookup) {
            extraLookup = unrollLookup(extraEscapable);
          }
          return quoted.replace(extraEscapable, function (a) {
            return extraLookup[a];
          });
        }
      };
    }, {}],
    46: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var random = require('./random');
          var onUnload = {},
            afterUnload = false
            // detect google chrome packaged apps because they don't allow the 'unload' event
            ,
            isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime;
          module.exports = {
            attachEvent: function (event, listener) {
              if (typeof global.addEventListener !== 'undefined') {
                global.addEventListener(event, listener, false);
              } else if (global.document && global.attachEvent) {
                // IE quirks.
                // According to: http://stevesouders.com/misc/test-postmessage.php
                // the message gets delivered only to 'document', not 'window'.
                global.document.attachEvent('on' + event, listener);
                // I get 'window' for ie8.
                global.attachEvent('on' + event, listener);
              }
            },
            detachEvent: function (event, listener) {
              if (typeof global.addEventListener !== 'undefined') {
                global.removeEventListener(event, listener, false);
              } else if (global.document && global.detachEvent) {
                global.document.detachEvent('on' + event, listener);
                global.detachEvent('on' + event, listener);
              }
            },
            unloadAdd: function (listener) {
              if (isChromePackagedApp) {
                return null;
              }
              var ref = random.string(8);
              onUnload[ref] = listener;
              if (afterUnload) {
                setTimeout(this.triggerUnloadCallbacks, 0);
              }
              return ref;
            },
            unloadDel: function (ref) {
              if (ref in onUnload) {
                delete onUnload[ref];
              }
            },
            triggerUnloadCallbacks: function () {
              for (var ref in onUnload) {
                onUnload[ref]();
                delete onUnload[ref];
              }
            }
          };
          var unloadTriggered = function () {
            if (afterUnload) {
              return;
            }
            afterUnload = true;
            module.exports.triggerUnloadCallbacks();
          };

          // 'unload' alone is not reliable in opera within an iframe, but we
          // can't use `beforeunload` as IE fires it on javascript: links.
          if (!isChromePackagedApp) {
            module.exports.attachEvent('unload', unloadTriggered);
          }
        }).call(this);
      }).call(this, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./random": 50
    }],
    47: [function (require, module, exports) {
      (function (process, global) {
        (function () {
          'use strict';

          var eventUtils = require('./event'),
            browser = require('./browser');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:utils:iframe');
          }
          module.exports = {
            WPrefix: '_jp',
            currentWindowId: null,
            polluteGlobalNamespace: function () {
              if (!(module.exports.WPrefix in global)) {
                global[module.exports.WPrefix] = {};
              }
            },
            postMessage: function (type, data) {
              if (global.parent !== global) {
                global.parent.postMessage(JSON.stringify({
                  windowId: module.exports.currentWindowId,
                  type: type,
                  data: data || ''
                }), '*');
              } else {
                debug('Cannot postMessage, no parent window.', type, data);
              }
            },
            createIframe: function (iframeUrl, errorCallback) {
              var iframe = global.document.createElement('iframe');
              var tref, unloadRef;
              var unattach = function () {
                debug('unattach');
                clearTimeout(tref);
                // Explorer had problems with that.
                try {
                  iframe.onload = null;
                } catch (x) {
                  // intentionally empty
                }
                iframe.onerror = null;
              };
              var cleanup = function () {
                debug('cleanup');
                if (iframe) {
                  unattach();
                  // This timeout makes chrome fire onbeforeunload event
                  // within iframe. Without the timeout it goes straight to
                  // onunload.
                  setTimeout(function () {
                    if (iframe) {
                      iframe.parentNode.removeChild(iframe);
                    }
                    iframe = null;
                  }, 0);
                  eventUtils.unloadDel(unloadRef);
                }
              };
              var onerror = function (err) {
                debug('onerror', err);
                if (iframe) {
                  cleanup();
                  errorCallback(err);
                }
              };
              var post = function (msg, origin) {
                debug('post', msg, origin);
                setTimeout(function () {
                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (iframe && iframe.contentWindow) {
                      iframe.contentWindow.postMessage(msg, origin);
                    }
                  } catch (x) {
                    // intentionally empty
                  }
                }, 0);
              };
              iframe.src = iframeUrl;
              iframe.style.display = 'none';
              iframe.style.position = 'absolute';
              iframe.onerror = function () {
                onerror('onerror');
              };
              iframe.onload = function () {
                debug('onload');
                // `onload` is triggered before scripts on the iframe are
                // executed. Give it few seconds to actually load stuff.
                clearTimeout(tref);
                tref = setTimeout(function () {
                  onerror('onload timeout');
                }, 2000);
              };
              global.document.body.appendChild(iframe);
              tref = setTimeout(function () {
                onerror('timeout');
              }, 15000);
              unloadRef = eventUtils.unloadAdd(cleanup);
              return {
                post: post,
                cleanup: cleanup,
                loaded: unattach
              };
            }

            /* eslint no-undef: "off", new-cap: "off" */,
            createHtmlfile: function (iframeUrl, errorCallback) {
              var axo = ['Active'].concat('Object').join('X');
              var doc = new global[axo]('htmlfile');
              var tref, unloadRef;
              var iframe;
              var unattach = function () {
                clearTimeout(tref);
                iframe.onerror = null;
              };
              var cleanup = function () {
                if (doc) {
                  unattach();
                  eventUtils.unloadDel(unloadRef);
                  iframe.parentNode.removeChild(iframe);
                  iframe = doc = null;
                  CollectGarbage();
                }
              };
              var onerror = function (r) {
                debug('onerror', r);
                if (doc) {
                  cleanup();
                  errorCallback(r);
                }
              };
              var post = function (msg, origin) {
                try {
                  // When the iframe is not loaded, IE raises an exception
                  // on 'contentWindow'.
                  setTimeout(function () {
                    if (iframe && iframe.contentWindow) {
                      iframe.contentWindow.postMessage(msg, origin);
                    }
                  }, 0);
                } catch (x) {
                  // intentionally empty
                }
              };
              doc.open();
              doc.write('<html><s' + 'cript>' + 'document.domain="' + global.document.domain + '";' + '</s' + 'cript></html>');
              doc.close();
              doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
              var c = doc.createElement('div');
              doc.body.appendChild(c);
              iframe = doc.createElement('iframe');
              c.appendChild(iframe);
              iframe.src = iframeUrl;
              iframe.onerror = function () {
                onerror('onerror');
              };
              tref = setTimeout(function () {
                onerror('timeout');
              }, 15000);
              unloadRef = eventUtils.unloadAdd(cleanup);
              return {
                post: post,
                cleanup: cleanup,
                loaded: unattach
              };
            }
          };
          module.exports.iframeEnabled = false;
          if (global.document) {
            // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
            // huge delay, or not at all.
            module.exports.iframeEnabled = (typeof global.postMessage === 'function' || typeof global.postMessage === 'object') && !browser.isKonqueror();
          }
        }).call(this);
      }).call(this, {
        env: {}
      }, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./browser": 44,
      "./event": 46,
      "debug": 55
    }],
    48: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var logObject = {};
          ['log', 'debug', 'warn'].forEach(function (level) {
            var levelExists;
            try {
              levelExists = global.console && global.console[level] && global.console[level].apply;
            } catch (e) {
              // do nothing
            }
            logObject[level] = levelExists ? function () {
              return global.console[level].apply(global.console, arguments);
            } : level === 'log' ? function () {} : logObject.log;
          });
          module.exports = logObject;
        }).call(this);
      }).call(this, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    49: [function (require, module, exports) {
      'use strict';

      module.exports = {
        isObject: function (obj) {
          var type = typeof obj;
          return type === 'function' || type === 'object' && !!obj;
        },
        extend: function (obj) {
          if (!this.isObject(obj)) {
            return obj;
          }
          var source, prop;
          for (var i = 1, length = arguments.length; i < length; i++) {
            source = arguments[i];
            for (prop in source) {
              if (Object.prototype.hasOwnProperty.call(source, prop)) {
                obj[prop] = source[prop];
              }
            }
          }
          return obj;
        }
      };
    }, {}],
    50: [function (require, module, exports) {
      'use strict';

      var crypto = require('crypto');

      // This string has length 32, a power of 2, so the modulus doesn't introduce a
      // bias.
      var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
      module.exports = {
        string: function (length) {
          var max = _randomStringChars.length;
          var bytes = crypto.randomBytes(length);
          var ret = [];
          for (var i = 0; i < length; i++) {
            ret.push(_randomStringChars.substr(bytes[i] % max, 1));
          }
          return ret.join('');
        },
        number: function (max) {
          return Math.floor(Math.random() * max);
        },
        numberString: function (max) {
          var t = ('' + (max - 1)).length;
          var p = new Array(t + 1).join('0');
          return (p + this.number(max)).slice(-t);
        }
      };
    }, {
      "crypto": 43
    }],
    51: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:utils:transport');
          }
          module.exports = function (availableTransports) {
            return {
              filterToEnabled: function (transportsWhitelist, info) {
                var transports = {
                  main: [],
                  facade: []
                };
                if (!transportsWhitelist) {
                  transportsWhitelist = [];
                } else if (typeof transportsWhitelist === 'string') {
                  transportsWhitelist = [transportsWhitelist];
                }
                availableTransports.forEach(function (trans) {
                  if (!trans) {
                    return;
                  }
                  if (trans.transportName === 'websocket' && info.websocket === false) {
                    debug('disabled from server', 'websocket');
                    return;
                  }
                  if (transportsWhitelist.length && transportsWhitelist.indexOf(trans.transportName) === -1) {
                    debug('not in whitelist', trans.transportName);
                    return;
                  }
                  if (trans.enabled(info)) {
                    debug('enabled', trans.transportName);
                    transports.main.push(trans);
                    if (trans.facadeTransport) {
                      transports.facade.push(trans.facadeTransport);
                    }
                  } else {
                    debug('disabled', trans.transportName);
                  }
                });
                return transports;
              }
            };
          };
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55
    }],
    52: [function (require, module, exports) {
      (function (process) {
        (function () {
          'use strict';

          var URL = require('url-parse');
          var debug = function () {};
          if (process.env.NODE_ENV !== 'production') {
            debug = require('debug')('sockjs-client:utils:url');
          }
          module.exports = {
            getOrigin: function (url) {
              if (!url) {
                return null;
              }
              var p = new URL(url);
              if (p.protocol === 'file:') {
                return null;
              }
              var port = p.port;
              if (!port) {
                port = p.protocol === 'https:' ? '443' : '80';
              }
              return p.protocol + '//' + p.hostname + ':' + port;
            },
            isOriginEqual: function (a, b) {
              var res = this.getOrigin(a) === this.getOrigin(b);
              debug('same', a, b, res);
              return res;
            },
            isSchemeEqual: function (a, b) {
              return a.split(':')[0] === b.split(':')[0];
            },
            addPath: function (url, path) {
              var qs = url.split('?');
              return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
            },
            addQuery: function (url, q) {
              return url + (url.indexOf('?') === -1 ? '?' + q : '&' + q);
            },
            isLoopbackAddr: function (addr) {
              return /^127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(addr) || /^\[::1\]$/.test(addr);
            }
          };
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "url-parse": 60
    }],
    53: [function (require, module, exports) {
      module.exports = '1.6.1';
    }, {}],
    54: [function (require, module, exports) {
      /**
       * Helpers.
       */

      var s = 1000;
      var m = s * 60;
      var h = m * 60;
      var d = h * 24;
      var w = d * 7;
      var y = d * 365.25;

      /**
       * Parse or format the given `val`.
       *
       * Options:
       *
       *  - `long` verbose formatting [false]
       *
       * @param {String|Number} val
       * @param {Object} [options]
       * @throws {Error} throw an error if val is not a non-empty string or a number
       * @return {String|Number}
       * @api public
       */

      module.exports = function (val, options) {
        options = options || {};
        var type = typeof val;
        if (type === 'string' && val.length > 0) {
          return parse(val);
        } else if (type === 'number' && isFinite(val)) {
          return options.long ? fmtLong(val) : fmtShort(val);
        }
        throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
      };

      /**
       * Parse the given `str` and return milliseconds.
       *
       * @param {String} str
       * @return {Number}
       * @api private
       */

      function parse(str) {
        str = String(str);
        if (str.length > 100) {
          return;
        }
        var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
        if (!match) {
          return;
        }
        var n = parseFloat(match[1]);
        var type = (match[2] || 'ms').toLowerCase();
        switch (type) {
          case 'years':
          case 'year':
          case 'yrs':
          case 'yr':
          case 'y':
            return n * y;
          case 'weeks':
          case 'week':
          case 'w':
            return n * w;
          case 'days':
          case 'day':
          case 'd':
            return n * d;
          case 'hours':
          case 'hour':
          case 'hrs':
          case 'hr':
          case 'h':
            return n * h;
          case 'minutes':
          case 'minute':
          case 'mins':
          case 'min':
          case 'm':
            return n * m;
          case 'seconds':
          case 'second':
          case 'secs':
          case 'sec':
          case 's':
            return n * s;
          case 'milliseconds':
          case 'millisecond':
          case 'msecs':
          case 'msec':
          case 'ms':
            return n;
          default:
            return undefined;
        }
      }

      /**
       * Short format for `ms`.
       *
       * @param {Number} ms
       * @return {String}
       * @api private
       */

      function fmtShort(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d) {
          return Math.round(ms / d) + 'd';
        }
        if (msAbs >= h) {
          return Math.round(ms / h) + 'h';
        }
        if (msAbs >= m) {
          return Math.round(ms / m) + 'm';
        }
        if (msAbs >= s) {
          return Math.round(ms / s) + 's';
        }
        return ms + 'ms';
      }

      /**
       * Long format for `ms`.
       *
       * @param {Number} ms
       * @return {String}
       * @api private
       */

      function fmtLong(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d) {
          return plural(ms, msAbs, d, 'day');
        }
        if (msAbs >= h) {
          return plural(ms, msAbs, h, 'hour');
        }
        if (msAbs >= m) {
          return plural(ms, msAbs, m, 'minute');
        }
        if (msAbs >= s) {
          return plural(ms, msAbs, s, 'second');
        }
        return ms + ' ms';
      }

      /**
       * Pluralization helper.
       */

      function plural(ms, msAbs, n, name) {
        var isPlural = msAbs >= n * 1.5;
        return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
      }
    }, {}],
    55: [function (require, module, exports) {
      (function (process) {
        (function () {
          /* eslint-env browser */

          /**
           * This is the web browser implementation of `debug()`.
           */

          exports.formatArgs = formatArgs;
          exports.save = save;
          exports.load = load;
          exports.useColors = useColors;
          exports.storage = localstorage();
          exports.destroy = (() => {
            let warned = false;
            return () => {
              if (!warned) {
                warned = true;
                console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
              }
            };
          })();

          /**
           * Colors.
           */

          exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

          /**
           * Currently only WebKit-based Web Inspectors, Firefox >= v31,
           * and the Firebug extension (any Firefox version) are known
           * to support "%c" CSS customizations.
           *
           * TODO: add a `localStorage` variable to explicitly enable/disable colors
           */

          // eslint-disable-next-line complexity
          function useColors() {
            // NB: In an Electron preload script, document will be defined but not fully
            // initialized. Since we know we're in Chrome, we'll just detect this case
            // explicitly
            if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
              return true;
            }

            // Internet Explorer and Edge do not support colors.
            if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
              return false;
            }

            // Is webkit? http://stackoverflow.com/a/16459606/376773
            // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
            return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
            // Is firebug? http://stackoverflow.com/a/398120/376773
            typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
            // Is firefox >= v31?
            // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
            typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
            // Double check webkit in userAgent just in case we are in a worker
            typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
          }

          /**
           * Colorize log arguments if enabled.
           *
           * @api public
           */

          function formatArgs(args) {
            args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
            if (!this.useColors) {
              return;
            }
            const c = 'color: ' + this.color;
            args.splice(1, 0, c, 'color: inherit');

            // The final "%c" is somewhat tricky, because there could be other
            // arguments passed either before or after the %c, so we need to
            // figure out the correct index to insert the CSS into
            let index = 0;
            let lastC = 0;
            args[0].replace(/%[a-zA-Z%]/g, match => {
              if (match === '%%') {
                return;
              }
              index++;
              if (match === '%c') {
                // We only are interested in the *last* %c
                // (the user may have provided their own)
                lastC = index;
              }
            });
            args.splice(lastC, 0, c);
          }

          /**
           * Invokes `console.debug()` when available.
           * No-op when `console.debug` is not a "function".
           * If `console.debug` is not available, falls back
           * to `console.log`.
           *
           * @api public
           */
          exports.log = console.debug || console.log || (() => {});

          /**
           * Save `namespaces`.
           *
           * @param {String} namespaces
           * @api private
           */
          function save(namespaces) {
            try {
              if (namespaces) {
                exports.storage.setItem('debug', namespaces);
              } else {
                exports.storage.removeItem('debug');
              }
            } catch (error) {
              // Swallow
              // XXX (@Qix-) should we be logging these?
            }
          }

          /**
           * Load `namespaces`.
           *
           * @return {String} returns the previously persisted debug modes
           * @api private
           */
          function load() {
            let r;
            try {
              r = exports.storage.getItem('debug');
            } catch (error) {
              // Swallow
              // XXX (@Qix-) should we be logging these?
            }

            // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
            if (!r && typeof process !== 'undefined' && 'env' in process) {
              r = process.env.DEBUG;
            }
            return r;
          }

          /**
           * Localstorage attempts to return the localstorage.
           *
           * This is necessary because safari throws
           * when a user disables cookies/localstorage
           * and you attempt to access it.
           *
           * @return {LocalStorage}
           * @api private
           */

          function localstorage() {
            try {
              // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
              // The Browser also has localStorage in the global context.
              return localStorage;
            } catch (error) {
              // Swallow
              // XXX (@Qix-) should we be logging these?
            }
          }
          module.exports = require('./common')(exports);
          const {
            formatters
          } = module.exports;

          /**
           * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
           */

          formatters.j = function (v) {
            try {
              return JSON.stringify(v);
            } catch (error) {
              return '[UnexpectedJSONParseError]: ' + error.message;
            }
          };
        }).call(this);
      }).call(this, {
        env: {}
      });
    }, {
      "./common": 56
    }],
    56: [function (require, module, exports) {
      /**
       * This is the common logic for both the Node.js and web browser
       * implementations of `debug()`.
       */

      function setup(env) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = require('ms');
        createDebug.destroy = destroy;
        Object.keys(env).forEach(key => {
          createDebug[key] = env[key];
        });

        /**
        * The currently active debug mode names, and names to skip.
        */

        createDebug.names = [];
        createDebug.skips = [];

        /**
        * Map of special "%n" handling functions, for the debug "format" argument.
        *
        * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
        */
        createDebug.formatters = {};

        /**
        * Selects a color for a debug namespace
        * @param {String} namespace The namespace string for the debug instance to be colored
        * @return {Number|String} An ANSI color code for the given namespace
        * @api private
        */
        function selectColor(namespace) {
          let hash = 0;
          for (let i = 0; i < namespace.length; i++) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
          }
          return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }
        createDebug.selectColor = selectColor;

        /**
        * Create a debugger with the given `namespace`.
        *
        * @param {String} namespace
        * @return {Function}
        * @api public
        */
        function createDebug(namespace) {
          let prevTime;
          let enableOverride = null;
          let namespacesCache;
          let enabledCache;
          function debug(...args) {
            // Disabled?
            if (!debug.enabled) {
              return;
            }
            const self = debug;

            // Set `diff` timestamp
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== 'string') {
              // Anything else let's inspect with %O
              args.unshift('%O');
            }

            // Apply any `formatters` transformations
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
              // If we encounter an escaped % then don't increase the array index
              if (match === '%%') {
                return '%';
              }
              index++;
              const formatter = createDebug.formatters[format];
              if (typeof formatter === 'function') {
                const val = args[index];
                match = formatter.call(self, val);

                // Now we need to remove `args[index]` since it's inlined in the `format`
                args.splice(index, 1);
                index--;
              }
              return match;
            });

            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
          }
          debug.namespace = namespace;
          debug.useColors = createDebug.useColors();
          debug.color = createDebug.selectColor(namespace);
          debug.extend = extend;
          debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

          Object.defineProperty(debug, 'enabled', {
            enumerable: true,
            configurable: false,
            get: () => {
              if (enableOverride !== null) {
                return enableOverride;
              }
              if (namespacesCache !== createDebug.namespaces) {
                namespacesCache = createDebug.namespaces;
                enabledCache = createDebug.enabled(namespace);
              }
              return enabledCache;
            },
            set: v => {
              enableOverride = v;
            }
          });

          // Env-specific initialization logic for debug instances
          if (typeof createDebug.init === 'function') {
            createDebug.init(debug);
          }
          return debug;
        }
        function extend(namespace, delimiter) {
          const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
          newDebug.log = this.log;
          return newDebug;
        }

        /**
        * Enables a debug mode by namespaces. This can include modes
        * separated by a colon and wildcards.
        *
        * @param {String} namespaces
        * @api public
        */
        function enable(namespaces) {
          createDebug.save(namespaces);
          createDebug.namespaces = namespaces;
          createDebug.names = [];
          createDebug.skips = [];
          let i;
          const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
          const len = split.length;
          for (i = 0; i < len; i++) {
            if (!split[i]) {
              // ignore empty strings
              continue;
            }
            namespaces = split[i].replace(/\*/g, '.*?');
            if (namespaces[0] === '-') {
              createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
            } else {
              createDebug.names.push(new RegExp('^' + namespaces + '$'));
            }
          }
        }

        /**
        * Disable debug output.
        *
        * @return {String} namespaces
        * @api public
        */
        function disable() {
          const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)].join(',');
          createDebug.enable('');
          return namespaces;
        }

        /**
        * Returns true if the given mode name is enabled, false otherwise.
        *
        * @param {String} name
        * @return {Boolean}
        * @api public
        */
        function enabled(name) {
          if (name[name.length - 1] === '*') {
            return true;
          }
          let i;
          let len;
          for (i = 0, len = createDebug.skips.length; i < len; i++) {
            if (createDebug.skips[i].test(name)) {
              return false;
            }
          }
          for (i = 0, len = createDebug.names.length; i < len; i++) {
            if (createDebug.names[i].test(name)) {
              return true;
            }
          }
          return false;
        }

        /**
        * Convert regexp to namespace
        *
        * @param {RegExp} regxep
        * @return {String} namespace
        * @api private
        */
        function toNamespace(regexp) {
          return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
        }

        /**
        * Coerce `val`.
        *
        * @param {Mixed} val
        * @return {Mixed}
        * @api private
        */
        function coerce(val) {
          if (val instanceof Error) {
            return val.stack || val.message;
          }
          return val;
        }

        /**
        * XXX DO NOT USE. This is a temporary stub function.
        * XXX It WILL be removed in the next major release.
        */
        function destroy() {
          console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
        }
        createDebug.enable(createDebug.load());
        return createDebug;
      }
      module.exports = setup;
    }, {
      "ms": 54
    }],
    57: [function (require, module, exports) {
      if (typeof Object.create === 'function') {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    }, {}],
    58: [function (require, module, exports) {
      'use strict';

      var has = Object.prototype.hasOwnProperty,
        undef;

      /**
       * Decode a URI encoded string.
       *
       * @param {String} input The URI encoded string.
       * @returns {String|Null} The decoded string.
       * @api private
       */
      function decode(input) {
        try {
          return decodeURIComponent(input.replace(/\+/g, ' '));
        } catch (e) {
          return null;
        }
      }

      /**
       * Attempts to encode a given input.
       *
       * @param {String} input The string that needs to be encoded.
       * @returns {String|Null} The encoded string.
       * @api private
       */
      function encode(input) {
        try {
          return encodeURIComponent(input);
        } catch (e) {
          return null;
        }
      }

      /**
       * Simple query string parser.
       *
       * @param {String} query The query string that needs to be parsed.
       * @returns {Object}
       * @api public
       */
      function querystring(query) {
        var parser = /([^=?&]+)=?([^&]*)/g,
          result = {},
          part;
        while (part = parser.exec(query)) {
          var key = decode(part[1]),
            value = decode(part[2]);

          //
          // Prevent overriding of existing properties. This ensures that build-in
          // methods like `toString` or __proto__ are not overriden by malicious
          // querystrings.
          //
          // In the case if failed decoding, we want to omit the key/value pairs
          // from the result.
          //
          if (key === null || value === null || key in result) continue;
          result[key] = value;
        }
        return result;
      }

      /**
       * Transform a query string to an object.
       *
       * @param {Object} obj Object that should be transformed.
       * @param {String} prefix Optional prefix.
       * @returns {String}
       * @api public
       */
      function querystringify(obj, prefix) {
        prefix = prefix || '';
        var pairs = [],
          value,
          key;

        //
        // Optionally prefix with a '?' if needed
        //
        if ('string' !== typeof prefix) prefix = '?';
        for (key in obj) {
          if (has.call(obj, key)) {
            value = obj[key];

            //
            // Edge cases where we actually want to encode the value to an empty
            // string instead of the stringified value.
            //
            if (!value && (value === null || value === undef || isNaN(value))) {
              value = '';
            }
            key = encodeURIComponent(key);
            value = encodeURIComponent(value);

            //
            // If we failed to encode the strings, we should bail out as we don't
            // want to add invalid strings to the query.
            //
            if (key === null || value === null) continue;
            pairs.push(key + '=' + value);
          }
        }
        return pairs.length ? prefix + pairs.join('&') : '';
      }

      //
      // Expose the module.
      //
      exports.stringify = querystringify;
      exports.parse = querystring;
    }, {}],
    59: [function (require, module, exports) {
      'use strict';

      /**
       * Check if we're required to add a port number.
       *
       * @see https://url.spec.whatwg.org/#default-port
       * @param {Number|String} port Port number we need to check
       * @param {String} protocol Protocol we need to check against.
       * @returns {Boolean} Is it a default port for the given protocol
       * @api private
       */
      module.exports = function required(port, protocol) {
        protocol = protocol.split(':')[0];
        port = +port;
        if (!port) return false;
        switch (protocol) {
          case 'http':
          case 'ws':
            return port !== 80;
          case 'https':
          case 'wss':
            return port !== 443;
          case 'ftp':
            return port !== 21;
          case 'gopher':
            return port !== 70;
          case 'file':
            return false;
        }
        return port !== 0;
      };
    }, {}],
    60: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var required = require('requires-port'),
            qs = require('querystringify'),
            controlOrWhitespace = /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,
            CRHTLF = /[\n\r\t]/g,
            slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//,
            port = /:\d+$/,
            protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i,
            windowsDriveLetter = /^[a-zA-Z]:/;

          /**
           * Remove control characters and whitespace from the beginning of a string.
           *
           * @param {Object|String} str String to trim.
           * @returns {String} A new string representing `str` stripped of control
           *     characters and whitespace from its beginning.
           * @public
           */
          function trimLeft(str) {
            return (str ? str : '').toString().replace(controlOrWhitespace, '');
          }

          /**
           * These are the parse rules for the URL parser, it informs the parser
           * about:
           *
           * 0. The char it Needs to parse, if it's a string it should be done using
           *    indexOf, RegExp using exec and NaN means set as current value.
           * 1. The property we should set when parsing this value.
           * 2. Indication if it's backwards or forward parsing, when set as number it's
           *    the value of extra chars that should be split off.
           * 3. Inherit from location if non existing in the parser.
           * 4. `toLowerCase` the resulting value.
           */
          var rules = [['#', 'hash'],
          // Extract from the back.
          ['?', 'query'],
          // Extract from the back.
          function sanitize(address, url) {
            // Sanitize what is left of the address
            return isSpecial(url.protocol) ? address.replace(/\\/g, '/') : address;
          }, ['/', 'pathname'],
          // Extract from the back.
          ['@', 'auth', 1],
          // Extract from the front.
          [NaN, 'host', undefined, 1, 1],
          // Set left over value.
          [/:(\d*)$/, 'port', undefined, 1],
          // RegExp the back.
          [NaN, 'hostname', undefined, 1, 1] // Set left over.
          ];

          /**
           * These properties should not be copied or inherited from. This is only needed
           * for all non blob URL's as a blob URL does not include a hash, only the
           * origin.
           *
           * @type {Object}
           * @private
           */
          var ignore = {
            hash: 1,
            query: 1
          };

          /**
           * The location object differs when your code is loaded through a normal page,
           * Worker or through a worker using a blob. And with the blobble begins the
           * trouble as the location object will contain the URL of the blob, not the
           * location of the page where our code is loaded in. The actual origin is
           * encoded in the `pathname` so we can thankfully generate a good "default"
           * location from it so we can generate proper relative URL's again.
           *
           * @param {Object|String} loc Optional default location object.
           * @returns {Object} lolcation object.
           * @public
           */
          function lolcation(loc) {
            var globalVar;
            if (typeof window !== 'undefined') globalVar = window;else if (typeof global !== 'undefined') globalVar = global;else if (typeof self !== 'undefined') globalVar = self;else globalVar = {};
            var location = globalVar.location || {};
            loc = loc || location;
            var finaldestination = {},
              type = typeof loc,
              key;
            if ('blob:' === loc.protocol) {
              finaldestination = new Url(unescape(loc.pathname), {});
            } else if ('string' === type) {
              finaldestination = new Url(loc, {});
              for (key in ignore) delete finaldestination[key];
            } else if ('object' === type) {
              for (key in loc) {
                if (key in ignore) continue;
                finaldestination[key] = loc[key];
              }
              if (finaldestination.slashes === undefined) {
                finaldestination.slashes = slashes.test(loc.href);
              }
            }
            return finaldestination;
          }

          /**
           * Check whether a protocol scheme is special.
           *
           * @param {String} The protocol scheme of the URL
           * @return {Boolean} `true` if the protocol scheme is special, else `false`
           * @private
           */
          function isSpecial(scheme) {
            return scheme === 'file:' || scheme === 'ftp:' || scheme === 'http:' || scheme === 'https:' || scheme === 'ws:' || scheme === 'wss:';
          }

          /**
           * @typedef ProtocolExtract
           * @type Object
           * @property {String} protocol Protocol matched in the URL, in lowercase.
           * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
           * @property {String} rest Rest of the URL that is not part of the protocol.
           */

          /**
           * Extract protocol information from a URL with/without double slash ("//").
           *
           * @param {String} address URL we want to extract from.
           * @param {Object} location
           * @return {ProtocolExtract} Extracted information.
           * @private
           */
          function extractProtocol(address, location) {
            address = trimLeft(address);
            address = address.replace(CRHTLF, '');
            location = location || {};
            var match = protocolre.exec(address);
            var protocol = match[1] ? match[1].toLowerCase() : '';
            var forwardSlashes = !!match[2];
            var otherSlashes = !!match[3];
            var slashesCount = 0;
            var rest;
            if (forwardSlashes) {
              if (otherSlashes) {
                rest = match[2] + match[3] + match[4];
                slashesCount = match[2].length + match[3].length;
              } else {
                rest = match[2] + match[4];
                slashesCount = match[2].length;
              }
            } else {
              if (otherSlashes) {
                rest = match[3] + match[4];
                slashesCount = match[3].length;
              } else {
                rest = match[4];
              }
            }
            if (protocol === 'file:') {
              if (slashesCount >= 2) {
                rest = rest.slice(2);
              }
            } else if (isSpecial(protocol)) {
              rest = match[4];
            } else if (protocol) {
              if (forwardSlashes) {
                rest = rest.slice(2);
              }
            } else if (slashesCount >= 2 && isSpecial(location.protocol)) {
              rest = match[4];
            }
            return {
              protocol: protocol,
              slashes: forwardSlashes || isSpecial(protocol),
              slashesCount: slashesCount,
              rest: rest
            };
          }

          /**
           * Resolve a relative URL pathname against a base URL pathname.
           *
           * @param {String} relative Pathname of the relative URL.
           * @param {String} base Pathname of the base URL.
           * @return {String} Resolved pathname.
           * @private
           */
          function resolve(relative, base) {
            if (relative === '') return base;
            var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),
              i = path.length,
              last = path[i - 1],
              unshift = false,
              up = 0;
            while (i--) {
              if (path[i] === '.') {
                path.splice(i, 1);
              } else if (path[i] === '..') {
                path.splice(i, 1);
                up++;
              } else if (up) {
                if (i === 0) unshift = true;
                path.splice(i, 1);
                up--;
              }
            }
            if (unshift) path.unshift('');
            if (last === '.' || last === '..') path.push('');
            return path.join('/');
          }

          /**
           * The actual URL instance. Instead of returning an object we've opted-in to
           * create an actual constructor as it's much more memory efficient and
           * faster and it pleases my OCD.
           *
           * It is worth noting that we should not use `URL` as class name to prevent
           * clashes with the global URL instance that got introduced in browsers.
           *
           * @constructor
           * @param {String} address URL we want to parse.
           * @param {Object|String} [location] Location defaults for relative paths.
           * @param {Boolean|Function} [parser] Parser for the query string.
           * @private
           */
          function Url(address, location, parser) {
            address = trimLeft(address);
            address = address.replace(CRHTLF, '');
            if (!(this instanceof Url)) {
              return new Url(address, location, parser);
            }
            var relative,
              extracted,
              parse,
              instruction,
              index,
              key,
              instructions = rules.slice(),
              type = typeof location,
              url = this,
              i = 0;

            //
            // The following if statements allows this module two have compatibility with
            // 2 different API:
            //
            // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
            //    where the boolean indicates that the query string should also be parsed.
            //
            // 2. The `URL` interface of the browser which accepts a URL, object as
            //    arguments. The supplied object will be used as default values / fall-back
            //    for relative paths.
            //
            if ('object' !== type && 'string' !== type) {
              parser = location;
              location = null;
            }
            if (parser && 'function' !== typeof parser) parser = qs.parse;
            location = lolcation(location);

            //
            // Extract protocol information before running the instructions.
            //
            extracted = extractProtocol(address || '', location);
            relative = !extracted.protocol && !extracted.slashes;
            url.slashes = extracted.slashes || relative && location.slashes;
            url.protocol = extracted.protocol || location.protocol || '';
            address = extracted.rest;

            //
            // When the authority component is absent the URL starts with a path
            // component.
            //
            if (extracted.protocol === 'file:' && (extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) || !extracted.slashes && (extracted.protocol || extracted.slashesCount < 2 || !isSpecial(url.protocol))) {
              instructions[3] = [/(.*)/, 'pathname'];
            }
            for (; i < instructions.length; i++) {
              instruction = instructions[i];
              if (typeof instruction === 'function') {
                address = instruction(address, url);
                continue;
              }
              parse = instruction[0];
              key = instruction[1];
              if (parse !== parse) {
                url[key] = address;
              } else if ('string' === typeof parse) {
                index = parse === '@' ? address.lastIndexOf(parse) : address.indexOf(parse);
                if (~index) {
                  if ('number' === typeof instruction[2]) {
                    url[key] = address.slice(0, index);
                    address = address.slice(index + instruction[2]);
                  } else {
                    url[key] = address.slice(index);
                    address = address.slice(0, index);
                  }
                }
              } else if (index = parse.exec(address)) {
                url[key] = index[1];
                address = address.slice(0, index.index);
              }
              url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : '');

              //
              // Hostname, host and protocol should be lowercased so they can be used to
              // create a proper `origin`.
              //
              if (instruction[4]) url[key] = url[key].toLowerCase();
            }

            //
            // Also parse the supplied query string in to an object. If we're supplied
            // with a custom parser as function use that instead of the default build-in
            // parser.
            //
            if (parser) url.query = parser(url.query);

            //
            // If the URL is relative, resolve the pathname against the base URL.
            //
            if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {
              url.pathname = resolve(url.pathname, location.pathname);
            }

            //
            // Default to a / for pathname if none exists. This normalizes the URL
            // to always have a /
            //
            if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {
              url.pathname = '/' + url.pathname;
            }

            //
            // We should not add port numbers if they are already the default port number
            // for a given protocol. As the host also contains the port number we're going
            // override it with the hostname which contains no port number.
            //
            if (!required(url.port, url.protocol)) {
              url.host = url.hostname;
              url.port = '';
            }

            //
            // Parse down the `auth` for the username and password.
            //
            url.username = url.password = '';
            if (url.auth) {
              index = url.auth.indexOf(':');
              if (~index) {
                url.username = url.auth.slice(0, index);
                url.username = encodeURIComponent(decodeURIComponent(url.username));
                url.password = url.auth.slice(index + 1);
                url.password = encodeURIComponent(decodeURIComponent(url.password));
              } else {
                url.username = encodeURIComponent(decodeURIComponent(url.auth));
              }
              url.auth = url.password ? url.username + ':' + url.password : url.username;
            }
            url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host ? url.protocol + '//' + url.host : 'null';

            //
            // The href is just the compiled result.
            //
            url.href = url.toString();
          }

          /**
           * This is convenience method for changing properties in the URL instance to
           * insure that they all propagate correctly.
           *
           * @param {String} part          Property we need to adjust.
           * @param {Mixed} value          The newly assigned value.
           * @param {Boolean|Function} fn  When setting the query, it will be the function
           *                               used to parse the query.
           *                               When setting the protocol, double slash will be
           *                               removed from the final url if it is true.
           * @returns {URL} URL instance for chaining.
           * @public
           */
          function set(part, value, fn) {
            var url = this;
            switch (part) {
              case 'query':
                if ('string' === typeof value && value.length) {
                  value = (fn || qs.parse)(value);
                }
                url[part] = value;
                break;
              case 'port':
                url[part] = value;
                if (!required(value, url.protocol)) {
                  url.host = url.hostname;
                  url[part] = '';
                } else if (value) {
                  url.host = url.hostname + ':' + value;
                }
                break;
              case 'hostname':
                url[part] = value;
                if (url.port) value += ':' + url.port;
                url.host = value;
                break;
              case 'host':
                url[part] = value;
                if (port.test(value)) {
                  value = value.split(':');
                  url.port = value.pop();
                  url.hostname = value.join(':');
                } else {
                  url.hostname = value;
                  url.port = '';
                }
                break;
              case 'protocol':
                url.protocol = value.toLowerCase();
                url.slashes = !fn;
                break;
              case 'pathname':
              case 'hash':
                if (value) {
                  var char = part === 'pathname' ? '/' : '#';
                  url[part] = value.charAt(0) !== char ? char + value : value;
                } else {
                  url[part] = value;
                }
                break;
              case 'username':
              case 'password':
                url[part] = encodeURIComponent(value);
                break;
              case 'auth':
                var index = value.indexOf(':');
                if (~index) {
                  url.username = value.slice(0, index);
                  url.username = encodeURIComponent(decodeURIComponent(url.username));
                  url.password = value.slice(index + 1);
                  url.password = encodeURIComponent(decodeURIComponent(url.password));
                } else {
                  url.username = encodeURIComponent(decodeURIComponent(value));
                }
            }
            for (var i = 0; i < rules.length; i++) {
              var ins = rules[i];
              if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
            }
            url.auth = url.password ? url.username + ':' + url.password : url.username;
            url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host ? url.protocol + '//' + url.host : 'null';
            url.href = url.toString();
            return url;
          }

          /**
           * Transform the properties back in to a valid and full URL string.
           *
           * @param {Function} stringify Optional query stringify function.
           * @returns {String} Compiled version of the URL.
           * @public
           */
          function toString(stringify) {
            if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;
            var query,
              url = this,
              host = url.host,
              protocol = url.protocol;
            if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
            var result = protocol + (url.protocol && url.slashes || isSpecial(url.protocol) ? '//' : '');
            if (url.username) {
              result += url.username;
              if (url.password) result += ':' + url.password;
              result += '@';
            } else if (url.password) {
              result += ':' + url.password;
              result += '@';
            } else if (url.protocol !== 'file:' && isSpecial(url.protocol) && !host && url.pathname !== '/') {
              //
              // Add back the empty userinfo, otherwise the original invalid URL
              // might be transformed into a valid one with `url.pathname` as host.
              //
              result += '@';
            }

            //
            // Trailing colon is removed from `url.host` when it is parsed. If it still
            // ends with a colon, then add back the trailing colon that was removed. This
            // prevents an invalid URL from being transformed into a valid one.
            //
            if (host[host.length - 1] === ':' || port.test(url.hostname) && !url.port) {
              host += ':';
            }
            result += host + url.pathname;
            query = 'object' === typeof url.query ? stringify(url.query) : url.query;
            if (query) result += '?' !== query.charAt(0) ? '?' + query : query;
            if (url.hash) result += url.hash;
            return result;
          }
          Url.prototype = {
            set: set,
            toString: toString
          };

          //
          // Expose the URL parser and some additional properties that might be useful for
          // others or testing.
          //
          Url.extractProtocol = extractProtocol;
          Url.location = lolcation;
          Url.trimLeft = trimLeft;
          Url.qs = qs;
          module.exports = Url;
        }).call(this);
      }).call(this, typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "querystringify": 58,
      "requires-port": 59
    }]
  }, {}, [1])(1);
});

/***/ }),

/***/ "./node_modules/stats.js/build/stats.min.js":
/*!**************************************************!*\
  !*** ./node_modules/stats.js/build/stats.min.js ***!
  \**************************************************/
/***/ (function(module) {

// stats.js - http://github.com/mrdoob/stats.js
(function (f, e) {
   true ? module.exports = e() : 0;
})(this, function () {
  var f = function () {
    function e(a) {
      c.appendChild(a.dom);
      return a;
    }
    function u(a) {
      for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? "block" : "none";
      l = a;
    }
    var l = 0,
      c = document.createElement("div");
    c.style.cssText = "position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";
    c.addEventListener("click", function (a) {
      a.preventDefault();
      u(++l % c.children.length);
    }, !1);
    var k = (performance || Date).now(),
      g = k,
      a = 0,
      r = e(new f.Panel("FPS", "#0ff", "#002")),
      h = e(new f.Panel("MS", "#0f0", "#020"));
    if (self.performance && self.performance.memory) var t = e(new f.Panel("MB", "#f08", "#201"));
    u(0);
    return {
      REVISION: 16,
      dom: c,
      addPanel: e,
      showPanel: u,
      begin: function () {
        k = (performance || Date).now();
      },
      end: function () {
        a++;
        var c = (performance || Date).now();
        h.update(c - k, 200);
        if (c > g + 1E3 && (r.update(1E3 * a / (c - g), 100), g = c, a = 0, t)) {
          var d = performance.memory;
          t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);
        }
        return c;
      },
      update: function () {
        k = this.end();
      },
      domElement: c,
      setMode: u
    };
  };
  f.Panel = function (e, f, l) {
    var c = Infinity,
      k = 0,
      g = Math.round,
      a = g(window.devicePixelRatio || 1),
      r = 80 * a,
      h = 48 * a,
      t = 3 * a,
      v = 2 * a,
      d = 3 * a,
      m = 15 * a,
      n = 74 * a,
      p = 30 * a,
      q = document.createElement("canvas");
    q.width = r;
    q.height = h;
    q.style.cssText = "width:80px;height:48px";
    var b = q.getContext("2d");
    b.font = "bold " + 9 * a + "px Helvetica,Arial,sans-serif";
    b.textBaseline = "top";
    b.fillStyle = l;
    b.fillRect(0, 0, r, h);
    b.fillStyle = f;
    b.fillText(e, t, v);
    b.fillRect(d, m, n, p);
    b.fillStyle = l;
    b.globalAlpha = .9;
    b.fillRect(d, m, n, p);
    return {
      dom: q,
      update: function (h, w) {
        c = Math.min(c, h);
        k = Math.max(k, h);
        b.fillStyle = l;
        b.globalAlpha = 1;
        b.fillRect(0, 0, r, m);
        b.fillStyle = f;
        b.fillText(g(h) + " " + e + " (" + g(c) + "-" + g(k) + ")", t, v);
        b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);
        b.fillRect(d + n - a, m, a, p);
        b.fillStyle = l;
        b.globalAlpha = .9;
        b.fillRect(d + n - a, m, a, g((1 - h / w) * p));
      }
    };
  };
  return f;
});

/***/ }),

/***/ "./node_modules/url/node_modules/punycode/punycode.js":
/*!************************************************************!*\
  !*** ./node_modules/url/node_modules/punycode/punycode.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;
(function (root) {
  /** Detect free variables */
  var freeExports =  true && exports && !exports.nodeType && exports;
  var freeModule =  true && module && !module.nodeType && module;
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;
  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
    root = freeGlobal;
  }

  /**
   * The `punycode` object.
   * @name punycode
   * @type Object
   */
  var punycode,
    /** Highest positive signed 32-bit float value */
    maxInt = 2147483647,
    // aka. 0x7FFFFFFF or 2^31-1

    /** Bootstring parameters */
    base = 36,
    tMin = 1,
    tMax = 26,
    skew = 38,
    damp = 700,
    initialBias = 72,
    initialN = 128,
    // 0x80
    delimiter = '-',
    // '\x2D'

    /** Regular expressions */
    regexPunycode = /^xn--/,
    regexNonASCII = /[^\x20-\x7E]/,
    // unprintable ASCII chars + non-ASCII chars
    regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
    // RFC 3490 separators

    /** Error messages */
    errors = {
      'overflow': 'Overflow: input needs wider integers to process',
      'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
      'invalid-input': 'Invalid input'
    },
    /** Convenience shortcuts */
    baseMinusTMin = base - tMin,
    floor = Math.floor,
    stringFromCharCode = String.fromCharCode,
    /** Temporary variable */
    key;

  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */
  function error(type) {
    throw new RangeError(errors[type]);
  }

  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */
  function map(array, fn) {
    var length = array.length;
    var result = [];
    while (length--) {
      result[length] = fn(array[length]);
    }
    return result;
  }

  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */
  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';
    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    }
    // Avoid `split(regex)` for IE8 compatibility. See #17.
    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }

  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */
  function ucs2decode(string) {
    var output = [],
      counter = 0,
      length = string.length,
      value,
      extra;
    while (counter < length) {
      value = string.charCodeAt(counter++);
      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);
        if ((extra & 0xFC00) == 0xDC00) {
          // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }

  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */
  function ucs2encode(array) {
    return map(array, function (value) {
      var output = '';
      if (value > 0xFFFF) {
        value -= 0x10000;
        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
        value = 0xDC00 | value & 0x3FF;
      }
      output += stringFromCharCode(value);
      return output;
    }).join('');
  }

  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */
  function basicToDigit(codePoint) {
    if (codePoint - 48 < 10) {
      return codePoint - 22;
    }
    if (codePoint - 65 < 26) {
      return codePoint - 65;
    }
    if (codePoint - 97 < 26) {
      return codePoint - 97;
    }
    return base;
  }

  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */
  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }

  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */
  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for /* no initialization */
    (; delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }
    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }

  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */
  function decode(input) {
    // Don't use UCS-2
    var output = [],
      inputLength = input.length,
      out,
      i = 0,
      n = initialN,
      bias = initialBias,
      basic,
      j,
      index,
      oldi,
      w,
      k,
      digit,
      t,
      /** Cached calculation results */
      baseMinusT;

    // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    basic = input.lastIndexOf(delimiter);
    if (basic < 0) {
      basic = 0;
    }
    for (j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error('not-basic');
      }
      output.push(input.charCodeAt(j));
    }

    // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.

    for /* no final expression */
    (index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      for /* no condition */
      (oldi = i, w = 1, k = base;; k += base) {
        if (index >= inputLength) {
          error('invalid-input');
        }
        digit = basicToDigit(input.charCodeAt(index++));
        if (digit >= base || digit > floor((maxInt - i) / w)) {
          error('overflow');
        }
        i += digit * w;
        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
        if (digit < t) {
          break;
        }
        baseMinusT = base - t;
        if (w > floor(maxInt / baseMinusT)) {
          error('overflow');
        }
        w *= baseMinusT;
      }
      out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0);

      // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:
      if (floor(i / out) > maxInt - n) {
        error('overflow');
      }
      n += floor(i / out);
      i %= out;

      // Insert `n` at position `i` of the output
      output.splice(i++, 0, n);
    }
    return ucs2encode(output);
  }

  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */
  function encode(input) {
    var n,
      delta,
      handledCPCount,
      basicLength,
      bias,
      j,
      m,
      q,
      k,
      t,
      currentValue,
      output = [],
      /** `inputLength` will hold the number of code points in `input`. */
      inputLength,
      /** Cached calculation results */
      handledCPCountPlusOne,
      baseMinusT,
      qMinusT;

    // Convert the input in UCS-2 to Unicode
    input = ucs2decode(input);

    // Cache the length
    inputLength = input.length;

    // Initialize the state
    n = initialN;
    delta = 0;
    bias = initialBias;

    // Handle the basic code points
    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];
      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }
    handledCPCount = basicLength = output.length;

    // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.

    // Finish the basic string - if it is not empty - with a delimiter
    if (basicLength) {
      output.push(delimiter);
    }

    // Main encoding loop:
    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      }

      // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow
      handledCPCountPlusOne = handledCPCount + 1;
      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }
      delta += (m - n) * handledCPCountPlusOne;
      n = m;
      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }
        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for /* no condition */
          (q = delta, k = base;; k += base) {
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (q < t) {
              break;
            }
            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }
          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }
      ++delta;
      ++n;
    }
    return output.join('');
  }

  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */
  function toUnicode(input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  }

  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */
  function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  }

  /*--------------------------------------------------------------------------*/

  /** Define the public API */
  punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '1.4.1',
    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };

  /** Expose `punycode` */
  // Some AMD build optimizers, like r.js, check for specific condition patterns
  // like the following:
  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return punycode;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this);

/***/ }),

/***/ "./node_modules/url/node_modules/qs/lib/formats.js":
/*!*********************************************************!*\
  !*** ./node_modules/url/node_modules/qs/lib/formats.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


var replace = String.prototype.replace;
var percentTwenties = /%20/g;
var Format = {
  RFC1738: 'RFC1738',
  RFC3986: 'RFC3986'
};
module.exports = {
  'default': Format.RFC3986,
  formatters: {
    RFC1738: function (value) {
      return replace.call(value, percentTwenties, '+');
    },
    RFC3986: function (value) {
      return String(value);
    }
  },
  RFC1738: Format.RFC1738,
  RFC3986: Format.RFC3986
};

/***/ }),

/***/ "./node_modules/url/node_modules/qs/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/url/node_modules/qs/lib/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var stringify = __webpack_require__(/*! ./stringify */ "./node_modules/url/node_modules/qs/lib/stringify.js");
var parse = __webpack_require__(/*! ./parse */ "./node_modules/url/node_modules/qs/lib/parse.js");
var formats = __webpack_require__(/*! ./formats */ "./node_modules/url/node_modules/qs/lib/formats.js");
module.exports = {
  formats: formats,
  parse: parse,
  stringify: stringify
};

/***/ }),

/***/ "./node_modules/url/node_modules/qs/lib/parse.js":
/*!*******************************************************!*\
  !*** ./node_modules/url/node_modules/qs/lib/parse.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/url/node_modules/qs/lib/utils.js");
var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;
var defaults = {
  allowDots: false,
  allowPrototypes: false,
  allowSparse: false,
  arrayLimit: 20,
  charset: 'utf-8',
  charsetSentinel: false,
  comma: false,
  decoder: utils.decode,
  delimiter: '&',
  depth: 5,
  ignoreQueryPrefix: false,
  interpretNumericEntities: false,
  parameterLimit: 1000,
  parseArrays: true,
  plainObjects: false,
  strictNullHandling: false
};
var interpretNumericEntities = function (str) {
  return str.replace(/&#(\d+);/g, function ($0, numberStr) {
    return String.fromCharCode(parseInt(numberStr, 10));
  });
};
var parseArrayValue = function (val, options) {
  if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
    return val.split(',');
  }
  return val;
};

// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

var parseValues = function parseQueryStringValues(str, options) {
  var obj = {
    __proto__: null
  };
  var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
  var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
  var parts = cleanStr.split(options.delimiter, limit);
  var skipIndex = -1; // Keep track of where the utf8 sentinel was found
  var i;
  var charset = options.charset;
  if (options.charsetSentinel) {
    for (i = 0; i < parts.length; ++i) {
      if (parts[i].indexOf('utf8=') === 0) {
        if (parts[i] === charsetSentinel) {
          charset = 'utf-8';
        } else if (parts[i] === isoSentinel) {
          charset = 'iso-8859-1';
        }
        skipIndex = i;
        i = parts.length; // The eslint settings do not allow break;
      }
    }
  }
  for (i = 0; i < parts.length; ++i) {
    if (i === skipIndex) {
      continue;
    }
    var part = parts[i];
    var bracketEqualsPos = part.indexOf(']=');
    var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
    var key, val;
    if (pos === -1) {
      key = options.decoder(part, defaults.decoder, charset, 'key');
      val = options.strictNullHandling ? null : '';
    } else {
      key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
      val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function (encodedVal) {
        return options.decoder(encodedVal, defaults.decoder, charset, 'value');
      });
    }
    if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
      val = interpretNumericEntities(val);
    }
    if (part.indexOf('[]=') > -1) {
      val = isArray(val) ? [val] : val;
    }
    if (has.call(obj, key)) {
      obj[key] = utils.combine(obj[key], val);
    } else {
      obj[key] = val;
    }
  }
  return obj;
};
var parseObject = function (chain, val, options, valuesParsed) {
  var leaf = valuesParsed ? val : parseArrayValue(val, options);
  for (var i = chain.length - 1; i >= 0; --i) {
    var obj;
    var root = chain[i];
    if (root === '[]' && options.parseArrays) {
      obj = [].concat(leaf);
    } else {
      obj = options.plainObjects ? Object.create(null) : {};
      var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
      var index = parseInt(cleanRoot, 10);
      if (!options.parseArrays && cleanRoot === '') {
        obj = {
          0: leaf
        };
      } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
        obj = [];
        obj[index] = leaf;
      } else if (cleanRoot !== '__proto__') {
        obj[cleanRoot] = leaf;
      }
    }
    leaf = obj;
  }
  return leaf;
};
var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
  if (!givenKey) {
    return;
  }

  // Transform dot notation to bracket notation
  var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

  // The regex chunks

  var brackets = /(\[[^[\]]*])/;
  var child = /(\[[^[\]]*])/g;

  // Get the parent

  var segment = options.depth > 0 && brackets.exec(key);
  var parent = segment ? key.slice(0, segment.index) : key;

  // Stash the parent if it exists

  var keys = [];
  if (parent) {
    // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
    if (!options.plainObjects && has.call(Object.prototype, parent)) {
      if (!options.allowPrototypes) {
        return;
      }
    }
    keys.push(parent);
  }

  // Loop through children appending to the array until we hit depth

  var i = 0;
  while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
    i += 1;
    if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
      if (!options.allowPrototypes) {
        return;
      }
    }
    keys.push(segment[1]);
  }

  // If there's a remainder, just add whatever is left

  if (segment) {
    keys.push('[' + key.slice(segment.index) + ']');
  }
  return parseObject(keys, val, options, valuesParsed);
};
var normalizeParseOptions = function normalizeParseOptions(opts) {
  if (!opts) {
    return defaults;
  }
  if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
    throw new TypeError('Decoder has to be a function.');
  }
  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
  }
  var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;
  return {
    allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
    allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
    allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
    arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
    charset: charset,
    charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
    comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
    decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
    delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
    // eslint-disable-next-line no-implicit-coercion, no-extra-parens
    depth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults.depth,
    ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
    interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
    parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
    parseArrays: opts.parseArrays !== false,
    plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
    strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
  };
};
module.exports = function (str, opts) {
  var options = normalizeParseOptions(opts);
  if (str === '' || str === null || typeof str === 'undefined') {
    return options.plainObjects ? Object.create(null) : {};
  }
  var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
  var obj = options.plainObjects ? Object.create(null) : {};

  // Iterate over the keys and setup the new object

  var keys = Object.keys(tempObj);
  for (var i = 0; i < keys.length; ++i) {
    var key = keys[i];
    var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
    obj = utils.merge(obj, newObj, options);
  }
  if (options.allowSparse === true) {
    return obj;
  }
  return utils.compact(obj);
};

/***/ }),

/***/ "./node_modules/url/node_modules/qs/lib/stringify.js":
/*!***********************************************************!*\
  !*** ./node_modules/url/node_modules/qs/lib/stringify.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getSideChannel = __webpack_require__(/*! side-channel */ "./node_modules/side-channel/index.js");
var utils = __webpack_require__(/*! ./utils */ "./node_modules/url/node_modules/qs/lib/utils.js");
var formats = __webpack_require__(/*! ./formats */ "./node_modules/url/node_modules/qs/lib/formats.js");
var has = Object.prototype.hasOwnProperty;
var arrayPrefixGenerators = {
  brackets: function brackets(prefix) {
    return prefix + '[]';
  },
  comma: 'comma',
  indices: function indices(prefix, key) {
    return prefix + '[' + key + ']';
  },
  repeat: function repeat(prefix) {
    return prefix;
  }
};
var isArray = Array.isArray;
var push = Array.prototype.push;
var pushToArray = function (arr, valueOrArray) {
  push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
};
var toISO = Date.prototype.toISOString;
var defaultFormat = formats['default'];
var defaults = {
  addQueryPrefix: false,
  allowDots: false,
  charset: 'utf-8',
  charsetSentinel: false,
  delimiter: '&',
  encode: true,
  encoder: utils.encode,
  encodeValuesOnly: false,
  format: defaultFormat,
  formatter: formats.formatters[defaultFormat],
  // deprecated
  indices: false,
  serializeDate: function serializeDate(date) {
    return toISO.call(date);
  },
  skipNulls: false,
  strictNullHandling: false
};
var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
  return typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || typeof v === 'symbol' || typeof v === 'bigint';
};
var sentinel = {};
var stringify = function stringify(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
  var obj = object;
  var tmpSc = sideChannel;
  var step = 0;
  var findFlag = false;
  while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
    // Where object last appeared in the ref tree
    var pos = tmpSc.get(object);
    step += 1;
    if (typeof pos !== 'undefined') {
      if (pos === step) {
        throw new RangeError('Cyclic object value');
      } else {
        findFlag = true; // Break while
      }
    }
    if (typeof tmpSc.get(sentinel) === 'undefined') {
      step = 0;
    }
  }
  if (typeof filter === 'function') {
    obj = filter(prefix, obj);
  } else if (obj instanceof Date) {
    obj = serializeDate(obj);
  } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
    obj = utils.maybeMap(obj, function (value) {
      if (value instanceof Date) {
        return serializeDate(value);
      }
      return value;
    });
  }
  if (obj === null) {
    if (strictNullHandling) {
      return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;
    }
    obj = '';
  }
  if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
    if (encoder) {
      var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);
      return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
    }
    return [formatter(prefix) + '=' + formatter(String(obj))];
  }
  var values = [];
  if (typeof obj === 'undefined') {
    return values;
  }
  var objKeys;
  if (generateArrayPrefix === 'comma' && isArray(obj)) {
    // we need to join elements in
    if (encodeValuesOnly && encoder) {
      obj = utils.maybeMap(obj, encoder);
    }
    objKeys = [{
      value: obj.length > 0 ? obj.join(',') || null : void undefined
    }];
  } else if (isArray(filter)) {
    objKeys = filter;
  } else {
    var keys = Object.keys(obj);
    objKeys = sort ? keys.sort(sort) : keys;
  }
  var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + '[]' : prefix;
  for (var j = 0; j < objKeys.length; ++j) {
    var key = objKeys[j];
    var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];
    if (skipNulls && value === null) {
      continue;
    }
    var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? '.' + key : '[' + key + ']');
    sideChannel.set(object, step);
    var valueSideChannel = getSideChannel();
    valueSideChannel.set(sentinel, sideChannel);
    pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
  }
  return values;
};
var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
  if (!opts) {
    return defaults;
  }
  if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
    throw new TypeError('Encoder has to be a function.');
  }
  var charset = opts.charset || defaults.charset;
  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
  }
  var format = formats['default'];
  if (typeof opts.format !== 'undefined') {
    if (!has.call(formats.formatters, opts.format)) {
      throw new TypeError('Unknown format option provided.');
    }
    format = opts.format;
  }
  var formatter = formats.formatters[format];
  var filter = defaults.filter;
  if (typeof opts.filter === 'function' || isArray(opts.filter)) {
    filter = opts.filter;
  }
  return {
    addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
    allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
    charset: charset,
    charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
    delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
    encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
    encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
    encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
    filter: filter,
    format: format,
    formatter: formatter,
    serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
    skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
    sort: typeof opts.sort === 'function' ? opts.sort : null,
    strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
  };
};
module.exports = function (object, opts) {
  var obj = object;
  var options = normalizeStringifyOptions(opts);
  var objKeys;
  var filter;
  if (typeof options.filter === 'function') {
    filter = options.filter;
    obj = filter('', obj);
  } else if (isArray(options.filter)) {
    filter = options.filter;
    objKeys = filter;
  }
  var keys = [];
  if (typeof obj !== 'object' || obj === null) {
    return '';
  }
  var arrayFormat;
  if (opts && opts.arrayFormat in arrayPrefixGenerators) {
    arrayFormat = opts.arrayFormat;
  } else if (opts && 'indices' in opts) {
    arrayFormat = opts.indices ? 'indices' : 'repeat';
  } else {
    arrayFormat = 'indices';
  }
  var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
  if (opts && 'commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
    throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
  }
  var commaRoundTrip = generateArrayPrefix === 'comma' && opts && opts.commaRoundTrip;
  if (!objKeys) {
    objKeys = Object.keys(obj);
  }
  if (options.sort) {
    objKeys.sort(options.sort);
  }
  var sideChannel = getSideChannel();
  for (var i = 0; i < objKeys.length; ++i) {
    var key = objKeys[i];
    if (options.skipNulls && obj[key] === null) {
      continue;
    }
    pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, commaRoundTrip, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
  }
  var joined = keys.join(options.delimiter);
  var prefix = options.addQueryPrefix === true ? '?' : '';
  if (options.charsetSentinel) {
    if (options.charset === 'iso-8859-1') {
      // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
      prefix += 'utf8=%26%2310003%3B&';
    } else {
      // encodeURIComponent('✓')
      prefix += 'utf8=%E2%9C%93&';
    }
  }
  return joined.length > 0 ? prefix + joined : '';
};

/***/ }),

/***/ "./node_modules/url/node_modules/qs/lib/utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/url/node_modules/qs/lib/utils.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var formats = __webpack_require__(/*! ./formats */ "./node_modules/url/node_modules/qs/lib/formats.js");
var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;
var hexTable = function () {
  var array = [];
  for (var i = 0; i < 256; ++i) {
    array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
  }
  return array;
}();
var compactQueue = function compactQueue(queue) {
  while (queue.length > 1) {
    var item = queue.pop();
    var obj = item.obj[item.prop];
    if (isArray(obj)) {
      var compacted = [];
      for (var j = 0; j < obj.length; ++j) {
        if (typeof obj[j] !== 'undefined') {
          compacted.push(obj[j]);
        }
      }
      item.obj[item.prop] = compacted;
    }
  }
};
var arrayToObject = function arrayToObject(source, options) {
  var obj = options && options.plainObjects ? Object.create(null) : {};
  for (var i = 0; i < source.length; ++i) {
    if (typeof source[i] !== 'undefined') {
      obj[i] = source[i];
    }
  }
  return obj;
};
var merge = function merge(target, source, options) {
  /* eslint no-param-reassign: 0 */
  if (!source) {
    return target;
  }
  if (typeof source !== 'object') {
    if (isArray(target)) {
      target.push(source);
    } else if (target && typeof target === 'object') {
      if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
        target[source] = true;
      }
    } else {
      return [target, source];
    }
    return target;
  }
  if (!target || typeof target !== 'object') {
    return [target].concat(source);
  }
  var mergeTarget = target;
  if (isArray(target) && !isArray(source)) {
    mergeTarget = arrayToObject(target, options);
  }
  if (isArray(target) && isArray(source)) {
    source.forEach(function (item, i) {
      if (has.call(target, i)) {
        var targetItem = target[i];
        if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
          target[i] = merge(targetItem, item, options);
        } else {
          target.push(item);
        }
      } else {
        target[i] = item;
      }
    });
    return target;
  }
  return Object.keys(source).reduce(function (acc, key) {
    var value = source[key];
    if (has.call(acc, key)) {
      acc[key] = merge(acc[key], value, options);
    } else {
      acc[key] = value;
    }
    return acc;
  }, mergeTarget);
};
var assign = function assignSingleSource(target, source) {
  return Object.keys(source).reduce(function (acc, key) {
    acc[key] = source[key];
    return acc;
  }, target);
};
var decode = function (str, decoder, charset) {
  var strWithoutPlus = str.replace(/\+/g, ' ');
  if (charset === 'iso-8859-1') {
    // unescape never throws, no try...catch needed:
    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
  }
  // utf-8
  try {
    return decodeURIComponent(strWithoutPlus);
  } catch (e) {
    return strWithoutPlus;
  }
};
var encode = function encode(str, defaultEncoder, charset, kind, format) {
  // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
  // It has been adapted here for stricter adherence to RFC 3986
  if (str.length === 0) {
    return str;
  }
  var string = str;
  if (typeof str === 'symbol') {
    string = Symbol.prototype.toString.call(str);
  } else if (typeof str !== 'string') {
    string = String(str);
  }
  if (charset === 'iso-8859-1') {
    return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
      return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
    });
  }
  var out = '';
  for (var i = 0; i < string.length; ++i) {
    var c = string.charCodeAt(i);
    if (c === 0x2D // -
    || c === 0x2E // .
    || c === 0x5F // _
    || c === 0x7E // ~
    || c >= 0x30 && c <= 0x39 // 0-9
    || c >= 0x41 && c <= 0x5A // a-z
    || c >= 0x61 && c <= 0x7A // A-Z
    || format === formats.RFC1738 && (c === 0x28 || c === 0x29) // ( )
    ) {
      out += string.charAt(i);
      continue;
    }
    if (c < 0x80) {
      out = out + hexTable[c];
      continue;
    }
    if (c < 0x800) {
      out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);
      continue;
    }
    if (c < 0xD800 || c >= 0xE000) {
      out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);
      continue;
    }
    i += 1;
    c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);
    /* eslint operator-linebreak: [2, "before"] */
    out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
  }
  return out;
};
var compact = function compact(value) {
  var queue = [{
    obj: {
      o: value
    },
    prop: 'o'
  }];
  var refs = [];
  for (var i = 0; i < queue.length; ++i) {
    var item = queue[i];
    var obj = item.obj[item.prop];
    var keys = Object.keys(obj);
    for (var j = 0; j < keys.length; ++j) {
      var key = keys[j];
      var val = obj[key];
      if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
        queue.push({
          obj: obj,
          prop: key
        });
        refs.push(val);
      }
    }
  }
  compactQueue(queue);
  return value;
};
var isRegExp = function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === '[object RegExp]';
};
var isBuffer = function isBuffer(obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }
  return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};
var combine = function combine(a, b) {
  return [].concat(a, b);
};
var maybeMap = function maybeMap(val, fn) {
  if (isArray(val)) {
    var mapped = [];
    for (var i = 0; i < val.length; i += 1) {
      mapped.push(fn(val[i]));
    }
    return mapped;
  }
  return fn(val);
};
module.exports = {
  arrayToObject: arrayToObject,
  assign: assign,
  combine: combine,
  compact: compact,
  decode: decode,
  encode: encode,
  isBuffer: isBuffer,
  isRegExp: isRegExp,
  maybeMap: maybeMap,
  merge: merge
};

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*
 * Copyright Joyent, Inc. and other Node contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */



var punycode = __webpack_require__(/*! punycode */ "./node_modules/url/node_modules/punycode/punycode.js");
function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

/*
 * define these here so at least they only have to be
 * compiled once on the first module load.
 */
var protocolPattern = /^([a-z0-9.+-]+:)/i,
  portPattern = /:[0-9]*$/,
  // Special case for a simple path URL
  simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/,
  /*
   * RFC 2396: characters reserved for delimiting URLs.
   * We actually just auto-escape these.
   */
  delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
  // RFC 2396: characters not allowed for various reasons.
  unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
  autoEscape = ['\''].concat(unwise),
  /*
   * Characters that are never ever allowed in a hostname.
   * Note that any invalid chars are also handled, but these
   * are the ones that are *expected* to be seen, so we fast-path
   * them.
   */
  nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
  hostEndingChars = ['/', '?', '#'],
  hostnameMaxLen = 255,
  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
  // protocols that can allow "unsafe" and "unwise" chars.
  unsafeProtocol = {
    javascript: true,
    'javascript:': true
  },
  // protocols that never have a hostname.
  hostlessProtocol = {
    javascript: true,
    'javascript:': true
  },
  // protocols that always contain a // bit.
  slashedProtocol = {
    http: true,
    https: true,
    ftp: true,
    gopher: true,
    file: true,
    'http:': true,
    'https:': true,
    'ftp:': true,
    'gopher:': true,
    'file:': true
  },
  querystring = __webpack_require__(/*! qs */ "./node_modules/url/node_modules/qs/lib/index.js");
function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && typeof url === 'object' && url instanceof Url) {
    return url;
  }
  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}
Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  if (typeof url !== 'string') {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  /*
   * Copy chrome, IE, opera backslash-handling behavior.
   * Back slashes before the query string get converted to forward slashes
   * See: https://code.google.com/p/chromium/issues/detail?id=25916
   */
  var queryIndex = url.indexOf('?'),
    splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
    uSplit = url.split(splitter),
    slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);
  var rest = url;

  /*
   * trim before proceeding.
   * This is to support parse stuff like "  http://foo.com  \n"
   */
  rest = rest.trim();
  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }
  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  /*
   * figure out if it's got a host
   * user@server is *always* interpreted as a hostname, and url
   * resolution will treat //foo/bar as host=foo,path=bar because that's
   * how the browser resolves relative URLs.
   */
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@/]+@[^@/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }
  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    /*
     * there's a hostname.
     * the first instance of /, ?, ;, or # ends the host.
     *
     * If there is an @ in the hostname, then non-host chars *are* allowed
     * to the left of the last @ sign, unless some host-ending character
     * comes *before* the @-sign.
     * URLs are obnoxious.
     *
     * ex:
     * http://a@b@c/ => user:a@b host:c
     * http://a@b?@c => user:a host:c path:/?@c
     */

    /*
     * v0.12 TODO(isaacs): This is not quite how Chrome does things.
     * Review our test case against browsers more comprehensively.
     */

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec;
      }
    }

    /*
     * at this point, either we have an explicit point where the
     * auth portion cannot go past, or the last @ char is the decider.
     */
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      /*
       * atSign must be in auth portion.
       * http://a@b/c@d => host:b auth:a path:/c@d
       */
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    /*
     * Now we have a portion which is definitely the auth.
     * Pull that off.
     */
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec;
      }
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1) {
      hostEnd = rest.length;
    }
    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    /*
     * we've indicated that there is a hostname,
     * so even if it's empty, it has to be present.
     */
    this.hostname = this.hostname || '';

    /*
     * if hostname begins with [ and ends with ]
     * assume that it's an IPv6 address.
     */
    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) {
          continue;
        }
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              /*
               * we replace non-ASCII char with a temporary placeholder
               * we need this to make sure size of hostname is not
               * broken by replacing non-ASCII by nothing
               */
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }
    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }
    if (!ipv6Hostname) {
      /*
       * IDNA Support: Returns a punycoded representation of "domain".
       * It only converts parts of the domain name that
       * have non-ASCII characters, i.e. it doesn't matter if
       * you call it with a domain that already is ASCII-only.
       */
      this.hostname = punycode.toASCII(this.hostname);
    }
    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    /*
     * strip [ and ] from the hostname
     * the host field still retains them, though
     */
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  /*
   * now rest is set to the post-host stuff.
   * chop off any delim chars.
   */
  if (!unsafeProtocol[lowerProto]) {
    /*
     * First, make 100% sure that any "autoEscape" chars get
     * escaped, even if encodeURIComponent doesn't think they
     * need to be.
     */
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) {
        continue;
      }
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }

  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) {
    this.pathname = rest;
  }
  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  // to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  /*
   * ensure it's an object, and not a string url.
   * If it's an obj, this is a no-op.
   * this way, you can call url_format() on strings
   * to clean up potentially wonky urls.
   */
  if (typeof obj === 'string') {
    obj = urlParse(obj);
  }
  if (!(obj instanceof Url)) {
    return Url.prototype.format.call(obj);
  }
  return obj.format();
}
Url.prototype.format = function () {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }
  var protocol = this.protocol || '',
    pathname = this.pathname || '',
    hash = this.hash || '',
    host = false,
    query = '';
  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }
  if (this.query && typeof this.query === 'object' && Object.keys(this.query).length) {
    query = querystring.stringify(this.query, {
      arrayFormat: 'repeat',
      addQueryPrefix: false
    });
  }
  var search = this.search || query && '?' + query || '';
  if (protocol && protocol.substr(-1) !== ':') {
    protocol += ':';
  }

  /*
   * only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
   * unless they had them to begin with.
   */
  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') {
      pathname = '/' + pathname;
    }
  } else if (!host) {
    host = '';
  }
  if (hash && hash.charAt(0) !== '#') {
    hash = '#' + hash;
  }
  if (search && search.charAt(0) !== '?') {
    search = '?' + search;
  }
  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');
  return protocol + host + pathname + search + hash;
};
function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}
Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};
function urlResolveObject(source, relative) {
  if (!source) {
    return relative;
  }
  return urlParse(source, false, true).resolveObject(relative);
}
Url.prototype.resolveObject = function (relative) {
  if (typeof relative === 'string') {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }
  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  /*
   * hash is always overridden, no matter what.
   * even href="" will remove it.
   */
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') {
        result[rkey] = relative[rkey];
      }
    }

    // urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.pathname = '/';
      result.path = result.pathname;
    }
    result.href = result.format();
    return result;
  }
  if (relative.protocol && relative.protocol !== result.protocol) {
    /*
     * if it's a known url protocol, then changing
     * the protocol does weird things
     * first, if it's not file:, then we MUST have a host,
     * and if there was a path
     * to begin with, then we MUST have a path.
     * if it is file:, then the host is dropped,
     * because that's known to be hostless.
     * anything else is assumed to be absolute.
     */
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }
    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift())) {}
      if (!relative.host) {
        relative.host = '';
      }
      if (!relative.hostname) {
        relative.hostname = '';
      }
      if (relPath[0] !== '') {
        relPath.unshift('');
      }
      if (relPath.length < 2) {
        relPath.unshift('');
      }
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }
  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
    isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
    mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
    removeAllDots = mustEndAbs,
    srcPath = result.pathname && result.pathname.split('/') || [],
    relPath = relative.pathname && relative.pathname.split('/') || [],
    psychotic = result.protocol && !slashedProtocol[result.protocol];

  /*
   * if the url is a non-slashed url, then relative
   * links like ../.. should be able
   * to crawl up to the hostname, as well.  This is strange.
   * result.protocol has already been set by now.
   * Later on, put the first path part into the host field.
   */
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') {
        srcPath[0] = result.host;
      } else {
        srcPath.unshift(result.host);
      }
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') {
          relPath[0] = relative.host;
        } else {
          relPath.unshift(relative.host);
        }
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }
  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    /*
     * it's relative
     * throw away the existing file, and take the new path instead.
     */
    if (!srcPath) {
      srcPath = [];
    }
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (relative.search != null) {
    /*
     * just pull out the search.
     * like href='?foo'.
     * Put this after the other two cases because it simplifies the booleans
     */
    if (psychotic) {
      result.host = srcPath.shift();
      result.hostname = result.host;
      /*
       * occationaly the auth can get stuck only in host
       * this especially happens in cases like
       * url.resolveObject('mailto:local1@domain1', 'local2@domain2')
       */
      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.hostname = authInHost.shift();
        result.host = result.hostname;
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    // to support http.request
    if (result.pathname !== null || result.search !== null) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }
  if (!srcPath.length) {
    /*
     * no path at all.  easy.
     * we've already handled the other stuff above.
     */
    result.pathname = null;
    // to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  /*
   * if a url ENDs in . or .., then it must get a trailing slash.
   * however, if it ends in anything else non-slashy,
   * then it must NOT get a trailing slash.
   */
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';

  /*
   * strip single dots, resolve double dots to parent dir
   * if the path tries to go above the root, `up` ends up > 0
   */
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }
  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }
  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }
  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';

  // put the host back
  if (psychotic) {
    result.hostname = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
    result.host = result.hostname;
    /*
     * occationaly the auth can get stuck only in host
     * this especially happens in cases like
     * url.resolveObject('mailto:local1@domain1', 'local2@domain2')
     */
    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.hostname = authInHost.shift();
      result.host = result.hostname;
    }
  }
  mustEndAbs = mustEndAbs || result.host && srcPath.length;
  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }
  if (srcPath.length > 0) {
    result.pathname = srcPath.join('/');
  } else {
    result.pathname = null;
    result.path = null;
  }

  // to support request.http
  if (result.pathname !== null || result.search !== null) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};
Url.prototype.parseHost = function () {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) {
    this.hostname = host;
  }
};
exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/BaseClient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/clients/BaseClient.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* eslint-disable
  no-unused-vars
*/
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
module.exports = /*#__PURE__*/function () {
  function BaseClient() {
    _classCallCheck(this, BaseClient);
  }
  _createClass(BaseClient, null, [{
    key: "getClientPath",
    value: function getClientPath(options) {
      throw new Error('Client needs implementation');
    }
  }]);
  return BaseClient;
}();

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js":
/*!************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/clients/SockJSClient.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* eslint-disable
  no-unused-vars
*/
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
var SockJS = __webpack_require__(/*! sockjs-client/dist/sockjs */ "./node_modules/sockjs-client/dist/sockjs.js");
var BaseClient = __webpack_require__(/*! ./BaseClient */ "./node_modules/webpack-dev-server/client/clients/BaseClient.js");
module.exports = /*#__PURE__*/function (_BaseClient) {
  _inherits(SockJSClient, _BaseClient);
  var _super = _createSuper(SockJSClient);
  function SockJSClient(url) {
    var _this;
    _classCallCheck(this, SockJSClient);
    _this = _super.call(this);
    _this.sock = new SockJS(url);
    _this.sock.onerror = function (err) {// TODO: use logger to log the error event once client and client-src
      // are reorganized to have the same directory structure
    };
    return _this;
  }
  _createClass(SockJSClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.sock.onopen = f;
    }
  }, {
    key: "onClose",
    value: function onClose(f) {
      this.sock.onclose = f;
    } // call f with the message string as the first argument
  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.sock.onmessage = function (e) {
        f(e.data);
      };
    }
  }], [{
    key: "getClientPath",
    value: function getClientPath(options) {
      return /*require.resolve*/(/*! ./SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
    }
  }]);
  return SockJSClient;
}(BaseClient);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/*!***********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/overlay.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).
var ansiHTML = __webpack_require__(/*! ansi-html-community */ "./node_modules/ansi-html-community/index.js");
var _require = __webpack_require__(/*! html-entities */ "./node_modules/html-entities/lib/index.js"),
  AllHtmlEntities = _require.AllHtmlEntities;
var entities = new AllHtmlEntities();
var colors = {
  reset: ['transparent', 'transparent'],
  black: '181818',
  red: 'E36049',
  green: 'B3CB74',
  yellow: 'FFD080',
  blue: '7CAFC2',
  magenta: '7FACCA',
  cyan: 'C3C2EF',
  lightgrey: 'EBE7E3',
  darkgrey: '6D7891'
};
var overlayIframe = null;
var overlayDiv = null;
var lastOnOverlayDivReady = null;
ansiHTML.setColors(colors);
function createOverlayIframe(onIframeLoad) {
  var iframe = document.createElement('iframe');
  iframe.id = 'webpack-dev-server-client-overlay';
  iframe.src = 'about:blank';
  iframe.style.position = 'fixed';
  iframe.style.left = 0;
  iframe.style.top = 0;
  iframe.style.right = 0;
  iframe.style.bottom = 0;
  iframe.style.width = '100vw';
  iframe.style.height = '100vh';
  iframe.style.border = 'none';
  iframe.style.zIndex = 9999999999;
  iframe.onload = onIframeLoad;
  return iframe;
}
function addOverlayDivTo(iframe) {
  var div = iframe.contentDocument.createElement('div');
  div.id = 'webpack-dev-server-client-overlay-div';
  div.style.position = 'fixed';
  div.style.boxSizing = 'border-box';
  div.style.left = 0;
  div.style.top = 0;
  div.style.right = 0;
  div.style.bottom = 0;
  div.style.width = '100vw';
  div.style.height = '100vh';
  div.style.backgroundColor = 'rgba(0, 0, 0, 0.85)';
  div.style.color = '#E8E8E8';
  div.style.fontFamily = 'Menlo, Consolas, monospace';
  div.style.fontSize = 'large';
  div.style.padding = '2rem';
  div.style.lineHeight = '1.2';
  div.style.whiteSpace = 'pre-wrap';
  div.style.overflow = 'auto';
  iframe.contentDocument.body.appendChild(div);
  return div;
}
function ensureOverlayDivExists(onOverlayDivReady) {
  if (overlayDiv) {
    // Everything is ready, call the callback right away.
    onOverlayDivReady(overlayDiv);
    return;
  } // Creating an iframe may be asynchronous so we'll schedule the callback.
  // In case of multiple calls, last callback wins.

  lastOnOverlayDivReady = onOverlayDivReady;
  if (overlayIframe) {
    // We've already created it.
    return;
  } // Create iframe and, when it is ready, a div inside it.

  overlayIframe = createOverlayIframe(function () {
    overlayDiv = addOverlayDivTo(overlayIframe); // Now we can talk!

    lastOnOverlayDivReady(overlayDiv);
  }); // Zalgo alert: onIframeLoad() will be called either synchronously
  // or asynchronously depending on the browser.
  // We delay adding it so `overlayIframe` is set when `onIframeLoad` fires.

  document.body.appendChild(overlayIframe);
} // Successful compilation.

function clear() {
  if (!overlayDiv) {
    // It is not there in the first place.
    return;
  } // Clean up and reset internal state.

  document.body.removeChild(overlayIframe);
  overlayDiv = null;
  overlayIframe = null;
  lastOnOverlayDivReady = null;
} // Compilation with errors (e.g. syntax error or missing modules).

function showMessage(messages) {
  ensureOverlayDivExists(function (div) {
    // Make it look similar to our terminal.
    div.innerHTML = "<span style=\"color: #".concat(colors.red, "\">Failed to compile.</span><br><br>").concat(ansiHTML(entities.encode(messages[0])));
  });
}
module.exports = {
  clear: clear,
  showMessage: showMessage
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/*!**********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/socket.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var __webpack_dev_server_client__ = __webpack_require__(/*! ./node_modules/webpack-dev-server/client/clients/SockJSClient.js */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");


/* global __webpack_dev_server_client__ */

/* eslint-disable
  camelcase
*/
// this SockJSClient is here as a default fallback, in case inline mode
// is off or the client is not injected. This will be switched to
// WebsocketClient when it becomes the default
// important: the path to SockJSClient here is made to work in the 'client'
// directory, but is updated via the webpack compilation when compiled from
// the 'client-src' directory
var Client = typeof __webpack_dev_server_client__ !== 'undefined' ? __webpack_dev_server_client__ :
// eslint-disable-next-line import/no-unresolved
__webpack_require__(/*! ./clients/SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
var retries = 0;
var client = null;
var socket = function initSocket(url, handlers) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.

    client = null; // After 10 retries stop trying, to prevent logspam.

    if (retries <= 10) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-mixed-operators, no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      setTimeout(function () {
        socket(url, handlers);
      }, retryInMs);
    }
  });
  client.onMessage(function (data) {
    var msg = JSON.parse(data);
    if (handlers[msg.type]) {
      handlers[msg.type](msg.data);
    }
  });
};
module.exports = socket;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/createSocketUrl.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* global self */
var url = __webpack_require__(/*! url */ "./node_modules/url/url.js");
var getCurrentScriptSource = __webpack_require__(/*! ./getCurrentScriptSource */ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");
function createSocketUrl(resourceQuery, currentLocation) {
  var urlParts;
  if (typeof resourceQuery === 'string' && resourceQuery !== '') {
    // If this bundle is inlined, use the resource query to get the correct url.
    // format is like `?http://0.0.0.0:8096&sockPort=8097&sockHost=localhost`
    urlParts = url.parse(resourceQuery // strip leading `?` from query string to get a valid URL
    .substr(1) // replace first `&` with `?` to have a valid query string
    .replace('&', '?'), true);
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptHost = getCurrentScriptSource();
    urlParts = url.parse(scriptHost || '/', true, true);
  } // Use parameter to allow passing location in unit tests

  if (typeof currentLocation === 'string' && currentLocation !== '') {
    currentLocation = url.parse(currentLocation);
  } else {
    currentLocation = self.location;
  }
  return getSocketUrl(urlParts, currentLocation);
}
/*
 * Gets socket URL based on Script Source/Location
 * (scriptSrc: URL, location: URL) -> URL
 */

function getSocketUrl(urlParts, loc) {
  var auth = urlParts.auth,
    query = urlParts.query;
  var hostname = urlParts.hostname,
    protocol = urlParts.protocol,
    port = urlParts.port;
  if (!port || port === '0') {
    port = loc.port;
  } // check ipv4 and ipv6 `all hostname`
  // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384

  if ((hostname === '0.0.0.0' || hostname === '::') && loc.hostname && loc.protocol.indexOf('http') === 0) {
    hostname = loc.hostname;
  } // `hostname` can be empty when the script path is relative. In that case, specifying
  // a protocol would result in an invalid URL.
  // When https is used in the app, secure websockets are always necessary
  // because the browser doesn't accept non-secure websockets.

  if (hostname && hostname !== '127.0.0.1' && (loc.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {
    protocol = loc.protocol;
  } // all of these sock url params are optionally passed in through
  // resourceQuery, so we need to fall back to the default if
  // they are not provided

  var sockHost = query.sockHost || hostname;
  var sockPath = query.sockPath || '/sockjs-node';
  var sockPort = query.sockPort || port;
  if (sockPort === 'location') {
    sockPort = loc.port;
  }
  return url.format({
    protocol: protocol,
    auth: auth,
    hostname: sockHost,
    port: sockPort,
    // If sockPath is provided it'll be passed in via the resourceQuery as a
    // query param so it has to be parsed out of the querystring in order for the
    // client to open the socket to the correct location.
    pathname: sockPath
  });
}
module.exports = createSocketUrl;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!********************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";


function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute('src');
  } // Fall back to getting all scripts in the document.

  var scriptElements = document.scripts || [];
  var currentScript = scriptElements[scriptElements.length - 1];
  if (currentScript) {
    return currentScript.getAttribute('src');
  } // Fail as there was no script to use.

  throw new Error('[WDS] Failed to get current script source.');
}
module.exports = getCurrentScriptSource;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/log.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var log = (__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js").getLogger)('webpack-dev-server');
var INFO = 'info';
var WARN = 'warn';
var ERROR = 'error';
var DEBUG = 'debug';
var TRACE = 'trace';
var SILENT = 'silent'; // deprecated
// TODO: remove these at major released
// https://github.com/webpack/webpack-dev-server/pull/1825

var WARNING = 'warning';
var NONE = 'none'; // Set the default log level

log.setDefaultLevel(INFO);
function setLogLevel(level) {
  switch (level) {
    case INFO:
    case WARN:
    case ERROR:
    case DEBUG:
    case TRACE:
      log.setLevel(level);
      break;
    // deprecated

    case WARNING:
      // loglevel's warning name is different from webpack's
      log.setLevel('warn');
      break;
    // deprecated

    case NONE:
    case SILENT:
      log.disableAll();
      break;
    default:
      log.error("[WDS] Unknown clientLogLevel '".concat(level, "'"));
  }
}
module.exports = {
  log: log,
  setLogLevel: setLogLevel
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/reloadApp.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* global WorkerGlobalScope self */
var _require = __webpack_require__(/*! ./log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
  log = _require.log;
function reloadApp(_ref, _ref2) {
  var hotReload = _ref.hotReload,
    hot = _ref.hot,
    liveReload = _ref.liveReload;
  var isUnloading = _ref2.isUnloading,
    currentHash = _ref2.currentHash;
  if (isUnloading || !hotReload) {
    return;
  }
  if (hot) {
    log.info('[WDS] App hot update...');
    var hotEmitter = __webpack_require__(/*! webpack/hot/emitter */ "./node_modules/webpack/hot/emitter.js");
    hotEmitter.emit('webpackHotUpdate', currentHash);
    if (typeof self !== 'undefined' && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(currentHash), '*');
    }
  } // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload) {
    var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)

    var intervalId = self.setInterval(function () {
      if (rootWindow.location.protocol !== 'about:') {
        // reload immediately if protocol is valid
        applyReload(rootWindow, intervalId);
      } else {
        rootWindow = rootWindow.parent;
        if (rootWindow.parent === rootWindow) {
          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
          applyReload(rootWindow, intervalId);
        }
      }
    });
  }
  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    log.info('[WDS] App updated. Reloading...');
    rootWindow.location.reload();
  }
}
module.exports = reloadApp;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/sendMessage.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* global __resourceQuery WorkerGlobalScope self */
// Send messages to the outside, so plugins can consume it.
function sendMsg(type, data) {
  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, '*');
  }
}
module.exports = sendMsg;

/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function () {
  return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ansiRegex = __webpack_require__(/*! ansi-regex */ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js")();
module.exports = function (str) {
  return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};

/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/*!*********************************************!*\
  !*** ./node_modules/webpack/hot/emitter.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");
module.exports = new EventEmitter();

/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!*****************************************!*\
  !*** ./node_modules/webpack/hot/log.js ***!
  \*****************************************/
/***/ ((module) => {

/** @typedef {"info" | "warning" | "error"} LogLevel */

/** @type {LogLevel} */
var logLevel = "info";
function dummy() {}

/**
 * @param {LogLevel} level log level
 * @returns {boolean} true, if should log
 */
function shouldLog(level) {
  var shouldLog = logLevel === "info" && level === "info" || ["info", "warning"].indexOf(logLevel) >= 0 && level === "warning" || ["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error";
  return shouldLog;
}

/**
 * @param {(msg?: string) => void} logFn log function
 * @returns {(level: LogLevel, msg?: string) => void} function that logs when log level is sufficient
 */
function logGroup(logFn) {
  return function (level, msg) {
    if (shouldLog(level)) {
      logFn(msg);
    }
  };
}

/**
 * @param {LogLevel} level log level
 * @param {string|Error} msg message
 */
module.exports = function (level, msg) {
  if (shouldLog(level)) {
    if (level === "info") {
      console.log(msg);
    } else if (level === "warning") {
      console.warn(msg);
    } else if (level === "error") {
      console.error(msg);
    }
  }
};
var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
module.exports.group = logGroup(group);
module.exports.groupCollapsed = logGroup(groupCollapsed);
module.exports.groupEnd = logGroup(groupEnd);

/**
 * @param {LogLevel} level log level
 */
module.exports.setLogLevel = function (level) {
  logLevel = level;
};

/**
 * @param {Error} err error
 * @returns {string} formatted error
 */
module.exports.formatError = function (err) {
  var message = err.message;
  var stack = err.stack;
  if (!stack) {
    return message;
  } else if (stack.indexOf(message) < 0) {
    return message + "\n" + stack;
  } else {
    return stack;
  }
};

/***/ }),

/***/ "./node_modules/webpack/hot sync ^\\.\\/log$":
/*!***************************************************************!*\
  !*** ./node_modules/webpack/hot/ sync nonrecursive ^\.\/log$ ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./log": "./node_modules/webpack/hot/log.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/webpack/hot sync ^\\.\\/log$";

/***/ }),

/***/ "?4f7e":
/*!********************************!*\
  !*** ./util.inspect (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./app/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var utils_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utils/polyfill */ "./app/utils/polyfill.js");
/* harmony import */ var utils_scroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/scroll */ "./app/utils/scroll.js");
/* harmony import */ var utils_scroll__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(utils_scroll__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var utils_sw__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/sw */ "./app/utils/sw.js");
/* harmony import */ var utils_sw__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(utils_sw__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var auto_bind__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! auto-bind */ "./node_modules/auto-bind/index.js");
/* harmony import */ var auto_bind__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(auto_bind__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var fontfaceobserver_fontfaceobserver_standalone__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fontfaceobserver/fontfaceobserver.standalone */ "./node_modules/fontfaceobserver/fontfaceobserver.standalone.js");
/* harmony import */ var fontfaceobserver_fontfaceobserver_standalone__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fontfaceobserver_fontfaceobserver_standalone__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var stats_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! stats.js */ "./node_modules/stats.js/build/stats.min.js");
/* harmony import */ var stats_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(stats_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/each */ "./node_modules/lodash/each.js");
/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_each__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var classes_Detection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! classes/Detection */ "./app/classes/Detection.js");
/* harmony import */ var pages_Darkroom__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! pages/Darkroom */ "./app/pages/Darkroom/index.js");
/* harmony import */ var pages_About__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! pages/About */ "./app/pages/About/index.js");
/* harmony import */ var pages_Blogs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! pages/Blogs */ "./app/pages/Blogs/index.js");
/* harmony import */ var pages_Projects__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! pages/Projects */ "./app/pages/Projects/index.js");
/* harmony import */ var pages_Home__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! pages/Home */ "./app/pages/Home/index.js");













class App {
  constructor() {
    if ( true && window.location.search.indexOf('fps') > -1) {
      this.createStats();
    }
    auto_bind__WEBPACK_IMPORTED_MODULE_3___default()(this);
    this.content = document.querySelector('.content');
    this.template = this.content.dataset.template;
    this.pages = new Map();
    this.pages.set('darkroom', new pages_Darkroom__WEBPACK_IMPORTED_MODULE_8__["default"]());
    this.pages.set('about', new pages_About__WEBPACK_IMPORTED_MODULE_9__["default"]());
    this.pages.set('blogs', new pages_Blogs__WEBPACK_IMPORTED_MODULE_10__["default"]());
    this.pages.set('projects', new pages_Projects__WEBPACK_IMPORTED_MODULE_11__["default"]());
    this.pages.set('home', new pages_Home__WEBPACK_IMPORTED_MODULE_12__["default"]());
    this.page = this.pages.get(this.template);
    this.page.create();
    this.page.show();
    this.addEventListeners();
    this.addLinksEventsListeners();
  }
  createAnalytics() {
    const googleAnalytics = document.createElement('script');
    googleAnalytics.onload = _ => {
      function gtag() {
        // eslint-disable-next-line no-undef
        dataLayer.push(arguments);
      }
      window.dataLayer = window.dataLayer || [];
      gtag('js', new Date());
      gtag('config', 'GOOGLE_ANALYTICS');
    };
    googleAnalytics.src = 'https://www.googletagmanager.com/gtag/js?id=GOOGLE_ANALYTICS';
    document.body.appendChild(googleAnalytics);
  }
  createStats() {
    this.stats = new (stats_js__WEBPACK_IMPORTED_MODULE_5___default())();
    document.body.appendChild(this.stats.dom);
  }

  /**
   * Methods.
   */
  async onChange({
    push = true,
    url = null
  }) {
    if (this.isLoading || this.url === url) {
      return;
    }
    document.body.style.pointerEvents = 'none';
    this.url = url;
    this.isLoading = true;
    const request = await window.fetch(url, {
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    const response = await request.text();
    this.onRequest({
      push,
      response,
      url
    });
  }
  async onRequest({
    push,
    response,
    url
  }) {
    const html = document.createElement('div');
    html.innerHTML = response;
    const content = html.querySelector('.content');
    if (this.page) {
      await Promise.all([this.page.hide(content.dataset.template)]);
    }
    document.title = html.querySelector('title').textContent;
    if (push) {
      window.history.pushState({}, document.title, url);
    }
    this.content.innerHTML = content.innerHTML;
    this.content.dataset.template = content.dataset.template;
    this.template = content.dataset.template;
    this.page = this.pages.get(this.template);
    this.page.create();
    this.addLinksEventsListeners();
    await this.page.show();
    document.body.style.pointerEvents = '';
    this.isLoading = false;
  }

  /**
   * Loop.
   */
  update() {
    if (this.stats) {
      this.stats.begin();
    }
    if (this.page) {
      this.page.update();
    }
    if (this.stats) {
      this.stats.end();
    }
    window.requestAnimationFrame(this.update);
  }

  /**
   * Events.
   */
  onContextMenu(event) {
    event.preventDefault();
    event.stopPropagation();
    return false;
  }
  onPopState() {
    this.onChange({
      url: window.location.pathname,
      push: false
    });
  }
  onResize() {
    window.requestAnimationFrame(_ => {
      if (this.page) {
        this.page.onResize();
      }
    });
  }
  onKeyDown(event) {
    if (event.key === 'Tab') {
      event.preventDefault();
    }
    if (event.key === 'ArrowDown') {
      this.page.scroll.target += 100;
    } else if (event.key === 'ArrowUp') {
      this.page.scroll.target -= 100;
    }
  }
  onFocusIn(event) {
    event.preventDefault();
  }
  onTouchDown(event) {
    event.stopPropagation();
    if (!classes_Detection__WEBPACK_IMPORTED_MODULE_7__["default"].isMobile() && event.target.tagName === 'A') return;
    if (this.page && this.page.onTouchDown) {
      this.page.onTouchDown(event);
    }
  }
  onTouchMove(event) {
    event.stopPropagation();
    if (this.page && this.page.onTouchDown) {
      this.page.onTouchMove(event);
    }
  }
  onTouchUp(event) {
    event.stopPropagation();
    if (this.page && this.page.onTouchDown) {
      this.page.onTouchUp(event);
    }
  }
  onWheel(event) {
    if (this.page && this.page.onWheel) {
      this.page.onWheel(event);
    }
  }

  /**
   * Listeners.
   */
  addEventListeners() {
    window.addEventListener('popstate', this.onPopState, {
      passive: true
    });
    window.addEventListener('resize', this.onResize, {
      passive: true
    });
    window.addEventListener('mousedown', this.onTouchDown, {
      passive: true
    });
    window.addEventListener('mousemove', this.onTouchMove, {
      passive: true
    });
    window.addEventListener('mouseup', this.onTouchUp, {
      passive: true
    });
    window.addEventListener('touchstart', this.onTouchDown, {
      passive: true
    });
    window.addEventListener('touchmove', this.onTouchMove, {
      passive: true
    });
    window.addEventListener('touchend', this.onTouchUp, {
      passive: true
    });
    window.addEventListener('mousewheel', this.onWheel, {
      passive: true
    });
    window.addEventListener('wheel', this.onWheel, {
      passive: true
    });
    window.addEventListener('keydown', this.onKeyDown);
    window.addEventListener('focusin', this.onFocusIn);
    if (classes_Detection__WEBPACK_IMPORTED_MODULE_7__["default"].isMobile()) {
      window.oncontextmenu = this.onContextMenu;
    }
  }
  addLinksEventsListeners() {
    const links = document.querySelectorAll('a');
    lodash_each__WEBPACK_IMPORTED_MODULE_6___default()(links, link => {
      const isLocal = link.href.indexOf(window.location.origin) > -1;
      const isAnchor = link.href.indexOf('#') > -1;
      if (isLocal) {
        link.onclick = event => {
          event.preventDefault();
          if (!isAnchor) {
            this.onChange({
              url: link.href
            });
          }
        };
      } else if (link.href.indexOf('mailto') === -1 && link.href.indexOf('tel') === -1) {
        link.rel = 'noopener';
        link.target = '_blank';
      }
    });
  }
}
const fontPolysansneutral = new (fontfaceobserver_fontfaceobserver_standalone__WEBPACK_IMPORTED_MODULE_4___default())('Polysans Neutral');
Promise.all([fontPolysansneutral.load()]).then(_ => {
  window.APP = new App();
}).catch(_ => {
  window.APP = new App();
});
console.log('%c Developed by Christy - https://christyshafack.com/', 'color: #000;');
})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var __webpack_exports__ = {};
/*!***************************!*\
  !*** ./styles/index.scss ***!
  \***************************/
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin

})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*******************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/index.js?http://localhost:8080 ***!
  \*******************************************************************************/
var __resourceQuery = "?http://localhost:8080";


/* global __resourceQuery WorkerGlobalScope self */

/* eslint prefer-destructuring: off */
var stripAnsi = __webpack_require__(/*! strip-ansi */ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js");
var socket = __webpack_require__(/*! ./socket */ "./node_modules/webpack-dev-server/client/socket.js");
var overlay = __webpack_require__(/*! ./overlay */ "./node_modules/webpack-dev-server/client/overlay.js");
var _require = __webpack_require__(/*! ./utils/log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
  log = _require.log,
  setLogLevel = _require.setLogLevel;
var sendMessage = __webpack_require__(/*! ./utils/sendMessage */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");
var reloadApp = __webpack_require__(/*! ./utils/reloadApp */ "./node_modules/webpack-dev-server/client/utils/reloadApp.js");
var createSocketUrl = __webpack_require__(/*! ./utils/createSocketUrl */ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js");
var status = {
  isUnloading: false,
  currentHash: ''
};
var options = {
  hot: false,
  hotReload: true,
  liveReload: false,
  initial: true,
  useWarningOverlay: false,
  useErrorOverlay: false,
  useProgress: false
};
var socketUrl = createSocketUrl(__resourceQuery);
self.addEventListener('beforeunload', function () {
  status.isUnloading = true;
});
if (typeof window !== 'undefined') {
  var qs = window.location.search.toLowerCase();
  options.hotReload = qs.indexOf('hotreload=false') === -1;
}
var onSocketMessage = {
  hot: function hot() {
    options.hot = true;
    log.info('[WDS] Hot Module Replacement enabled.');
  },
  liveReload: function liveReload() {
    options.liveReload = true;
    log.info('[WDS] Live Reloading enabled.');
  },
  invalid: function invalid() {
    log.info('[WDS] App updated. Recompiling...'); // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }
    sendMessage('Invalid');
  },
  hash: function hash(_hash) {
    status.currentHash = _hash;
  },
  'still-ok': function stillOk() {
    log.info('[WDS] Nothing changed.');
    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }
    sendMessage('StillOk');
  },
  'log-level': function logLevel(level) {
    var hotCtx = __webpack_require__("./node_modules/webpack/hot sync ^\\.\\/log$");
    if (hotCtx.keys().indexOf('./log') !== -1) {
      hotCtx('./log').setLogLevel(level);
    }
    setLogLevel(level);
  },
  overlay: function overlay(value) {
    if (typeof document !== 'undefined') {
      if (typeof value === 'boolean') {
        options.useWarningOverlay = false;
        options.useErrorOverlay = value;
      } else if (value) {
        options.useWarningOverlay = value.warnings;
        options.useErrorOverlay = value.errors;
      }
    }
  },
  progress: function progress(_progress) {
    if (typeof document !== 'undefined') {
      options.useProgress = _progress;
    }
  },
  'progress-update': function progressUpdate(data) {
    if (options.useProgress) {
      log.info("[WDS] ".concat(data.percent, "% - ").concat(data.msg, "."));
    }
    sendMessage('Progress', data);
  },
  ok: function ok() {
    sendMessage('Ok');
    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }
    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign

    reloadApp(options, status);
  },
  'content-changed': function contentChanged() {
    log.info('[WDS] Content base changed. Reloading...');
    self.location.reload();
  },
  warnings: function warnings(_warnings) {
    log.warn('[WDS] Warnings while compiling.');
    var strippedWarnings = _warnings.map(function (warning) {
      return stripAnsi(warning);
    });
    sendMessage('Warnings', strippedWarnings);
    for (var i = 0; i < strippedWarnings.length; i++) {
      log.warn(strippedWarnings[i]);
    }
    if (options.useWarningOverlay) {
      overlay.showMessage(_warnings);
    }
    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign

    reloadApp(options, status);
  },
  errors: function errors(_errors) {
    log.error('[WDS] Errors while compiling. Reload prevented.');
    var strippedErrors = _errors.map(function (error) {
      return stripAnsi(error);
    });
    sendMessage('Errors', strippedErrors);
    for (var i = 0; i < strippedErrors.length; i++) {
      log.error(strippedErrors[i]);
    }
    if (options.useErrorOverlay) {
      overlay.showMessage(_errors);
    }
    options.initial = false;
  },
  error: function error(_error) {
    log.error(_error);
  },
  close: function close() {
    log.error('[WDS] Disconnected!');
    sendMessage('Close');
  }
};
socket(socketUrl, onSocketMessage);
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDO0FBQ3JwRSxJQUFJQyxVQUFVLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFF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Q0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsaUNBQWlDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLHdCQUF3QixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFzQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFzQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLHVCQUF1QixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFzQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFzQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFzQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLHlCQUF5QixFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLHVCQUF1QixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLHVCQUF1QixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxD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LCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vYXBwL2NsYXNzZXMvQW5pbWF0aW9uLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL2FwcC9jbGFzc2VzL0RldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9hcHAvY29tcG9uZW50cy9QYWdlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL2FwcC9wYWdlcy9BYm91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9hcHAvcGFnZXMvQmxvZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vYXBwL3BhZ2VzL0Rhcmtyb29tL2luZGV4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL2FwcC9wYWdlcy9Ib21lL2luZGV4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL2FwcC9wYWdlcy9Qcm9qZWN0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9hcHAvdXRpbHMvZG9tLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL2FwcC91dGlscy9tYXRoLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL2FwcC91dGlscy9zY3JvbGwuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vYXBwL3V0aWxzL3N3LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL2FwcC91dGlscy90ZXh0LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9hbnNpLWh0bWwtY29tbXVuaXR5L2luZGV4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9hdXRvLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC9jYWxsQm91bmQuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvZGVmaW5lLWRhdGEtcHJvcGVydHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2VzLWRlZmluZS1wcm9wZXJ0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL2V2YWwuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2VzLWVycm9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL3JhbmdlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvcmVmLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvc3ludGF4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvdHlwZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL3VyaS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvZm9udGZhY2VvYnNlcnZlci9mb250ZmFjZW9ic2VydmVyLnN0YW5kYWxvbmUuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2dldC1pbnRyaW5zaWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2dvcGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2dzYXAvQ1NTUGx1Z2luLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9nc2FwL2dzYXAtY29yZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvZ3NhcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzL2luZGV4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9oYXMtcHJvdG8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL2luZGV4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9zaGFtcy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvaGFzb3duL2luZGV4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9odG1sNC1lbnRpdGllcy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvaHRtbDUtZW50aXRpZXMuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL2luZGV4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9zdXJyb2dhdGUtcGFpcnMuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL3htbC1lbnRpdGllcy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXQuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fV2Vha01hcC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUVhY2guanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlTb21lLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRWFjaC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRm9yLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VIYXNJbi5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWxEZWVwLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc01hdGNoLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJdGVyYXRlZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWFwLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eURlZXAuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRpbWVzLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdEZ1bmN0aW9uLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RQYXRoLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUZvci5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEJ5VGFnLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXRjaERhdGEuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TmF0aXZlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFRhZy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRWYWx1ZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNQYXRoLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSW5kZXguanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXkuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXlhYmxlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlR2V0LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBUb0FycmF5LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21lbW9pemVDYXBwZWQuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXMuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlQWRkLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlSGFzLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0RlbGV0ZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0dldC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0hhcy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja1NldC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpbmdUb1BhdGguanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lYWNoLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9mb3JFYWNoLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZ2V0LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaGFzSW4uanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5cy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL21hcC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJBcnJheS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJGYWxzZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9sb2dsZXZlbC9saWIvbG9nbGV2ZWwuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL25vZGVsaXN0LWZvcmVhY2gtcG9seWZpbGwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9Vc2VyQWdlbnRfREVQUkVDQVRFRC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9pc0V2ZW50U3VwcG9ydGVkLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL25vcm1hbGl6ZVdoZWVsLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9vYmplY3QtaW5zcGVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvcHJlZml4L2luZGV4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9zZXQtZnVuY3Rpb24tbGVuZ3RoL2luZGV4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9zaWRlLWNoYW5uZWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi9lbnRyeS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbGliL2V2ZW50L2Nsb3NlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvZXZlbnQvZW1pdHRlci5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbGliL2V2ZW50L2V2ZW50LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvZXZlbnQvZXZlbnR0YXJnZXQuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi9ldmVudC90cmFucy1tZXNzYWdlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvZmFjYWRlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvaWZyYW1lLWJvb3RzdHJhcC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbGliL2luZm8tYWpheC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbGliL2luZm8taWZyYW1lLXJlY2VpdmVyLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvaW5mby1pZnJhbWUuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi9pbmZvLXJlY2VpdmVyLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvbG9jYXRpb24uanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi9tYWluLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvc2hpbXMuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi90cmFuc3BvcnQtbGlzdC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbGliL3RyYW5zcG9ydC9icm93c2VyL2Fic3RyYWN0LXhoci5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbGliL3RyYW5zcG9ydC9icm93c2VyL2V2ZW50c291cmNlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdHJhbnNwb3J0L2Jyb3dzZXIvd2Vic29ja2V0LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdHJhbnNwb3J0L2V2ZW50c291cmNlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdHJhbnNwb3J0L2h0bWxmaWxlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdHJhbnNwb3J0L2lmcmFtZS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbGliL3RyYW5zcG9ydC9qc29ucC1wb2xsaW5nLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdHJhbnNwb3J0L2xpYi9hamF4LWJhc2VkLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdHJhbnNwb3J0L2xpYi9idWZmZXJlZC1zZW5kZXIuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdHJhbnNwb3J0L2xpYi9wb2xsaW5nLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdHJhbnNwb3J0L2xpYi9zZW5kZXItcmVjZWl2ZXIuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi90cmFuc3BvcnQvcmVjZWl2ZXIvZXZlbnRzb3VyY2UuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi90cmFuc3BvcnQvcmVjZWl2ZXIvaHRtbGZpbGUuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi90cmFuc3BvcnQvcmVjZWl2ZXIvanNvbnAuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi90cmFuc3BvcnQvcmVjZWl2ZXIveGhyLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdHJhbnNwb3J0L3NlbmRlci9qc29ucC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbGliL3RyYW5zcG9ydC9zZW5kZXIveGRyLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdHJhbnNwb3J0L3NlbmRlci94aHItY29ycy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbGliL3RyYW5zcG9ydC9zZW5kZXIveGhyLWZha2UuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi90cmFuc3BvcnQvc2VuZGVyL3hoci1sb2NhbC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbGliL3RyYW5zcG9ydC93ZWJzb2NrZXQuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi90cmFuc3BvcnQveGRyLXBvbGxpbmcuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi90cmFuc3BvcnQveGRyLXN0cmVhbWluZy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbGliL3RyYW5zcG9ydC94aHItcG9sbGluZy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbGliL3RyYW5zcG9ydC94aHItc3RyZWFtaW5nLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdXRpbHMvYnJvd3Nlci1jcnlwdG8uanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi91dGlscy9icm93c2VyLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdXRpbHMvZXNjYXBlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9saWIvdXRpbHMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi91dGlscy9pZnJhbWUuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi91dGlscy9sb2cuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi91dGlscy9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi91dGlscy9yYW5kb20uanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi91dGlscy90cmFuc3BvcnQuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi91dGlscy91cmwuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL2xpYi92ZXJzaW9uLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9ub2RlX21vZHVsZXMvZGVidWcvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvY29tbW9uLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5naWZ5L2luZGV4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby9ub2RlX21vZHVsZXMvcmVxdWlyZXMtcG9ydC9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vbm9kZV9tb2R1bGVzL3VybC1wYXJzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvc3RhdHMuanMvYnVpbGQvc3RhdHMubWluLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy91cmwvbm9kZV9tb2R1bGVzL3B1bnljb2RlL3B1bnljb2RlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy91cmwvbm9kZV9tb2R1bGVzL3FzL2xpYi9mb3JtYXRzLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy91cmwvbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvdXJsL25vZGVfbW9kdWxlcy9xcy9saWIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3VybC9ub2RlX21vZHVsZXMvcXMvbGliL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvdXJsL25vZGVfbW9kdWxlcy9xcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3VybC91cmwuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9CYXNlQ2xpZW50LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2NsaWVudHMvU29ja0pTQ2xpZW50LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvc29ja2V0LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2NyZWF0ZVNvY2tldFVybC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9nZXRDdXJyZW50U2NyaXB0U291cmNlLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2xvZy5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9yZWxvYWRBcHAuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc2VuZE1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL2luZGV4LmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9lbWl0dGVyLmpzIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2cuanMiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90LyBzeW5jIG5vbnJlY3Vyc2l2ZSBeXFwuXFwvbG9nJCIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vaWdub3JlZHxDOlxcVXNlcnNcXGNocmlzXFxEZXNrdG9wXFxOZXcgZm9sZGVyXFxNQS1Qb3J0Zm9saW9cXG5vZGVfbW9kdWxlc1xcb2JqZWN0LWluc3BlY3R8Li91dGlsLmluc3BlY3QiLCJ3ZWJwYWNrOi8vbWEtcG9ydGZvbGlvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21hLXBvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL21hLXBvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL21hLXBvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL21hLXBvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL21hLXBvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL21hLXBvcnRmb2xpby8uL2FwcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9zdHlsZXMvaW5kZXguc2NzcyIsIndlYnBhY2s6Ly9tYS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gvZWFjaCdcblxuaW1wb3J0IEFuaW1hdGlvbiBmcm9tICdjbGFzc2VzL0FuaW1hdGlvbidcblxuaW1wb3J0IHsgY2FsY3VsYXRlLCBzcGxpdCB9IGZyb20gJ3V0aWxzL3RleHQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQW5pbWF0aW9uIHtcbiAgY29uc3RydWN0b3IgKHsgZWxlbWVudCB9KSB7XG4gICAgY29uc3QgbGluZXMgPSBbXVxuICAgIGNvbnN0IHBhcmFncmFwaHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2gxLCBoMiwgcCcpXG5cbiAgICBpZiAocGFyYWdyYXBocy5sZW5ndGggIT09IDApIHtcbiAgICAgIGVhY2gocGFyYWdyYXBocywgZWxlbWVudCA9PiB7XG4gICAgICAgIHNwbGl0KHsgZWxlbWVudCB9KVxuICAgICAgICBzcGxpdCh7IGVsZW1lbnQgfSlcblxuICAgICAgICBsaW5lcy5wdXNoKC4uLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3BhbiBzcGFuJykpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBzcGxpdCh7IGVsZW1lbnQgfSlcbiAgICAgIHNwbGl0KHsgZWxlbWVudCB9KVxuXG4gICAgICBsaW5lcy5wdXNoKC4uLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3BhbiBzcGFuJykpXG4gICAgfVxuXG4gICAgc3VwZXIoe1xuICAgICAgZWxlbWVudCxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIGxpbmVzXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMub25SZXNpemUoKVxuXG4gICAgaWYgKCdJbnRlcnNlY3Rpb25PYnNlcnZlcicgaW4gd2luZG93KSB7XG4gICAgICB0aGlzLmFuaW1hdGVPdXQoKVxuICAgIH1cbiAgfVxuXG4gIGFuaW1hdGVJbiAoKSB7XG4gICAgc3VwZXIuYW5pbWF0ZUluKClcblxuICAgIGVhY2godGhpcy5saW5lcywgKGxpbmUsIGxpbmVJbmRleCkgPT4ge1xuICAgICAgZWFjaChsaW5lLCB3b3JkID0+IHtcbiAgICAgICAgd29yZC5zdHlsZS50cmFuc2l0aW9uID0gYHRyYW5zZm9ybSAxLjVzICR7MC41ICsgbGluZUluZGV4ICogMC4xfXMgZWFzZWBcbiAgICAgICAgd29yZC5zdHlsZVt0aGlzLnRyYW5zZm9ybVByZWZpeF0gPSAndHJhbnNsYXRlWSgwKSdcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGFuaW1hdGVPdXQgKCkge1xuICAgIHN1cGVyLmFuaW1hdGVPdXQoKVxuXG4gICAgZWFjaCh0aGlzLmxpbmVzLCBsaW5lID0+IHtcbiAgICAgIGVhY2gobGluZSwgd29yZCA9PiB7XG4gICAgICAgIHdvcmQuc3R5bGVbdGhpcy50cmFuc2Zvcm1QcmVmaXhdID0gJ3RyYW5zbGF0ZVkoMTAwJSknXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBvblJlc2l6ZSAoKSB7XG4gICAgdGhpcy5saW5lcyA9IGNhbGN1bGF0ZSh0aGlzLmVsZW1lbnRzLmxpbmVzKVxuICB9XG59XG4iLCJpbXBvcnQgUHJlZml4IGZyb20gJ3ByZWZpeCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICBjb25zdHJ1Y3RvciAoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XG4gICAgY29uc3QgeyBhbmltYXRpb25EZWxheSwgYW5pbWF0aW9uVGFyZ2V0IH0gPSBlbGVtZW50LmRhdGFzZXRcblxuICAgIHRoaXMuZGVsYXkgPSBhbmltYXRpb25EZWxheVxuXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50c1xuXG4gICAgdGhpcy50YXJnZXQgPSBhbmltYXRpb25UYXJnZXQgPyBlbGVtZW50LmNsb3Nlc3QoYW5pbWF0aW9uVGFyZ2V0KSA6IGVsZW1lbnRcbiAgICB0aGlzLnRyYW5zZm9ybVByZWZpeCA9IFByZWZpeCgndHJhbnNmb3JtJylcblxuICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2VcblxuICAgIGlmICgnSW50ZXJzZWN0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdykge1xuICAgICAgdGhpcy5jcmVhdGVPYnNlcnZlcigpXG5cbiAgICAgIHRoaXMuYW5pbWF0ZU91dCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYW5pbWF0ZUluKClcbiAgICB9XG4gIH1cblxuICBjcmVhdGVPYnNlcnZlciAoKSB7XG4gICAgdGhpcy5vYnNlcnZlciA9IG5ldyB3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5pc1Zpc2libGUgJiYgZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICB0aGlzLmFuaW1hdGVJbigpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSkub2JzZXJ2ZSh0aGlzLnRhcmdldClcbiAgfVxuXG4gIGFuaW1hdGVJbiAoKSB7XG4gICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlXG4gIH1cblxuICBhbmltYXRlT3V0ICgpIHtcbiAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlXG4gIH1cbn1cbiIsImNsYXNzIERldGVjdGlvbiB7XHJcbiAgaXNNb2JpbGUgKCkge1xyXG4gICAgaWYgKCF0aGlzLmlzTW9iaWxlQ2hlY2tlZCkge1xyXG4gICAgICB0aGlzLmlzTW9iaWxlQ2hlY2tlZCA9IHRydWVcclxuXHJcbiAgICAgIHRoaXMuaXNNb2JpbGVDaGVjayA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ21vYmlsZScpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaXNNb2JpbGVDaGVja1xyXG4gIH1cclxuXHJcbiAgaXNXZWJQU3VwcG9ydGVkICgpIHtcclxuICAgIGlmICghdGhpcy5pc1dlYlBDaGVja2VkKSB7XHJcbiAgICAgIHRoaXMuaXNXZWJQQ2hlY2tlZCA9IHRydWVcclxuXHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxyXG5cclxuICAgICAgaWYgKGVsZW1lbnQuZ2V0Q29udGV4dCAmJiBlbGVtZW50LmdldENvbnRleHQoJzJkJykpIHtcclxuICAgICAgICB0aGlzLmlzV2ViUENoZWNrID0gZWxlbWVudC50b0RhdGFVUkwoJ2ltYWdlL3dlYnAnKS5pbmRleE9mKCdkYXRhOmltYWdlL3dlYnAnKSA9PT0gMFxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaXNXZWJQQ2hlY2tcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IERldGVjdGlvbk1hbmFnZXIgPSBuZXcgRGV0ZWN0aW9uKClcclxuXHJcbmV4cG9ydCBkZWZhdWx0IERldGVjdGlvbk1hbmFnZXJcclxuIiwiaW1wb3J0IEF1dG9CaW5kIGZyb20gJ2F1dG8tYmluZCdcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJ1xuaW1wb3J0IE5vcm1hbGl6ZVdoZWVsIGZyb20gJ25vcm1hbGl6ZS13aGVlbCdcbmltcG9ydCBQcmVmaXggZnJvbSAncHJlZml4J1xuXG5pbXBvcnQgUGFyYWdyYXBoIGZyb20gJ2FuaW1hdGlvbnMvUGFyYWdyYXBoJ1xuXG5pbXBvcnQgRGV0ZWN0aW9uIGZyb20gJ2NsYXNzZXMvRGV0ZWN0aW9uJ1xuXG5pbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gvZWFjaCdcblxuaW1wb3J0IHsgbWFwRWFjaCB9IGZyb20gJ3V0aWxzL2RvbSdcbmltcG9ydCB7IGNsYW1wLCBsZXJwIH0gZnJvbSAndXRpbHMvbWF0aCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvciAoeyBjbGFzc2VzLCBlbGVtZW50LCBlbGVtZW50cywgaXNTY3JvbGxhYmxlID0gdHJ1ZSB9KSB7XG4gICAgc3VwZXIoKVxuXG4gICAgQXV0b0JpbmQodGhpcylcblxuICAgIHRoaXMuY2xhc3NlcyA9IHtcbiAgICAgIC4uLmNsYXNzZXNcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjdG9ycyA9IHtcbiAgICAgIGVsZW1lbnQsXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICBhbmltYXRpb25zUGFyYWdyYXBoczogJ1tkYXRhLWFuaW1hdGlvbj1cInBhcmFncmFwaFwiXScsXG5cbiAgICAgICAgLi4uZWxlbWVudHNcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNjcm9sbCA9IHtcbiAgICAgIGVhc2U6IDAuMDcsXG4gICAgICBwb3NpdGlvbjogMCxcbiAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICB0YXJnZXQ6IDAsXG4gICAgICBsaW1pdDogMFxuICAgIH1cblxuICAgIHRoaXMuaXNTY3JvbGxhYmxlID0gaXNTY3JvbGxhYmxlXG5cbiAgICB0aGlzLnRyYW5zZm9ybVByZWZpeCA9IFByZWZpeCgndHJhbnNmb3JtJylcbiAgfVxuXG4gIGNyZWF0ZSAoKSB7XG4gICAgdGhpcy5hbmltYXRpb25zID0gW11cblxuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZWxlY3RvcnMuZWxlbWVudClcbiAgICB0aGlzLmVsZW1lbnRzID0ge31cblxuICAgIGVhY2godGhpcy5zZWxlY3RvcnMuZWxlbWVudHMsIChzZWxlY3Rvciwga2V5KSA9PiB7XG4gICAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQgfHwgc2VsZWN0b3IgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZUxpc3QpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gc2VsZWN0b3JcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RvcikpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gc2VsZWN0b3JcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKVxuXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gbnVsbFxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudHNba2V5XS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBpZiAodGhpcy5pc1Njcm9sbGFibGUpIHtcbiAgICAgIHRoaXMuc2Nyb2xsID0ge1xuICAgICAgICBlYXNlOiAwLjA3LFxuICAgICAgICBwb3NpdGlvbjogMCxcbiAgICAgICAgY3VycmVudDogMCxcbiAgICAgICAgdGFyZ2V0OiAwLFxuICAgICAgICBsaW1pdDogdGhpcy5lbGVtZW50cy53cmFwcGVyLmNsaWVudEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY3JlYXRlQW5pbWF0aW9ucygpXG4gIH1cblxuICAvKipcbiAgICogQW5pbWF0aW9ucy5cbiAgICovXG4gIGNyZWF0ZUFuaW1hdGlvbnMgKCkge1xuICAgIHRoaXMucGFyYWdyYXBocyA9IG1hcEVhY2godGhpcy5lbGVtZW50cy5hbmltYXRpb25zUGFyYWdyYXBocywgZWxlbWVudCA9PiB7XG4gICAgICByZXR1cm4gbmV3IFBhcmFncmFwaCh7IGVsZW1lbnQgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5hbmltYXRpb25zLnB1c2goLi4udGhpcy5wYXJhZ3JhcGhzKVxuICB9XG5cbiAgLyoqXG4gICAqIEFuaW1hdGlvbnMuXG4gICAqL1xuICByZXNldCAoKSB7XG4gICAgdGhpcy5zY3JvbGwgPSB7XG4gICAgICBlYXNlOiAwLjA3LFxuICAgICAgcG9zaXRpb246IDAsXG4gICAgICBjdXJyZW50OiAwLFxuICAgICAgdGFyZ2V0OiAwLFxuICAgICAgbGltaXQ6IDBcbiAgICB9XG4gIH1cblxuICBzZXQgKHZhbHVlKSB7XG4gICAgdGhpcy5zY3JvbGwuY3VycmVudCA9IHRoaXMuc2Nyb2xsLnRhcmdldCA9IHRoaXMuc2Nyb2xsLmxhc3QgPSB2YWx1ZVxuXG4gICAgdGhpcy50cmFuc2Zvcm0odGhpcy5lbGVtZW50cy53cmFwcGVyLCB0aGlzLnNjcm9sbC5jdXJyZW50KVxuICB9XG5cbiAgc2hvdyAodXJsKSB7XG4gICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlXG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgfVxuXG4gIGhpZGUgKHVybCkge1xuICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2VcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICB9XG5cbiAgdHJhbnNmb3JtIChlbGVtZW50LCB5KSB7XG4gICAgZWxlbWVudC5zdHlsZVt0aGlzLnRyYW5zZm9ybVByZWZpeF0gPSBgdHJhbnNsYXRlM2QoMCwgJHstTWF0aC5yb3VuZCh5KX1weCwgMClgXG4gIH1cblxuICAvKipcbiAgICogRXZlbnRzLlxuICAgKi9cbiAgb25SZXNpemUgKCkge1xuICAgIGlmICghdGhpcy5lbGVtZW50cy53cmFwcGVyKSByZXR1cm5cblxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoXyA9PiB7XG4gICAgICB0aGlzLnNjcm9sbC5saW1pdCA9IHRoaXMuZWxlbWVudHMud3JhcHBlci5jbGllbnRIZWlnaHQgLSB3aW5kb3cuaW5uZXJIZWlnaHRcblxuICAgICAgZWFjaCh0aGlzLmFuaW1hdGlvbnMsIGFuaW1hdGlvbiA9PiB7XG4gICAgICAgIGFuaW1hdGlvbi5vblJlc2l6ZSAmJiBhbmltYXRpb24ub25SZXNpemUoKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgb25Ub3VjaERvd24gKGV2ZW50KSB7XG4gICAgaWYgKCFEZXRlY3Rpb24uaXNNb2JpbGUoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmlzRG93biA9IHRydWVcblxuICAgIHRoaXMuc2Nyb2xsLnBvc2l0aW9uID0gdGhpcy5zY3JvbGwuY3VycmVudFxuICAgIHRoaXMuc3RhcnQgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQuY2xpZW50WVxuICB9XG5cbiAgb25Ub3VjaE1vdmUgKGV2ZW50KSB7XG4gICAgaWYgKCFEZXRlY3Rpb24uaXNNb2JpbGUoKSB8fCAhdGhpcy5pc0Rvd24pIHJldHVyblxuXG4gICAgY29uc3QgeSA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdLmNsaWVudFkgOiBldmVudC5jbGllbnRZXG4gICAgY29uc3QgZGlzdGFuY2UgPSAodGhpcy5zdGFydCAtIHkpICogM1xuXG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ID0gdGhpcy5zY3JvbGwucG9zaXRpb24gKyBkaXN0YW5jZVxuICB9XG5cbiAgb25Ub3VjaFVwIChldmVudCkge1xuICAgIGlmICghRGV0ZWN0aW9uLmlzTW9iaWxlKCkpIHJldHVyblxuXG4gICAgdGhpcy5pc0Rvd24gPSBmYWxzZVxuICB9XG5cbiAgb25XaGVlbCAoZXZlbnQpIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0gTm9ybWFsaXplV2hlZWwoZXZlbnQpXG4gICAgY29uc3Qgc3BlZWQgPSBub3JtYWxpemVkLnBpeGVsWVxuXG4gICAgdGhpcy5zY3JvbGwudGFyZ2V0ICs9IHNwZWVkXG5cbiAgICByZXR1cm4gc3BlZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBGcmFtZXMuXG4gICAqL1xuICB1cGRhdGUgKCkge1xuICAgIHRoaXMuc2Nyb2xsLnRhcmdldCA9IGNsYW1wKDAsIHRoaXMuc2Nyb2xsLmxpbWl0LCB0aGlzLnNjcm9sbC50YXJnZXQpXG5cbiAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gbGVycCh0aGlzLnNjcm9sbC5jdXJyZW50LCB0aGlzLnNjcm9sbC50YXJnZXQsIHRoaXMuc2Nyb2xsLmVhc2UpXG4gICAgdGhpcy5zY3JvbGwuY3VycmVudCA9IE1hdGguZmxvb3IodGhpcy5zY3JvbGwuY3VycmVudClcblxuICAgIGlmICh0aGlzLnNjcm9sbC5jdXJyZW50IDwgMC4xKSB7XG4gICAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gMFxuICAgIH1cblxuICAgIGlmICh0aGlzLmVsZW1lbnRzLndyYXBwZXIpIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtKHRoaXMuZWxlbWVudHMud3JhcHBlciwgdGhpcy5zY3JvbGwuY3VycmVudClcbiAgICB9XG5cbiAgICB0aGlzLnNjcm9sbC5sYXN0ID0gdGhpcy5zY3JvbGwuY3VycmVudFxuICB9XG59XG4iLCJpbXBvcnQgUGFnZSBmcm9tICdjb21wb25lbnRzL1BhZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgUGFnZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcih7XG4gICAgICBjbGFzc2VzOiB7XG4gICAgICAgIGFjdGl2ZTogJ2Fib3V0LS1hY3RpdmUnXG4gICAgICB9LFxuICAgICAgZWxlbWVudDogJy5hYm91dCcsXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICB3cmFwcGVyOiAnLmFib3V0X19jb250ZW50J1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQW5pbWF0aW9ucy5cbiAgICovXG4gIGFzeW5jIHNob3cgKHVybCkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5hY3RpdmUpXG5cbiAgICByZXR1cm4gc3VwZXIuc2hvdyh1cmwpXG4gIH1cblxuICBhc3luYyBoaWRlICh1cmwpIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzZXMuYWN0aXZlKVxuXG4gICAgcmV0dXJuIHN1cGVyLmhpZGUodXJsKVxuICB9XG59XG4iLCJpbXBvcnQgUGFnZSBmcm9tICdjb21wb25lbnRzL1BhZ2UnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIFBhZ2Uge1xyXG4gIGNvbnN0cnVjdG9yICgpIHtcclxuICAgIHN1cGVyKHtcclxuICAgICAgY2xhc3Nlczoge1xyXG4gICAgICAgIGFjdGl2ZTogJ2Jsb2dzLS1hY3RpdmUnXHJcbiAgICAgIH0sXHJcbiAgICAgIGVsZW1lbnQ6ICcuYmxvZ3MnLFxyXG4gICAgICBlbGVtZW50czoge1xyXG4gICAgICAgIHdyYXBwZXI6ICcuYmxvZ3NfX2NvbnRlbnQnXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBbmltYXRpb25zLlxyXG4gICAqL1xyXG4gIGFzeW5jIHNob3cgKHVybCkge1xyXG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLmFjdGl2ZSlcclxuXHJcbiAgICByZXR1cm4gc3VwZXIuc2hvdyh1cmwpXHJcbiAgfVxyXG5cclxuICBhc3luYyBoaWRlICh1cmwpIHtcclxuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5hY3RpdmUpXHJcblxyXG4gICAgcmV0dXJuIHN1cGVyLmhpZGUodXJsKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUGFnZSBmcm9tICdjb21wb25lbnRzL1BhZ2UnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIFBhZ2Uge1xyXG4gIGNvbnN0cnVjdG9yICgpIHtcclxuICAgIHN1cGVyKHtcclxuICAgICAgY2xhc3Nlczoge1xyXG4gICAgICAgIGFjdGl2ZTogJ2Rhcmtyb29tLS1hY3RpdmUnXHJcbiAgICAgIH0sXHJcbiAgICAgIGVsZW1lbnQ6ICcuZGFya3Jvb20nLFxyXG4gICAgICBlbGVtZW50czoge1xyXG4gICAgICAgIHdyYXBwZXI6ICcuZGFya3Jvb21fX2NvbnRlbnQnXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBbmltYXRpb25zLlxyXG4gICAqL1xyXG4gIGFzeW5jIHNob3cgKHVybCkge1xyXG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLmFjdGl2ZSlcclxuXHJcbiAgICByZXR1cm4gc3VwZXIuc2hvdyh1cmwpXHJcbiAgfVxyXG5cclxuICBhc3luYyBoaWRlICh1cmwpIHtcclxuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5hY3RpdmUpXHJcblxyXG4gICAgcmV0dXJuIHN1cGVyLmhpZGUodXJsKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUGFnZSBmcm9tICdjb21wb25lbnRzL1BhZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgUGFnZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcih7XG4gICAgICBjbGFzc2VzOiB7XG4gICAgICAgIGFjdGl2ZTogJ2hvbWUtLWFjdGl2ZSdcbiAgICAgIH0sXG4gICAgICBlbGVtZW50OiAnLmhvbWUnLFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgd3JhcHBlcjogJy5ob21lX19jb250ZW50J1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQW5pbWF0aW9ucy5cbiAgICovXG4gIGFzeW5jIHNob3cgKHVybCkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3Nlcy5hY3RpdmUpXG5cbiAgICByZXR1cm4gc3VwZXIuc2hvdyh1cmwpXG4gIH1cblxuICBhc3luYyBoaWRlICh1cmwpIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzZXMuYWN0aXZlKVxuXG4gICAgcmV0dXJuIHN1cGVyLmhpZGUodXJsKVxuICB9XG59XG4iLCJpbXBvcnQgUGFnZSBmcm9tICdjb21wb25lbnRzL1BhZ2UnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIFBhZ2Uge1xyXG4gIGNvbnN0cnVjdG9yICgpIHtcclxuICAgIHN1cGVyKHtcclxuICAgICAgY2xhc3Nlczoge1xyXG4gICAgICAgIGFjdGl2ZTogJ3Byb2plY3RzLS1hY3RpdmUnXHJcbiAgICAgIH0sXHJcbiAgICAgIGVsZW1lbnQ6ICcucHJvamVjdHMnLFxyXG4gICAgICBlbGVtZW50czoge1xyXG4gICAgICAgIHdyYXBwZXI6ICcucHJvamVjdHNfX2NvbnRlbnQnXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBbmltYXRpb25zLlxyXG4gICAqL1xyXG4gIGFzeW5jIHNob3cgKHVybCkge1xyXG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc2VzLmFjdGl2ZSlcclxuXHJcbiAgICByZXR1cm4gc3VwZXIuc2hvdyh1cmwpXHJcbiAgfVxyXG5cclxuICBhc3luYyBoaWRlICh1cmwpIHtcclxuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3Nlcy5hY3RpdmUpXHJcblxyXG4gICAgcmV0dXJuIHN1cGVyLmhpZGUodXJsKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgbWFwIGZyb20gJ2xvZGFzaC9tYXAnXG5cbmV4cG9ydCBjb25zdCBnZXRPZmZzZXQgPSAoZWxlbWVudCwgdG9wID0gMCkgPT4ge1xuICBjb25zdCBib3ggPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG5cbiAgcmV0dXJuIHtcbiAgICBib3R0b206IGJveC5ib3R0b20sXG4gICAgaGVpZ2h0OiBib3guaGVpZ2h0LFxuICAgIGxlZnQ6IGJveC5sZWZ0LFxuICAgIHRvcDogYm94LnRvcCArIHRvcCxcbiAgICB3aWR0aDogYm94LndpZHRoXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcEVhY2ggKGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gIGlmIChlbGVtZW50IGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50KSB7XG4gICAgcmV0dXJuIFtjYWxsYmFjayhlbGVtZW50KV1cbiAgfVxuXG4gIHJldHVybiBtYXAoZWxlbWVudCwgY2FsbGJhY2spXG59XG5cbiIsImltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXG5cbmV4cG9ydCBmdW5jdGlvbiBsZXJwIChwMSwgcDIsIHQpIHtcbiAgcmV0dXJuIEdTQVAudXRpbHMuaW50ZXJwb2xhdGUocDEsIHAyLCB0KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAgKG1pbiwgbWF4LCBudW1iZXIpIHtcbiAgcmV0dXJuIEdTQVAudXRpbHMuY2xhbXAobWluLCBtYXgsIG51bWJlcilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbSAobWluLCBtYXgpIHtcbiAgcmV0dXJuIEdTQVAudXRpbHMucmFuZG9tKG1pbiwgbWF4KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwICh2YWx1ZVRvTWFwLCBpbk1pbiwgaW5NYXgsIG91dE1pbiwgb3V0TWF4KSB7XG4gIHJldHVybiBHU0FQLnV0aWxzLm1hcFJhbmdlKGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgsIHZhbHVlVG9NYXApXG59XG4iLCJpZiAod2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24pIHtcbiAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSAnbWFudWFsJ1xufVxuIiwiaWYgKCFJU19ERVZFTE9QTUVOVCkge1xyXG4gIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XHJcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcignL3NlcnZpY2Utd29ya2VyLmpzJylcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2gnXG5cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdCAoeyBlbGVtZW50LCBleHByZXNzaW9uID0gJyAnLCBhcHBlbmQgPSB0cnVlIH0pIHtcbiAgY29uc3Qgd29yZHMgPSBzcGxpdFRleHQoZWxlbWVudC5pbm5lckhUTUwudG9TdHJpbmcoKS50cmltKCksIGV4cHJlc3Npb24pXG5cbiAgbGV0IGlubmVySFRNTCA9ICcnXG5cbiAgZWFjaCh3b3JkcywgbGluZSA9PiB7XG4gICAgaWYgKGxpbmUuaW5kZXhPZignPGJyPicpID4gLTEpIHtcbiAgICAgIGNvbnN0IGxpbmVzID0gbGluZS5zcGxpdCgnPGJyPicpXG5cbiAgICAgIGVhY2gobGluZXMsIChsaW5lLCBpbmRleCkgPT4ge1xuICAgICAgICBpbm5lckhUTUwgKz0gKGluZGV4ID4gMCkgPyAnPGJyPicgKyBwYXJzZUxpbmUobGluZSkgOiBwYXJzZUxpbmUobGluZSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGlubmVySFRNTCArPSBwYXJzZUxpbmUobGluZSlcbiAgICB9XG4gIH0pXG5cbiAgZWxlbWVudC5pbm5lckhUTUwgPSBpbm5lckhUTUxcblxuICBjb25zdCBzcGFucyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3BhbicpXG5cbiAgaWYgKGFwcGVuZCkge1xuICAgIGVhY2goc3BhbnMsIHNwYW4gPT4ge1xuICAgICAgY29uc3QgaXNTaW5nbGVMZXR0ZXIgPSBzcGFuLnRleHRDb250ZW50Lmxlbmd0aCA9PT0gMVxuICAgICAgY29uc3QgaXNOb3RFbXB0eSA9IHNwYW4uaW5uZXJIVE1MLnRyaW0oKSAhPT0gJydcbiAgICAgIGNvbnN0IGlzTm90QW5kQ2hhcmFjdGVyID0gc3Bhbi50ZXh0Q29udGVudCAhPT0gJyYnXG4gICAgICBjb25zdCBpc05vdERhc2hDaGFyYWN0ZXIgPSBzcGFuLnRleHRDb250ZW50ICE9PSAnLSdcblxuICAgICAgaWYgKGlzU2luZ2xlTGV0dGVyICYmIGlzTm90RW1wdHkgJiYgaXNOb3RBbmRDaGFyYWN0ZXIgJiYgaXNOb3REYXNoQ2hhcmFjdGVyKSB7XG4gICAgICAgIHNwYW4uaW5uZXJIVE1MID0gYCR7c3Bhbi50ZXh0Q29udGVudH0mbmJzcDtgXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBzcGFuc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlIChzcGFucykge1xuICBjb25zdCBsaW5lcyA9IFtdXG4gIGxldCB3b3JkcyA9IFtdXG5cbiAgbGV0IHBvc2l0aW9uID0gc3BhbnNbMF0ub2Zmc2V0VG9wXG5cbiAgZWFjaChzcGFucywgKHNwYW4sIGluZGV4KSA9PiB7XG4gICAgaWYgKHNwYW4ub2Zmc2V0VG9wID09PSBwb3NpdGlvbikge1xuICAgICAgd29yZHMucHVzaChzcGFuKVxuICAgIH1cblxuICAgIGlmIChzcGFuLm9mZnNldFRvcCAhPT0gcG9zaXRpb24pIHtcbiAgICAgIGxpbmVzLnB1c2god29yZHMpXG5cbiAgICAgIHdvcmRzID0gW11cbiAgICAgIHdvcmRzLnB1c2goc3BhbilcblxuICAgICAgcG9zaXRpb24gPSBzcGFuLm9mZnNldFRvcFxuICAgIH1cblxuICAgIGlmIChpbmRleCArIDEgPT09IHNwYW5zLmxlbmd0aCkge1xuICAgICAgbGluZXMucHVzaCh3b3JkcylcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIGxpbmVzXG59XG5cbmZ1bmN0aW9uIHNwbGl0VGV4dCAodGV4dCwgZXhwcmVzc2lvbikge1xuICBjb25zdCBzcGxpdHMgPSB0ZXh0LnNwbGl0KCc8YnI+JylcblxuICBsZXQgd29yZHMgPSBbXVxuXG4gIGVhY2goc3BsaXRzLCAoaXRlbSwgaW5kZXgpID0+IHtcbiAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICB3b3Jkcy5wdXNoKCc8YnI+JylcbiAgICB9XG5cbiAgICB3b3JkcyA9IHdvcmRzLmNvbmNhdChpdGVtLnNwbGl0KGV4cHJlc3Npb24pKVxuXG4gICAgbGV0IGlzTGluayA9IGZhbHNlXG4gICAgbGV0IGxpbmsgPSAnJ1xuXG4gICAgY29uc3QgaW5uZXJIVE1MID0gW11cblxuICAgIGVhY2god29yZHMsIHdvcmQgPT4ge1xuICAgICAgaWYgKCFpc0xpbmsgJiYgKHdvcmQuaW5jbHVkZXMoJzxhJykgfHwgd29yZC5pbmNsdWRlcygnPHN0cm9uZycpKSkge1xuICAgICAgICBsaW5rID0gJydcblxuICAgICAgICBpc0xpbmsgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xpbmspIHtcbiAgICAgICAgbGluayArPSBgICR7d29yZH1gXG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xpbmsgJiYgKHdvcmQuaW5jbHVkZXMoJy9hPicpIHx8IHdvcmQuaW5jbHVkZXMoJy9zdHJvbmc+JykpKSB7XG4gICAgICAgIGlubmVySFRNTC5wdXNoKGxpbmspXG5cbiAgICAgICAgbGluayA9ICcnXG4gICAgICB9XG5cbiAgICAgIGlmICghaXNMaW5rICYmIGxpbmsgPT09ICcnKSB7XG4gICAgICAgIGlubmVySFRNTC5wdXNoKHdvcmQpXG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xpbmsgJiYgKHdvcmQuaW5jbHVkZXMoJy9hPicpIHx8IHdvcmQuaW5jbHVkZXMoJy9zdHJvbmc+JykpKSB7XG4gICAgICAgIGlzTGluayA9IGZhbHNlXG4gICAgICB9XG4gICAgfSlcblxuICAgIHdvcmRzID0gaW5uZXJIVE1MXG4gIH0pXG5cbiAgcmV0dXJuIHdvcmRzXG59XG5cbmZ1bmN0aW9uIHBhcnNlTGluZSAobGluZSkge1xuICBsaW5lID0gbGluZS50cmltKClcblxuICBpZiAobGluZSA9PT0gJycgfHwgbGluZSA9PT0gJyAnKSB7XG4gICAgcmV0dXJuIGxpbmVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGxpbmUgPT09ICc8YnI+JykgPyAnPGJyPicgOiBgPHNwYW4+JHtsaW5lfTwvc3Bhbj5gICsgKChsaW5lLmxlbmd0aCA+IDEpID8gJyAnIDogJycpXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFuc2lIVE1MXG5cbi8vIFJlZmVyZW5jZSB0byBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2Fuc2ktcmVnZXhcbnZhciBfcmVnQU5TSSA9IC8oPzooPzpcXHUwMDFiXFxbKXxcXHUwMDliKSg/Oig/OlswLTldezEsM30pPyg/Oig/OjtbMC05XXswLDN9KSopP1tBLU18Zi1tXSl8XFx1MDAxYltBLU1dL1xuXG52YXIgX2RlZkNvbG9ycyA9IHtcbiAgcmVzZXQ6IFsnZmZmJywgJzAwMCddLCAvLyBbRk9SRUdST1VEX0NPTE9SLCBCQUNLR1JPVU5EX0NPTE9SXVxuICBibGFjazogJzAwMCcsXG4gIHJlZDogJ2ZmMDAwMCcsXG4gIGdyZWVuOiAnMjA5ODA1JyxcbiAgeWVsbG93OiAnZThiZjAzJyxcbiAgYmx1ZTogJzAwMDBmZicsXG4gIG1hZ2VudGE6ICdmZjAwZmYnLFxuICBjeWFuOiAnMDBmZmVlJyxcbiAgbGlnaHRncmV5OiAnZjBmMGYwJyxcbiAgZGFya2dyZXk6ICc4ODgnXG59XG52YXIgX3N0eWxlcyA9IHtcbiAgMzA6ICdibGFjaycsXG4gIDMxOiAncmVkJyxcbiAgMzI6ICdncmVlbicsXG4gIDMzOiAneWVsbG93JyxcbiAgMzQ6ICdibHVlJyxcbiAgMzU6ICdtYWdlbnRhJyxcbiAgMzY6ICdjeWFuJyxcbiAgMzc6ICdsaWdodGdyZXknXG59XG52YXIgX29wZW5UYWdzID0ge1xuICAnMSc6ICdmb250LXdlaWdodDpib2xkJywgLy8gYm9sZFxuICAnMic6ICdvcGFjaXR5OjAuNScsIC8vIGRpbVxuICAnMyc6ICc8aT4nLCAvLyBpdGFsaWNcbiAgJzQnOiAnPHU+JywgLy8gdW5kZXJzY29yZVxuICAnOCc6ICdkaXNwbGF5Om5vbmUnLCAvLyBoaWRkZW5cbiAgJzknOiAnPGRlbD4nIC8vIGRlbGV0ZVxufVxudmFyIF9jbG9zZVRhZ3MgPSB7XG4gICcyMyc6ICc8L2k+JywgLy8gcmVzZXQgaXRhbGljXG4gICcyNCc6ICc8L3U+JywgLy8gcmVzZXQgdW5kZXJzY29yZVxuICAnMjknOiAnPC9kZWw+JyAvLyByZXNldCBkZWxldGVcbn1cblxuO1swLCAyMSwgMjIsIDI3LCAyOCwgMzksIDQ5XS5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gIF9jbG9zZVRhZ3Nbbl0gPSAnPC9zcGFuPidcbn0pXG5cbi8qKlxuICogQ29udmVydHMgdGV4dCB3aXRoIEFOU0kgY29sb3IgY29kZXMgdG8gSFRNTCBtYXJrdXAuXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGFuc2lIVE1MICh0ZXh0KSB7XG4gIC8vIFJldHVybnMgdGhlIHRleHQgaWYgdGhlIHN0cmluZyBoYXMgbm8gQU5TSSBlc2NhcGUgY29kZS5cbiAgaWYgKCFfcmVnQU5TSS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuIHRleHRcbiAgfVxuXG4gIC8vIENhY2hlIG9wZW5lZCBzZXF1ZW5jZS5cbiAgdmFyIGFuc2lDb2RlcyA9IFtdXG4gIC8vIFJlcGxhY2Ugd2l0aCBtYXJrdXAuXG4gIHZhciByZXQgPSB0ZXh0LnJlcGxhY2UoL1xcMDMzXFxbKFxcZCspbS9nLCBmdW5jdGlvbiAobWF0Y2gsIHNlcSkge1xuICAgIHZhciBvdCA9IF9vcGVuVGFnc1tzZXFdXG4gICAgaWYgKG90KSB7XG4gICAgICAvLyBJZiBjdXJyZW50IHNlcXVlbmNlIGhhcyBiZWVuIG9wZW5lZCwgY2xvc2UgaXQuXG4gICAgICBpZiAoISF+YW5zaUNvZGVzLmluZGV4T2Yoc2VxKSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdFxuICAgICAgICBhbnNpQ29kZXMucG9wKClcbiAgICAgICAgcmV0dXJuICc8L3NwYW4+J1xuICAgICAgfVxuICAgICAgLy8gT3BlbiB0YWcuXG4gICAgICBhbnNpQ29kZXMucHVzaChzZXEpXG4gICAgICByZXR1cm4gb3RbMF0gPT09ICc8JyA/IG90IDogJzxzcGFuIHN0eWxlPVwiJyArIG90ICsgJztcIj4nXG4gICAgfVxuXG4gICAgdmFyIGN0ID0gX2Nsb3NlVGFnc1tzZXFdXG4gICAgaWYgKGN0KSB7XG4gICAgICAvLyBQb3Agc2VxdWVuY2VcbiAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgcmV0dXJuIGN0XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9KVxuXG4gIC8vIE1ha2Ugc3VyZSB0YWdzIGFyZSBjbG9zZWQuXG4gIHZhciBsID0gYW5zaUNvZGVzLmxlbmd0aFxuICA7KGwgPiAwKSAmJiAocmV0ICs9IEFycmF5KGwgKyAxKS5qb2luKCc8L3NwYW4+JykpXG5cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIEN1c3RvbWl6ZSBjb2xvcnMuXG4gKiBAcGFyYW0ge09iamVjdH0gY29sb3JzIHJlZmVyZW5jZSB0byBfZGVmQ29sb3JzXG4gKi9cbmFuc2lIVE1MLnNldENvbG9ycyA9IGZ1bmN0aW9uIChjb2xvcnMpIHtcbiAgaWYgKHR5cGVvZiBjb2xvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgY29sb3JzYCBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBPYmplY3QuJylcbiAgfVxuXG4gIHZhciBfZmluYWxDb2xvcnMgPSB7fVxuICBmb3IgKHZhciBrZXkgaW4gX2RlZkNvbG9ycykge1xuICAgIHZhciBoZXggPSBjb2xvcnMuaGFzT3duUHJvcGVydHkoa2V5KSA/IGNvbG9yc1trZXldIDogbnVsbFxuICAgIGlmICghaGV4KSB7XG4gICAgICBfZmluYWxDb2xvcnNba2V5XSA9IF9kZWZDb2xvcnNba2V5XVxuICAgICAgY29udGludWVcbiAgICB9XG4gICAgaWYgKCdyZXNldCcgPT09IGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGhleCA9IFtoZXhdXG4gICAgICB9XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaGV4KSB8fCBoZXgubGVuZ3RoID09PSAwIHx8IGhleC5zb21lKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaCAhPT0gJ3N0cmluZydcbiAgICAgIH0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIG9mIGAnICsga2V5ICsgJ2AgcHJvcGVydHkgbXVzdCBiZSBhbiBBcnJheSBhbmQgZWFjaCBpdGVtIGNvdWxkIG9ubHkgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgICAgfVxuICAgICAgdmFyIGRlZkhleENvbG9yID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBpZiAoIWhleFswXSkge1xuICAgICAgICBoZXhbMF0gPSBkZWZIZXhDb2xvclswXVxuICAgICAgfVxuICAgICAgaWYgKGhleC5sZW5ndGggPT09IDEgfHwgIWhleFsxXSkge1xuICAgICAgICBoZXggPSBbaGV4WzBdXVxuICAgICAgICBoZXgucHVzaChkZWZIZXhDb2xvclsxXSlcbiAgICAgIH1cblxuICAgICAgaGV4ID0gaGV4LnNsaWNlKDAsIDIpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJylcbiAgICB9XG4gICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBoZXhcbiAgfVxuICBfc2V0VGFncyhfZmluYWxDb2xvcnMpXG59XG5cbi8qKlxuICogUmVzZXQgY29sb3JzLlxuICovXG5hbnNpSFRNTC5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgX3NldFRhZ3MoX2RlZkNvbG9ycylcbn1cblxuLyoqXG4gKiBFeHBvc2UgdGFncywgaW5jbHVkaW5nIG9wZW4gYW5kIGNsb3NlLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuYW5zaUhUTUwudGFncyA9IHt9XG5cbmlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdvcGVuJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX29wZW5UYWdzIH1cbiAgfSlcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdjbG9zZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9jbG9zZVRhZ3MgfVxuICB9KVxufSBlbHNlIHtcbiAgYW5zaUhUTUwudGFncy5vcGVuID0gX29wZW5UYWdzXG4gIGFuc2lIVE1MLnRhZ3MuY2xvc2UgPSBfY2xvc2VUYWdzXG59XG5cbmZ1bmN0aW9uIF9zZXRUYWdzIChjb2xvcnMpIHtcbiAgLy8gcmVzZXQgYWxsXG4gIF9vcGVuVGFnc1snMCddID0gJ2ZvbnQtd2VpZ2h0Om5vcm1hbDtvcGFjaXR5OjE7Y29sb3I6IycgKyBjb2xvcnMucmVzZXRbMF0gKyAnO2JhY2tncm91bmQ6IycgKyBjb2xvcnMucmVzZXRbMV1cbiAgLy8gaW52ZXJzZVxuICBfb3BlblRhZ3NbJzcnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5yZXNldFsxXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFswXVxuICAvLyBkYXJrIGdyZXlcbiAgX29wZW5UYWdzWyc5MCddID0gJ2NvbG9yOiMnICsgY29sb3JzLmRhcmtncmV5XG5cbiAgZm9yICh2YXIgY29kZSBpbiBfc3R5bGVzKSB7XG4gICAgdmFyIGNvbG9yID0gX3N0eWxlc1tjb2RlXVxuICAgIHZhciBvcmlDb2xvciA9IGNvbG9yc1tjb2xvcl0gfHwgJzAwMCdcbiAgICBfb3BlblRhZ3NbY29kZV0gPSAnY29sb3I6IycgKyBvcmlDb2xvclxuICAgIGNvZGUgPSBwYXJzZUludChjb2RlKVxuICAgIF9vcGVuVGFnc1soY29kZSArIDEwKS50b1N0cmluZygpXSA9ICdiYWNrZ3JvdW5kOiMnICsgb3JpQ29sb3JcbiAgfVxufVxuXG5hbnNpSFRNTC5yZXNldCgpXG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIEdldHMgYWxsIG5vbi1idWlsdGluIHByb3BlcnRpZXMgdXAgdGhlIHByb3RvdHlwZSBjaGFpblxuY29uc3QgZ2V0QWxsUHJvcGVydGllcyA9IG9iamVjdCA9PiB7XG5cdGNvbnN0IHByb3BlcnRpZXMgPSBuZXcgU2V0KCk7XG5cblx0ZG8ge1xuXHRcdGZvciAoY29uc3Qga2V5IG9mIFJlZmxlY3Qub3duS2V5cyhvYmplY3QpKSB7XG5cdFx0XHRwcm9wZXJ0aWVzLmFkZChbb2JqZWN0LCBrZXldKTtcblx0XHR9XG5cdH0gd2hpbGUgKChvYmplY3QgPSBSZWZsZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCkpICYmIG9iamVjdCAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cblx0cmV0dXJuIHByb3BlcnRpZXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChzZWxmLCB7aW5jbHVkZSwgZXhjbHVkZX0gPSB7fSkgPT4ge1xuXHRjb25zdCBmaWx0ZXIgPSBrZXkgPT4ge1xuXHRcdGNvbnN0IG1hdGNoID0gcGF0dGVybiA9PiB0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycgPyBrZXkgPT09IHBhdHRlcm4gOiBwYXR0ZXJuLnRlc3Qoa2V5KTtcblxuXHRcdGlmIChpbmNsdWRlKSB7XG5cdFx0XHRyZXR1cm4gaW5jbHVkZS5zb21lKG1hdGNoKTtcblx0XHR9XG5cblx0XHRpZiAoZXhjbHVkZSkge1xuXHRcdFx0cmV0dXJuICFleGNsdWRlLnNvbWUobWF0Y2gpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cdGZvciAoY29uc3QgW29iamVjdCwga2V5XSBvZiBnZXRBbGxQcm9wZXJ0aWVzKHNlbGYuY29uc3RydWN0b3IucHJvdG90eXBlKSkge1xuXHRcdGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgfHwgIWZpbHRlcihrZXkpKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb25zdCBkZXNjcmlwdG9yID0gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBrZXkpO1xuXHRcdGlmIChkZXNjcmlwdG9yICYmIHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRzZWxmW2tleV0gPSBzZWxmW2tleV0uYmluZChzZWxmKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc2VsZjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJy4vJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCaW5kKEdldEludHJpbnNpYygnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpYyA9IEdldEludHJpbnNpYyhuYW1lLCAhIWFsbG93TWlzc2luZyk7XG5cdGlmICh0eXBlb2YgaW50cmluc2ljID09PSAnZnVuY3Rpb24nICYmICRpbmRleE9mKG5hbWUsICcucHJvdG90eXBlLicpID4gLTEpIHtcblx0XHRyZXR1cm4gY2FsbEJpbmQoaW50cmluc2ljKTtcblx0fVxuXHRyZXR1cm4gaW50cmluc2ljO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xudmFyIHNldEZ1bmN0aW9uTGVuZ3RoID0gcmVxdWlyZSgnc2V0LWZ1bmN0aW9uLWxlbmd0aCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgJGFwcGx5ID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5JScpO1xudmFyICRjYWxsID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwlJyk7XG52YXIgJHJlZmxlY3RBcHBseSA9IEdldEludHJpbnNpYygnJVJlZmxlY3QuYXBwbHklJywgdHJ1ZSkgfHwgYmluZC5jYWxsKCRjYWxsLCAkYXBwbHkpO1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnZXMtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJG1heCA9IEdldEludHJpbnNpYygnJU1hdGgubWF4JScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKG9yaWdpbmFsRnVuY3Rpb24pIHtcblx0aWYgKHR5cGVvZiBvcmlnaW5hbEZ1bmN0aW9uICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2EgZnVuY3Rpb24gaXMgcmVxdWlyZWQnKTtcblx0fVxuXHR2YXIgZnVuYyA9ICRyZWZsZWN0QXBwbHkoYmluZCwgJGNhbGwsIGFyZ3VtZW50cyk7XG5cdHJldHVybiBzZXRGdW5jdGlvbkxlbmd0aChcblx0XHRmdW5jLFxuXHRcdDEgKyAkbWF4KDAsIG9yaWdpbmFsRnVuY3Rpb24ubGVuZ3RoIC0gKGFyZ3VtZW50cy5sZW5ndGggLSAxKSksXG5cdFx0dHJ1ZVxuXHQpO1xufTtcblxudmFyIGFwcGx5QmluZCA9IGZ1bmN0aW9uIGFwcGx5QmluZCgpIHtcblx0cmV0dXJuICRyZWZsZWN0QXBwbHkoYmluZCwgJGFwcGx5LCBhcmd1bWVudHMpO1xufTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHQkZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdhcHBseScsIHsgdmFsdWU6IGFwcGx5QmluZCB9KTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzLmFwcGx5ID0gYXBwbHlCaW5kO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnZXMtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciAkU3ludGF4RXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvc3ludGF4Jyk7XG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBnb3BkID0gcmVxdWlyZSgnZ29wZCcpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVEYXRhUHJvcGVydHkoXG5cdG9iaixcblx0cHJvcGVydHksXG5cdHZhbHVlXG4pIHtcblx0aWYgKCFvYmogfHwgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BvYmpgIG11c3QgYmUgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb25gJyk7XG5cdH1cblx0aWYgKHR5cGVvZiBwcm9wZXJ0eSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHByb3BlcnR5ICE9PSAnc3ltYm9sJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgcHJvcGVydHlgIG11c3QgYmUgYSBzdHJpbmcgb3IgYSBzeW1ib2xgJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIHR5cGVvZiBhcmd1bWVudHNbM10gIT09ICdib29sZWFuJyAmJiBhcmd1bWVudHNbM10gIT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYG5vbkVudW1lcmFibGVgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4gb3IgbnVsbCcpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gNCAmJiB0eXBlb2YgYXJndW1lbnRzWzRdICE9PSAnYm9vbGVhbicgJiYgYXJndW1lbnRzWzRdICE9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Bub25Xcml0YWJsZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIHR5cGVvZiBhcmd1bWVudHNbNV0gIT09ICdib29sZWFuJyAmJiBhcmd1bWVudHNbNV0gIT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYG5vbkNvbmZpZ3VyYWJsZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIHR5cGVvZiBhcmd1bWVudHNbNl0gIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbG9vc2VgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXG5cdHZhciBub25FbnVtZXJhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXHR2YXIgbm9uV3JpdGFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IG51bGw7XG5cdHZhciBub25Db25maWd1cmFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNSA/IGFyZ3VtZW50c1s1XSA6IG51bGw7XG5cdHZhciBsb29zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ID8gYXJndW1lbnRzWzZdIDogZmFsc2U7XG5cblx0LyogQHR5cGUge2ZhbHNlIHwgVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8dW5rbm93bj59ICovXG5cdHZhciBkZXNjID0gISFnb3BkICYmIGdvcGQob2JqLCBwcm9wZXJ0eSk7XG5cblx0aWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eShvYmosIHByb3BlcnR5LCB7XG5cdFx0XHRjb25maWd1cmFibGU6IG5vbkNvbmZpZ3VyYWJsZSA9PT0gbnVsbCAmJiBkZXNjID8gZGVzYy5jb25maWd1cmFibGUgOiAhbm9uQ29uZmlndXJhYmxlLFxuXHRcdFx0ZW51bWVyYWJsZTogbm9uRW51bWVyYWJsZSA9PT0gbnVsbCAmJiBkZXNjID8gZGVzYy5lbnVtZXJhYmxlIDogIW5vbkVudW1lcmFibGUsXG5cdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHR3cml0YWJsZTogbm9uV3JpdGFibGUgPT09IG51bGwgJiYgZGVzYyA/IGRlc2Mud3JpdGFibGUgOiAhbm9uV3JpdGFibGVcblx0XHR9KTtcblx0fSBlbHNlIGlmIChsb29zZSB8fCAoIW5vbkVudW1lcmFibGUgJiYgIW5vbldyaXRhYmxlICYmICFub25Db25maWd1cmFibGUpKSB7XG5cdFx0Ly8gbXVzdCBmYWxsIGJhY2sgdG8gW1tTZXRdXSwgYW5kIHdhcyBub3QgZXhwbGljaXRseSBhc2tlZCB0byBtYWtlIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUsIG9yIG5vbi1jb25maWd1cmFibGVcblx0XHRvYmpbcHJvcGVydHldID0gdmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgZGVmaW5pbmcgYSBwcm9wZXJ0eSBhcyBub24tY29uZmlndXJhYmxlLCBub24td3JpdGFibGUsIG9yIG5vbi1lbnVtZXJhYmxlLicpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKSB8fCBmYWxzZTtcbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHQkZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyB2YWx1ZTogMSB9KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGRlZmluZVByb3BlcnR5XG5cdFx0JGRlZmluZVByb3BlcnR5ID0gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSAkZGVmaW5lUHJvcGVydHk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2V2YWwnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gRXZhbEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vcmFuZ2UnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gUmFuZ2VFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vcmVmJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFJlZmVyZW5jZUVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9zeW50YXgnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gU3ludGF4RXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3R5cGUnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gVHlwZUVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi91cmknKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gVVJJRXJyb3I7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwiLyogRm9udCBGYWNlIE9ic2VydmVyIHYyLjMuMCAtIMKpIEJyYW0gU3RlaW4uIExpY2Vuc2U6IEJTRC0zLUNsYXVzZSAqLyhmdW5jdGlvbigpe2Z1bmN0aW9uIHAoYSxjKXtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyP2EuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLGMsITEpOmEuYXR0YWNoRXZlbnQoXCJzY3JvbGxcIixjKX1mdW5jdGlvbiB1KGEpe2RvY3VtZW50LmJvZHk/YSgpOmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI/ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixmdW5jdGlvbiBiKCl7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixiKTthKCl9KTpkb2N1bWVudC5hdHRhY2hFdmVudChcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLGZ1bmN0aW9uIGcoKXtpZihcImludGVyYWN0aXZlXCI9PWRvY3VtZW50LnJlYWR5U3RhdGV8fFwiY29tcGxldGVcIj09ZG9jdW1lbnQucmVhZHlTdGF0ZSlkb2N1bWVudC5kZXRhY2hFdmVudChcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLGcpLGEoKX0pfTtmdW5jdGlvbiB3KGEpe3RoaXMuZz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3RoaXMuZy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKTt0aGlzLmcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYSkpO3RoaXMuaD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTt0aGlzLmk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7dGhpcy5tPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO3RoaXMuaj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTt0aGlzLmw9LTE7dGhpcy5oLnN0eWxlLmNzc1RleHQ9XCJtYXgtd2lkdGg6bm9uZTtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO292ZXJmbG93OnNjcm9sbDtmb250LXNpemU6MTZweDtcIjt0aGlzLmkuc3R5bGUuY3NzVGV4dD1cIm1heC13aWR0aDpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7b3ZlcmZsb3c6c2Nyb2xsO2ZvbnQtc2l6ZToxNnB4O1wiO1xudGhpcy5qLnN0eWxlLmNzc1RleHQ9XCJtYXgtd2lkdGg6bm9uZTtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO292ZXJmbG93OnNjcm9sbDtmb250LXNpemU6MTZweDtcIjt0aGlzLm0uc3R5bGUuY3NzVGV4dD1cImRpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjIwMCU7aGVpZ2h0OjIwMCU7Zm9udC1zaXplOjE2cHg7bWF4LXdpZHRoOm5vbmU7XCI7dGhpcy5oLmFwcGVuZENoaWxkKHRoaXMubSk7dGhpcy5pLmFwcGVuZENoaWxkKHRoaXMuaik7dGhpcy5nLmFwcGVuZENoaWxkKHRoaXMuaCk7dGhpcy5nLmFwcGVuZENoaWxkKHRoaXMuaSl9XG5mdW5jdGlvbiB4KGEsYyl7YS5nLnN0eWxlLmNzc1RleHQ9XCJtYXgtd2lkdGg6bm9uZTttaW4td2lkdGg6MjBweDttaW4taGVpZ2h0OjIwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7b3ZlcmZsb3c6aGlkZGVuO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOmF1dG87bWFyZ2luOjA7cGFkZGluZzowO3RvcDotOTk5cHg7d2hpdGUtc3BhY2U6bm93cmFwO2ZvbnQtc3ludGhlc2lzOm5vbmU7Zm9udDpcIitjK1wiO1wifWZ1bmN0aW9uIEIoYSl7dmFyIGM9YS5nLm9mZnNldFdpZHRoLGI9YysxMDA7YS5qLnN0eWxlLndpZHRoPWIrXCJweFwiO2EuaS5zY3JvbGxMZWZ0PWI7YS5oLnNjcm9sbExlZnQ9YS5oLnNjcm9sbFdpZHRoKzEwMDtyZXR1cm4gYS5sIT09Yz8oYS5sPWMsITApOiExfWZ1bmN0aW9uIEMoYSxjKXtmdW5jdGlvbiBiKCl7dmFyIGU9ZztCKGUpJiZudWxsIT09ZS5nLnBhcmVudE5vZGUmJmMoZS5sKX12YXIgZz1hO3AoYS5oLGIpO3AoYS5pLGIpO0IoYSl9O2Z1bmN0aW9uIEQoYSxjLGIpe2M9Y3x8e307Yj1ifHx3aW5kb3c7dGhpcy5mYW1pbHk9YTt0aGlzLnN0eWxlPWMuc3R5bGV8fFwibm9ybWFsXCI7dGhpcy53ZWlnaHQ9Yy53ZWlnaHR8fFwibm9ybWFsXCI7dGhpcy5zdHJldGNoPWMuc3RyZXRjaHx8XCJub3JtYWxcIjt0aGlzLmNvbnRleHQ9Yn12YXIgRT1udWxsLEY9bnVsbCxHPW51bGwsSD1udWxsO2Z1bmN0aW9uIEkoYSl7bnVsbD09PUYmJihNKGEpJiYvQXBwbGUvLnRlc3Qod2luZG93Lm5hdmlnYXRvci52ZW5kb3IpPyhhPS9BcHBsZVdlYktpdFxcLyhbMC05XSspKD86XFwuKFswLTldKykpKD86XFwuKFswLTldKykpLy5leGVjKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KSxGPSEhYSYmNjAzPnBhcnNlSW50KGFbMV0sMTApKTpGPSExKTtyZXR1cm4gRn1mdW5jdGlvbiBNKGEpe251bGw9PT1IJiYoSD0hIWEuZG9jdW1lbnQuZm9udHMpO3JldHVybiBIfVxuZnVuY3Rpb24gTihhLGMpe3ZhciBiPWEuc3R5bGUsZz1hLndlaWdodDtpZihudWxsPT09Ryl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt0cnl7ZS5zdHlsZS5mb250PVwiY29uZGVuc2VkIDEwMHB4IHNhbnMtc2VyaWZcIn1jYXRjaChxKXt9Rz1cIlwiIT09ZS5zdHlsZS5mb250fXJldHVybltiLGcsRz9hLnN0cmV0Y2g6XCJcIixcIjEwMHB4XCIsY10uam9pbihcIiBcIil9XG5ELnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEsYyl7dmFyIGI9dGhpcyxnPWF8fFwiQkVTYnN3eVwiLGU9MCxxPWN8fDNFMyxKPShuZXcgRGF0ZSkuZ2V0VGltZSgpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihLLEwpe2lmKE0oYi5jb250ZXh0KSYmIUkoYi5jb250ZXh0KSl7dmFyIE89bmV3IFByb21pc2UoZnVuY3Rpb24ocix0KXtmdW5jdGlvbiBoKCl7KG5ldyBEYXRlKS5nZXRUaW1lKCktSj49cT90KEVycm9yKFwiXCIrcStcIm1zIHRpbWVvdXQgZXhjZWVkZWRcIikpOmIuY29udGV4dC5kb2N1bWVudC5mb250cy5sb2FkKE4oYiwnXCInK2IuZmFtaWx5KydcIicpLGcpLnRoZW4oZnVuY3Rpb24obil7MTw9bi5sZW5ndGg/cigpOnNldFRpbWVvdXQoaCwyNSl9LHQpfWgoKX0pLFA9bmV3IFByb21pc2UoZnVuY3Rpb24ocix0KXtlPXNldFRpbWVvdXQoZnVuY3Rpb24oKXt0KEVycm9yKFwiXCIrcStcIm1zIHRpbWVvdXQgZXhjZWVkZWRcIikpfSxxKX0pO1Byb21pc2UucmFjZShbUCxPXSkudGhlbihmdW5jdGlvbigpe2NsZWFyVGltZW91dChlKTtcbksoYil9LEwpfWVsc2UgdShmdW5jdGlvbigpe2Z1bmN0aW9uIHIoKXt2YXIgZDtpZihkPS0xIT1rJiYtMSE9bHx8LTEhPWsmJi0xIT1tfHwtMSE9bCYmLTEhPW0pKGQ9ayE9bCYmayE9bSYmbCE9bSl8fChudWxsPT09RSYmKGQ9L0FwcGxlV2ViS2l0XFwvKFswLTldKykoPzpcXC4oWzAtOV0rKSkvLmV4ZWMod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpLEU9ISFkJiYoNTM2PnBhcnNlSW50KGRbMV0sMTApfHw1MzY9PT1wYXJzZUludChkWzFdLDEwKSYmMTE+PXBhcnNlSW50KGRbMl0sMTApKSksZD1FJiYoaz09eSYmbD09eSYmbT09eXx8az09eiYmbD09eiYmbT09enx8az09QSYmbD09QSYmbT09QSkpLGQ9IWQ7ZCYmKG51bGwhPT1mLnBhcmVudE5vZGUmJmYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChmKSxjbGVhclRpbWVvdXQoZSksSyhiKSl9ZnVuY3Rpb24gdCgpe2lmKChuZXcgRGF0ZSkuZ2V0VGltZSgpLUo+PXEpbnVsbCE9PWYucGFyZW50Tm9kZSYmZi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGYpLFxuTChFcnJvcihcIlwiK3ErXCJtcyB0aW1lb3V0IGV4Y2VlZGVkXCIpKTtlbHNle3ZhciBkPWIuY29udGV4dC5kb2N1bWVudC5oaWRkZW47aWYoITA9PT1kfHx2b2lkIDA9PT1kKWs9aC5nLm9mZnNldFdpZHRoLGw9bi5nLm9mZnNldFdpZHRoLG09di5nLm9mZnNldFdpZHRoLHIoKTtlPXNldFRpbWVvdXQodCw1MCl9fXZhciBoPW5ldyB3KGcpLG49bmV3IHcoZyksdj1uZXcgdyhnKSxrPS0xLGw9LTEsbT0tMSx5PS0xLHo9LTEsQT0tMSxmPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Zi5kaXI9XCJsdHJcIjt4KGgsTihiLFwic2Fucy1zZXJpZlwiKSk7eChuLE4oYixcInNlcmlmXCIpKTt4KHYsTihiLFwibW9ub3NwYWNlXCIpKTtmLmFwcGVuZENoaWxkKGguZyk7Zi5hcHBlbmRDaGlsZChuLmcpO2YuYXBwZW5kQ2hpbGQodi5nKTtiLmNvbnRleHQuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmKTt5PWguZy5vZmZzZXRXaWR0aDt6PW4uZy5vZmZzZXRXaWR0aDtBPXYuZy5vZmZzZXRXaWR0aDt0KCk7XG5DKGgsZnVuY3Rpb24oZCl7az1kO3IoKX0pO3goaCxOKGIsJ1wiJytiLmZhbWlseSsnXCIsc2Fucy1zZXJpZicpKTtDKG4sZnVuY3Rpb24oZCl7bD1kO3IoKX0pO3gobixOKGIsJ1wiJytiLmZhbWlseSsnXCIsc2VyaWYnKSk7Qyh2LGZ1bmN0aW9uKGQpe209ZDtyKCl9KTt4KHYsTihiLCdcIicrYi5mYW1pbHkrJ1wiLG1vbm9zcGFjZScpKX0pfSl9O1wib2JqZWN0XCI9PT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPUQ6KHdpbmRvdy5Gb250RmFjZU9ic2VydmVyPUQsd2luZG93LkZvbnRGYWNlT2JzZXJ2ZXIucHJvdG90eXBlLmxvYWQ9RC5wcm90b3R5cGUubG9hZCk7fSgpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxudmFyIGNvbmNhdHR5ID0gZnVuY3Rpb24gY29uY2F0dHkoYSwgYikge1xuICAgIHZhciBhcnIgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnJbaV0gPSBhW2ldO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYXJyW2ogKyBhLmxlbmd0aF0gPSBiW2pdO1xuICAgIH1cblxuICAgIHJldHVybiBhcnI7XG59O1xuXG52YXIgc2xpY3kgPSBmdW5jdGlvbiBzbGljeShhcnJMaWtlLCBvZmZzZXQpIHtcbiAgICB2YXIgYXJyID0gW107XG4gICAgZm9yICh2YXIgaSA9IG9mZnNldCB8fCAwLCBqID0gMDsgaSA8IGFyckxpa2UubGVuZ3RoOyBpICs9IDEsIGogKz0gMSkge1xuICAgICAgICBhcnJbal0gPSBhcnJMaWtlW2ldO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufTtcblxudmFyIGpvaW55ID0gZnVuY3Rpb24gKGFyciwgam9pbmVyKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBhcnJbaV07XG4gICAgICAgIGlmIChpICsgMSA8IGFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHN0ciArPSBqb2luZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuYXBwbHkodGFyZ2V0KSAhPT0gZnVuY1R5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljeShhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBjb25jYXR0eShhcmdzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICBjb25jYXR0eShhcmdzLCBhcmd1bWVudHMpXG4gICAgICAgICk7XG5cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gbWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG4gICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICBib3VuZEFyZ3NbaV0gPSAnJCcgKyBpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBqb2lueShib3VuZEFyZ3MsICcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IGltcGxlbWVudGF0aW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdW5kZWZpbmVkO1xuXG52YXIgJEVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzJyk7XG52YXIgJEV2YWxFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9ldmFsJyk7XG52YXIgJFJhbmdlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvcmFuZ2UnKTtcbnZhciAkUmVmZXJlbmNlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvcmVmJyk7XG52YXIgJFN5bnRheEVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3N5bnRheCcpO1xudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xudmFyICRVUklFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy91cmknKTtcblxudmFyICRGdW5jdGlvbiA9IEZ1bmN0aW9uO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbnZhciBnZXRFdmFsbGVkQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoZXhwcmVzc2lvblN5bnRheCkge1xuXHR0cnkge1xuXHRcdHJldHVybiAkRnVuY3Rpb24oJ1widXNlIHN0cmljdFwiOyByZXR1cm4gKCcgKyBleHByZXNzaW9uU3ludGF4ICsgJykuY29uc3RydWN0b3I7JykoKTtcblx0fSBjYXRjaCAoZSkge31cbn07XG5cbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRCh7fSwgJycpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0JGdPUEQgPSBudWxsOyAvLyB0aGlzIGlzIElFIDgsIHdoaWNoIGhhcyBhIGJyb2tlbiBnT1BEXG5cdH1cbn1cblxudmFyIHRocm93VHlwZUVycm9yID0gZnVuY3Rpb24gKCkge1xuXHR0aHJvdyBuZXcgJFR5cGVFcnJvcigpO1xufTtcbnZhciBUaHJvd1R5cGVFcnJvciA9ICRnT1BEXG5cdD8gKGZ1bmN0aW9uICgpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucywgbm8tY2FsbGVyLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcblx0XHRcdGFyZ3VtZW50cy5jYWxsZWU7IC8vIElFIDggZG9lcyBub3QgdGhyb3cgaGVyZVxuXHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdH0gY2F0Y2ggKGNhbGxlZVRocm93cykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gSUUgOCB0aHJvd3Mgb24gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhcmd1bWVudHMsICcnKVxuXHRcdFx0XHRyZXR1cm4gJGdPUEQoYXJndW1lbnRzLCAnY2FsbGVlJykuZ2V0O1xuXHRcdFx0fSBjYXRjaCAoZ09QRHRocm93cykge1xuXHRcdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KCkpXG5cdDogdGhyb3dUeXBlRXJyb3I7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xudmFyIGhhc1Byb3RvID0gcmVxdWlyZSgnaGFzLXByb3RvJykoKTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IChcblx0aGFzUHJvdG9cblx0XHQ/IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Ll9fcHJvdG9fXzsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG5cdFx0OiBudWxsXG4pO1xuXG52YXIgbmVlZHNFdmFsID0ge307XG5cbnZhciBUeXBlZEFycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKFVpbnQ4QXJyYXkpO1xuXG52YXIgSU5UUklOU0lDUyA9IHtcblx0X19wcm90b19fOiBudWxsLFxuXHQnJUFnZ3JlZ2F0ZUVycm9yJSc6IHR5cGVvZiBBZ2dyZWdhdGVFcnJvciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBZ2dyZWdhdGVFcnJvcixcblx0JyVBcnJheSUnOiBBcnJheSxcblx0JyVBcnJheUJ1ZmZlciUnOiB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXJyYXlCdWZmZXIsXG5cdCclQXJyYXlJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzICYmIGdldFByb3RvID8gZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Zyb21TeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IG5lZWRzRXZhbCxcblx0JyVBdG9taWNzJSc6IHR5cGVvZiBBdG9taWNzID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEF0b21pY3MsXG5cdCclQmlnSW50JSc6IHR5cGVvZiBCaWdJbnQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnSW50LFxuXHQnJUJpZ0ludDY0QXJyYXklJzogdHlwZW9mIEJpZ0ludDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnSW50NjRBcnJheSxcblx0JyVCaWdVaW50NjRBcnJheSUnOiB0eXBlb2YgQmlnVWludDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnVWludDY0QXJyYXksXG5cdCclQm9vbGVhbiUnOiBCb29sZWFuLFxuXHQnJURhdGFWaWV3JSc6IHR5cGVvZiBEYXRhVmlldyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBEYXRhVmlldyxcblx0JyVEYXRlJSc6IERhdGUsXG5cdCclZGVjb2RlVVJJJSc6IGRlY29kZVVSSSxcblx0JyVkZWNvZGVVUklDb21wb25lbnQlJzogZGVjb2RlVVJJQ29tcG9uZW50LFxuXHQnJWVuY29kZVVSSSUnOiBlbmNvZGVVUkksXG5cdCclZW5jb2RlVVJJQ29tcG9uZW50JSc6IGVuY29kZVVSSUNvbXBvbmVudCxcblx0JyVFcnJvciUnOiAkRXJyb3IsXG5cdCclZXZhbCUnOiBldmFsLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcblx0JyVFdmFsRXJyb3IlJzogJEV2YWxFcnJvcixcblx0JyVGbG9hdDMyQXJyYXklJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXksXG5cdCclRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJUZpbmFsaXphdGlvblJlZ2lzdHJ5JSc6IHR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGaW5hbGl6YXRpb25SZWdpc3RyeSxcblx0JyVGdW5jdGlvbiUnOiAkRnVuY3Rpb24sXG5cdCclR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUludDhBcnJheSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheSxcblx0JyVJbnQxNkFycmF5JSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDE2QXJyYXksXG5cdCclSW50MzJBcnJheSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LFxuXHQnJWlzRmluaXRlJSc6IGlzRmluaXRlLFxuXHQnJWlzTmFOJSc6IGlzTmFOLFxuXHQnJUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSA6IHVuZGVmaW5lZCxcblx0JyVKU09OJSc6IHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyA/IEpTT04gOiB1bmRlZmluZWQsXG5cdCclTWFwJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLFxuXHQnJU1hcEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBNYXAoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJU1hdGglJzogTWF0aCxcblx0JyVOdW1iZXIlJzogTnVtYmVyLFxuXHQnJU9iamVjdCUnOiBPYmplY3QsXG5cdCclcGFyc2VGbG9hdCUnOiBwYXJzZUZsb2F0LFxuXHQnJXBhcnNlSW50JSc6IHBhcnNlSW50LFxuXHQnJVByb21pc2UlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZSxcblx0JyVQcm94eSUnOiB0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJveHksXG5cdCclUmFuZ2VFcnJvciUnOiAkUmFuZ2VFcnJvcixcblx0JyVSZWZlcmVuY2VFcnJvciUnOiAkUmVmZXJlbmNlRXJyb3IsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bnRheEVycm9yJSc6ICRTeW50YXhFcnJvcixcblx0JyVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyVUeXBlZEFycmF5JSc6IFR5cGVkQXJyYXksXG5cdCclVHlwZUVycm9yJSc6ICRUeXBlRXJyb3IsXG5cdCclVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJVVSSUVycm9yJSc6ICRVUklFcnJvcixcblx0JyVXZWFrTWFwJSc6IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtNYXAsXG5cdCclV2Vha1JlZiUnOiB0eXBlb2YgV2Vha1JlZiA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrUmVmLFxuXHQnJVdlYWtTZXQlJzogdHlwZW9mIFdlYWtTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1NldFxufTtcblxuaWYgKGdldFByb3RvKSB7XG5cdHRyeSB7XG5cdFx0bnVsbC5lcnJvcjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXNoYWRvd3JlYWxtL3B1bGwvMzg0I2lzc3VlY29tbWVudC0xMzY0MjY0MjI5XG5cdFx0dmFyIGVycm9yUHJvdG8gPSBnZXRQcm90byhnZXRQcm90byhlKSk7XG5cdFx0SU5UUklOU0lDU1snJUVycm9yLnByb3RvdHlwZSUnXSA9IGVycm9yUHJvdG87XG5cdH1cbn1cblxudmFyIGRvRXZhbCA9IGZ1bmN0aW9uIGRvRXZhbChuYW1lKSB7XG5cdHZhciB2YWx1ZTtcblx0aWYgKG5hbWUgPT09ICclQXN5bmNGdW5jdGlvbiUnKSB7XG5cdFx0dmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2FzeW5jIGZ1bmN0aW9uICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVHZW5lcmF0b3JGdW5jdGlvbiUnKSB7XG5cdFx0dmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2Z1bmN0aW9uKiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKSB7XG5cdFx0dmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2FzeW5jIGZ1bmN0aW9uKiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNHZW5lcmF0b3IlJykge1xuXHRcdHZhciBmbiA9IGRvRXZhbCgnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJyk7XG5cdFx0aWYgKGZuKSB7XG5cdFx0XHR2YWx1ZSA9IGZuLnByb3RvdHlwZTtcblx0XHR9XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJScpIHtcblx0XHR2YXIgZ2VuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3IlJyk7XG5cdFx0aWYgKGdlbiAmJiBnZXRQcm90bykge1xuXHRcdFx0dmFsdWUgPSBnZXRQcm90byhnZW4ucHJvdG90eXBlKTtcblx0XHR9XG5cdH1cblxuXHRJTlRSSU5TSUNTW25hbWVdID0gdmFsdWU7XG5cblx0cmV0dXJuIHZhbHVlO1xufTtcblxudmFyIExFR0FDWV9BTElBU0VTID0ge1xuXHRfX3Byb3RvX186IG51bGwsXG5cdCclQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogWydBcnJheUJ1ZmZlcicsICdwcm90b3R5cGUnXSxcblx0JyVBcnJheVByb3RvdHlwZSUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG9fZW50cmllcyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdlbnRyaWVzJ10sXG5cdCclQXJyYXlQcm90b19mb3JFYWNoJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2ZvckVhY2gnXSxcblx0JyVBcnJheVByb3RvX2tleXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAna2V5cyddLFxuXHQnJUFycmF5UHJvdG9fdmFsdWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ3ZhbHVlcyddLFxuXHQnJUFzeW5jRnVuY3Rpb25Qcm90b3R5cGUlJzogWydBc3luY0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVBc3luY0dlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUJvb2xlYW5Qcm90b3R5cGUlJzogWydCb29sZWFuJywgJ3Byb3RvdHlwZSddLFxuXHQnJURhdGFWaWV3UHJvdG90eXBlJSc6IFsnRGF0YVZpZXcnLCAncHJvdG90eXBlJ10sXG5cdCclRGF0ZVByb3RvdHlwZSUnOiBbJ0RhdGUnLCAncHJvdG90eXBlJ10sXG5cdCclRXJyb3JQcm90b3R5cGUlJzogWydFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVFdmFsRXJyb3JQcm90b3R5cGUlJzogWydFdmFsRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQzMkFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZsb2F0NjRBcnJheVByb3RvdHlwZSUnOiBbJ0Zsb2F0NjRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvciUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQ4QXJyYXlQcm90b3R5cGUlJzogWydJbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ0ludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MzJBcnJheVByb3RvdHlwZSUnOiBbJ0ludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSlNPTlBhcnNlJSc6IFsnSlNPTicsICdwYXJzZSddLFxuXHQnJUpTT05TdHJpbmdpZnklJzogWydKU09OJywgJ3N0cmluZ2lmeSddLFxuXHQnJU1hcFByb3RvdHlwZSUnOiBbJ01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVOdW1iZXJQcm90b3R5cGUlJzogWydOdW1iZXInLCAncHJvdG90eXBlJ10sXG5cdCclT2JqZWN0UHJvdG90eXBlJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZSddLFxuXHQnJU9ialByb3RvX3RvU3RyaW5nJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZScsICd0b1N0cmluZyddLFxuXHQnJU9ialByb3RvX3ZhbHVlT2YlJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3ZhbHVlT2YnXSxcblx0JyVQcm9taXNlUHJvdG90eXBlJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnXSxcblx0JyVQcm9taXNlUHJvdG9fdGhlbiUnOiBbJ1Byb21pc2UnLCAncHJvdG90eXBlJywgJ3RoZW4nXSxcblx0JyVQcm9taXNlX2FsbCUnOiBbJ1Byb21pc2UnLCAnYWxsJ10sXG5cdCclUHJvbWlzZV9yZWplY3QlJzogWydQcm9taXNlJywgJ3JlamVjdCddLFxuXHQnJVByb21pc2VfcmVzb2x2ZSUnOiBbJ1Byb21pc2UnLCAncmVzb2x2ZSddLFxuXHQnJVJhbmdlRXJyb3JQcm90b3R5cGUlJzogWydSYW5nZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVJlZmVyZW5jZUVycm9yUHJvdG90eXBlJSc6IFsnUmVmZXJlbmNlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVnRXhwUHJvdG90eXBlJSc6IFsnUmVnRXhwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVNldFByb3RvdHlwZSUnOiBbJ1NldCcsICdwcm90b3R5cGUnXSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ1NoYXJlZEFycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN0cmluZ1Byb3RvdHlwZSUnOiBbJ1N0cmluZycsICdwcm90b3R5cGUnXSxcblx0JyVTeW1ib2xQcm90b3R5cGUlJzogWydTeW1ib2wnLCAncHJvdG90eXBlJ10sXG5cdCclU3ludGF4RXJyb3JQcm90b3R5cGUlJzogWydTeW50YXhFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlZEFycmF5UHJvdG90eXBlJSc6IFsnVHlwZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlRXJyb3JQcm90b3R5cGUlJzogWydUeXBlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlJzogWydVaW50OENsYW1wZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQxNkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnVWludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVVJJRXJyb3JQcm90b3R5cGUlJzogWydVUklFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrTWFwUHJvdG90eXBlJSc6IFsnV2Vha01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrU2V0UHJvdG90eXBlJSc6IFsnV2Vha1NldCcsICdwcm90b3R5cGUnXVxufTtcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnaGFzb3duJyk7XG52YXIgJGNvbmNhdCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBBcnJheS5wcm90b3R5cGUuY29uY2F0KTtcbnZhciAkc3BsaWNlQXBwbHkgPSBiaW5kLmNhbGwoRnVuY3Rpb24uYXBwbHksIEFycmF5LnByb3RvdHlwZS5zcGxpY2UpO1xudmFyICRyZXBsYWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgJHN0clNsaWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUuc2xpY2UpO1xudmFyICRleGVjID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFJlZ0V4cC5wcm90b3R5cGUuZXhlYyk7XG5cbi8qIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTUvZGlzdC9sb2Rhc2guanMjTDY3MzUtTDY3NDQgKi9cbnZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7IC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aChzdHJpbmcpIHtcblx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHN0cmluZywgMCwgMSk7XG5cdHZhciBsYXN0ID0gJHN0clNsaWNlKHN0cmluZywgLTEpO1xuXHRpZiAoZmlyc3QgPT09ICclJyAmJiBsYXN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIGNsb3NpbmcgYCVgJyk7XG5cdH0gZWxzZSBpZiAobGFzdCA9PT0gJyUnICYmIGZpcnN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIG9wZW5pbmcgYCVgJyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9IFtdO1xuXHQkcmVwbGFjZShzdHJpbmcsIHJlUHJvcE5hbWUsIGZ1bmN0aW9uIChtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG5cdFx0cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcXVvdGUgPyAkcmVwbGFjZShzdWJTdHJpbmcsIHJlRXNjYXBlQ2hhciwgJyQxJykgOiBudW1iZXIgfHwgbWF0Y2g7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbi8qIGVuZCBhZGFwdGF0aW9uICovXG5cbnZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpY05hbWUgPSBuYW1lO1xuXHR2YXIgYWxpYXM7XG5cdGlmIChoYXNPd24oTEVHQUNZX0FMSUFTRVMsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0YWxpYXMgPSBMRUdBQ1lfQUxJQVNFU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpbnRyaW5zaWNOYW1lID0gJyUnICsgYWxpYXNbMF0gKyAnJSc7XG5cdH1cblxuXHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0dmFyIHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpZiAodmFsdWUgPT09IG5lZWRzRXZhbCkge1xuXHRcdFx0dmFsdWUgPSBkb0V2YWwoaW50cmluc2ljTmFtZSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnICYmICFhbGxvd01pc3NpbmcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IGlzIG5vdCBhdmFpbGFibGUuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIScpO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRhbGlhczogYWxpYXMsXG5cdFx0XHRuYW1lOiBpbnRyaW5zaWNOYW1lLFxuXHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0fTtcblx0fVxuXG5cdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZG9lcyBub3QgZXhpc3QhJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYWxsb3dNaXNzaW5nICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0aWYgKCRleGVjKC9eJT9bXiVdKiU/JC8sIG5hbWUpID09PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignYCVgIG1heSBub3QgYmUgcHJlc2VudCBhbnl3aGVyZSBidXQgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIHRoZSBpbnRyaW5zaWMgbmFtZScpO1xuXHR9XG5cdHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcblx0dmFyIGludHJpbnNpY0Jhc2VOYW1lID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzWzBdIDogJyc7XG5cblx0dmFyIGludHJpbnNpYyA9IGdldEJhc2VJbnRyaW5zaWMoJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJScsIGFsbG93TWlzc2luZyk7XG5cdHZhciBpbnRyaW5zaWNSZWFsTmFtZSA9IGludHJpbnNpYy5uYW1lO1xuXHR2YXIgdmFsdWUgPSBpbnRyaW5zaWMudmFsdWU7XG5cdHZhciBza2lwRnVydGhlckNhY2hpbmcgPSBmYWxzZTtcblxuXHR2YXIgYWxpYXMgPSBpbnRyaW5zaWMuYWxpYXM7XG5cdGlmIChhbGlhcykge1xuXHRcdGludHJpbnNpY0Jhc2VOYW1lID0gYWxpYXNbMF07XG5cdFx0JHNwbGljZUFwcGx5KHBhcnRzLCAkY29uY2F0KFswLCAxXSwgYWxpYXMpKTtcblx0fVxuXG5cdGZvciAodmFyIGkgPSAxLCBpc093biA9IHRydWU7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdHZhciBwYXJ0ID0gcGFydHNbaV07XG5cdFx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHBhcnQsIDAsIDEpO1xuXHRcdHZhciBsYXN0ID0gJHN0clNsaWNlKHBhcnQsIC0xKTtcblx0XHRpZiAoXG5cdFx0XHQoXG5cdFx0XHRcdChmaXJzdCA9PT0gJ1wiJyB8fCBmaXJzdCA9PT0gXCInXCIgfHwgZmlyc3QgPT09ICdgJylcblx0XHRcdFx0fHwgKGxhc3QgPT09ICdcIicgfHwgbGFzdCA9PT0gXCInXCIgfHwgbGFzdCA9PT0gJ2AnKVxuXHRcdFx0KVxuXHRcdFx0JiYgZmlyc3QgIT09IGxhc3Rcblx0XHQpIHtcblx0XHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ3Byb3BlcnR5IG5hbWVzIHdpdGggcXVvdGVzIG11c3QgaGF2ZSBtYXRjaGluZyBxdW90ZXMnKTtcblx0XHR9XG5cdFx0aWYgKHBhcnQgPT09ICdjb25zdHJ1Y3RvcicgfHwgIWlzT3duKSB7XG5cdFx0XHRza2lwRnVydGhlckNhY2hpbmcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGludHJpbnNpY0Jhc2VOYW1lICs9ICcuJyArIHBhcnQ7XG5cdFx0aW50cmluc2ljUmVhbE5hbWUgPSAnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJztcblxuXHRcdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljUmVhbE5hbWUpKSB7XG5cdFx0XHR2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCEocGFydCBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0aWYgKCFhbGxvd01pc3NpbmcpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYmFzZSBpbnRyaW5zaWMgZm9yICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCB0aGUgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZS4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdm9pZCB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoJGdPUEQgJiYgKGkgKyAxKSA+PSBwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGRlc2MgPSAkZ09QRCh2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdGlzT3duID0gISFkZXNjO1xuXG5cdFx0XHRcdC8vIEJ5IGNvbnZlbnRpb24sIHdoZW4gYSBkYXRhIHByb3BlcnR5IGlzIGNvbnZlcnRlZCB0byBhbiBhY2Nlc3NvclxuXHRcdFx0XHQvLyBwcm9wZXJ0eSB0byBlbXVsYXRlIGEgZGF0YSBwcm9wZXJ0eSB0aGF0IGRvZXMgbm90IHN1ZmZlciBmcm9tXG5cdFx0XHRcdC8vIHRoZSBvdmVycmlkZSBtaXN0YWtlLCB0aGF0IGFjY2Vzc29yJ3MgZ2V0dGVyIGlzIG1hcmtlZCB3aXRoXG5cdFx0XHRcdC8vIGFuIGBvcmlnaW5hbFZhbHVlYCBwcm9wZXJ0eS4gSGVyZSwgd2hlbiB3ZSBkZXRlY3QgdGhpcywgd2Vcblx0XHRcdFx0Ly8gdXBob2xkIHRoZSBpbGx1c2lvbiBieSBwcmV0ZW5kaW5nIHRvIHNlZSB0aGF0IG9yaWdpbmFsIGRhdGFcblx0XHRcdFx0Ly8gcHJvcGVydHksIGkuZS4sIHJldHVybmluZyB0aGUgdmFsdWUgcmF0aGVyIHRoYW4gdGhlIGdldHRlclxuXHRcdFx0XHQvLyBpdHNlbGYuXG5cdFx0XHRcdGlmIChpc093biAmJiAnZ2V0JyBpbiBkZXNjICYmICEoJ29yaWdpbmFsVmFsdWUnIGluIGRlc2MuZ2V0KSkge1xuXHRcdFx0XHRcdHZhbHVlID0gZGVzYy5nZXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aXNPd24gPSBoYXNPd24odmFsdWUsIHBhcnQpO1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNPd24gJiYgIXNraXBGdXJ0aGVyQ2FjaGluZykge1xuXHRcdFx0XHRJTlRSSU5TSUNTW2ludHJpbnNpY1JlYWxOYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xuXG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRChbXSwgJ2xlbmd0aCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZ09QRFxuXHRcdCRnT1BEID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRnT1BEO1xuIiwiLyohXG4gKiBDU1NQbHVnaW4gMy4xMi41XG4gKiBodHRwczovL2dzYXAuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMDgtMjAyNCwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHU0FQIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgZ3NhcCwgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIGdldFVuaXQsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9jaGVja1BsdWdpbiwgX3JlcGxhY2VSYW5kb20sIF9wbHVnaW5zLCBHU0NhY2hlLCBQcm9wVHdlZW4sIF9jb25maWcsIF90aWNrZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gLy9mb3IgdGhlIGNvbW1lbnRlZC1vdXQgY2xhc3NOYW1lIGZlYXR1cmUuXG59IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuXG52YXIgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbGVtZW50LFxuICAgIF9wbHVnaW5Jbml0dGVkLFxuICAgIF90ZW1wRGl2LFxuICAgIF90ZW1wRGl2U3R5bGVyLFxuICAgIF9yZWNlbnRTZXR0ZXJQbHVnaW4sXG4gICAgX3JldmVydGluZyxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wcyA9IHt9LFxuICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICBfREVHMlJBRCA9IE1hdGguUEkgLyAxODAsXG4gICAgX2F0YW4yID0gTWF0aC5hdGFuMixcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfaG9yaXpvbnRhbEV4cCA9IC8obGVmdHxyaWdodHx3aWR0aHxtYXJnaW58cGFkZGluZ3x4KS9pLFxuICAgIF9jb21wbGV4RXhwID0gL1tcXHMsXFwoXVxcUy8sXG4gICAgX3Byb3BlcnR5QWxpYXNlcyA9IHtcbiAgYXV0b0FscGhhOiBcIm9wYWNpdHksdmlzaWJpbGl0eVwiLFxuICBzY2FsZTogXCJzY2FsZVgsc2NhbGVZXCIsXG4gIGFscGhhOiBcIm9wYWNpdHlcIlxufSxcbiAgICBfcmVuZGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFdpdGhFbmQgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFdpdGhFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA9PT0gMSA/IGRhdGEuZSA6IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIC8vaWYgdW5pdHMgY2hhbmdlLCB3ZSBuZWVkIGEgd2F5IHRvIHJlbmRlciB0aGUgb3JpZ2luYWwgdW5pdC92YWx1ZSB3aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZyAocmF0aW86MClcbl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJSb3VuZGVkQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLnMgKyBkYXRhLmMgKiByYXRpbztcbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIH5+KHZhbHVlICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gIT09IDEgPyBkYXRhLmIgOiBkYXRhLmUsIGRhdGEpO1xufSxcbiAgICBfc2V0dGVyQ1NTU3R5bGUgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTU3R5bGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckNTU1Byb3AgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTUHJvcCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXBbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwLnNjYWxlWCA9IHRhcmdldC5fZ3NhcC5zY2FsZVkgPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGUuc2NhbGVYID0gY2FjaGUuc2NhbGVZID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3AgPSBcInRyYW5zZm9ybVwiLFxuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiLFxuICAgIF9zYXZlU3R5bGUgPSBmdW5jdGlvbiBfc2F2ZVN0eWxlKHByb3BlcnR5LCBpc05vdENTUykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG5cbiAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBzdHlsZSkge1xuICAgIHRoaXMudGZtID0gdGhpcy50Zm0gfHwge307XG5cbiAgICBpZiAocHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV0gfHwgcHJvcGVydHk7XG4gICAgICB+cHJvcGVydHkuaW5kZXhPZihcIixcIikgPyBwcm9wZXJ0eS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gX3RoaXMudGZtW2FdID0gX2dldCh0YXJnZXQsIGEpO1xuICAgICAgfSkgOiB0aGlzLnRmbVtwcm9wZXJ0eV0gPSBjYWNoZS54ID8gY2FjaGVbcHJvcGVydHldIDogX2dldCh0YXJnZXQsIHByb3BlcnR5KTsgLy8gbm90ZTogc2NhbGUgd291bGQgbWFwIHRvIFwic2NhbGVYLHNjYWxlWVwiLCB0aHVzIHdlIGxvb3AgYW5kIGFwcGx5IHRoZW0gYm90aC5cblxuICAgICAgcHJvcGVydHkgPT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0aGlzLnRmbS56T3JpZ2luID0gY2FjaGUuek9yaWdpbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfcHJvcGVydHlBbGlhc2VzLnRyYW5zZm9ybS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICByZXR1cm4gX3NhdmVTdHlsZS5jYWxsKF90aGlzLCBwLCBpc05vdENTUyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pbmRleE9mKF90cmFuc2Zvcm1Qcm9wKSA+PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgdGhpcy5zdmdvID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKTtcbiAgICAgIHRoaXMucHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgaXNOb3RDU1MsIFwiXCIpO1xuICAgIH1cblxuICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gIH1cblxuICAoc3R5bGUgfHwgaXNOb3RDU1MpICYmIHRoaXMucHJvcHMucHVzaChwcm9wZXJ0eSwgaXNOb3RDU1MsIHN0eWxlW3Byb3BlcnR5XSk7XG59LFxuICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKSB7XG4gIGlmIChzdHlsZS50cmFuc2xhdGUpIHtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRyYW5zbGF0ZVwiKTtcbiAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShcInNjYWxlXCIpO1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwicm90YXRlXCIpO1xuICB9XG59LFxuICAgIF9yZXZlcnRTdHlsZSA9IGZ1bmN0aW9uIF9yZXZlcnRTdHlsZSgpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIGksXG4gICAgICBwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMykge1xuICAgIC8vIHN0b3JlZCBsaWtlIHRoaXM6IHByb3BlcnR5LCBpc05vdENTUywgdmFsdWVcbiAgICBwcm9wc1tpICsgMV0gPyB0YXJnZXRbcHJvcHNbaV1dID0gcHJvcHNbaSArIDJdIDogcHJvcHNbaSArIDJdID8gc3R5bGVbcHJvcHNbaV1dID0gcHJvcHNbaSArIDJdIDogc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcHNbaV0uc3Vic3RyKDAsIDIpID09PSBcIi0tXCIgPyBwcm9wc1tpXSA6IHByb3BzW2ldLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICB9XG5cbiAgaWYgKHRoaXMudGZtKSB7XG4gICAgZm9yIChwIGluIHRoaXMudGZtKSB7XG4gICAgICBjYWNoZVtwXSA9IHRoaXMudGZtW3BdO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybSgpO1xuICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB0aGlzLnN2Z28gfHwgXCJcIik7XG4gICAgfVxuXG4gICAgaSA9IF9yZXZlcnRpbmcoKTtcblxuICAgIGlmICgoIWkgfHwgIWkuaXNTdGFydCkgJiYgIXN0eWxlW190cmFuc2Zvcm1Qcm9wXSkge1xuICAgICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSk7XG5cbiAgICAgIGlmIChjYWNoZS56T3JpZ2luICYmIHN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSkge1xuICAgICAgICBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gKz0gXCIgXCIgKyBjYWNoZS56T3JpZ2luICsgXCJweFwiOyAvLyBzaW5jZSB3ZSdyZSB1bmNhY2hpbmcsIHdlIG11c3QgcHV0IHRoZSB6T3JpZ2luIGJhY2sgaW50byB0aGUgdHJhbnNmb3JtT3JpZ2luIHNvIHRoYXQgd2UgY2FuIHB1bGwgaXQgb3V0IGFjY3VyYXRlbHkgd2hlbiB3ZSBwYXJzZSBhZ2Fpbi4gT3RoZXJ3aXNlLCB3ZSdkIGxvc2UgdGhlIHogcG9ydGlvbiBvZiB0aGUgb3JpZ2luIHNpbmNlIHdlIGV4dHJhY3QgaXQgdG8gcHJvdGVjdCBmcm9tIFNhZmFyaSBidWdzLlxuXG4gICAgICAgIGNhY2hlLnpPcmlnaW4gPSAwO1xuICAgICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIH1cblxuICAgICAgY2FjaGUudW5jYWNoZSA9IDE7IC8vIGlmIGl0J3MgYSBzdGFydEF0IHRoYXQncyBiZWluZyByZXZlcnRlZCBpbiB0aGUgX2luaXRUd2VlbigpIG9mIHRoZSBjb3JlLCB3ZSBkb24ndCBuZWVkIHRvIHVuY2FjaGUgdHJhbnNmb3Jtcy4gVGhpcyBpcyBwdXJlbHkgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRTdHlsZVNhdmVyID0gZnVuY3Rpb24gX2dldFN0eWxlU2F2ZXIodGFyZ2V0LCBwcm9wZXJ0aWVzKSB7XG4gIHZhciBzYXZlciA9IHtcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICBwcm9wczogW10sXG4gICAgcmV2ZXJ0OiBfcmV2ZXJ0U3R5bGUsXG4gICAgc2F2ZTogX3NhdmVTdHlsZVxuICB9O1xuICB0YXJnZXQuX2dzYXAgfHwgZ3NhcC5jb3JlLmdldENhY2hlKHRhcmdldCk7IC8vIGp1c3QgbWFrZSBzdXJlIHRoZXJlJ3MgYSBfZ3NhcCBjYWNoZSBkZWZpbmVkIGJlY2F1c2Ugd2UgcmVhZCBmcm9tIGl0IGluIF9zYXZlU3R5bGUoKSBhbmQgaXQncyBtb3JlIGVmZmljaWVudCB0byBqdXN0IGNoZWNrIGl0IGhlcmUgb25jZS5cblxuICBwcm9wZXJ0aWVzICYmIHByb3BlcnRpZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gc2F2ZXIuc2F2ZShwKTtcbiAgfSk7XG4gIHJldHVybiBzYXZlcjtcbn0sXG4gICAgX3N1cHBvcnRzM0QsXG4gICAgX2NyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudCh0eXBlLCBucykge1xuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudE5TID8gX2RvYy5jcmVhdGVFbGVtZW50TlMoKG5zIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKS5yZXBsYWNlKC9eaHR0cHMvLCBcImh0dHBcIiksIHR5cGUpIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgc2VydmVycyBzd2FwIGluIGh0dHBzIGZvciBodHRwIGluIHRoZSBuYW1lc3BhY2Ugd2hpY2ggY2FuIGJyZWFrIHRoaW5ncywgbWFraW5nIFwic3R5bGVcIiBpbmFjY2Vzc2libGUuXG5cbiAgcmV0dXJuIGUgJiYgZS5zdHlsZSA/IGUgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7IC8vc29tZSBlbnZpcm9ubWVudHMgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBlbGVtZW50J3Mgc3R5bGUgd2hlbiBjcmVhdGVkIHdpdGggYSBuYW1lc3BhY2UgaW4gd2hpY2ggY2FzZSB3ZSBkZWZhdWx0IHRvIHRoZSBzdGFuZGFyZCBjcmVhdGVFbGVtZW50KCkgdG8gd29yayBhcm91bmQgdGhlIGlzc3VlLiBBbHNvIG5vdGUgdGhhdCB3aGVuIEdTQVAgaXMgZW1iZWRkZWQgZGlyZWN0bHkgaW5zaWRlIGFuIFNWRyBmaWxlLCBjcmVhdGVFbGVtZW50KCkgd29uJ3QgYWxsb3cgYWNjZXNzIHRvIHRoZSBzdHlsZSBvYmplY3QgaW4gRmlyZWZveCAoc2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIwMjE1LXByb2JsZW0tdXNpbmctdHdlZW5tYXgtaW4tc3RhbmRhbG9uZS1zZWxmLWNvbnRhaW5pbmctc3ZnLWZpbGUtZXJyLWNhbm5vdC1zZXQtcHJvcGVydHktY3NzdGV4dC1vZi11bmRlZmluZWQvKS5cbn0sXG4gICAgX2dldENvbXB1dGVkUHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBza2lwUHJlZml4RmFsbGJhY2spIHtcbiAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICByZXR1cm4gY3NbcHJvcGVydHldIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkgfHwgIXNraXBQcmVmaXhGYWxsYmFjayAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHkpIHx8IHByb3BlcnR5LCAxKSB8fCBcIlwiOyAvL2NzcyB2YXJpYWJsZXMgbWF5IG5vdCBuZWVkIGNhcHMgc3dhcHBlZCBvdXQgZm9yIGRhc2hlcyBhbmQgbG93ZXJjYXNlLlxufSxcbiAgICBfcHJlZml4ZXMgPSBcIk8sTW96LG1zLE1zLFdlYmtpdFwiLnNwbGl0KFwiLFwiKSxcbiAgICBfY2hlY2tQcm9wUHJlZml4ID0gZnVuY3Rpb24gX2NoZWNrUHJvcFByZWZpeChwcm9wZXJ0eSwgZWxlbWVudCwgcHJlZmVyUHJlZml4KSB7XG4gIHZhciBlID0gZWxlbWVudCB8fCBfdGVtcERpdixcbiAgICAgIHMgPSBlLnN0eWxlLFxuICAgICAgaSA9IDU7XG5cbiAgaWYgKHByb3BlcnR5IGluIHMgJiYgIXByZWZlclByZWZpeCkge1xuICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgfVxuXG4gIHByb3BlcnR5ID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zdWJzdHIoMSk7XG5cbiAgd2hpbGUgKGktLSAmJiAhKF9wcmVmaXhlc1tpXSArIHByb3BlcnR5IGluIHMpKSB7fVxuXG4gIHJldHVybiBpIDwgMCA/IG51bGwgOiAoaSA9PT0gMyA/IFwibXNcIiA6IGkgPj0gMCA/IF9wcmVmaXhlc1tpXSA6IFwiXCIpICsgcHJvcGVydHk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZSgpIHtcbiAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBfd2luLmRvY3VtZW50O1xuICAgIF9kb2NFbGVtZW50ID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSB8fCB7XG4gICAgICBzdHlsZToge31cbiAgICB9O1xuICAgIF90ZW1wRGl2U3R5bGVyID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgX3RyYW5zZm9ybVByb3AgPSBfY2hlY2tQcm9wUHJlZml4KF90cmFuc2Zvcm1Qcm9wKTtcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIjtcbiAgICBfdGVtcERpdi5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXItd2lkdGg6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6MFwiOyAvL21ha2Ugc3VyZSB0byBvdmVycmlkZSBjZXJ0YWluIHByb3BlcnRpZXMgdGhhdCBtYXkgY29udGFtaW5hdGUgbWVhc3VyZW1lbnRzLCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBvdmVycmVhY2hpbmcgc3R5bGUgc2hlZXRzLlxuXG4gICAgX3N1cHBvcnRzM0QgPSAhIV9jaGVja1Byb3BQcmVmaXgoXCJwZXJzcGVjdGl2ZVwiKTtcbiAgICBfcmV2ZXJ0aW5nID0gZ3NhcC5jb3JlLnJldmVydGluZztcbiAgICBfcGx1Z2luSW5pdHRlZCA9IDE7XG4gIH1cbn0sXG4gICAgX2dldEJCb3hIYWNrID0gZnVuY3Rpb24gX2dldEJCb3hIYWNrKHN3YXBJZlBvc3NpYmxlKSB7XG4gIC8vd29ya3MgYXJvdW5kIGlzc3VlcyBpbiBzb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpIHRoYXQgZG9uJ3QgY29ycmVjdGx5IHJlcG9ydCBnZXRCQm94KCkgb24gU1ZHIGVsZW1lbnRzIGluc2lkZSBhIDxkZWZzPiBlbGVtZW50IGFuZC9vciA8bWFzaz4uIFdlIHRyeSBjcmVhdGluZyBhbiBTVkcsIGFkZGluZyBpdCB0byB0aGUgZG9jdW1lbnRFbGVtZW50IGFuZCB0b3NzIHRoZSBlbGVtZW50IGluIHRoZXJlIHNvIHRoYXQgaXQncyBkZWZpbml0ZWx5IHBhcnQgb2YgdGhlIHJlbmRlcmluZyB0cmVlLCB0aGVuIGdyYWIgdGhlIGJib3ggYW5kIGlmIGl0IHdvcmtzLCB3ZSBhY3R1YWxseSBzd2FwIG91dCB0aGUgb3JpZ2luYWwgZ2V0QkJveCgpIG1ldGhvZCBmb3Igb3VyIG93biB0aGF0IGRvZXMgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbmV2ZXIgZ2V0QkJveCBpcyBuZWVkZWQuIFRoaXMgaGVscHMgZW5zdXJlIHRoYXQgcGVyZm9ybWFuY2UgaXMgb3B0aW1hbCAob25seSBkbyBhbGwgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbiBhYnNvbHV0ZWx5IG5lY2Vzc2FyeS4uLm1vc3QgZWxlbWVudHMgZG9uJ3QgbmVlZCBpdCkuXG4gIHZhciBzdmcgPSBfY3JlYXRlRWxlbWVudChcInN2Z1wiLCB0aGlzLm93bmVyU1ZHRWxlbWVudCAmJiB0aGlzLm93bmVyU1ZHRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiKSB8fCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpLFxuICAgICAgb2xkUGFyZW50ID0gdGhpcy5wYXJlbnROb2RlLFxuICAgICAgb2xkU2libGluZyA9IHRoaXMubmV4dFNpYmxpbmcsXG4gICAgICBvbGRDU1MgPSB0aGlzLnN0eWxlLmNzc1RleHQsXG4gICAgICBiYm94O1xuXG4gIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG5cbiAgc3ZnLmFwcGVuZENoaWxkKHRoaXMpO1xuICB0aGlzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgaWYgKHN3YXBJZlBvc3NpYmxlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGJib3ggPSB0aGlzLmdldEJCb3goKTtcbiAgICAgIHRoaXMuX2dzYXBCQm94ID0gdGhpcy5nZXRCQm94OyAvL3N0b3JlIHRoZSBvcmlnaW5hbFxuXG4gICAgICB0aGlzLmdldEJCb3ggPSBfZ2V0QkJveEhhY2s7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSBlbHNlIGlmICh0aGlzLl9nc2FwQkJveCkge1xuICAgIGJib3ggPSB0aGlzLl9nc2FwQkJveCgpO1xuICB9XG5cbiAgaWYgKG9sZFBhcmVudCkge1xuICAgIGlmIChvbGRTaWJsaW5nKSB7XG4gICAgICBvbGRQYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIG9sZFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQoc3ZnKTtcblxuICB0aGlzLnN0eWxlLmNzc1RleHQgPSBvbGRDU1M7XG4gIHJldHVybiBiYm94O1xufSxcbiAgICBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzID0gZnVuY3Rpb24gX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIGF0dHJpYnV0ZXNBcnJheSkge1xuICB2YXIgaSA9IGF0dHJpYnV0ZXNBcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSkpIHtcbiAgICAgIHJldHVybiB0YXJnZXQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRCQm94ID0gZnVuY3Rpb24gX2dldEJCb3godGFyZ2V0KSB7XG4gIHZhciBib3VuZHM7XG5cbiAgdHJ5IHtcbiAgICBib3VuZHMgPSB0YXJnZXQuZ2V0QkJveCgpOyAvL0ZpcmVmb3ggdGhyb3dzIGVycm9ycyBpZiB5b3UgdHJ5IGNhbGxpbmcgZ2V0QkJveCgpIG9uIGFuIFNWRyBlbGVtZW50IHRoYXQncyBub3QgcmVuZGVyZWQgKGxpa2UgaW4gYSA8c3ltYm9sPiBvciA8ZGVmcz4pLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MTIxMThcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveEhhY2suY2FsbCh0YXJnZXQsIHRydWUpO1xuICB9XG5cbiAgYm91bmRzICYmIChib3VuZHMud2lkdGggfHwgYm91bmRzLmhlaWdodCkgfHwgdGFyZ2V0LmdldEJCb3ggPT09IF9nZXRCQm94SGFjayB8fCAoYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKSk7IC8vc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSBtaXNyZXBvcnQgdGhlIGJvdW5kcyBpZiB0aGUgZWxlbWVudCBoYXMgemVybyB3aWR0aCBhbmQgaGVpZ2h0IChpdCBqdXN0IGFzc3VtZXMgaXQncyBhdCB4OjAsIHk6MCksIHRodXMgd2UgbmVlZCB0byBtYW51YWxseSBncmFiIHRoZSBwb3NpdGlvbiBpbiB0aGF0IGNhc2UuXG5cbiAgcmV0dXJuIGJvdW5kcyAmJiAhYm91bmRzLndpZHRoICYmICFib3VuZHMueCAmJiAhYm91bmRzLnkgPyB7XG4gICAgeDogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ4XCIsIFwiY3hcIiwgXCJ4MVwiXSkgfHwgMCxcbiAgICB5OiArX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIFtcInlcIiwgXCJjeVwiLCBcInkxXCJdKSB8fCAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9IDogYm91bmRzO1xufSxcbiAgICBfaXNTVkcgPSBmdW5jdGlvbiBfaXNTVkcoZSkge1xuICByZXR1cm4gISEoZS5nZXRDVE0gJiYgKCFlLnBhcmVudE5vZGUgfHwgZS5vd25lclNWR0VsZW1lbnQpICYmIF9nZXRCQm94KGUpKTtcbn0sXG4gICAgLy9yZXBvcnRzIGlmIHRoZSBlbGVtZW50IGlzIGFuIFNWRyBvbiB3aGljaCBnZXRCQm94KCkgYWN0dWFsbHkgd29ya3Ncbl9yZW1vdmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGlmIChwcm9wZXJ0eSkge1xuICAgIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgZmlyc3QyQ2hhcnM7XG5cbiAgICBpZiAocHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHByb3BlcnR5ICE9PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCkge1xuICAgICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgICB9XG5cbiAgICBpZiAoc3R5bGUucmVtb3ZlUHJvcGVydHkpIHtcbiAgICAgIGZpcnN0MkNoYXJzID0gcHJvcGVydHkuc3Vic3RyKDAsIDIpO1xuXG4gICAgICBpZiAoZmlyc3QyQ2hhcnMgPT09IFwibXNcIiB8fCBwcm9wZXJ0eS5zdWJzdHIoMCwgNikgPT09IFwid2Via2l0XCIpIHtcbiAgICAgICAgLy9NaWNyb3NvZnQgYW5kIHNvbWUgV2Via2l0IGJyb3dzZXJzIGRvbid0IGNvbmZvcm0gdG8gdGhlIHN0YW5kYXJkIG9mIGNhcGl0YWxpemluZyB0aGUgZmlyc3QgcHJlZml4IGNoYXJhY3Rlciwgc28gd2UgYWRqdXN0IHNvIHRoYXQgd2hlbiB3ZSBwcmVmaXggdGhlIGNhcHMgd2l0aCBhIGRhc2gsIGl0J3MgY29ycmVjdCAob3RoZXJ3aXNlIGl0J2QgYmUgXCJtcy10cmFuc2Zvcm1cIiBpbnN0ZWFkIG9mIFwiLW1zLXRyYW5zZm9ybVwiIGZvciBJRTksIGZvciBleGFtcGxlKVxuICAgICAgICBwcm9wZXJ0eSA9IFwiLVwiICsgcHJvcGVydHk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KGZpcnN0MkNoYXJzID09PSBcIi0tXCIgPyBwcm9wZXJ0eSA6IHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL25vdGU6IG9sZCB2ZXJzaW9ucyBvZiBJRSB1c2UgXCJyZW1vdmVBdHRyaWJ1dGUoKVwiIGluc3RlYWQgb2YgXCJyZW1vdmVQcm9wZXJ0eSgpXCJcbiAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9hZGROb25Ud2VlbmluZ1BUID0gZnVuY3Rpb24gX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBiZWdpbm5pbmcsIGVuZCwgb25seVNldEF0RW5kKSB7XG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgb25seVNldEF0RW5kID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSk7XG4gIHBsdWdpbi5fcHQgPSBwdDtcbiAgcHQuYiA9IGJlZ2lubmluZztcbiAgcHQuZSA9IGVuZDtcblxuICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX25vbkNvbnZlcnRpYmxlVW5pdHMgPSB7XG4gIGRlZzogMSxcbiAgcmFkOiAxLFxuICB0dXJuOiAxXG59LFxuICAgIF9ub25TdGFuZGFyZExheW91dHMgPSB7XG4gIGdyaWQ6IDEsXG4gIGZsZXg6IDFcbn0sXG4gICAgLy90YWtlcyBhIHNpbmdsZSB2YWx1ZSBsaWtlIDIwcHggYW5kIGNvbnZlcnRzIGl0IHRvIHRoZSB1bml0IHNwZWNpZmllZCwgbGlrZSBcIiVcIiwgcmV0dXJuaW5nIG9ubHkgdGhlIG51bWVyaWMgYW1vdW50LlxuX2NvbnZlcnRUb1VuaXQgPSBmdW5jdGlvbiBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgdW5pdCkge1xuICB2YXIgY3VyVmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwLFxuICAgICAgY3VyVW5pdCA9ICh2YWx1ZSArIFwiXCIpLnRyaW0oKS5zdWJzdHIoKGN1clZhbHVlICsgXCJcIikubGVuZ3RoKSB8fCBcInB4XCIsXG4gICAgICAvLyBzb21lIGJyb3dzZXJzIGxlYXZlIGV4dHJhIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiBDU1MgdmFyaWFibGVzLCBoZW5jZSB0aGUgbmVlZCB0byB0cmltKClcbiAgc3R5bGUgPSBfdGVtcERpdi5zdHlsZSxcbiAgICAgIGhvcml6b250YWwgPSBfaG9yaXpvbnRhbEV4cC50ZXN0KHByb3BlcnR5KSxcbiAgICAgIGlzUm9vdFNWRyA9IHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCIsXG4gICAgICBtZWFzdXJlUHJvcGVydHkgPSAoaXNSb290U1ZHID8gXCJjbGllbnRcIiA6IFwib2Zmc2V0XCIpICsgKGhvcml6b250YWwgPyBcIldpZHRoXCIgOiBcIkhlaWdodFwiKSxcbiAgICAgIGFtb3VudCA9IDEwMCxcbiAgICAgIHRvUGl4ZWxzID0gdW5pdCA9PT0gXCJweFwiLFxuICAgICAgdG9QZXJjZW50ID0gdW5pdCA9PT0gXCIlXCIsXG4gICAgICBweCxcbiAgICAgIHBhcmVudCxcbiAgICAgIGNhY2hlLFxuICAgICAgaXNTVkc7XG5cbiAgaWYgKHVuaXQgPT09IGN1clVuaXQgfHwgIWN1clZhbHVlIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW3VuaXRdIHx8IF9ub25Db252ZXJ0aWJsZVVuaXRzW2N1clVuaXRdKSB7XG4gICAgcmV0dXJuIGN1clZhbHVlO1xuICB9XG5cbiAgY3VyVW5pdCAhPT0gXCJweFwiICYmICF0b1BpeGVscyAmJiAoY3VyVmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgXCJweFwiKSk7XG4gIGlzU1ZHID0gdGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KTtcblxuICBpZiAoKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gfHwgfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSkpIHtcbiAgICBweCA9IGlzU1ZHID8gdGFyZ2V0LmdldEJCb3goKVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gOiB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICByZXR1cm4gX3JvdW5kKHRvUGVyY2VudCA/IGN1clZhbHVlIC8gcHggKiBhbW91bnQgOiBjdXJWYWx1ZSAvIDEwMCAqIHB4KTtcbiAgfVxuXG4gIHN0eWxlW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA9IGFtb3VudCArICh0b1BpeGVscyA/IGN1clVuaXQgOiB1bml0KTtcbiAgcGFyZW50ID0gfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSB8fCB1bml0ID09PSBcImVtXCIgJiYgdGFyZ2V0LmFwcGVuZENoaWxkICYmICFpc1Jvb3RTVkcgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50Tm9kZTtcblxuICBpZiAoaXNTVkcpIHtcbiAgICBwYXJlbnQgPSAodGFyZ2V0Lm93bmVyU1ZHRWxlbWVudCB8fCB7fSkucGFyZW50Tm9kZTtcbiAgfVxuXG4gIGlmICghcGFyZW50IHx8IHBhcmVudCA9PT0gX2RvYyB8fCAhcGFyZW50LmFwcGVuZENoaWxkKSB7XG4gICAgcGFyZW50ID0gX2RvYy5ib2R5O1xuICB9XG5cbiAgY2FjaGUgPSBwYXJlbnQuX2dzYXA7XG5cbiAgaWYgKGNhY2hlICYmIHRvUGVyY2VudCAmJiBjYWNoZS53aWR0aCAmJiBob3Jpem9udGFsICYmIGNhY2hlLnRpbWUgPT09IF90aWNrZXIudGltZSAmJiAhY2FjaGUudW5jYWNoZSkge1xuICAgIHJldHVybiBfcm91bmQoY3VyVmFsdWUgLyBjYWNoZS53aWR0aCAqIGFtb3VudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRvUGVyY2VudCAmJiAocHJvcGVydHkgPT09IFwiaGVpZ2h0XCIgfHwgcHJvcGVydHkgPT09IFwid2lkdGhcIikpIHtcbiAgICAgIC8vIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCB3aWR0aC9oZWlnaHQgdGhhdCdzIGluc2lkZSBhIGNvbnRhaW5lciB3aXRoIHBhZGRpbmcgYW5kL29yIGl0J3MgYSBmbGV4Ym94L2dyaWQgY29udGFpbmVyLCB3ZSBtdXN0IGFwcGx5IGl0IHRvIHRoZSB0YXJnZXQgaXRzZWxmIHJhdGhlciB0aGFuIHRoZSBfdGVtcERpdiBpbiBvcmRlciB0byBlbnN1cmUgY29tcGxldGUgYWNjdXJhY3ksIGZhY3RvcmluZyBpbiB0aGUgcGFyZW50J3MgcGFkZGluZy5cbiAgICAgIHZhciB2ID0gdGFyZ2V0LnN0eWxlW3Byb3BlcnR5XTtcbiAgICAgIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSBhbW91bnQgKyB1bml0O1xuICAgICAgcHggPSB0YXJnZXRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICAgIHYgPyB0YXJnZXQuc3R5bGVbcHJvcGVydHldID0gdiA6IF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHRvUGVyY2VudCB8fCBjdXJVbml0ID09PSBcIiVcIikgJiYgIV9ub25TdGFuZGFyZExheW91dHNbX2dldENvbXB1dGVkUHJvcGVydHkocGFyZW50LCBcImRpc3BsYXlcIildICYmIChzdHlsZS5wb3NpdGlvbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJwb3NpdGlvblwiKSk7XG4gICAgICBwYXJlbnQgPT09IHRhcmdldCAmJiAoc3R5bGUucG9zaXRpb24gPSBcInN0YXRpY1wiKTsgLy8gbGlrZSBmb3IgYm9yZGVyUmFkaXVzLCBpZiBpdCdzIGEgJSB3ZSBtdXN0IGhhdmUgaXQgcmVsYXRpdmUgdG8gdGhlIHRhcmdldCBpdHNlbGYgYnV0IHRoYXQgbWF5IG5vdCBoYXZlIHBvc2l0aW9uOiByZWxhdGl2ZSBvciBwb3NpdGlvbjogYWJzb2x1dGUgaW4gd2hpY2ggY2FzZSBpdCdkIGdvIHVwIHRoZSBjaGFpbiB1bnRpbCBpdCBmaW5kcyBpdHMgb2Zmc2V0UGFyZW50IChiYWQpLiBwb3NpdGlvbjogc3RhdGljIHByb3RlY3RzIGFnYWluc3QgdGhhdC5cblxuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcbiAgICAgIHB4ID0gX3RlbXBEaXZbbWVhc3VyZVByb3BlcnR5XTtcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChfdGVtcERpdik7XG4gICAgICBzdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICB9XG5cbiAgICBpZiAoaG9yaXpvbnRhbCAmJiB0b1BlcmNlbnQpIHtcbiAgICAgIGNhY2hlID0gX2dldENhY2hlKHBhcmVudCk7XG4gICAgICBjYWNoZS50aW1lID0gX3RpY2tlci50aW1lO1xuICAgICAgY2FjaGUud2lkdGggPSBwYXJlbnRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX3JvdW5kKHRvUGl4ZWxzID8gcHggKiBjdXJWYWx1ZSAvIGFtb3VudCA6IHB4ICYmIGN1clZhbHVlID8gYW1vdW50IC8gcHggKiBjdXJWYWx1ZSA6IDApO1xufSxcbiAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gIHZhciB2YWx1ZTtcbiAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG5cbiAgaWYgKHByb3BlcnR5IGluIF9wcm9wZXJ0eUFsaWFzZXMgJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuXG4gICAgaWYgKH5wcm9wZXJ0eS5pbmRleE9mKFwiLFwiKSkge1xuICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5zcGxpdChcIixcIilbMF07XG4gICAgfVxuICB9XG5cbiAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICB2YWx1ZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpO1xuICAgIHZhbHVlID0gcHJvcGVydHkgIT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyB2YWx1ZVtwcm9wZXJ0eV0gOiB2YWx1ZS5zdmcgPyB2YWx1ZS5vcmlnaW4gOiBfZmlyc3RUd29Pbmx5KF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApKSArIFwiIFwiICsgdmFsdWUuek9yaWdpbiArIFwicHhcIjtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG5cbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09PSBcImF1dG9cIiB8fCB1bmNhY2hlIHx8IH4odmFsdWUgKyBcIlwiKS5pbmRleE9mKFwiY2FsYyhcIikpIHtcbiAgICAgIHZhbHVlID0gX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0gJiYgX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0odGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkgfHwgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IChwcm9wZXJ0eSA9PT0gXCJvcGFjaXR5XCIgPyAxIDogMCk7IC8vIG5vdGU6IHNvbWUgYnJvd3NlcnMsIGxpa2UgRmlyZWZveCwgZG9uJ3QgcmVwb3J0IGJvcmRlclJhZGl1cyBjb3JyZWN0bHkhIEluc3RlYWQsIGl0IG9ubHkgcmVwb3J0cyBldmVyeSBjb3JuZXIgbGlrZSAgYm9yZGVyVG9wTGVmdFJhZGl1c1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bml0ICYmICF+KHZhbHVlICsgXCJcIikudHJpbSgpLmluZGV4T2YoXCIgXCIpID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpICsgdW5pdCA6IHZhbHVlO1xufSxcbiAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nID0gZnVuY3Rpb24gX3R3ZWVuQ29tcGxleENTU1N0cmluZyh0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQpIHtcbiAgLy8gbm90ZTogd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA9PT0gXCJub25lXCIpIHtcbiAgICAvLyBzb21lIGJyb3dzZXJzIGxpa2UgU2FmYXJpIGFjdHVhbGx5IFBSRUZFUiB0aGUgcHJlZml4ZWQgcHJvcGVydHkgYW5kIG1pcy1yZXBvcnQgdGhlIHVucHJlZml4ZWQgdmFsdWUgbGlrZSBjbGlwUGF0aCAoQlVHKS4gSW4gb3RoZXIgd29yZHMsIGV2ZW4gdGhvdWdoIGNsaXBQYXRoIGV4aXN0cyBpbiB0aGUgc3R5bGUgKFwiY2xpcFBhdGhcIiBpbiB0YXJnZXQuc3R5bGUpIGFuZCBpdCdzIHNldCBpbiB0aGUgQ1NTIHByb3Blcmx5IChhbG9uZyB3aXRoIC13ZWJraXQtY2xpcC1wYXRoKSwgU2FmYXJpIHJlcG9ydHMgY2xpcFBhdGggYXMgXCJub25lXCIgd2hlcmVhcyBXZWJraXRDbGlwUGF0aCByZXBvcnRzIGFjY3VyYXRlbHkgbGlrZSBcImVsbGlwc2UoMTAwJSAwJSBhdCA1MCUgMCUpXCIsIHNvIGluIHRoaXMgY2FzZSB3ZSBtdXN0IFNXSVRDSCB0byB1c2luZyB0aGUgcHJlZml4ZWQgcHJvcGVydHkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzE4MzEwLWNsaXBwYXRoLWRvZXNudC13b3JrLW9uLWlvcy9cbiAgICB2YXIgcCA9IF9jaGVja1Byb3BQcmVmaXgocHJvcCwgdGFyZ2V0LCAxKSxcbiAgICAgICAgcyA9IHAgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwLCAxKTtcblxuICAgIGlmIChzICYmIHMgIT09IHN0YXJ0KSB7XG4gICAgICBwcm9wID0gcDtcbiAgICAgIHN0YXJ0ID0gcztcbiAgICB9IGVsc2UgaWYgKHByb3AgPT09IFwiYm9yZGVyQ29sb3JcIikge1xuICAgICAgc3RhcnQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwiYm9yZGVyVG9wQ29sb3JcIik7IC8vIEZpcmVmb3ggYnVnOiBhbHdheXMgcmVwb3J0cyBcImJvcmRlckNvbG9yXCIgYXMgXCJcIiwgc28gd2UgbXVzdCBmYWxsIGJhY2sgdG8gYm9yZGVyVG9wQ29sb3IuIFNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yNDU4My1ob3ctdG8tcmV0dXJuLWNvbG9ycy10aGF0LWktaGFkLWFmdGVyLXJldmVyc2UvXG4gICAgfVxuICB9XG5cbiAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LnN0eWxlLCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZyksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIGEsXG4gICAgICByZXN1bHQsXG4gICAgICBzdGFydFZhbHVlcyxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgY29sb3IsXG4gICAgICBzdGFydFZhbHVlLFxuICAgICAgZW5kVmFsdWUsXG4gICAgICBlbmROdW0sXG4gICAgICBjaHVuayxcbiAgICAgIGVuZFVuaXQsXG4gICAgICBzdGFydFVuaXQsXG4gICAgICBlbmRWYWx1ZXM7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy8gZW5zdXJlIHZhbHVlcyBhcmUgc3RyaW5nc1xuXG4gIGVuZCArPSBcIlwiO1xuXG4gIGlmIChlbmQgPT09IFwiYXV0b1wiKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wXTtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBlbmQ7XG4gICAgZW5kID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB8fCBlbmQ7XG4gICAgc3RhcnRWYWx1ZSA/IHRhcmdldC5zdHlsZVtwcm9wXSA9IHN0YXJ0VmFsdWUgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgfVxuXG4gIGEgPSBbc3RhcnQsIGVuZF07XG5cbiAgX2NvbG9yU3RyaW5nRmlsdGVyKGEpOyAvLyBwYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLiBJZiBjb2xvcnMgYXJlIGZvdW5kLCBpdCByZXR1cm5zIHRydWUgYW5kIHRoZW4gd2UgbXVzdCBtYXRjaCB3aGVyZSB0aGUgY29sb3Igc2hvd3MgdXAgb3JkZXItd2lzZSBiZWNhdXNlIGZvciB0aGluZ3MgbGlrZSBib3hTaGFkb3csIHNvbWV0aW1lcyB0aGUgYnJvd3NlciBwcm92aWRlcyB0aGUgY29tcHV0ZWQgdmFsdWVzIHdpdGggdGhlIGNvbG9yIEZJUlNULCBidXQgdGhlIHVzZXIgcHJvdmlkZXMgaXQgd2l0aCB0aGUgY29sb3IgTEFTVCwgc28gZmxpcCB0aGVtIGlmIG5lY2Vzc2FyeS4gU2FtZSBmb3IgZHJvcC1zaGFkb3coKS5cblxuXG4gIHN0YXJ0ID0gYVswXTtcbiAgZW5kID0gYVsxXTtcbiAgc3RhcnRWYWx1ZXMgPSBzdGFydC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICBlbmRWYWx1ZXMgPSBlbmQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcblxuICBpZiAoZW5kVmFsdWVzLmxlbmd0aCkge1xuICAgIHdoaWxlIChyZXN1bHQgPSBfbnVtV2l0aFVuaXRFeHAuZXhlYyhlbmQpKSB7XG4gICAgICBlbmRWYWx1ZSA9IHJlc3VsdFswXTtcbiAgICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIgfHwgY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJoc2xhKFwiKSB7XG4gICAgICAgIGNvbG9yID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZFZhbHVlICE9PSAoc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWVzW21hdGNoSW5kZXgrK10gfHwgXCJcIikpIHtcbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpIHx8IDA7XG4gICAgICAgIHN0YXJ0VW5pdCA9IHN0YXJ0VmFsdWUuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKGVuZFZhbHVlID0gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZFZhbHVlKSArIHN0YXJ0VW5pdCk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICBlbmRVbml0ID0gZW5kVmFsdWUuc3Vic3RyKChlbmROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBpbmRleCA9IF9udW1XaXRoVW5pdEV4cC5sYXN0SW5kZXggLSBlbmRVbml0Lmxlbmd0aDtcblxuICAgICAgICBpZiAoIWVuZFVuaXQpIHtcbiAgICAgICAgICAvL2lmIHNvbWV0aGluZyBsaWtlIFwicGVyc3BlY3RpdmU6MzAwXCIgaXMgcGFzc2VkIGluIGFuZCB3ZSBtdXN0IGFkZCBhIHVuaXQgdG8gdGhlIGVuZFxuICAgICAgICAgIGVuZFVuaXQgPSBlbmRVbml0IHx8IF9jb25maWcudW5pdHNbcHJvcF0gfHwgc3RhcnRVbml0O1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSBlbmQubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgKz0gZW5kVW5pdDtcbiAgICAgICAgICAgIHB0LmUgKz0gZW5kVW5pdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0KSB7XG4gICAgICAgICAgc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3AsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIHx8IDA7XG4gICAgICAgIH0gLy8gdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuXG4gICAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICAgIGM6IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCB8fCBwcm9wID09PSBcInpJbmRleFwiID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG4gIH0gZWxzZSB7XG4gICAgcHQuciA9IHByb3AgPT09IFwiZGlzcGxheVwiICYmIGVuZCA9PT0gXCJub25lXCIgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlO1xuICB9XG5cbiAgX3JlbEV4cC50ZXN0KGVuZCkgJiYgKHB0LmUgPSAwKTsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhbm90aGVyIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9rZXl3b3JkVG9QZXJjZW50ID0ge1xuICB0b3A6IFwiMCVcIixcbiAgYm90dG9tOiBcIjEwMCVcIixcbiAgbGVmdDogXCIwJVwiLFxuICByaWdodDogXCIxMDAlXCIsXG4gIGNlbnRlcjogXCI1MCVcIlxufSxcbiAgICBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyA9IGZ1bmN0aW9uIF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzKHZhbHVlKSB7XG4gIHZhciBzcGxpdCA9IHZhbHVlLnNwbGl0KFwiIFwiKSxcbiAgICAgIHggPSBzcGxpdFswXSxcbiAgICAgIHkgPSBzcGxpdFsxXSB8fCBcIjUwJVwiO1xuXG4gIGlmICh4ID09PSBcInRvcFwiIHx8IHggPT09IFwiYm90dG9tXCIgfHwgeSA9PT0gXCJsZWZ0XCIgfHwgeSA9PT0gXCJyaWdodFwiKSB7XG4gICAgLy90aGUgdXNlciBwcm92aWRlZCB0aGVtIGluIHRoZSB3cm9uZyBvcmRlciwgc28gZmxpcCB0aGVtXG4gICAgdmFsdWUgPSB4O1xuICAgIHggPSB5O1xuICAgIHkgPSB2YWx1ZTtcbiAgfVxuXG4gIHNwbGl0WzBdID0gX2tleXdvcmRUb1BlcmNlbnRbeF0gfHwgeDtcbiAgc3BsaXRbMV0gPSBfa2V5d29yZFRvUGVyY2VudFt5XSB8fCB5O1xuICByZXR1cm4gc3BsaXQuam9pbihcIiBcIik7XG59LFxuICAgIF9yZW5kZXJDbGVhclByb3BzID0gZnVuY3Rpb24gX3JlbmRlckNsZWFyUHJvcHMocmF0aW8sIGRhdGEpIHtcbiAgaWYgKGRhdGEudHdlZW4gJiYgZGF0YS50d2Vlbi5fdGltZSA9PT0gZGF0YS50d2Vlbi5fZHVyKSB7XG4gICAgdmFyIHRhcmdldCA9IGRhdGEudCxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHByb3BzID0gZGF0YS51LFxuICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgICAgcHJvcCxcbiAgICAgICAgY2xlYXJUcmFuc2Zvcm1zLFxuICAgICAgICBpO1xuXG4gICAgaWYgKHByb3BzID09PSBcImFsbFwiIHx8IHByb3BzID09PSB0cnVlKSB7XG4gICAgICBzdHlsZS5jc3NUZXh0ID0gXCJcIjtcbiAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzID0gcHJvcHMuc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgIHByb3AgPSBwcm9wc1tpXTtcblxuICAgICAgICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BdKSB7XG4gICAgICAgICAgY2xlYXJUcmFuc2Zvcm1zID0gMTtcbiAgICAgICAgICBwcm9wID0gcHJvcCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IF90cmFuc2Zvcm1PcmlnaW5Qcm9wIDogX3RyYW5zZm9ybVByb3A7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xlYXJUcmFuc2Zvcm1zKSB7XG4gICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZS5zdmcgJiYgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcblxuICAgICAgICBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTsgLy8gZm9yY2UgYWxsIHRoZSBjYWNoZWQgdmFsdWVzIGJhY2sgdG8gXCJub3JtYWxcIi9pZGVudGl0eSwgb3RoZXJ3aXNlIGlmIHRoZXJlJ3MgYW5vdGhlciB0d2VlbiB0aGF0J3MgYWxyZWFkeSBzZXQgdG8gcmVuZGVyIHRyYW5zZm9ybXMgb24gdGhpcyBlbGVtZW50LCBpdCBjb3VsZCBkaXNwbGF5IHRoZSB3cm9uZyB2YWx1ZXMuXG5cblxuICAgICAgICBjYWNoZS51bmNhY2hlID0gMTtcblxuICAgICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgLy8gbm90ZTogc3BlY2lhbFByb3BzIHNob3VsZCByZXR1cm4gMSBpZiAoYW5kIG9ubHkgaWYpIHRoZXkgaGF2ZSBhIG5vbi16ZXJvIHByaW9yaXR5LiBJdCBpbmRpY2F0ZXMgd2UgbmVlZCB0byBzb3J0IHRoZSBsaW5rZWQgbGlzdC5cbl9zcGVjaWFsUHJvcHMgPSB7XG4gIGNsZWFyUHJvcHM6IGZ1bmN0aW9uIGNsZWFyUHJvcHMocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICBpZiAodHdlZW4uZGF0YSAhPT0gXCJpc0Zyb21TdGFydFwiKSB7XG4gICAgICB2YXIgcHQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAwLCBfcmVuZGVyQ2xlYXJQcm9wcyk7XG4gICAgICBwdC51ID0gZW5kVmFsdWU7XG4gICAgICBwdC5wciA9IC0xMDtcbiAgICAgIHB0LnR3ZWVuID0gdHdlZW47XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICAvKiBjbGFzc05hbWUgZmVhdHVyZSAoYWJvdXQgMC40a2IgZ3ppcHBlZCkuXG4gICwgY2xhc3NOYW1lKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gIFx0bGV0IF9yZW5kZXJDbGFzc05hbWUgPSAocmF0aW8sIGRhdGEpID0+IHtcbiAgXHRcdFx0ZGF0YS5jc3MucmVuZGVyKHJhdGlvLCBkYXRhLmNzcyk7XG4gIFx0XHRcdGlmICghcmF0aW8gfHwgcmF0aW8gPT09IDEpIHtcbiAgXHRcdFx0XHRsZXQgaW5saW5lID0gZGF0YS5ybXYsXG4gIFx0XHRcdFx0XHR0YXJnZXQgPSBkYXRhLnQsXG4gIFx0XHRcdFx0XHRwO1xuICBcdFx0XHRcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYik7XG4gIFx0XHRcdFx0Zm9yIChwIGluIGlubGluZSkge1xuICBcdFx0XHRcdFx0X3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcCk7XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHR9LFxuICBcdFx0X2dldEFsbFN0eWxlcyA9ICh0YXJnZXQpID0+IHtcbiAgXHRcdFx0bGV0IHN0eWxlcyA9IHt9LFxuICBcdFx0XHRcdGNvbXB1dGVkID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICBcdFx0XHRcdHA7XG4gIFx0XHRcdGZvciAocCBpbiBjb21wdXRlZCkge1xuICBcdFx0XHRcdGlmIChpc05hTihwKSAmJiBwICE9PSBcImNzc1RleHRcIiAmJiBwICE9PSBcImxlbmd0aFwiKSB7XG4gIFx0XHRcdFx0XHRzdHlsZXNbcF0gPSBjb21wdXRlZFtwXTtcbiAgXHRcdFx0XHR9XG4gIFx0XHRcdH1cbiAgXHRcdFx0X3NldERlZmF1bHRzKHN0eWxlcywgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSkpO1xuICBcdFx0XHRyZXR1cm4gc3R5bGVzO1xuICBcdFx0fSxcbiAgXHRcdHN0YXJ0Q2xhc3NMaXN0ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLFxuICBcdFx0c3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gIFx0XHRjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCxcbiAgXHRcdGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICBcdFx0Y2xhc3NQVCA9IGNhY2hlLmNsYXNzUFQsXG4gIFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kID0ge30sXG4gIFx0XHRkYXRhID0ge3Q6dGFyZ2V0LCBwbHVnaW46cGx1Z2luLCBybXY6aW5saW5lVG9SZW1vdmVBdEVuZCwgYjpzdGFydENsYXNzTGlzdCwgZTooZW5kVmFsdWUuY2hhckF0KDEpICE9PSBcIj1cIikgPyBlbmRWYWx1ZSA6IHN0YXJ0Q2xhc3NMaXN0LnJlcGxhY2UobmV3IFJlZ0V4cChcIig/OlxcXFxzfF4pXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgKyBcIig/IVtcXFxcdy1dKVwiKSwgXCJcIikgKyAoKGVuZFZhbHVlLmNoYXJBdCgwKSA9PT0gXCIrXCIpID8gXCIgXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgOiBcIlwiKX0sXG4gIFx0XHRjaGFuZ2luZ1ZhcnMgPSB7fSxcbiAgXHRcdHN0YXJ0VmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0KSxcbiAgXHRcdHRyYW5zZm9ybVJlbGF0ZWQgPSAvKHRyYW5zZm9ybXxwZXJzcGVjdGl2ZSkvaSxcbiAgXHRcdGVuZFZhcnMsIHA7XG4gIFx0aWYgKGNsYXNzUFQpIHtcbiAgXHRcdGNsYXNzUFQucigxLCBjbGFzc1BULmQpO1xuICBcdFx0X3JlbW92ZUxpbmtlZExpc3RJdGVtKGNsYXNzUFQuZC5wbHVnaW4sIGNsYXNzUFQsIFwiX3B0XCIpO1xuICBcdH1cbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZGF0YS5lKTtcbiAgXHRlbmRWYXJzID0gX2dldEFsbFN0eWxlcyh0YXJnZXQsIHRydWUpO1xuICBcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBzdGFydENsYXNzTGlzdCk7XG4gIFx0Zm9yIChwIGluIGVuZFZhcnMpIHtcbiAgXHRcdGlmIChlbmRWYXJzW3BdICE9PSBzdGFydFZhcnNbcF0gJiYgIXRyYW5zZm9ybVJlbGF0ZWQudGVzdChwKSkge1xuICBcdFx0XHRjaGFuZ2luZ1ZhcnNbcF0gPSBlbmRWYXJzW3BdO1xuICBcdFx0XHRpZiAoIXN0eWxlW3BdICYmIHN0eWxlW3BdICE9PSBcIjBcIikge1xuICBcdFx0XHRcdGlubGluZVRvUmVtb3ZlQXRFbmRbcF0gPSAxO1xuICBcdFx0XHR9XG4gIFx0XHR9XG4gIFx0fVxuICBcdGNhY2hlLmNsYXNzUFQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIFwiY2xhc3NOYW1lXCIsIDAsIDAsIF9yZW5kZXJDbGFzc05hbWUsIGRhdGEsIDAsIC0xMSk7XG4gIFx0aWYgKHN0eWxlLmNzc1RleHQgIT09IGNzc1RleHQpIHsgLy9vbmx5IGFwcGx5IGlmIHRoaW5ncyBjaGFuZ2UuIE90aGVyd2lzZSwgaW4gY2FzZXMgbGlrZSBhIGJhY2tncm91bmQtaW1hZ2UgdGhhdCdzIHB1bGxlZCBkeW5hbWljYWxseSwgaXQgY291bGQgY2F1c2UgYSByZWZyZXNoLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjAzNjgtcG9zc2libGUtZ3NhcC1idWctc3dpdGNoaW5nLWNsYXNzbmFtZXMtaW4tY2hyb21lLy5cbiAgXHRcdHN0eWxlLmNzc1RleHQgPSBjc3NUZXh0OyAvL3dlIHJlY29yZGVkIGNzc1RleHQgYmVmb3JlIHdlIHN3YXBwZWQgY2xhc3NlcyBhbmQgcmFuIF9nZXRBbGxTdHlsZXMoKSBiZWNhdXNlIGluIGNhc2VzIHdoZW4gYSBjbGFzc05hbWUgdHdlZW4gaXMgb3ZlcndyaXR0ZW4sIHdlIHJlbW92ZSBhbGwgdGhlIHJlbGF0ZWQgdHdlZW5pbmcgcHJvcGVydGllcyBmcm9tIHRoYXQgY2xhc3MgY2hhbmdlIChvdGhlcndpc2UgY2xhc3Mtc3BlY2lmaWMgc3R1ZmYgY2FuJ3Qgb3ZlcnJpZGUgcHJvcGVydGllcyB3ZSd2ZSBkaXJlY3RseSBzZXQgb24gdGhlIHRhcmdldCdzIHN0eWxlIG9iamVjdCBkdWUgdG8gc3BlY2lmaWNpdHkpLlxuICBcdH1cbiAgXHRfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB0cnVlKTsgLy90byBjbGVhciB0aGUgY2FjaGluZyBvZiB0cmFuc2Zvcm1zXG4gIFx0ZGF0YS5jc3MgPSBuZXcgZ3NhcC5wbHVnaW5zLmNzcygpO1xuICBcdGRhdGEuY3NzLmluaXQodGFyZ2V0LCBjaGFuZ2luZ1ZhcnMsIHR3ZWVuKTtcbiAgXHRwbHVnaW4uX3Byb3BzLnB1c2goLi4uZGF0YS5jc3MuX3Byb3BzKTtcbiAgXHRyZXR1cm4gMTtcbiAgfVxuICAqL1xuXG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRSQU5TRk9STVNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl9pZGVudGl0eTJETWF0cml4ID0gWzEsIDAsIDAsIDEsIDAsIDBdLFxuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllcyA9IHt9LFxuICAgIF9pc051bGxUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfaXNOdWxsVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiB8fCB2YWx1ZSA9PT0gXCJub25lXCIgfHwgIXZhbHVlO1xufSxcbiAgICBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpIHtcbiAgdmFyIG1hdHJpeFN0cmluZyA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gIHJldHVybiBfaXNOdWxsVHJhbnNmb3JtKG1hdHJpeFN0cmluZykgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeFN0cmluZy5zdWJzdHIoNykubWF0Y2goX251bUV4cCkubWFwKF9yb3VuZCk7XG59LFxuICAgIF9nZXRNYXRyaXggPSBmdW5jdGlvbiBfZ2V0TWF0cml4KHRhcmdldCwgZm9yY2UyRCkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgX2dldENhY2hlKHRhcmdldCksXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSxcbiAgICAgIHBhcmVudCxcbiAgICAgIG5leHRTaWJsaW5nLFxuICAgICAgdGVtcCxcbiAgICAgIGFkZGVkVG9ET007XG5cbiAgaWYgKGNhY2hlLnN2ZyAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKSB7XG4gICAgdGVtcCA9IHRhcmdldC50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeDsgLy9lbnN1cmVzIHRoYXQgZXZlbiBjb21wbGV4IHZhbHVlcyBsaWtlIFwidHJhbnNsYXRlKDUwLDYwKSByb3RhdGUoMTM1LDAsMClcIiBhcmUgcGFyc2VkIGJlY2F1c2UgaXQgbWFzaGVzIGl0IGludG8gYSBtYXRyaXguXG5cbiAgICBtYXRyaXggPSBbdGVtcC5hLCB0ZW1wLmIsIHRlbXAuYywgdGVtcC5kLCB0ZW1wLmUsIHRlbXAuZl07XG4gICAgcmV0dXJuIG1hdHJpeC5qb2luKFwiLFwiKSA9PT0gXCIxLDAsMCwxLDAsMFwiID8gX2lkZW50aXR5MkRNYXRyaXggOiBtYXRyaXg7XG4gIH0gZWxzZSBpZiAobWF0cml4ID09PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAhdGFyZ2V0Lm9mZnNldFBhcmVudCAmJiB0YXJnZXQgIT09IF9kb2NFbGVtZW50ICYmICFjYWNoZS5zdmcpIHtcbiAgICAvL25vdGU6IGlmIG9mZnNldFBhcmVudCBpcyBudWxsLCB0aGF0IG1lYW5zIHRoZSBlbGVtZW50IGlzbid0IGluIHRoZSBub3JtYWwgZG9jdW1lbnQgZmxvdywgbGlrZSBpZiBpdCBoYXMgZGlzcGxheTpub25lIG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGhhcyBkaXNwbGF5Om5vbmUpLiBGaXJlZm94IHJldHVybnMgbnVsbCBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSgpIGlmIHRoZSBlbGVtZW50IGlzIGluIGFuIGlmcmFtZSB0aGF0IGhhcyBkaXNwbGF5Om5vbmUuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICAgIC8vYnJvd3NlcnMgZG9uJ3QgcmVwb3J0IHRyYW5zZm9ybXMgYWNjdXJhdGVseSB1bmxlc3MgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIERPTSBhbmQgaGFzIGEgZGlzcGxheSB2YWx1ZSB0aGF0J3Mgbm90IFwibm9uZVwiLiBGaXJlZm94IGFuZCBNaWNyb3NvZnQgYnJvd3NlcnMgaGF2ZSBhIHBhcnRpYWwgYnVnIHdoZXJlIHRoZXknbGwgcmVwb3J0IHRyYW5zZm9ybXMgZXZlbiBpZiBkaXNwbGF5Om5vbmUgQlVUIG5vdCBhbnkgcGVyY2VudGFnZS1iYXNlZCB2YWx1ZXMgbGlrZSB0cmFuc2xhdGUoLTUwJSwgOHB4KSB3aWxsIGJlIHJlcG9ydGVkIGFzIGlmIGl0J3MgdHJhbnNsYXRlKDAsIDhweCkuXG4gICAgdGVtcCA9IHN0eWxlLmRpc3BsYXk7XG4gICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBwYXJlbnQgPSB0YXJnZXQucGFyZW50Tm9kZTtcblxuICAgIGlmICghcGFyZW50IHx8ICF0YXJnZXQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAvLyBub3RlOiBpbiAzLjMuMCB3ZSBzd2l0Y2hlZCB0YXJnZXQub2Zmc2V0UGFyZW50IHRvIF9kb2MuYm9keS5jb250YWlucyh0YXJnZXQpIHRvIGF2b2lkIFtzb21ldGltZXMgdW5uZWNlc3NhcnldIE11dGF0aW9uT2JzZXJ2ZXIgY2FsbHMgYnV0IHRoYXQgd2Fzbid0IGFkZXF1YXRlIGJlY2F1c2UgdGhlcmUgYXJlIGVkZ2UgY2FzZXMgd2hlcmUgbmVzdGVkIHBvc2l0aW9uOiBmaXhlZCBlbGVtZW50cyBuZWVkIHRvIGdldCByZXBhcmVudGVkIHRvIGFjY3VyYXRlbHkgc2Vuc2UgdHJhbnNmb3Jtcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzg4IGFuZCBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5zb2NrL0dTQVAvaXNzdWVzLzM3NVxuICAgICAgYWRkZWRUb0RPTSA9IDE7IC8vZmxhZ1xuXG4gICAgICBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmc7XG5cbiAgICAgIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHRhcmdldCk7IC8vd2UgbXVzdCBhZGQgaXQgdG8gdGhlIERPTSBpbiBvcmRlciB0byBnZXQgdmFsdWVzIHByb3Blcmx5XG5cbiAgICB9XG5cbiAgICBtYXRyaXggPSBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCk7XG4gICAgdGVtcCA/IHN0eWxlLmRpc3BsYXkgPSB0ZW1wIDogX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgXCJkaXNwbGF5XCIpO1xuXG4gICAgaWYgKGFkZGVkVG9ET00pIHtcbiAgICAgIG5leHRTaWJsaW5nID8gcGFyZW50Lmluc2VydEJlZm9yZSh0YXJnZXQsIG5leHRTaWJsaW5nKSA6IHBhcmVudCA/IHBhcmVudC5hcHBlbmRDaGlsZCh0YXJnZXQpIDogX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQodGFyZ2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm9yY2UyRCAmJiBtYXRyaXgubGVuZ3RoID4gNiA/IFttYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzRdLCBtYXRyaXhbNV0sIG1hdHJpeFsxMl0sIG1hdHJpeFsxM11dIDogbWF0cml4O1xufSxcbiAgICBfYXBwbHlTVkdPcmlnaW4gPSBmdW5jdGlvbiBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCBvcmlnaW4sIG9yaWdpbklzQWJzb2x1dGUsIHNtb290aCwgbWF0cml4QXJyYXksIHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgIG1hdHJpeCA9IG1hdHJpeEFycmF5IHx8IF9nZXRNYXRyaXgodGFyZ2V0LCB0cnVlKSxcbiAgICAgIHhPcmlnaW5PbGQgPSBjYWNoZS54T3JpZ2luIHx8IDAsXG4gICAgICB5T3JpZ2luT2xkID0gY2FjaGUueU9yaWdpbiB8fCAwLFxuICAgICAgeE9mZnNldE9sZCA9IGNhY2hlLnhPZmZzZXQgfHwgMCxcbiAgICAgIHlPZmZzZXRPbGQgPSBjYWNoZS55T2Zmc2V0IHx8IDAsXG4gICAgICBhID0gbWF0cml4WzBdLFxuICAgICAgYiA9IG1hdHJpeFsxXSxcbiAgICAgIGMgPSBtYXRyaXhbMl0sXG4gICAgICBkID0gbWF0cml4WzNdLFxuICAgICAgdHggPSBtYXRyaXhbNF0sXG4gICAgICB0eSA9IG1hdHJpeFs1XSxcbiAgICAgIG9yaWdpblNwbGl0ID0gb3JpZ2luLnNwbGl0KFwiIFwiKSxcbiAgICAgIHhPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzBdKSB8fCAwLFxuICAgICAgeU9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMV0pIHx8IDAsXG4gICAgICBib3VuZHMsXG4gICAgICBkZXRlcm1pbmFudCxcbiAgICAgIHgsXG4gICAgICB5O1xuXG4gIGlmICghb3JpZ2luSXNBYnNvbHV0ZSkge1xuICAgIGJvdW5kcyA9IF9nZXRCQm94KHRhcmdldCk7XG4gICAgeE9yaWdpbiA9IGJvdW5kcy54ICsgKH5vcmlnaW5TcGxpdFswXS5pbmRleE9mKFwiJVwiKSA/IHhPcmlnaW4gLyAxMDAgKiBib3VuZHMud2lkdGggOiB4T3JpZ2luKTtcbiAgICB5T3JpZ2luID0gYm91bmRzLnkgKyAofihvcmlnaW5TcGxpdFsxXSB8fCBvcmlnaW5TcGxpdFswXSkuaW5kZXhPZihcIiVcIikgPyB5T3JpZ2luIC8gMTAwICogYm91bmRzLmhlaWdodCA6IHlPcmlnaW4pOyAvLyBpZiAoIShcInhPcmlnaW5cIiBpbiBjYWNoZSkgJiYgKHhPcmlnaW4gfHwgeU9yaWdpbikpIHsgLy8gYWRkZWQgaW4gMy4xMi4zLCByZXZlcnRlZCBpbiAzLjEyLjQ7IHJlcXVpcmVzIG1vcmUgZXhwbG9yYXRpb25cbiAgICAvLyBcdHhPcmlnaW4gLT0gYm91bmRzLng7XG4gICAgLy8gXHR5T3JpZ2luIC09IGJvdW5kcy55O1xuICAgIC8vIH1cbiAgfSBlbHNlIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4ICYmIChkZXRlcm1pbmFudCA9IGEgKiBkIC0gYiAqIGMpKSB7XG4gICAgLy9pZiBpdCdzIHplcm8gKGxpa2UgaWYgc2NhbGVYIGFuZCBzY2FsZVkgYXJlIHplcm8pLCBza2lwIGl0IHRvIGF2b2lkIGVycm9ycyB3aXRoIGRpdmlkaW5nIGJ5IHplcm8uXG4gICAgeCA9IHhPcmlnaW4gKiAoZCAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoLWMgLyBkZXRlcm1pbmFudCkgKyAoYyAqIHR5IC0gZCAqIHR4KSAvIGRldGVybWluYW50O1xuICAgIHkgPSB4T3JpZ2luICogKC1iIC8gZGV0ZXJtaW5hbnQpICsgeU9yaWdpbiAqIChhIC8gZGV0ZXJtaW5hbnQpIC0gKGEgKiB0eSAtIGIgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB4T3JpZ2luID0geDtcbiAgICB5T3JpZ2luID0geTsgLy8gdGhlb3J5OiB3ZSBvbmx5IGhhZCB0byBkbyB0aGlzIGZvciBzbW9vdGhpbmcgYW5kIGl0IGFzc3VtZXMgdGhhdCB0aGUgcHJldmlvdXMgb25lIHdhcyBub3Qgb3JpZ2luSXNBYnNvbHV0ZS5cbiAgfVxuXG4gIGlmIChzbW9vdGggfHwgc21vb3RoICE9PSBmYWxzZSAmJiBjYWNoZS5zbW9vdGgpIHtcbiAgICB0eCA9IHhPcmlnaW4gLSB4T3JpZ2luT2xkO1xuICAgIHR5ID0geU9yaWdpbiAtIHlPcmlnaW5PbGQ7XG4gICAgY2FjaGUueE9mZnNldCA9IHhPZmZzZXRPbGQgKyAodHggKiBhICsgdHkgKiBjKSAtIHR4O1xuICAgIGNhY2hlLnlPZmZzZXQgPSB5T2Zmc2V0T2xkICsgKHR4ICogYiArIHR5ICogZCkgLSB0eTtcbiAgfSBlbHNlIHtcbiAgICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gIH1cblxuICBjYWNoZS54T3JpZ2luID0geE9yaWdpbjtcbiAgY2FjaGUueU9yaWdpbiA9IHlPcmlnaW47XG4gIGNhY2hlLnNtb290aCA9ICEhc21vb3RoO1xuICBjYWNoZS5vcmlnaW4gPSBvcmlnaW47XG4gIGNhY2hlLm9yaWdpbklzQWJzb2x1dGUgPSAhIW9yaWdpbklzQWJzb2x1dGU7XG4gIHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBcIjBweCAwcHhcIjsgLy9vdGhlcndpc2UsIGlmIHNvbWVvbmUgc2V0cyAgYW4gb3JpZ2luIHZpYSBDU1MsIGl0IHdpbGwgbGlrZWx5IGludGVyZmVyZSB3aXRoIHRoZSBTVkcgdHJhbnNmb3JtIGF0dHJpYnV0ZSBvbmVzIChiZWNhdXNlIHJlbWVtYmVyLCB3ZSdyZSBiYWtpbmcgdGhlIG9yaWdpbiBpbnRvIHRoZSBtYXRyaXgoKSB2YWx1ZSkuXG5cbiAgaWYgKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvKSB7XG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInhPcmlnaW5cIiwgeE9yaWdpbk9sZCwgeE9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieU9yaWdpblwiLCB5T3JpZ2luT2xkLCB5T3JpZ2luKTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T2Zmc2V0XCIsIHhPZmZzZXRPbGQsIGNhY2hlLnhPZmZzZXQpO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPZmZzZXRcIiwgeU9mZnNldE9sZCwgY2FjaGUueU9mZnNldCk7XG4gIH1cblxuICB0YXJnZXQuc2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIsIHhPcmlnaW4gKyBcIiBcIiArIHlPcmlnaW4pO1xufSxcbiAgICBfcGFyc2VUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCB8fCBuZXcgR1NDYWNoZSh0YXJnZXQpO1xuXG4gIGlmIChcInhcIiBpbiBjYWNoZSAmJiAhdW5jYWNoZSAmJiAhY2FjaGUudW5jYWNoZSkge1xuICAgIHJldHVybiBjYWNoZTtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGludmVydGVkU2NhbGVYID0gY2FjaGUuc2NhbGVYIDwgMCxcbiAgICAgIHB4ID0gXCJweFwiLFxuICAgICAgZGVnID0gXCJkZWdcIixcbiAgICAgIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICAgICAgb3JpZ2luID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtT3JpZ2luUHJvcCkgfHwgXCIwXCIsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHosXG4gICAgICBzY2FsZVgsXG4gICAgICBzY2FsZVksXG4gICAgICByb3RhdGlvbixcbiAgICAgIHJvdGF0aW9uWCxcbiAgICAgIHJvdGF0aW9uWSxcbiAgICAgIHNrZXdYLFxuICAgICAgc2tld1ksXG4gICAgICBwZXJzcGVjdGl2ZSxcbiAgICAgIHhPcmlnaW4sXG4gICAgICB5T3JpZ2luLFxuICAgICAgbWF0cml4LFxuICAgICAgYW5nbGUsXG4gICAgICBjb3MsXG4gICAgICBzaW4sXG4gICAgICBhLFxuICAgICAgYixcbiAgICAgIGMsXG4gICAgICBkLFxuICAgICAgYTEyLFxuICAgICAgYTIyLFxuICAgICAgdDEsXG4gICAgICB0MixcbiAgICAgIHQzLFxuICAgICAgYTEzLFxuICAgICAgYTIzLFxuICAgICAgYTMzLFxuICAgICAgYTQyLFxuICAgICAgYTQzLFxuICAgICAgYTMyO1xuICB4ID0geSA9IHogPSByb3RhdGlvbiA9IHJvdGF0aW9uWCA9IHJvdGF0aW9uWSA9IHNrZXdYID0gc2tld1kgPSBwZXJzcGVjdGl2ZSA9IDA7XG4gIHNjYWxlWCA9IHNjYWxlWSA9IDE7XG4gIGNhY2hlLnN2ZyA9ICEhKHRhcmdldC5nZXRDVE0gJiYgX2lzU1ZHKHRhcmdldCkpO1xuXG4gIGlmIChjcy50cmFuc2xhdGUpIHtcbiAgICAvLyBhY2NvbW1vZGF0ZSBpbmRlcGVuZGVudCB0cmFuc2Zvcm1zIGJ5IGNvbWJpbmluZyB0aGVtIGludG8gbm9ybWFsIG9uZXMuXG4gICAgaWYgKGNzLnRyYW5zbGF0ZSAhPT0gXCJub25lXCIgfHwgY3Muc2NhbGUgIT09IFwibm9uZVwiIHx8IGNzLnJvdGF0ZSAhPT0gXCJub25lXCIpIHtcbiAgICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiID8gXCJ0cmFuc2xhdGUzZChcIiArIChjcy50cmFuc2xhdGUgKyBcIiAwIDBcIikuc3BsaXQoXCIgXCIpLnNsaWNlKDAsIDMpLmpvaW4oXCIsIFwiKSArIFwiKSBcIiA6IFwiXCIpICsgKGNzLnJvdGF0ZSAhPT0gXCJub25lXCIgPyBcInJvdGF0ZShcIiArIGNzLnJvdGF0ZSArIFwiKSBcIiA6IFwiXCIpICsgKGNzLnNjYWxlICE9PSBcIm5vbmVcIiA/IFwic2NhbGUoXCIgKyBjcy5zY2FsZS5zcGxpdChcIiBcIikuam9pbihcIixcIikgKyBcIikgXCIgOiBcIlwiKSArIChjc1tfdHJhbnNmb3JtUHJvcF0gIT09IFwibm9uZVwiID8gY3NbX3RyYW5zZm9ybVByb3BdIDogXCJcIik7XG4gICAgfVxuXG4gICAgc3R5bGUuc2NhbGUgPSBzdHlsZS5yb3RhdGUgPSBzdHlsZS50cmFuc2xhdGUgPSBcIm5vbmVcIjtcbiAgfVxuXG4gIG1hdHJpeCA9IF9nZXRNYXRyaXgodGFyZ2V0LCBjYWNoZS5zdmcpO1xuXG4gIGlmIChjYWNoZS5zdmcpIHtcbiAgICBpZiAoY2FjaGUudW5jYWNoZSkge1xuICAgICAgLy8gaWYgY2FjaGUudW5jYWNoZSBpcyB0cnVlIChhbmQgbWF5YmUgaWYgb3JpZ2luIGlzIDAsMCksIHdlIG5lZWQgdG8gc2V0IGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gKGNhY2hlLnhPcmlnaW4gLSBiYm94LngpICsgXCJweCBcIiArIChjYWNoZS55T3JpZ2luIC0gYmJveC55KSArIFwicHhcIi4gUHJldmlvdXNseSB3ZSBsZXQgdGhlIGRhdGEtc3ZnLW9yaWdpbiBzdGF5IGluc3RlYWQsIGJ1dCB3aGVuIGludHJvZHVjaW5nIHJldmVydCgpLCBpdCBjb21wbGljYXRlZCB0aGluZ3MuXG4gICAgICB0MiA9IHRhcmdldC5nZXRCQm94KCk7XG4gICAgICBvcmlnaW4gPSBjYWNoZS54T3JpZ2luIC0gdDIueCArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIHQyLnkpICsgXCJweFwiO1xuICAgICAgdDEgPSBcIlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0MSA9ICF1bmNhY2hlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7IC8vICBSZW1lbWJlciwgdG8gd29yayBhcm91bmQgYnJvd3NlciBpbmNvbnNpc3RlbmNpZXMgd2UgYWx3YXlzIGZvcmNlIFNWRyBlbGVtZW50cycgdHJhbnNmb3JtT3JpZ2luIHRvIDAsMCBhbmQgb2Zmc2V0IHRoZSB0cmFuc2xhdGlvbiBhY2NvcmRpbmdseS5cbiAgICB9XG5cbiAgICBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCB0MSB8fCBvcmlnaW4sICEhdDEgfHwgY2FjaGUub3JpZ2luSXNBYnNvbHV0ZSwgY2FjaGUuc21vb3RoICE9PSBmYWxzZSwgbWF0cml4KTtcbiAgfVxuXG4gIHhPcmlnaW4gPSBjYWNoZS54T3JpZ2luIHx8IDA7XG4gIHlPcmlnaW4gPSBjYWNoZS55T3JpZ2luIHx8IDA7XG5cbiAgaWYgKG1hdHJpeCAhPT0gX2lkZW50aXR5MkRNYXRyaXgpIHtcbiAgICBhID0gbWF0cml4WzBdOyAvL2ExMVxuXG4gICAgYiA9IG1hdHJpeFsxXTsgLy9hMjFcblxuICAgIGMgPSBtYXRyaXhbMl07IC8vYTMxXG5cbiAgICBkID0gbWF0cml4WzNdOyAvL2E0MVxuXG4gICAgeCA9IGExMiA9IG1hdHJpeFs0XTtcbiAgICB5ID0gYTIyID0gbWF0cml4WzVdOyAvLzJEIG1hdHJpeFxuXG4gICAgaWYgKG1hdHJpeC5sZW5ndGggPT09IDYpIHtcbiAgICAgIHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcbiAgICAgIHNjYWxlWSA9IE1hdGguc3FydChkICogZCArIGMgKiBjKTtcbiAgICAgIHJvdGF0aW9uID0gYSB8fCBiID8gX2F0YW4yKGIsIGEpICogX1JBRDJERUcgOiAwOyAvL25vdGU6IGlmIHNjYWxlWCBpcyAwLCB3ZSBjYW5ub3QgYWNjdXJhdGVseSBtZWFzdXJlIHJvdGF0aW9uLiBTYW1lIGZvciBza2V3WCB3aXRoIGEgc2NhbGVZIG9mIDAuIFRoZXJlZm9yZSwgd2UgZGVmYXVsdCB0byB0aGUgcHJldmlvdXNseSByZWNvcmRlZCB2YWx1ZSAob3IgemVybyBpZiB0aGF0IGRvZXNuJ3QgZXhpc3QpLlxuXG4gICAgICBza2V3WCA9IGMgfHwgZCA/IF9hdGFuMihjLCBkKSAqIF9SQUQyREVHICsgcm90YXRpb24gOiAwO1xuICAgICAgc2tld1ggJiYgKHNjYWxlWSAqPSBNYXRoLmFicyhNYXRoLmNvcyhza2V3WCAqIF9ERUcyUkFEKSkpO1xuXG4gICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgIHggLT0geE9yaWdpbiAtICh4T3JpZ2luICogYSArIHlPcmlnaW4gKiBjKTtcbiAgICAgICAgeSAtPSB5T3JpZ2luIC0gKHhPcmlnaW4gKiBiICsgeU9yaWdpbiAqIGQpO1xuICAgICAgfSAvLzNEIG1hdHJpeFxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGEzMiA9IG1hdHJpeFs2XTtcbiAgICAgIGE0MiA9IG1hdHJpeFs3XTtcbiAgICAgIGExMyA9IG1hdHJpeFs4XTtcbiAgICAgIGEyMyA9IG1hdHJpeFs5XTtcbiAgICAgIGEzMyA9IG1hdHJpeFsxMF07XG4gICAgICBhNDMgPSBtYXRyaXhbMTFdO1xuICAgICAgeCA9IG1hdHJpeFsxMl07XG4gICAgICB5ID0gbWF0cml4WzEzXTtcbiAgICAgIHogPSBtYXRyaXhbMTRdO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTMyLCBhMzMpO1xuICAgICAgcm90YXRpb25YID0gYW5nbGUgKiBfUkFEMkRFRzsgLy9yb3RhdGlvblhcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYTEyICogY29zICsgYTEzICogc2luO1xuICAgICAgICB0MiA9IGEyMiAqIGNvcyArIGEyMyAqIHNpbjtcbiAgICAgICAgdDMgPSBhMzIgKiBjb3MgKyBhMzMgKiBzaW47XG4gICAgICAgIGExMyA9IGExMiAqIC1zaW4gKyBhMTMgKiBjb3M7XG4gICAgICAgIGEyMyA9IGEyMiAqIC1zaW4gKyBhMjMgKiBjb3M7XG4gICAgICAgIGEzMyA9IGEzMiAqIC1zaW4gKyBhMzMgKiBjb3M7XG4gICAgICAgIGE0MyA9IGE0MiAqIC1zaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGExMiA9IHQxO1xuICAgICAgICBhMjIgPSB0MjtcbiAgICAgICAgYTMyID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25ZXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoLWMsIGEzMyk7XG4gICAgICByb3RhdGlvblkgPSBhbmdsZSAqIF9SQUQyREVHO1xuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zIC0gYTEzICogc2luO1xuICAgICAgICB0MiA9IGIgKiBjb3MgLSBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYyAqIGNvcyAtIGEzMyAqIHNpbjtcbiAgICAgICAgYTQzID0gZCAqIHNpbiArIGE0MyAqIGNvcztcbiAgICAgICAgYSA9IHQxO1xuICAgICAgICBiID0gdDI7XG4gICAgICAgIGMgPSB0MztcbiAgICAgIH0gLy9yb3RhdGlvblpcblxuXG4gICAgICBhbmdsZSA9IF9hdGFuMihiLCBhKTtcbiAgICAgIHJvdGF0aW9uID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICB0MSA9IGEgKiBjb3MgKyBiICogc2luO1xuICAgICAgICB0MiA9IGExMiAqIGNvcyArIGEyMiAqIHNpbjtcbiAgICAgICAgYiA9IGIgKiBjb3MgLSBhICogc2luO1xuICAgICAgICBhMjIgPSBhMjIgKiBjb3MgLSBhMTIgKiBzaW47XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYTEyID0gdDI7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3RhdGlvblggJiYgTWF0aC5hYnMocm90YXRpb25YKSArIE1hdGguYWJzKHJvdGF0aW9uKSA+IDM1OS45KSB7XG4gICAgICAgIC8vd2hlbiByb3RhdGlvblkgaXMgc2V0LCBpdCB3aWxsIG9mdGVuIGJlIHBhcnNlZCBhcyAxODAgZGVncmVlcyBkaWZmZXJlbnQgdGhhbiBpdCBzaG91bGQgYmUsIGFuZCByb3RhdGlvblggYW5kIHJvdGF0aW9uIGJvdGggYmVpbmcgMTgwIChpdCBsb29rcyB0aGUgc2FtZSksIHNvIHdlIGFkanVzdCBmb3IgdGhhdCBoZXJlLlxuICAgICAgICByb3RhdGlvblggPSByb3RhdGlvbiA9IDA7XG4gICAgICAgIHJvdGF0aW9uWSA9IDE4MCAtIHJvdGF0aW9uWTtcbiAgICAgIH1cblxuICAgICAgc2NhbGVYID0gX3JvdW5kKE1hdGguc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpKTtcbiAgICAgIHNjYWxlWSA9IF9yb3VuZChNYXRoLnNxcnQoYTIyICogYTIyICsgYTMyICogYTMyKSk7XG4gICAgICBhbmdsZSA9IF9hdGFuMihhMTIsIGEyMik7XG4gICAgICBza2V3WCA9IE1hdGguYWJzKGFuZ2xlKSA+IDAuMDAwMiA/IGFuZ2xlICogX1JBRDJERUcgOiAwO1xuICAgICAgcGVyc3BlY3RpdmUgPSBhNDMgPyAxIC8gKGE0MyA8IDAgPyAtYTQzIDogYTQzKSA6IDA7XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgLy9zZW5zZSBpZiB0aGVyZSBhcmUgQ1NTIHRyYW5zZm9ybXMgYXBwbGllZCBvbiBhbiBTVkcgZWxlbWVudCBpbiB3aGljaCBjYXNlIHdlIG11c3Qgb3ZlcndyaXRlIHRoZW0gd2hlbiByZW5kZXJpbmcuIFRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlIGlzIG1vcmUgcmVsaWFibGUgY3Jvc3MtYnJvd3NlciwgYnV0IHdlIGNhbid0IGp1c3QgcmVtb3ZlIHRoZSBDU1Mgb25lcyBiZWNhdXNlIHRoZXkgbWF5IGJlIGFwcGxpZWQgaW4gYSBDU1MgcnVsZSBzb21ld2hlcmUgKG5vdCBqdXN0IGlubGluZSkuXG4gICAgICB0MSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG4gICAgICBjYWNoZS5mb3JjZUNTUyA9IHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJcIikgfHwgIV9pc051bGxUcmFuc2Zvcm0oX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCkpO1xuICAgICAgdDEgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0MSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKE1hdGguYWJzKHNrZXdYKSA+IDkwICYmIE1hdGguYWJzKHNrZXdYKSA8IDI3MCkge1xuICAgIGlmIChpbnZlcnRlZFNjYWxlWCkge1xuICAgICAgc2NhbGVYICo9IC0xO1xuICAgICAgc2tld1ggKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgICByb3RhdGlvbiArPSByb3RhdGlvbiA8PSAwID8gMTgwIDogLTE4MDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NhbGVZICo9IC0xO1xuICAgICAgc2tld1ggKz0gc2tld1ggPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfVxuICB9XG5cbiAgdW5jYWNoZSA9IHVuY2FjaGUgfHwgY2FjaGUudW5jYWNoZTtcbiAgY2FjaGUueCA9IHggLSAoKGNhY2hlLnhQZXJjZW50ID0geCAmJiAoIXVuY2FjaGUgJiYgY2FjaGUueFBlcmNlbnQgfHwgKE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldFdpZHRoIC8gMikgPT09IE1hdGgucm91bmQoLXgpID8gLTUwIDogMCkpKSA/IHRhcmdldC5vZmZzZXRXaWR0aCAqIGNhY2hlLnhQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueSA9IHkgLSAoKGNhY2hlLnlQZXJjZW50ID0geSAmJiAoIXVuY2FjaGUgJiYgY2FjaGUueVBlcmNlbnQgfHwgKE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldEhlaWdodCAvIDIpID09PSBNYXRoLnJvdW5kKC15KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0SGVpZ2h0ICogY2FjaGUueVBlcmNlbnQgLyAxMDAgOiAwKSArIHB4O1xuICBjYWNoZS56ID0geiArIHB4O1xuICBjYWNoZS5zY2FsZVggPSBfcm91bmQoc2NhbGVYKTtcbiAgY2FjaGUuc2NhbGVZID0gX3JvdW5kKHNjYWxlWSk7XG4gIGNhY2hlLnJvdGF0aW9uID0gX3JvdW5kKHJvdGF0aW9uKSArIGRlZztcbiAgY2FjaGUucm90YXRpb25YID0gX3JvdW5kKHJvdGF0aW9uWCkgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWSA9IF9yb3VuZChyb3RhdGlvblkpICsgZGVnO1xuICBjYWNoZS5za2V3WCA9IHNrZXdYICsgZGVnO1xuICBjYWNoZS5za2V3WSA9IHNrZXdZICsgZGVnO1xuICBjYWNoZS50cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IHBlcnNwZWN0aXZlICsgcHg7XG5cbiAgaWYgKGNhY2hlLnpPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpbi5zcGxpdChcIiBcIilbMl0pIHx8ICF1bmNhY2hlICYmIGNhY2hlLnpPcmlnaW4gfHwgMCkge1xuICAgIHN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSA9IF9maXJzdFR3b09ubHkob3JpZ2luKTtcbiAgfVxuXG4gIGNhY2hlLnhPZmZzZXQgPSBjYWNoZS55T2Zmc2V0ID0gMDtcbiAgY2FjaGUuZm9yY2UzRCA9IF9jb25maWcuZm9yY2UzRDtcbiAgY2FjaGUucmVuZGVyVHJhbnNmb3JtID0gY2FjaGUuc3ZnID8gX3JlbmRlclNWR1RyYW5zZm9ybXMgOiBfc3VwcG9ydHMzRCA/IF9yZW5kZXJDU1NUcmFuc2Zvcm1zIDogX3JlbmRlck5vbjNEVHJhbnNmb3JtcztcbiAgY2FjaGUudW5jYWNoZSA9IDA7XG4gIHJldHVybiBjYWNoZTtcbn0sXG4gICAgX2ZpcnN0VHdvT25seSA9IGZ1bmN0aW9uIF9maXJzdFR3b09ubHkodmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSA9IHZhbHVlLnNwbGl0KFwiIFwiKSlbMF0gKyBcIiBcIiArIHZhbHVlWzFdO1xufSxcbiAgICAvL2ZvciBoYW5kbGluZyB0cmFuc2Zvcm1PcmlnaW4gdmFsdWVzLCBzdHJpcHBpbmcgb3V0IHRoZSAzcmQgZGltZW5zaW9uXG5fYWRkUHhUcmFuc2xhdGUgPSBmdW5jdGlvbiBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCBzdGFydCwgdmFsdWUpIHtcbiAgdmFyIHVuaXQgPSBnZXRVbml0KHN0YXJ0KTtcbiAgcmV0dXJuIF9yb3VuZChwYXJzZUZsb2F0KHN0YXJ0KSArIHBhcnNlRmxvYXQoX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgdmFsdWUgKyBcInB4XCIsIHVuaXQpKSkgKyB1bml0O1xufSxcbiAgICBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlck5vbjNEVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgY2FjaGUueiA9IFwiMHB4XCI7XG4gIGNhY2hlLnJvdGF0aW9uWSA9IGNhY2hlLnJvdGF0aW9uWCA9IFwiMGRlZ1wiO1xuICBjYWNoZS5mb3JjZTNEID0gMDtcblxuICBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfemVyb0RlZyA9IFwiMGRlZ1wiLFxuICAgIF96ZXJvUHggPSBcIjBweFwiLFxuICAgIF9lbmRQYXJlbnRoZXNpcyA9IFwiKSBcIixcbiAgICBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICB2YXIgX3JlZiA9IGNhY2hlIHx8IHRoaXMsXG4gICAgICB4UGVyY2VudCA9IF9yZWYueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYueVBlcmNlbnQsXG4gICAgICB4ID0gX3JlZi54LFxuICAgICAgeSA9IF9yZWYueSxcbiAgICAgIHogPSBfcmVmLnosXG4gICAgICByb3RhdGlvbiA9IF9yZWYucm90YXRpb24sXG4gICAgICByb3RhdGlvblkgPSBfcmVmLnJvdGF0aW9uWSxcbiAgICAgIHJvdGF0aW9uWCA9IF9yZWYucm90YXRpb25YLFxuICAgICAgc2tld1ggPSBfcmVmLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmLnNrZXdZLFxuICAgICAgc2NhbGVYID0gX3JlZi5zY2FsZVgsXG4gICAgICBzY2FsZVkgPSBfcmVmLnNjYWxlWSxcbiAgICAgIHRyYW5zZm9ybVBlcnNwZWN0aXZlID0gX3JlZi50cmFuc2Zvcm1QZXJzcGVjdGl2ZSxcbiAgICAgIGZvcmNlM0QgPSBfcmVmLmZvcmNlM0QsXG4gICAgICB0YXJnZXQgPSBfcmVmLnRhcmdldCxcbiAgICAgIHpPcmlnaW4gPSBfcmVmLnpPcmlnaW4sXG4gICAgICB0cmFuc2Zvcm1zID0gXCJcIixcbiAgICAgIHVzZTNEID0gZm9yY2UzRCA9PT0gXCJhdXRvXCIgJiYgcmF0aW8gJiYgcmF0aW8gIT09IDEgfHwgZm9yY2UzRCA9PT0gdHJ1ZTsgLy8gU2FmYXJpIGhhcyBhIGJ1ZyB0aGF0IGNhdXNlcyBpdCBub3QgdG8gcmVuZGVyIDNEIHRyYW5zZm9ybS1vcmlnaW4gdmFsdWVzIHByb3Blcmx5LCBzbyB3ZSBmb3JjZSB0aGUgeiBvcmlnaW4gdG8gMCwgcmVjb3JkIGl0IGluIHRoZSBjYWNoZSwgYW5kIHRoZW4gZG8gdGhlIG1hdGggaGVyZSB0byBvZmZzZXQgdGhlIHRyYW5zbGF0ZSB2YWx1ZXMgYWNjb3JkaW5nbHkgKGJhc2ljYWxseSBkbyB0aGUgM0QgdHJhbnNmb3JtLW9yaWdpbiBwYXJ0IG1hbnVhbGx5KVxuXG5cbiAgaWYgKHpPcmlnaW4gJiYgKHJvdGF0aW9uWCAhPT0gX3plcm9EZWcgfHwgcm90YXRpb25ZICE9PSBfemVyb0RlZykpIHtcbiAgICB2YXIgYW5nbGUgPSBwYXJzZUZsb2F0KHJvdGF0aW9uWSkgKiBfREVHMlJBRCxcbiAgICAgICAgYTEzID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICBhMzMgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgIGNvcztcblxuICAgIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblgpICogX0RFRzJSQUQ7XG4gICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgIHggPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB4LCBhMTMgKiBjb3MgKiAtek9yaWdpbik7XG4gICAgeSA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHksIC1NYXRoLnNpbihhbmdsZSkgKiAtek9yaWdpbik7XG4gICAgeiA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHosIGEzMyAqIGNvcyAqIC16T3JpZ2luICsgek9yaWdpbik7XG4gIH1cblxuICBpZiAodHJhbnNmb3JtUGVyc3BlY3RpdmUgIT09IF96ZXJvUHgpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicGVyc3BlY3RpdmUoXCIgKyB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmICh4UGVyY2VudCB8fCB5UGVyY2VudCkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJ0cmFuc2xhdGUoXCIgKyB4UGVyY2VudCArIFwiJSwgXCIgKyB5UGVyY2VudCArIFwiJSkgXCI7XG4gIH1cblxuICBpZiAodXNlM0QgfHwgeCAhPT0gX3plcm9QeCB8fCB5ICE9PSBfemVyb1B4IHx8IHogIT09IF96ZXJvUHgpIHtcbiAgICB0cmFuc2Zvcm1zICs9IHogIT09IF96ZXJvUHggfHwgdXNlM0QgPyBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwiLCBcIiArIHkgKyBcIiwgXCIgKyB6ICsgXCIpIFwiIDogXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCIsIFwiICsgeSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvbiAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlKFwiICsgcm90YXRpb24gKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb25ZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVZKFwiICsgcm90YXRpb25ZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWCAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWChcIiArIHJvdGF0aW9uWCArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChza2V3WCAhPT0gX3plcm9EZWcgfHwgc2tld1kgIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNrZXcoXCIgKyBza2V3WCArIFwiLCBcIiArIHNrZXdZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHNjYWxlWCAhPT0gMSB8fCBzY2FsZVkgIT09IDEpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwic2NhbGUoXCIgKyBzY2FsZVggKyBcIiwgXCIgKyBzY2FsZVkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcyB8fCBcInRyYW5zbGF0ZSgwLCAwKVwiO1xufSxcbiAgICBfcmVuZGVyU1ZHVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJTVkdUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICB2YXIgX3JlZjIgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmMi54UGVyY2VudCxcbiAgICAgIHlQZXJjZW50ID0gX3JlZjIueVBlcmNlbnQsXG4gICAgICB4ID0gX3JlZjIueCxcbiAgICAgIHkgPSBfcmVmMi55LFxuICAgICAgcm90YXRpb24gPSBfcmVmMi5yb3RhdGlvbixcbiAgICAgIHNrZXdYID0gX3JlZjIuc2tld1gsXG4gICAgICBza2V3WSA9IF9yZWYyLnNrZXdZLFxuICAgICAgc2NhbGVYID0gX3JlZjIuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZjIuc2NhbGVZLFxuICAgICAgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0LFxuICAgICAgeE9yaWdpbiA9IF9yZWYyLnhPcmlnaW4sXG4gICAgICB5T3JpZ2luID0gX3JlZjIueU9yaWdpbixcbiAgICAgIHhPZmZzZXQgPSBfcmVmMi54T2Zmc2V0LFxuICAgICAgeU9mZnNldCA9IF9yZWYyLnlPZmZzZXQsXG4gICAgICBmb3JjZUNTUyA9IF9yZWYyLmZvcmNlQ1NTLFxuICAgICAgdHggPSBwYXJzZUZsb2F0KHgpLFxuICAgICAgdHkgPSBwYXJzZUZsb2F0KHkpLFxuICAgICAgYTExLFxuICAgICAgYTIxLFxuICAgICAgYTEyLFxuICAgICAgYTIyLFxuICAgICAgdGVtcDtcblxuICByb3RhdGlvbiA9IHBhcnNlRmxvYXQocm90YXRpb24pO1xuICBza2V3WCA9IHBhcnNlRmxvYXQoc2tld1gpO1xuICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuXG4gIGlmIChza2V3WSkge1xuICAgIC8vZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIGNvbWJpbmUgYWxsIHNrZXdpbmcgaW50byB0aGUgc2tld1ggYW5kIHJvdGF0aW9uIHZhbHVlcy4gUmVtZW1iZXIsIGEgc2tld1kgb2YgMTAgZGVncmVlcyBsb29rcyB0aGUgc2FtZSBhcyBhIHJvdGF0aW9uIG9mIDEwIGRlZ3JlZXMgcGx1cyBhIHNrZXdYIG9mIDEwIGRlZ3JlZXMuXG4gICAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcbiAgICBza2V3WCArPSBza2V3WTtcbiAgICByb3RhdGlvbiArPSBza2V3WTtcbiAgfVxuXG4gIGlmIChyb3RhdGlvbiB8fCBza2V3WCkge1xuICAgIHJvdGF0aW9uICo9IF9ERUcyUkFEO1xuICAgIHNrZXdYICo9IF9ERUcyUkFEO1xuICAgIGExMSA9IE1hdGguY29zKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICBhMjEgPSBNYXRoLnNpbihyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTEyID0gTWF0aC5zaW4ocm90YXRpb24gLSBza2V3WCkgKiAtc2NhbGVZO1xuICAgIGEyMiA9IE1hdGguY29zKHJvdGF0aW9uIC0gc2tld1gpICogc2NhbGVZO1xuXG4gICAgaWYgKHNrZXdYKSB7XG4gICAgICBza2V3WSAqPSBfREVHMlJBRDtcbiAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WCAtIHNrZXdZKTtcbiAgICAgIHRlbXAgPSBNYXRoLnNxcnQoMSArIHRlbXAgKiB0ZW1wKTtcbiAgICAgIGExMiAqPSB0ZW1wO1xuICAgICAgYTIyICo9IHRlbXA7XG5cbiAgICAgIGlmIChza2V3WSkge1xuICAgICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1kpO1xuICAgICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICAgIGExMSAqPSB0ZW1wO1xuICAgICAgICBhMjEgKj0gdGVtcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhMTEgPSBfcm91bmQoYTExKTtcbiAgICBhMjEgPSBfcm91bmQoYTIxKTtcbiAgICBhMTIgPSBfcm91bmQoYTEyKTtcbiAgICBhMjIgPSBfcm91bmQoYTIyKTtcbiAgfSBlbHNlIHtcbiAgICBhMTEgPSBzY2FsZVg7XG4gICAgYTIyID0gc2NhbGVZO1xuICAgIGEyMSA9IGExMiA9IDA7XG4gIH1cblxuICBpZiAodHggJiYgIX4oeCArIFwiXCIpLmluZGV4T2YoXCJweFwiKSB8fCB0eSAmJiAhfih5ICsgXCJcIikuaW5kZXhPZihcInB4XCIpKSB7XG4gICAgdHggPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB4LCBcInB4XCIpO1xuICAgIHR5ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInlcIiwgeSwgXCJweFwiKTtcbiAgfVxuXG4gIGlmICh4T3JpZ2luIHx8IHlPcmlnaW4gfHwgeE9mZnNldCB8fCB5T2Zmc2V0KSB7XG4gICAgdHggPSBfcm91bmQodHggKyB4T3JpZ2luIC0gKHhPcmlnaW4gKiBhMTEgKyB5T3JpZ2luICogYTEyKSArIHhPZmZzZXQpO1xuICAgIHR5ID0gX3JvdW5kKHR5ICsgeU9yaWdpbiAtICh4T3JpZ2luICogYTIxICsgeU9yaWdpbiAqIGEyMikgKyB5T2Zmc2V0KTtcbiAgfVxuXG4gIGlmICh4UGVyY2VudCB8fCB5UGVyY2VudCkge1xuICAgIC8vVGhlIFNWRyBzcGVjIGRvZXNuJ3Qgc3VwcG9ydCBwZXJjZW50YWdlLWJhc2VkIHRyYW5zbGF0aW9uIGluIHRoZSBcInRyYW5zZm9ybVwiIGF0dHJpYnV0ZSwgc28gd2UgbWVyZ2UgaXQgaW50byB0aGUgdHJhbnNsYXRpb24gdG8gc2ltdWxhdGUgaXQuXG4gICAgdGVtcCA9IHRhcmdldC5nZXRCQm94KCk7XG4gICAgdHggPSBfcm91bmQodHggKyB4UGVyY2VudCAvIDEwMCAqIHRlbXAud2lkdGgpO1xuICAgIHR5ID0gX3JvdW5kKHR5ICsgeVBlcmNlbnQgLyAxMDAgKiB0ZW1wLmhlaWdodCk7XG4gIH1cblxuICB0ZW1wID0gXCJtYXRyaXgoXCIgKyBhMTEgKyBcIixcIiArIGEyMSArIFwiLFwiICsgYTEyICsgXCIsXCIgKyBhMjIgKyBcIixcIiArIHR4ICsgXCIsXCIgKyB0eSArIFwiKVwiO1xuICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHRlbXApO1xuICBmb3JjZUNTUyAmJiAodGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRlbXApOyAvL3NvbWUgYnJvd3NlcnMgcHJpb3JpdGl6ZSBDU1MgdHJhbnNmb3JtcyBvdmVyIHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlLiBXaGVuIHdlIHNlbnNlIHRoYXQgdGhlIHVzZXIgaGFzIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQsIHdlIG11c3Qgb3ZlcndyaXRlIHRoZW0gdGhpcyB3YXkgKG90aGVyd2lzZSBzb21lIGJyb3dzZXIgc2ltcGx5IHdvbid0IHJlbmRlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBjaGFuZ2VzISlcbn0sXG4gICAgX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUm90YXRpb25hbFByb3BUd2VlbihwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBlbmRWYWx1ZSkge1xuICB2YXIgY2FwID0gMzYwLFxuICAgICAgaXNTdHJpbmcgPSBfaXNTdHJpbmcoZW5kVmFsdWUpLFxuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSkgKiAoaXNTdHJpbmcgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYWRcIikgPyBfUkFEMkRFRyA6IDEpLFxuICAgICAgY2hhbmdlID0gZW5kTnVtIC0gc3RhcnROdW0sXG4gICAgICBmaW5hbFZhbHVlID0gc3RhcnROdW0gKyBjaGFuZ2UgKyBcImRlZ1wiLFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgcHQ7XG5cbiAgaWYgKGlzU3RyaW5nKSB7XG4gICAgZGlyZWN0aW9uID0gZW5kVmFsdWUuc3BsaXQoXCJfXCIpWzFdO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJzaG9ydFwiKSB7XG4gICAgICBjaGFuZ2UgJT0gY2FwO1xuXG4gICAgICBpZiAoY2hhbmdlICE9PSBjaGFuZ2UgJSAoY2FwIC8gMikpIHtcbiAgICAgICAgY2hhbmdlICs9IGNoYW5nZSA8IDAgPyBjYXAgOiAtY2FwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwiY3dcIiAmJiBjaGFuZ2UgPCAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlICsgY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBcImNjd1wiICYmIGNoYW5nZSA+IDApIHtcbiAgICAgIGNoYW5nZSA9IChjaGFuZ2UgLSBjYXAgKiBfYmlnTnVtKSAlIGNhcCAtIH5+KGNoYW5nZSAvIGNhcCkgKiBjYXA7XG4gICAgfVxuICB9XG5cbiAgcGx1Z2luLl9wdCA9IHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgY2hhbmdlLCBfcmVuZGVyUHJvcFdpdGhFbmQpO1xuICBwdC5lID0gZmluYWxWYWx1ZTtcbiAgcHQudSA9IFwiZGVnXCI7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hc3NpZ24gPSBmdW5jdGlvbiBfYXNzaWduKHRhcmdldCwgc291cmNlKSB7XG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGRvZXNuJ3QgaGF2ZSBPYmplY3QuYXNzaWduKCksIHNvIHdlIHJlY3JlYXRlIGl0IGhlcmUuXG4gIGZvciAodmFyIHAgaW4gc291cmNlKSB7XG4gICAgdGFyZ2V0W3BdID0gc291cmNlW3BdO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0sXG4gICAgX2FkZFJhd1RyYW5zZm9ybVBUcyA9IGZ1bmN0aW9uIF9hZGRSYXdUcmFuc2Zvcm1QVHMocGx1Z2luLCB0cmFuc2Zvcm1zLCB0YXJnZXQpIHtcbiAgLy9mb3IgaGFuZGxpbmcgY2FzZXMgd2hlcmUgc29tZW9uZSBwYXNzZXMgaW4gYSB3aG9sZSB0cmFuc2Zvcm0gc3RyaW5nLCBsaWtlIHRyYW5zZm9ybTogXCJzY2FsZSgyLCAzKSByb3RhdGUoMjBkZWcpIHRyYW5zbGF0ZVkoMzBlbSlcIlxuICB2YXIgc3RhcnRDYWNoZSA9IF9hc3NpZ24oe30sIHRhcmdldC5fZ3NhcCksXG4gICAgICBleGNsdWRlID0gXCJwZXJzcGVjdGl2ZSxmb3JjZTNELHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW5cIixcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgZW5kQ2FjaGUsXG4gICAgICBwLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBlbmROdW0sXG4gICAgICBzdGFydFVuaXQsXG4gICAgICBlbmRVbml0O1xuXG4gIGlmIChzdGFydENhY2hlLnN2Zykge1xuICAgIHN0YXJ0VmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJcIik7XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuXG4gICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBzdGFydFZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdGFydFZhbHVlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpW190cmFuc2Zvcm1Qcm9wXTtcbiAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zO1xuICAgIGVuZENhY2hlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gc3RhcnRWYWx1ZTtcbiAgfVxuXG4gIGZvciAocCBpbiBfdHJhbnNmb3JtUHJvcHMpIHtcbiAgICBzdGFydFZhbHVlID0gc3RhcnRDYWNoZVtwXTtcbiAgICBlbmRWYWx1ZSA9IGVuZENhY2hlW3BdO1xuXG4gICAgaWYgKHN0YXJ0VmFsdWUgIT09IGVuZFZhbHVlICYmIGV4Y2x1ZGUuaW5kZXhPZihwKSA8IDApIHtcbiAgICAgIC8vdHdlZW5pbmcgdG8gbm8gcGVyc3BlY3RpdmUgZ2l2ZXMgdmVyeSB1bmludHVpdGl2ZSByZXN1bHRzIC0ganVzdCBrZWVwIHRoZSBzYW1lIHBlcnNwZWN0aXZlIGluIHRoYXQgY2FzZS5cbiAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICBzdGFydE51bSA9IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgOiBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG4gICAgICBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCBlbmRDYWNoZSwgcCwgc3RhcnROdW0sIGVuZE51bSAtIHN0YXJ0TnVtLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICBwbHVnaW4uX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH1cblxuICBfYXNzaWduKGVuZENhY2hlLCBzdGFydENhY2hlKTtcbn07IC8vIGhhbmRsZSBzcGxpdHRpbmcgYXBhcnQgcGFkZGluZywgbWFyZ2luLCBib3JkZXJXaWR0aCwgYW5kIGJvcmRlclJhZGl1cyBpbnRvIHRoZWlyIDQgY29tcG9uZW50cy4gRmlyZWZveCwgZm9yIGV4YW1wbGUsIHdvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5IC0gaXQgd2lsbCBvbmx5IGRvIGJvcmRlclRvcExlZnRSYWRpdXMgYW5kIHRoZSBvdGhlciBjb3JuZXJzLiBXZSBhbHNvIHdhbnQgdG8gaGFuZGxlIHBhZGRpbmdUb3AsIG1hcmdpbkxlZnQsIGJvcmRlclJpZ2h0V2lkdGgsIGV0Yy5cblxuXG5fZm9yRWFjaE5hbWUoXCJwYWRkaW5nLG1hcmdpbixXaWR0aCxSYWRpdXNcIiwgZnVuY3Rpb24gKG5hbWUsIGluZGV4KSB7XG4gIHZhciB0ID0gXCJUb3BcIixcbiAgICAgIHIgPSBcIlJpZ2h0XCIsXG4gICAgICBiID0gXCJCb3R0b21cIixcbiAgICAgIGwgPSBcIkxlZnRcIixcbiAgICAgIHByb3BzID0gKGluZGV4IDwgMyA/IFt0LCByLCBiLCBsXSA6IFt0ICsgbCwgdCArIHIsIGIgKyByLCBiICsgbF0pLm1hcChmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBpbmRleCA8IDIgPyBuYW1lICsgc2lkZSA6IFwiYm9yZGVyXCIgKyBzaWRlICsgbmFtZTtcbiAgfSk7XG5cbiAgX3NwZWNpYWxQcm9wc1tpbmRleCA+IDEgPyBcImJvcmRlclwiICsgbmFtZSA6IG5hbWVdID0gZnVuY3Rpb24gKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgdmFyIGEsIHZhcnM7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDQpIHtcbiAgICAgIC8vIGdldHRlciwgcGFzc2VkIHRhcmdldCwgcHJvcGVydHksIGFuZCB1bml0IChmcm9tIF9nZXQoKSlcbiAgICAgIGEgPSBwcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIF9nZXQocGx1Z2luLCBwcm9wLCBwcm9wZXJ0eSk7XG4gICAgICB9KTtcbiAgICAgIHZhcnMgPSBhLmpvaW4oXCIgXCIpO1xuICAgICAgcmV0dXJuIHZhcnMuc3BsaXQoYVswXSkubGVuZ3RoID09PSA1ID8gYVswXSA6IHZhcnM7XG4gICAgfVxuXG4gICAgYSA9IChlbmRWYWx1ZSArIFwiXCIpLnNwbGl0KFwiIFwiKTtcbiAgICB2YXJzID0ge307XG4gICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCwgaSkge1xuICAgICAgcmV0dXJuIHZhcnNbcHJvcF0gPSBhW2ldID0gYVtpXSB8fCBhWyhpIC0gMSkgLyAyIHwgMF07XG4gICAgfSk7XG4gICAgcGx1Z2luLmluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbik7XG4gIH07XG59KTtcblxuZXhwb3J0IHZhciBDU1NQbHVnaW4gPSB7XG4gIG5hbWU6IFwiY3NzXCIsXG4gIHJlZ2lzdGVyOiBfaW5pdENvcmUsXG4gIHRhcmdldFRlc3Q6IGZ1bmN0aW9uIHRhcmdldFRlc3QodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldC5zdHlsZSAmJiB0YXJnZXQubm9kZVR5cGU7XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9wcm9wcyxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHN0YXJ0QXQgPSB0d2Vlbi52YXJzLnN0YXJ0QXQsXG4gICAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICAgIGVuZFZhbHVlLFxuICAgICAgICBlbmROdW0sXG4gICAgICAgIHN0YXJ0TnVtLFxuICAgICAgICB0eXBlLFxuICAgICAgICBzcGVjaWFsUHJvcCxcbiAgICAgICAgcCxcbiAgICAgICAgc3RhcnRVbml0LFxuICAgICAgICBlbmRVbml0LFxuICAgICAgICByZWxhdGl2ZSxcbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkLFxuICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4sXG4gICAgICAgIGNhY2hlLFxuICAgICAgICBzbW9vdGgsXG4gICAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgICBpbmxpbmVQcm9wcztcbiAgICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTsgLy8gd2UgbWF5IGNhbGwgaW5pdCgpIG11bHRpcGxlIHRpbWVzIG9uIHRoZSBzYW1lIHBsdWdpbiBpbnN0YW5jZSwgbGlrZSB3aGVuIGFkZGluZyBzcGVjaWFsIHByb3BlcnRpZXMsIHNvIG1ha2Ugc3VyZSB3ZSBkb24ndCBvdmVyd3JpdGUgdGhlIHJldmVydCBkYXRhIG9yIGlubGluZVByb3BzXG5cbiAgICB0aGlzLnN0eWxlcyA9IHRoaXMuc3R5bGVzIHx8IF9nZXRTdHlsZVNhdmVyKHRhcmdldCk7XG4gICAgaW5saW5lUHJvcHMgPSB0aGlzLnN0eWxlcy5wcm9wcztcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgaWYgKHAgPT09IFwiYXV0b1JvdW5kXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGVuZFZhbHVlID0gdmFyc1twXTtcblxuICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIF9jaGVja1BsdWdpbihwLCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpIHtcbiAgICAgICAgLy8gcGx1Z2luc1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIHNwZWNpYWxQcm9wID0gX3NwZWNpYWxQcm9wc1twXTtcblxuICAgICAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBlbmRWYWx1ZSA9IGVuZFZhbHVlLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICAgICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiB+ZW5kVmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBfcmVwbGFjZVJhbmRvbShlbmRWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcGVjaWFsUHJvcCkge1xuICAgICAgICBzcGVjaWFsUHJvcCh0aGlzLCB0YXJnZXQsIHAsIGVuZFZhbHVlLCB0d2VlbikgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9IGVsc2UgaWYgKHAuc3Vic3RyKDAsIDIpID09PSBcIi0tXCIpIHtcbiAgICAgICAgLy9DU1MgdmFyaWFibGVcbiAgICAgICAgc3RhcnRWYWx1ZSA9IChnZXRDb21wdXRlZFN0eWxlKHRhcmdldCkuZ2V0UHJvcGVydHlWYWx1ZShwKSArIFwiXCIpLnRyaW0oKTtcbiAgICAgICAgZW5kVmFsdWUgKz0gXCJcIjtcbiAgICAgICAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKCFfY29sb3JFeHAudGVzdChzdGFydFZhbHVlKSkge1xuICAgICAgICAgIC8vIGNvbG9ycyBkb24ndCBoYXZlIHVuaXRzXG4gICAgICAgICAgc3RhcnRVbml0ID0gZ2V0VW5pdChzdGFydFZhbHVlKTtcbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbmRVbml0ID8gc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIChzdGFydFZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSArIGVuZFVuaXQpIDogc3RhcnRVbml0ICYmIChlbmRWYWx1ZSArPSBzdGFydFVuaXQpO1xuICAgICAgICB0aGlzLmFkZChzdHlsZSwgXCJzZXRQcm9wZXJ0eVwiLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKHAsIDAsIHN0eWxlW3BdKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoc3RhcnRBdCAmJiBwIGluIHN0YXJ0QXQpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHNvbWVvbmUgaGFyZC1jb2RlcyBhIGNvbXBsZXggdmFsdWUgYXMgdGhlIHN0YXJ0LCBsaWtlIHRvcDogXCJjYWxjKDJ2aCAvIDIpXCIuIFdpdGhvdXQgdGhpcywgaXQnZCB1c2UgdGhlIGNvbXB1dGVkIHZhbHVlIChhbHdheXMgaW4gcHgpXG4gICAgICAgICAgc3RhcnRWYWx1ZSA9IHR5cGVvZiBzdGFydEF0W3BdID09PSBcImZ1bmN0aW9uXCIgPyBzdGFydEF0W3BdLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogc3RhcnRBdFtwXTtcbiAgICAgICAgICBfaXNTdHJpbmcoc3RhcnRWYWx1ZSkgJiYgfnN0YXJ0VmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgJiYgKHN0YXJ0VmFsdWUgPSBfcmVwbGFjZVJhbmRvbShzdGFydFZhbHVlKSk7XG4gICAgICAgICAgZ2V0VW5pdChzdGFydFZhbHVlICsgXCJcIikgfHwgc3RhcnRWYWx1ZSA9PT0gXCJhdXRvXCIgfHwgKHN0YXJ0VmFsdWUgKz0gX2NvbmZpZy51bml0c1twXSB8fCBnZXRVbml0KF9nZXQodGFyZ2V0LCBwKSkgfHwgXCJcIik7IC8vIGZvciBjYXNlcyB3aGVuIHNvbWVvbmUgcGFzc2VzIGluIGEgdW5pdGxlc3MgdmFsdWUgbGlrZSB7eDogMTAwfTsgaWYgd2UgdHJ5IHNldHRpbmcgdHJhbnNsYXRlKDEwMCwgMHB4KSBpdCB3b24ndCB3b3JrLlxuXG4gICAgICAgICAgKHN0YXJ0VmFsdWUgKyBcIlwiKS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApKTsgLy8gY2FuJ3Qgd29yayB3aXRoIHJlbGF0aXZlIHZhbHVlc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXJ0VmFsdWUgPSBfZ2V0KHRhcmdldCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgIHJlbGF0aXZlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIGVuZFZhbHVlLnN1YnN0cigwLCAyKTtcbiAgICAgICAgcmVsYXRpdmUgJiYgKGVuZFZhbHVlID0gZW5kVmFsdWUuc3Vic3RyKDIpKTtcbiAgICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHAgaW4gX3Byb3BlcnR5QWxpYXNlcykge1xuICAgICAgICAgIGlmIChwID09PSBcImF1dG9BbHBoYVwiKSB7XG4gICAgICAgICAgICAvL3NwZWNpYWwgY2FzZSB3aGVyZSB3ZSBjb250cm9sIHRoZSB2aXNpYmlsaXR5IGFsb25nIHdpdGggb3BhY2l0eS4gV2Ugc3RpbGwgYWxsb3cgdGhlIG9wYWNpdHkgdmFsdWUgdG8gcGFzcyB0aHJvdWdoIGFuZCBnZXQgdHdlZW5lZC5cbiAgICAgICAgICAgIGlmIChzdGFydE51bSA9PT0gMSAmJiBfZ2V0KHRhcmdldCwgXCJ2aXNpYmlsaXR5XCIpID09PSBcImhpZGRlblwiICYmIGVuZE51bSkge1xuICAgICAgICAgICAgICAvL2lmIHZpc2liaWxpdHkgaXMgaW5pdGlhbGx5IHNldCB0byBcImhpZGRlblwiLCB3ZSBzaG91bGQgaW50ZXJwcmV0IHRoYXQgYXMgaW50ZW50IHRvIG1ha2Ugb3BhY2l0eSAwIChhIGNvbnZlbmllbmNlKVxuICAgICAgICAgICAgICBzdGFydE51bSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlubGluZVByb3BzLnB1c2goXCJ2aXNpYmlsaXR5XCIsIDAsIHN0eWxlLnZpc2liaWxpdHkpO1xuXG4gICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgXCJ2aXNpYmlsaXR5XCIsIHN0YXJ0TnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCBlbmROdW0gPyBcImluaGVyaXRcIiA6IFwiaGlkZGVuXCIsICFlbmROdW0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwICE9PSBcInNjYWxlXCIgJiYgcCAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcF07XG4gICAgICAgICAgICB+cC5pbmRleE9mKFwiLFwiKSAmJiAocCA9IHAuc3BsaXQoXCIsXCIpWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQgPSBwIGluIF90cmFuc2Zvcm1Qcm9wczsgLy8tLS0gVFJBTlNGT1JNLVJFTEFURUQgLS0tXG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCkge1xuICAgICAgICAgIHRoaXMuc3R5bGVzLnNhdmUocCk7XG5cbiAgICAgICAgICBpZiAoIXRyYW5zZm9ybVByb3BUd2Vlbikge1xuICAgICAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gICAgICAgICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gJiYgIXZhcnMucGFyc2VUcmFuc2Zvcm0gfHwgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdmFycy5wYXJzZVRyYW5zZm9ybSk7IC8vIGlmLCBmb3IgZXhhbXBsZSwgZ3NhcC5zZXQoLi4uIHt0cmFuc2Zvcm06XCJ0cmFuc2xhdGVYKDUwdncpXCJ9KSwgdGhlIF9nZXQoKSBjYWxsIGRvZXNuJ3QgcGFyc2UgdGhlIHRyYW5zZm9ybSwgdGh1cyBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gd29uJ3QgYmUgc2V0IHlldCBzbyBmb3JjZSB0aGUgcGFyc2luZyBvZiB0aGUgdHJhbnNmb3JtIGhlcmUuXG5cbiAgICAgICAgICAgIHNtb290aCA9IHZhcnMuc21vb3RoT3JpZ2luICE9PSBmYWxzZSAmJiBjYWNoZS5zbW9vdGg7XG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4gPSB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHN0eWxlLCBfdHJhbnNmb3JtUHJvcCwgMCwgMSwgY2FjaGUucmVuZGVyVHJhbnNmb3JtLCBjYWNoZSwgMCwgLTEpOyAvL3RoZSBmaXJzdCB0aW1lIHRocm91Z2gsIGNyZWF0ZSB0aGUgcmVuZGVyaW5nIFByb3BUd2VlbiBzbyB0aGF0IGl0IHJ1bnMgTEFTVCAoaW4gdGhlIGxpbmtlZCBsaXN0LCB3ZSBrZWVwIGFkZGluZyB0byB0aGUgYmVnaW5uaW5nKVxuXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4uZGVwID0gMTsgLy9mbGFnIGl0IGFzIGRlcGVuZGVudCBzbyB0aGF0IGlmIHRoaW5ncyBnZXQga2lsbGVkL292ZXJ3cml0dGVuIGFuZCB0aGlzIGlzIHRoZSBvbmx5IFByb3BUd2VlbiBsZWZ0LCB3ZSBjYW4gc2FmZWx5IGtpbGwgdGhlIHdob2xlIHR3ZWVuLlxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwID09PSBcInNjYWxlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgY2FjaGUsIFwic2NhbGVZXCIsIGNhY2hlLnNjYWxlWSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoY2FjaGUuc2NhbGVZLCByZWxhdGl2ZSArIGVuZE51bSkgOiBlbmROdW0pIC0gY2FjaGUuc2NhbGVZIHx8IDAsIF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICAgIHRoaXMuX3B0LnUgPSAwO1xuICAgICAgICAgICAgcHJvcHMucHVzaChcInNjYWxlWVwiLCBwKTtcbiAgICAgICAgICAgIHAgKz0gXCJYXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybU9yaWdpblwiKSB7XG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKF90cmFuc2Zvcm1PcmlnaW5Qcm9wLCAwLCBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0pO1xuICAgICAgICAgICAgZW5kVmFsdWUgPSBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyhlbmRWYWx1ZSk7IC8vaW4gY2FzZSBzb21ldGhpbmcgbGlrZSBcImxlZnQgdG9wXCIgb3IgXCJib3R0b20gcmlnaHRcIiBpcyBwYXNzZWQgaW4uIENvbnZlcnQgdG8gcGVyY2VudGFnZXMuXG5cbiAgICAgICAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDAsIHNtb290aCwgMCwgdGhpcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbmRVbml0ID0gcGFyc2VGbG9hdChlbmRWYWx1ZS5zcGxpdChcIiBcIilbMl0pIHx8IDA7IC8vaGFuZGxlIHRoZSB6T3JpZ2luIHNlcGFyYXRlbHkhXG5cbiAgICAgICAgICAgICAgZW5kVW5pdCAhPT0gY2FjaGUuek9yaWdpbiAmJiBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBjYWNoZSwgXCJ6T3JpZ2luXCIsIGNhY2hlLnpPcmlnaW4sIGVuZFVuaXQpO1xuXG4gICAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIHN0eWxlLCBwLCBfZmlyc3RUd29Pbmx5KHN0YXJ0VmFsdWUpLCBfZmlyc3RUd29Pbmx5KGVuZFZhbHVlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzdmdPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDEsIHNtb290aCwgMCwgdGhpcyk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCBpbiBfcm90YXRpb25hbFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuKHRoaXMsIGNhY2hlLCBwLCBzdGFydE51bSwgcmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmRWYWx1ZSkgOiBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzbW9vdGhPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwic21vb3RoXCIsIGNhY2hlLnNtb290aCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwiZm9yY2UzRFwiKSB7XG4gICAgICAgICAgICBjYWNoZVtwXSA9IGVuZFZhbHVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBfYWRkUmF3VHJhbnNmb3JtUFRzKHRoaXMsIGVuZFZhbHVlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIHAgPSBfY2hlY2tQcm9wUHJlZml4KHApIHx8IHA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChlbmROdW0gfHwgZW5kTnVtID09PSAwKSAmJiAoc3RhcnROdW0gfHwgc3RhcnROdW0gPT09IDApICYmICFfY29tcGxleEV4cC50ZXN0KGVuZFZhbHVlKSAmJiBwIGluIHN0eWxlKSB7XG4gICAgICAgICAgc3RhcnRVbml0ID0gKHN0YXJ0VmFsdWUgKyBcIlwiKS5zdWJzdHIoKHN0YXJ0TnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICBlbmROdW0gfHwgKGVuZE51bSA9IDApOyAvLyBwcm90ZWN0IGFnYWluc3QgTmFOXG5cbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSkgfHwgKHAgaW4gX2NvbmZpZy51bml0cyA/IF9jb25maWcudW5pdHNbcF0gOiBzdGFydFVuaXQpO1xuICAgICAgICAgIHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpKTtcbiAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGlzVHJhbnNmb3JtUmVsYXRlZCA/IGNhY2hlIDogc3R5bGUsIHAsIHN0YXJ0TnVtLCAocmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIHN0YXJ0TnVtLCAhaXNUcmFuc2Zvcm1SZWxhdGVkICYmIChlbmRVbml0ID09PSBcInB4XCIgfHwgcCA9PT0gXCJ6SW5kZXhcIikgJiYgdmFycy5hdXRvUm91bmQgIT09IGZhbHNlID8gX3JlbmRlclJvdW5kZWRDU1NQcm9wIDogX3JlbmRlckNTU1Byb3ApO1xuICAgICAgICAgIHRoaXMuX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIGVuZFVuaXQgIT09IFwiJVwiKSB7XG4gICAgICAgICAgICAvL3doZW4gdGhlIHR3ZWVuIGdvZXMgYWxsIHRoZSB3YXkgYmFjayB0byB0aGUgYmVnaW5uaW5nLCB3ZSBuZWVkIHRvIHJldmVydCBpdCB0byB0aGUgT0xEL09SSUdJTkFMIHZhbHVlICh3aXRoIHRob3NlIHVuaXRzKS4gV2UgcmVjb3JkIHRoYXQgYXMgYSBcImJcIiAoYmVnaW5uaW5nKSBwcm9wZXJ0eSBhbmQgcG9pbnQgdG8gYSByZW5kZXIgbWV0aG9kIHRoYXQgaGFuZGxlcyB0aGF0LiAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgICAgICAgICAgdGhpcy5fcHQuYiA9IHN0YXJ0VmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9wdC5yID0gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKHAgaW4gc3R5bGUpKSB7XG4gICAgICAgICAgaWYgKHAgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAvL21heWJlIGl0J3Mgbm90IGEgc3R5bGUgLSBpdCBjb3VsZCBiZSBhIHByb3BlcnR5IGFkZGVkIGRpcmVjdGx5IHRvIGFuIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSdsbCB0cnkgdG8gYW5pbWF0ZSB0aGF0LlxuICAgICAgICAgICAgdGhpcy5hZGQodGFyZ2V0LCBwLCBzdGFydFZhbHVlIHx8IHRhcmdldFtwXSwgcmVsYXRpdmUgPyByZWxhdGl2ZSArIGVuZFZhbHVlIDogZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgIT09IFwicGFyc2VUcmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgX21pc3NpbmdQbHVnaW4ocCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHRoaXMsIHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgcmVsYXRpdmUgPyByZWxhdGl2ZSArIGVuZFZhbHVlIDogZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChwIGluIHN0eWxlID8gaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSkgOiBpbmxpbmVQcm9wcy5wdXNoKHAsIDEsIHN0YXJ0VmFsdWUgfHwgdGFyZ2V0W3BdKSk7XG4gICAgICAgIHByb3BzLnB1c2gocCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0aGlzKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICBpZiAoZGF0YS50d2Vlbi5fdGltZSB8fCAhX3JldmVydGluZygpKSB7XG4gICAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLnN0eWxlcy5yZXZlcnQoKTtcbiAgICB9XG4gIH0sXG4gIGdldDogX2dldCxcbiAgYWxpYXNlczogX3Byb3BlcnR5QWxpYXNlcyxcbiAgZ2V0U2V0dGVyOiBmdW5jdGlvbiBnZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgcGx1Z2luKSB7XG4gICAgLy9yZXR1cm5zIGEgc2V0dGVyIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSBhbmQgYXBwbGllcyBpdCBhY2NvcmRpbmdseS4gUmVtZW1iZXIsIHByb3BlcnRpZXMgbGlrZSBcInhcIiBhcmVuJ3QgYXMgc2ltcGxlIGFzIHRhcmdldC5zdHlsZS5wcm9wZXJ0eSA9IHZhbHVlIGJlY2F1c2UgdGhleSd2ZSBnb3QgdG8gYmUgYXBwbGllZCB0byBhIHByb3h5IG9iamVjdCBhbmQgdGhlbiBtZXJnZWQgaW50byBhIHRyYW5zZm9ybSBzdHJpbmcgaW4gYSByZW5kZXJlci5cbiAgICB2YXIgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuICAgIHAgJiYgcC5pbmRleE9mKFwiLFwiKSA8IDAgJiYgKHByb3BlcnR5ID0gcCk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3AgJiYgKHRhcmdldC5fZ3NhcC54IHx8IF9nZXQodGFyZ2V0LCBcInhcIikpID8gcGx1Z2luICYmIF9yZWNlbnRTZXR0ZXJQbHVnaW4gPT09IHBsdWdpbiA/IHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGUgOiBfc2V0dGVyVHJhbnNmb3JtIDogKF9yZWNlbnRTZXR0ZXJQbHVnaW4gPSBwbHVnaW4gfHwge30pICYmIChwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlV2l0aFJlbmRlciA6IF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKSA6IHRhcmdldC5zdHlsZSAmJiAhX2lzVW5kZWZpbmVkKHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0pID8gX3NldHRlckNTU1N0eWxlIDogfnByb3BlcnR5LmluZGV4T2YoXCItXCIpID8gX3NldHRlckNTU1Byb3AgOiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpO1xuICB9LFxuICBjb3JlOiB7XG4gICAgX3JlbW92ZVByb3BlcnR5OiBfcmVtb3ZlUHJvcGVydHksXG4gICAgX2dldE1hdHJpeDogX2dldE1hdHJpeFxuICB9XG59O1xuZ3NhcC51dGlscy5jaGVja1ByZWZpeCA9IF9jaGVja1Byb3BQcmVmaXg7XG5nc2FwLmNvcmUuZ2V0U3R5bGVTYXZlciA9IF9nZXRTdHlsZVNhdmVyO1xuXG4oZnVuY3Rpb24gKHBvc2l0aW9uQW5kU2NhbGUsIHJvdGF0aW9uLCBvdGhlcnMsIGFsaWFzZXMpIHtcbiAgdmFyIGFsbCA9IF9mb3JFYWNoTmFtZShwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbiArIFwiLFwiICsgb3RoZXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF90cmFuc2Zvcm1Qcm9wc1tuYW1lXSA9IDE7XG4gIH0pO1xuXG4gIF9mb3JFYWNoTmFtZShyb3RhdGlvbiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJkZWdcIjtcbiAgICBfcm90YXRpb25hbFByb3BlcnRpZXNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfcHJvcGVydHlBbGlhc2VzW2FsbFsxM11dID0gcG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb247XG5cbiAgX2ZvckVhY2hOYW1lKGFsaWFzZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHNwbGl0ID0gbmFtZS5zcGxpdChcIjpcIik7XG4gICAgX3Byb3BlcnR5QWxpYXNlc1tzcGxpdFsxXV0gPSBhbGxbc3BsaXRbMF1dO1xuICB9KTtcbn0pKFwieCx5LHosc2NhbGUsc2NhbGVYLHNjYWxlWSx4UGVyY2VudCx5UGVyY2VudFwiLCBcInJvdGF0aW9uLHJvdGF0aW9uWCxyb3RhdGlvblksc2tld1gsc2tld1lcIiwgXCJ0cmFuc2Zvcm0sdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpbixmb3JjZTNELHNtb290aE9yaWdpbix0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLCBcIjA6dHJhbnNsYXRlWCwxOnRyYW5zbGF0ZVksMjp0cmFuc2xhdGVaLDg6cm90YXRlLDg6cm90YXRpb25aLDg6cm90YXRlWiw5OnJvdGF0ZVgsMTA6cm90YXRlWVwiKTtcblxuX2ZvckVhY2hOYW1lKFwieCx5LHosdG9wLHJpZ2h0LGJvdHRvbSxsZWZ0LHdpZHRoLGhlaWdodCxmb250U2l6ZSxwYWRkaW5nLG1hcmdpbixwZXJzcGVjdGl2ZVwiLCBmdW5jdGlvbiAobmFtZSkge1xuICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJweFwiO1xufSk7XG5cbmdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKTtcbmV4cG9ydCB7IENTU1BsdWdpbiBhcyBkZWZhdWx0LCBfZ2V0QkJveCwgX2NyZWF0ZUVsZW1lbnQsIF9jaGVja1Byb3BQcmVmaXggYXMgY2hlY2tQcmVmaXggfTsiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qIVxuICogR1NBUCAzLjEyLjVcbiAqIGh0dHBzOi8vZ3NhcC5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDI0LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dzYXAuY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdTQVAgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgX2NvbmZpZyA9IHtcbiAgYXV0b1NsZWVwOiAxMjAsXG4gIGZvcmNlM0Q6IFwiYXV0b1wiLFxuICBudWxsVGFyZ2V0V2FybjogMSxcbiAgdW5pdHM6IHtcbiAgICBsaW5lSGVpZ2h0OiBcIlwiXG4gIH1cbn0sXG4gICAgX2RlZmF1bHRzID0ge1xuICBkdXJhdGlvbjogLjUsXG4gIG92ZXJ3cml0ZTogZmFsc2UsXG4gIGRlbGF5OiAwXG59LFxuICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgX3JldmVydGluZyxcbiAgICBfY29udGV4dCxcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF90aW55TnVtID0gMSAvIF9iaWdOdW0sXG4gICAgXzJQSSA9IE1hdGguUEkgKiAyLFxuICAgIF9IQUxGX1BJID0gXzJQSSAvIDQsXG4gICAgX2dzSUQgPSAwLFxuICAgIF9zcXJ0ID0gTWF0aC5zcXJ0LFxuICAgIF9jb3MgPSBNYXRoLmNvcyxcbiAgICBfc2luID0gTWF0aC5zaW4sXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufSxcbiAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn0sXG4gICAgX2lzVW5kZWZpbmVkID0gZnVuY3Rpb24gX2lzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufSxcbiAgICBfaXNOb3RGYWxzZSA9IGZ1bmN0aW9uIF9pc05vdEZhbHNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gZmFsc2U7XG59LFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX2lzRnVuY09yU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgfHwgX2lzU3RyaW5nKHZhbHVlKTtcbn0sXG4gICAgX2lzVHlwZWRBcnJheSA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiICYmIEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbiAoKSB7fSxcbiAgICAvLyBub3RlOiBJRTEwIGhhcyBBcnJheUJ1ZmZlciwgYnV0IE5PVCBBcnJheUJ1ZmZlci5pc1ZpZXcoKS5cbl9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICBfc3RyaWN0TnVtRXhwID0gLyg/Oi0/XFwuP1xcZHxcXC4pKy9naSxcbiAgICAvL29ubHkgbnVtYmVycyAoaW5jbHVkaW5nIG5lZ2F0aXZlcyBhbmQgZGVjaW1hbHMpIGJ1dCBOT1QgcmVsYXRpdmUgdmFsdWVzLlxuX251bUV4cCA9IC9bLSs9Ll0qXFxkK1suZVxcLStdKlxcZCpbZVxcLStdKlxcZCovZyxcbiAgICAvL2ZpbmRzIGFueSBudW1iZXJzLCBpbmNsdWRpbmcgb25lcyB0aGF0IHN0YXJ0IHdpdGggKz0gb3IgLT0sIG5lZ2F0aXZlIG51bWJlcnMsIGFuZCBvbmVzIGluIHNjaWVudGlmaWMgbm90YXRpb24gbGlrZSAxZS04LlxuX251bVdpdGhVbml0RXhwID0gL1stKz0uXSpcXGQrWy5lLV0qXFxkKlthLXolXSovZyxcbiAgICBfY29tcGxleFN0cmluZ051bUV4cCA9IC9bLSs9Ll0qXFxkK1xcLj9cXGQqKD86ZS18ZVxcKyk/XFxkKi9naSxcbiAgICAvL2R1cGxpY2F0ZSBzbyB0aGF0IHdoaWxlIHdlJ3JlIGxvb3BpbmcgdGhyb3VnaCBtYXRjaGVzIGZyb20gZXhlYygpLCBpdCBkb2Vzbid0IGNvbnRhbWluYXRlIHRoZSBsYXN0SW5kZXggb2YgX251bUV4cCB3aGljaCB3ZSB1c2UgdG8gc2VhcmNoIGZvciBjb2xvcnMgdG9vLlxuX3JlbEV4cCA9IC9bKy1dPS0/Wy5cXGRdKy8sXG4gICAgX2RlbGltaXRlZFZhbHVlRXhwID0gL1teLCdcIlxcW1xcXVxcc10rL2dpLFxuICAgIC8vIHByZXZpb3VzbHkgL1sjXFwtKy5dKlxcYlthLXpcXGRcXC09KyUuXSsvZ2kgYnV0IGRpZG4ndCBjYXRjaCBzcGVjaWFsIGNoYXJhY3RlcnMuXG5fdW5pdEV4cCA9IC9eWytcXC09ZVxcc1xcZF0qXFxkK1suXFxkXSooW2Etel0qfCUpXFxzKiQvaSxcbiAgICBfZ2xvYmFsVGltZWxpbmUsXG4gICAgX3dpbixcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX2RvYyxcbiAgICBfZ2xvYmFscyA9IHt9LFxuICAgIF9pbnN0YWxsU2NvcGUgPSB7fSxcbiAgICBfY29yZVJlYWR5LFxuICAgIF9pbnN0YWxsID0gZnVuY3Rpb24gX2luc3RhbGwoc2NvcGUpIHtcbiAgcmV0dXJuIChfaW5zdGFsbFNjb3BlID0gX21lcmdlKHNjb3BlLCBfZ2xvYmFscykpICYmIGdzYXA7XG59LFxuICAgIF9taXNzaW5nUGx1Z2luID0gZnVuY3Rpb24gX21pc3NpbmdQbHVnaW4ocHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiBjb25zb2xlLndhcm4oXCJJbnZhbGlkIHByb3BlcnR5XCIsIHByb3BlcnR5LCBcInNldCB0b1wiLCB2YWx1ZSwgXCJNaXNzaW5nIHBsdWdpbj8gZ3NhcC5yZWdpc3RlclBsdWdpbigpXCIpO1xufSxcbiAgICBfd2FybiA9IGZ1bmN0aW9uIF93YXJuKG1lc3NhZ2UsIHN1cHByZXNzKSB7XG4gIHJldHVybiAhc3VwcHJlc3MgJiYgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xufSxcbiAgICBfYWRkR2xvYmFsID0gZnVuY3Rpb24gX2FkZEdsb2JhbChuYW1lLCBvYmopIHtcbiAgcmV0dXJuIG5hbWUgJiYgKF9nbG9iYWxzW25hbWVdID0gb2JqKSAmJiBfaW5zdGFsbFNjb3BlICYmIChfaW5zdGFsbFNjb3BlW25hbWVdID0gb2JqKSB8fCBfZ2xvYmFscztcbn0sXG4gICAgX2VtcHR5RnVuYyA9IGZ1bmN0aW9uIF9lbXB0eUZ1bmMoKSB7XG4gIHJldHVybiAwO1xufSxcbiAgICBfc3RhcnRBdFJldmVydENvbmZpZyA9IHtcbiAgc3VwcHJlc3NFdmVudHM6IHRydWUsXG4gIGlzU3RhcnQ6IHRydWUsXG4gIGtpbGw6IGZhbHNlXG59LFxuICAgIF9yZXZlcnRDb25maWdOb0tpbGwgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBraWxsOiBmYWxzZVxufSxcbiAgICBfcmV2ZXJ0Q29uZmlnID0ge1xuICBzdXBwcmVzc0V2ZW50czogdHJ1ZVxufSxcbiAgICBfcmVzZXJ2ZWRQcm9wcyA9IHt9LFxuICAgIF9sYXp5VHdlZW5zID0gW10sXG4gICAgX2xhenlMb29rdXAgPSB7fSxcbiAgICBfbGFzdFJlbmRlcmVkRnJhbWUsXG4gICAgX3BsdWdpbnMgPSB7fSxcbiAgICBfZWZmZWN0cyA9IHt9LFxuICAgIF9uZXh0R0NGcmFtZSA9IDMwLFxuICAgIF9oYXJuZXNzUGx1Z2lucyA9IFtdLFxuICAgIF9jYWxsYmFja05hbWVzID0gXCJcIixcbiAgICBfaGFybmVzcyA9IGZ1bmN0aW9uIF9oYXJuZXNzKHRhcmdldHMpIHtcbiAgdmFyIHRhcmdldCA9IHRhcmdldHNbMF0sXG4gICAgICBoYXJuZXNzUGx1Z2luLFxuICAgICAgaTtcbiAgX2lzT2JqZWN0KHRhcmdldCkgfHwgX2lzRnVuY3Rpb24odGFyZ2V0KSB8fCAodGFyZ2V0cyA9IFt0YXJnZXRzXSk7XG5cbiAgaWYgKCEoaGFybmVzc1BsdWdpbiA9ICh0YXJnZXQuX2dzYXAgfHwge30pLmhhcm5lc3MpKSB7XG4gICAgLy8gZmluZCB0aGUgZmlyc3QgdGFyZ2V0IHdpdGggYSBoYXJuZXNzLiBXZSBhc3N1bWUgdGFyZ2V0cyBwYXNzZWQgaW50byBhbiBhbmltYXRpb24gd2lsbCBiZSBvZiBzaW1pbGFyIHR5cGUsIG1lYW5pbmcgdGhlIHNhbWUga2luZCBvZiBoYXJuZXNzIGNhbiBiZSB1c2VkIGZvciB0aGVtIGFsbCAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgIGkgPSBfaGFybmVzc1BsdWdpbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSAmJiAhX2hhcm5lc3NQbHVnaW5zW2ldLnRhcmdldFRlc3QodGFyZ2V0KSkge31cblxuICAgIGhhcm5lc3NQbHVnaW4gPSBfaGFybmVzc1BsdWdpbnNbaV07XG4gIH1cblxuICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHRhcmdldHNbaV0gJiYgKHRhcmdldHNbaV0uX2dzYXAgfHwgKHRhcmdldHNbaV0uX2dzYXAgPSBuZXcgR1NDYWNoZSh0YXJnZXRzW2ldLCBoYXJuZXNzUGx1Z2luKSkpIHx8IHRhcmdldHMuc3BsaWNlKGksIDEpO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldHM7XG59LFxuICAgIF9nZXRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRDYWNoZSh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0b0FycmF5KHRhcmdldCkpWzBdLl9nc2FwO1xufSxcbiAgICBfZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdikge1xuICByZXR1cm4gKHYgPSB0YXJnZXRbcHJvcGVydHldKSAmJiBfaXNGdW5jdGlvbih2KSA/IHRhcmdldFtwcm9wZXJ0eV0oKSA6IF9pc1VuZGVmaW5lZCh2KSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUocHJvcGVydHkpIHx8IHY7XG59LFxuICAgIF9mb3JFYWNoTmFtZSA9IGZ1bmN0aW9uIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuYykge1xuICByZXR1cm4gKG5hbWVzID0gbmFtZXMuc3BsaXQoXCIsXCIpKS5mb3JFYWNoKGZ1bmMpIHx8IG5hbWVzO1xufSxcbiAgICAvL3NwbGl0IGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgbmFtZXMgaW50byBhbiBhcnJheSwgdGhlbiBydW4gYSBmb3JFYWNoKCkgZnVuY3Rpb24gYW5kIHJldHVybiB0aGUgc3BsaXQgYXJyYXkgKHRoaXMgaXMganVzdCBhIHdheSB0byBjb25zb2xpZGF0ZS9zaG9ydGVuIHNvbWUgY29kZSkuXG5fcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDApIC8gMTAwMDAwIHx8IDA7XG59LFxuICAgIF9yb3VuZFByZWNpc2UgPSBmdW5jdGlvbiBfcm91bmRQcmVjaXNlKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwMDAwMDApIC8gMTAwMDAwMDAgfHwgMDtcbn0sXG4gICAgLy8gaW5jcmVhc2VkIHByZWNpc2lvbiBtb3N0bHkgZm9yIHRpbWluZyB2YWx1ZXMuXG5fcGFyc2VSZWxhdGl2ZSA9IGZ1bmN0aW9uIF9wYXJzZVJlbGF0aXZlKHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgb3BlcmF0b3IgPSB2YWx1ZS5jaGFyQXQoMCksXG4gICAgICBlbmQgPSBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cigyKSk7XG4gIHN0YXJ0ID0gcGFyc2VGbG9hdChzdGFydCk7XG4gIHJldHVybiBvcGVyYXRvciA9PT0gXCIrXCIgPyBzdGFydCArIGVuZCA6IG9wZXJhdG9yID09PSBcIi1cIiA/IHN0YXJ0IC0gZW5kIDogb3BlcmF0b3IgPT09IFwiKlwiID8gc3RhcnQgKiBlbmQgOiBzdGFydCAvIGVuZDtcbn0sXG4gICAgX2FycmF5Q29udGFpbnNBbnkgPSBmdW5jdGlvbiBfYXJyYXlDb250YWluc0FueSh0b1NlYXJjaCwgdG9GaW5kKSB7XG4gIC8vc2VhcmNoZXMgb25lIGFycmF5IHRvIGZpbmQgbWF0Y2hlcyBmb3IgYW55IG9mIHRoZSBpdGVtcyBpbiB0aGUgdG9GaW5kIGFycmF5LiBBcyBzb29uIGFzIG9uZSBpcyBmb3VuZCwgaXQgcmV0dXJucyB0cnVlLiBJdCBkb2VzIE5PVCByZXR1cm4gYWxsIHRoZSBtYXRjaGVzOyBpdCdzIHNpbXBseSBhIGJvb2xlYW4gc2VhcmNoLlxuICB2YXIgbCA9IHRvRmluZC5sZW5ndGgsXG4gICAgICBpID0gMDtcblxuICBmb3IgKDsgdG9TZWFyY2guaW5kZXhPZih0b0ZpbmRbaV0pIDwgMCAmJiArK2kgPCBsOykge31cblxuICByZXR1cm4gaSA8IGw7XG59LFxuICAgIF9sYXp5UmVuZGVyID0gZnVuY3Rpb24gX2xhenlSZW5kZXIoKSB7XG4gIHZhciBsID0gX2xhenlUd2VlbnMubGVuZ3RoLFxuICAgICAgYSA9IF9sYXp5VHdlZW5zLnNsaWNlKDApLFxuICAgICAgaSxcbiAgICAgIHR3ZWVuO1xuXG4gIF9sYXp5TG9va3VwID0ge307XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgIHR3ZWVuID0gYVtpXTtcbiAgICB0d2VlbiAmJiB0d2Vlbi5fbGF6eSAmJiAodHdlZW4ucmVuZGVyKHR3ZWVuLl9sYXp5WzBdLCB0d2Vlbi5fbGF6eVsxXSwgdHJ1ZSkuX2xhenkgPSAwKTtcbiAgfVxufSxcbiAgICBfbGF6eVNhZmVSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVNhZmVSZW5kZXIoYW5pbWF0aW9uLCB0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmICFfcmV2ZXJ0aW5nICYmIF9sYXp5UmVuZGVyKCk7XG4gIGFuaW1hdGlvbi5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcgJiYgdGltZSA8IDAgJiYgKGFuaW1hdGlvbi5faW5pdHRlZCB8fCBhbmltYXRpb24uX3N0YXJ0QXQpKTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoICYmICFfcmV2ZXJ0aW5nICYmIF9sYXp5UmVuZGVyKCk7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBzb21lb25lIGNhbGxzIHNlZWsoKSBvciB0aW1lKCkgb3IgcHJvZ3Jlc3MoKSwgdGhleSBleHBlY3QgYW4gaW1tZWRpYXRlIHJlbmRlci5cbn0sXG4gICAgX251bWVyaWNJZlBvc3NpYmxlID0gZnVuY3Rpb24gX251bWVyaWNJZlBvc3NpYmxlKHZhbHVlKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIHJldHVybiAobiB8fCBuID09PSAwKSAmJiAodmFsdWUgKyBcIlwiKS5tYXRjaChfZGVsaW1pdGVkVmFsdWVFeHApLmxlbmd0aCA8IDIgPyBuIDogX2lzU3RyaW5nKHZhbHVlKSA/IHZhbHVlLnRyaW0oKSA6IHZhbHVlO1xufSxcbiAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2gocCkge1xuICByZXR1cm4gcDtcbn0sXG4gICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgIHAgaW4gb2JqIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfc2V0S2V5ZnJhbWVEZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXRLZXlmcmFtZURlZmF1bHRzKGV4Y2x1ZGVEdXJhdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgZGVmYXVsdHMpIHtcbiAgICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgICBwIGluIG9iaiB8fCBwID09PSBcImR1cmF0aW9uXCIgJiYgZXhjbHVkZUR1cmF0aW9uIHx8IHAgPT09IFwiZWFzZVwiIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gICAgfVxuICB9O1xufSxcbiAgICBfbWVyZ2UgPSBmdW5jdGlvbiBfbWVyZ2UoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBiYXNlW3BdID0gdG9NZXJnZVtwXTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufSxcbiAgICBfbWVyZ2VEZWVwID0gZnVuY3Rpb24gX21lcmdlRGVlcChiYXNlLCB0b01lcmdlKSB7XG4gIGZvciAodmFyIHAgaW4gdG9NZXJnZSkge1xuICAgIHAgIT09IFwiX19wcm90b19fXCIgJiYgcCAhPT0gXCJjb25zdHJ1Y3RvclwiICYmIHAgIT09IFwicHJvdG90eXBlXCIgJiYgKGJhc2VbcF0gPSBfaXNPYmplY3QodG9NZXJnZVtwXSkgPyBfbWVyZ2VEZWVwKGJhc2VbcF0gfHwgKGJhc2VbcF0gPSB7fSksIHRvTWVyZ2VbcF0pIDogdG9NZXJnZVtwXSk7XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX2NvcHlFeGNsdWRpbmcgPSBmdW5jdGlvbiBfY29weUV4Y2x1ZGluZyhvYmosIGV4Y2x1ZGluZykge1xuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgcCBpbiBleGNsdWRpbmcgfHwgKGNvcHlbcF0gPSBvYmpbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9pbmhlcml0RGVmYXVsdHMgPSBmdW5jdGlvbiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpIHtcbiAgdmFyIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgIGZ1bmMgPSB2YXJzLmtleWZyYW1lcyA/IF9zZXRLZXlmcmFtZURlZmF1bHRzKF9pc0FycmF5KHZhcnMua2V5ZnJhbWVzKSkgOiBfc2V0RGVmYXVsdHM7XG5cbiAgaWYgKF9pc05vdEZhbHNlKHZhcnMuaW5oZXJpdCkpIHtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBmdW5jKHZhcnMsIHBhcmVudC52YXJzLmRlZmF1bHRzKTtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQgfHwgcGFyZW50Ll9kcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFycztcbn0sXG4gICAgX2FycmF5c01hdGNoID0gZnVuY3Rpb24gX2FycmF5c01hdGNoKGExLCBhMikge1xuICB2YXIgaSA9IGExLmxlbmd0aCxcbiAgICAgIG1hdGNoID0gaSA9PT0gYTIubGVuZ3RoO1xuXG4gIHdoaWxlIChtYXRjaCAmJiBpLS0gJiYgYTFbaV0gPT09IGEyW2ldKSB7fVxuXG4gIHJldHVybiBpIDwgMDtcbn0sXG4gICAgX2FkZExpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX2FkZExpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3AsIHNvcnRCeSkge1xuICBpZiAoZmlyc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICB9XG5cbiAgaWYgKGxhc3RQcm9wID09PSB2b2lkIDApIHtcbiAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgfVxuXG4gIHZhciBwcmV2ID0gcGFyZW50W2xhc3RQcm9wXSxcbiAgICAgIHQ7XG5cbiAgaWYgKHNvcnRCeSkge1xuICAgIHQgPSBjaGlsZFtzb3J0QnldO1xuXG4gICAgd2hpbGUgKHByZXYgJiYgcHJldltzb3J0QnldID4gdCkge1xuICAgICAgcHJldiA9IHByZXYuX3ByZXY7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByZXYpIHtcbiAgICBjaGlsZC5fbmV4dCA9IHByZXYuX25leHQ7XG4gICAgcHJldi5fbmV4dCA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkLl9uZXh0ID0gcGFyZW50W2ZpcnN0UHJvcF07XG4gICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGlmIChjaGlsZC5fbmV4dCkge1xuICAgIGNoaWxkLl9uZXh0Ll9wcmV2ID0gY2hpbGQ7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50W2xhc3RQcm9wXSA9IGNoaWxkO1xuICB9XG5cbiAgY2hpbGQuX3ByZXYgPSBwcmV2O1xuICBjaGlsZC5wYXJlbnQgPSBjaGlsZC5fZHAgPSBwYXJlbnQ7XG4gIHJldHVybiBjaGlsZDtcbn0sXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtID0gZnVuY3Rpb24gX3JlbW92ZUxpbmtlZExpc3RJdGVtKHBhcmVudCwgY2hpbGQsIGZpcnN0UHJvcCwgbGFzdFByb3ApIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IGNoaWxkLl9wcmV2LFxuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gIGlmIChwcmV2KSB7XG4gICAgcHJldi5fbmV4dCA9IG5leHQ7XG4gIH0gZWxzZSBpZiAocGFyZW50W2ZpcnN0UHJvcF0gPT09IGNoaWxkKSB7XG4gICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBuZXh0O1xuICB9XG5cbiAgaWYgKG5leHQpIHtcbiAgICBuZXh0Ll9wcmV2ID0gcHJldjtcbiAgfSBlbHNlIGlmIChwYXJlbnRbbGFzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBwcmV2O1xuICB9XG5cbiAgY2hpbGQuX25leHQgPSBjaGlsZC5fcHJldiA9IGNoaWxkLnBhcmVudCA9IG51bGw7IC8vIGRvbid0IGRlbGV0ZSB0aGUgX2RwIGp1c3Qgc28gd2UgY2FuIHJldmVydCBpZiBuZWNlc3NhcnkuIEJ1dCBwYXJlbnQgc2hvdWxkIGJlIG51bGwgdG8gaW5kaWNhdGUgdGhlIGl0ZW0gaXNuJ3QgaW4gYSBsaW5rZWQgbGlzdC5cbn0sXG4gICAgX3JlbW92ZUZyb21QYXJlbnQgPSBmdW5jdGlvbiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCwgb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSkge1xuICBjaGlsZC5wYXJlbnQgJiYgKCFvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIHx8IGNoaWxkLnBhcmVudC5hdXRvUmVtb3ZlQ2hpbGRyZW4pICYmIGNoaWxkLnBhcmVudC5yZW1vdmUgJiYgY2hpbGQucGFyZW50LnJlbW92ZShjaGlsZCk7XG4gIGNoaWxkLl9hY3QgPSAwO1xufSxcbiAgICBfdW5jYWNoZSA9IGZ1bmN0aW9uIF91bmNhY2hlKGFuaW1hdGlvbiwgY2hpbGQpIHtcbiAgaWYgKGFuaW1hdGlvbiAmJiAoIWNoaWxkIHx8IGNoaWxkLl9lbmQgPiBhbmltYXRpb24uX2R1ciB8fCBjaGlsZC5fc3RhcnQgPCAwKSkge1xuICAgIC8vIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbjogaWYgYSBjaGlsZCBhbmltYXRpb24gaXMgcGFzc2VkIGluIHdlIHNob3VsZCBvbmx5IHVuY2FjaGUgaWYgdGhhdCBjaGlsZCBFWFRFTkRTIHRoZSBhbmltYXRpb24gKGl0cyBlbmQgdGltZSBpcyBiZXlvbmQgdGhlIGVuZClcbiAgICB2YXIgYSA9IGFuaW1hdGlvbjtcblxuICAgIHdoaWxlIChhKSB7XG4gICAgICBhLl9kaXJ0eSA9IDE7XG4gICAgICBhID0gYS5wYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3JlY2FjaGVBbmNlc3RvcnMgPSBmdW5jdGlvbiBfcmVjYWNoZUFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5wYXJlbnQ7XG5cbiAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgLy9zb21ldGltZXMgd2UgbXVzdCBmb3JjZSBhIHJlLXNvcnQgb2YgYWxsIGNoaWxkcmVuIGFuZCB1cGRhdGUgdGhlIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gb2YgYWxsIGFuY2VzdG9yIHRpbWVsaW5lcyBpbW1lZGlhdGVseSBpbiBjYXNlLCBmb3IgZXhhbXBsZSwgaW4gdGhlIG1pZGRsZSBvZiBhIHJlbmRlciBsb29wLCBvbmUgdHdlZW4gYWx0ZXJzIGFub3RoZXIgdHdlZW4ncyB0aW1lU2NhbGUgd2hpY2ggc2hvdmVzIGl0cyBzdGFydFRpbWUgYmVmb3JlIDAsIGZvcmNpbmcgdGhlIHBhcmVudCB0aW1lbGluZSB0byBzaGlmdCBhcm91bmQgYW5kIHNoaWZ0Q2hpbGRyZW4oKSB3aGljaCBjb3VsZCBhZmZlY3QgdGhhdCBuZXh0IHR3ZWVuJ3MgcmVuZGVyIChzdGFydFRpbWUpLiBEb2Vzbid0IG1hdHRlciBmb3IgdGhlIHJvb3QgdGltZWxpbmUgdGhvdWdoLlxuICAgIHBhcmVudC5fZGlydHkgPSAxO1xuICAgIHBhcmVudC50b3RhbER1cmF0aW9uKCk7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9yZXdpbmRTdGFydEF0ID0gZnVuY3Rpb24gX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHJldHVybiB0d2Vlbi5fc3RhcnRBdCAmJiAoX3JldmVydGluZyA/IHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKSA6IHR3ZWVuLnZhcnMuaW1tZWRpYXRlUmVuZGVyICYmICF0d2Vlbi52YXJzLmF1dG9SZXZlcnQgfHwgdHdlZW4uX3N0YXJ0QXQucmVuZGVyKHRvdGFsVGltZSwgdHJ1ZSwgZm9yY2UpKTtcbn0sXG4gICAgX2hhc05vUGF1c2VkQW5jZXN0b3JzID0gZnVuY3Rpb24gX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICByZXR1cm4gIWFuaW1hdGlvbiB8fCBhbmltYXRpb24uX3RzICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24ucGFyZW50KTtcbn0sXG4gICAgX2VsYXBzZWRDeWNsZUR1cmF0aW9uID0gZnVuY3Rpb24gX2VsYXBzZWRDeWNsZUR1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUoYW5pbWF0aW9uLl90VGltZSwgYW5pbWF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgKyBhbmltYXRpb24uX3JEZWxheSkgKiBhbmltYXRpb24gOiAwO1xufSxcbiAgICAvLyBmZWVkIGluIHRoZSB0b3RhbFRpbWUgYW5kIGN5Y2xlRHVyYXRpb24gYW5kIGl0J2xsIHJldHVybiB0aGUgY3ljbGUgKGl0ZXJhdGlvbiBtaW51cyAxKSBhbmQgaWYgdGhlIHBsYXloZWFkIGlzIGV4YWN0bHkgYXQgdGhlIHZlcnkgRU5ELCBpdCB3aWxsIE5PVCBidW1wIHVwIHRvIHRoZSBuZXh0IGN5Y2xlLlxuX2FuaW1hdGlvbkN5Y2xlID0gZnVuY3Rpb24gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCBjeWNsZUR1cmF0aW9uKSB7XG4gIHZhciB3aG9sZSA9IE1hdGguZmxvb3IodFRpbWUgLz0gY3ljbGVEdXJhdGlvbik7XG4gIHJldHVybiB0VGltZSAmJiB3aG9sZSA9PT0gdFRpbWUgPyB3aG9sZSAtIDEgOiB3aG9sZTtcbn0sXG4gICAgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUgPSBmdW5jdGlvbiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnRUaW1lLCBjaGlsZCkge1xuICByZXR1cm4gKHBhcmVudFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzICsgKGNoaWxkLl90cyA+PSAwID8gMCA6IGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKTtcbn0sXG4gICAgX3NldEVuZCA9IGZ1bmN0aW9uIF9zZXRFbmQoYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX2VuZCA9IF9yb3VuZFByZWNpc2UoYW5pbWF0aW9uLl9zdGFydCArIChhbmltYXRpb24uX3REdXIgLyBNYXRoLmFicyhhbmltYXRpb24uX3RzIHx8IGFuaW1hdGlvbi5fcnRzIHx8IF90aW55TnVtKSB8fCAwKSk7XG59LFxuICAgIF9hbGlnblBsYXloZWFkID0gZnVuY3Rpb24gX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCB0b3RhbFRpbWUpIHtcbiAgLy8gYWRqdXN0cyB0aGUgYW5pbWF0aW9uJ3MgX3N0YXJ0IGFuZCBfZW5kIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgdG90YWxUaW1lIChvbmx5IGlmIHRoZSBwYXJlbnQncyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlIGFuZCB0aGUgYW5pbWF0aW9uIGlzbid0IHBhdXNlZCkuIEl0IGRvZXNuJ3QgZG8gYW55IHJlbmRlcmluZyBvciBmb3JjaW5nIHRoaW5ncyBiYWNrIGludG8gcGFyZW50IHRpbWVsaW5lcywgZXRjLiAtIHRoYXQncyB3aGF0IHRvdGFsVGltZSgpIGlzIGZvci5cbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5fZHA7XG5cbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgYW5pbWF0aW9uLl90cykge1xuICAgIGFuaW1hdGlvbi5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSAtIChhbmltYXRpb24uX3RzID4gMCA/IHRvdGFsVGltZSAvIGFuaW1hdGlvbi5fdHMgOiAoKGFuaW1hdGlvbi5fZGlydHkgPyBhbmltYXRpb24udG90YWxEdXJhdGlvbigpIDogYW5pbWF0aW9uLl90RHVyKSAtIHRvdGFsVGltZSkgLyAtYW5pbWF0aW9uLl90cykpO1xuXG4gICAgX3NldEVuZChhbmltYXRpb24pO1xuXG4gICAgcGFyZW50Ll9kaXJ0eSB8fCBfdW5jYWNoZShwYXJlbnQsIGFuaW1hdGlvbik7IC8vZm9yIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LiBJZiB0aGUgcGFyZW50J3MgY2FjaGUgaXMgYWxyZWFkeSBkaXJ0eSwgaXQgYWxyZWFkeSB0b29rIGNhcmUgb2YgbWFya2luZyB0aGUgYW5jZXN0b3JzIGFzIGRpcnR5IHRvbywgc28gc2tpcCB0aGUgZnVuY3Rpb24gY2FsbCBoZXJlLlxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG5cbi8qXG5fdG90YWxUaW1lVG9UaW1lID0gKGNsYW1wZWRUb3RhbFRpbWUsIGR1cmF0aW9uLCByZXBlYXQsIHJlcGVhdERlbGF5LCB5b3lvKSA9PiB7XG5cdGxldCBjeWNsZUR1cmF0aW9uID0gZHVyYXRpb24gKyByZXBlYXREZWxheSxcblx0XHR0aW1lID0gX3JvdW5kKGNsYW1wZWRUb3RhbFRpbWUgJSBjeWNsZUR1cmF0aW9uKTtcblx0aWYgKHRpbWUgPiBkdXJhdGlvbikge1xuXHRcdHRpbWUgPSBkdXJhdGlvbjtcblx0fVxuXHRyZXR1cm4gKHlveW8gJiYgKH5+KGNsYW1wZWRUb3RhbFRpbWUgLyBjeWNsZUR1cmF0aW9uKSAmIDEpKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG59LFxuKi9cbl9wb3N0QWRkQ2hlY2tzID0gZnVuY3Rpb24gX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKSB7XG4gIHZhciB0O1xuXG4gIGlmIChjaGlsZC5fdGltZSB8fCAhY2hpbGQuX2R1ciAmJiBjaGlsZC5faW5pdHRlZCB8fCBjaGlsZC5fc3RhcnQgPCB0aW1lbGluZS5fdGltZSAmJiAoY2hpbGQuX2R1ciB8fCAhY2hpbGQuYWRkKSkge1xuICAgIC8vIGluIGNhc2UsIGZvciBleGFtcGxlLCB0aGUgX3N0YXJ0IGlzIG1vdmVkIG9uIGEgdHdlZW4gdGhhdCBoYXMgYWxyZWFkeSByZW5kZXJlZCwgb3IgaWYgaXQncyBiZWluZyBpbnNlcnRlZCBpbnRvIGEgdGltZWxpbmUgQkVGT1JFIHdoZXJlIHRoZSBwbGF5aGVhZCBpcyBjdXJyZW50bHkuIEltYWdpbmUgaXQncyBhdCBpdHMgZW5kIHN0YXRlLCB0aGVuIHRoZSBzdGFydFRpbWUgaXMgbW92ZWQgV0FZIGxhdGVyIChhZnRlciB0aGUgZW5kIG9mIHRoaXMgdGltZWxpbmUpLCBpdCBzaG91bGQgcmVuZGVyIGF0IGl0cyBiZWdpbm5pbmcuIFNwZWNpYWwgY2FzZTogaWYgaXQncyBhIHRpbWVsaW5lIChoYXMgLmFkZCgpIG1ldGhvZCkgYW5kIG5vIGR1cmF0aW9uLCB3ZSBjYW4gc2tpcCByZW5kZXJpbmcgYmVjYXVzZSB0aGUgdXNlciBtYXkgYmUgcG9wdWxhdGluZyBpdCBBRlRFUiBhZGRpbmcgaXQgdG8gYSBwYXJlbnQgdGltZWxpbmUgKHVuY29udmVudGlvbmFsLCBidXQgcG9zc2libGUsIGFuZCB3ZSB3b3VsZG4ndCB3YW50IGl0IHRvIGdldCByZW1vdmVkIGlmIHRoZSBwYXJlbnQncyBhdXRvUmVtb3ZlQ2hpbGRyZW4gaXMgdHJ1ZSkuXG4gICAgdCA9IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWVsaW5lLnJhd1RpbWUoKSwgY2hpbGQpO1xuXG4gICAgaWYgKCFjaGlsZC5fZHVyIHx8IF9jbGFtcCgwLCBjaGlsZC50b3RhbER1cmF0aW9uKCksIHQpIC0gY2hpbGQuX3RUaW1lID4gX3RpbnlOdW0pIHtcbiAgICAgIGNoaWxkLnJlbmRlcih0LCB0cnVlKTtcbiAgICB9XG4gIH0gLy9pZiB0aGUgdGltZWxpbmUgaGFzIGFscmVhZHkgZW5kZWQgYnV0IHRoZSBpbnNlcnRlZCB0d2Vlbi90aW1lbGluZSBleHRlbmRzIHRoZSBkdXJhdGlvbiwgd2Ugc2hvdWxkIGVuYWJsZSB0aGlzIHRpbWVsaW5lIGFnYWluIHNvIHRoYXQgaXQgcmVuZGVycyBwcm9wZXJseS4gV2Ugc2hvdWxkIGFsc28gYWxpZ24gdGhlIHBsYXloZWFkIHdpdGggdGhlIHBhcmVudCB0aW1lbGluZSdzIHdoZW4gYXBwcm9wcmlhdGUuXG5cblxuICBpZiAoX3VuY2FjaGUodGltZWxpbmUsIGNoaWxkKS5fZHAgJiYgdGltZWxpbmUuX2luaXR0ZWQgJiYgdGltZWxpbmUuX3RpbWUgPj0gdGltZWxpbmUuX2R1ciAmJiB0aW1lbGluZS5fdHMpIHtcbiAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvcnMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLi4uXG4gICAgaWYgKHRpbWVsaW5lLl9kdXIgPCB0aW1lbGluZS5kdXJhdGlvbigpKSB7XG4gICAgICB0ID0gdGltZWxpbmU7XG5cbiAgICAgIHdoaWxlICh0Ll9kcCkge1xuICAgICAgICB0LnJhd1RpbWUoKSA+PSAwICYmIHQudG90YWxUaW1lKHQuX3RUaW1lKTsgLy9tb3ZlcyB0aGUgdGltZWxpbmUgKHNoaWZ0cyBpdHMgc3RhcnRUaW1lKSBpZiBuZWNlc3NhcnksIGFuZCBhbHNvIGVuYWJsZXMgaXQuIElmIGl0J3MgY3VycmVudGx5IHplcm8sIHRob3VnaCwgaXQgbWF5IG5vdCBiZSBzY2hlZHVsZWQgdG8gcmVuZGVyIHVudGlsIGxhdGVyIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSBpdCB0byBhbGlnbiB3aXRoIHRoZSBjdXJyZW50IHBsYXloZWFkIHBvc2l0aW9uLiBPbmx5IG1vdmUgdG8gY2F0Y2ggdXAgd2l0aCB0aGUgcGxheWhlYWQuXG5cbiAgICAgICAgdCA9IHQuX2RwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRpbWVsaW5lLl96VGltZSA9IC1fdGlueU51bTsgLy8gaGVscHMgZW5zdXJlIHRoYXQgdGhlIG5leHQgcmVuZGVyKCkgd2lsbCBiZSBmb3JjZWQgKGNyb3NzaW5nU3RhcnQgPSB0cnVlIGluIHJlbmRlcigpKSwgZXZlbiBpZiB0aGUgZHVyYXRpb24gaGFzbid0IGNoYW5nZWQgKHdlJ3JlIGFkZGluZyBhIGNoaWxkIHdoaWNoIHdvdWxkIG5lZWQgdG8gZ2V0IHJlbmRlcmVkKS4gRGVmaW5pdGVseSBhbiBlZGdlIGNhc2UuIE5vdGU6IHdlIE1VU1QgZG8gdGhpcyBBRlRFUiB0aGUgbG9vcCBhYm92ZSB3aGVyZSB0aGUgdG90YWxUaW1lKCkgbWlnaHQgdHJpZ2dlciBhIHJlbmRlcigpIGJlY2F1c2UgdGhpcyBfYWRkVG9UaW1lbGluZSgpIG1ldGhvZCBnZXRzIGNhbGxlZCBmcm9tIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIEJFRk9SRSB0d2VlbnMgZXZlbiByZWNvcmQgdGhlaXIgdGFyZ2V0cywgZXRjLiBzbyB3ZSB3b3VsZG4ndCB3YW50IHRoaW5ncyB0byBnZXQgdHJpZ2dlcmVkIGluIHRoZSB3cm9uZyBvcmRlci5cbiAgfVxufSxcbiAgICBfYWRkVG9UaW1lbGluZSA9IGZ1bmN0aW9uIF9hZGRUb1RpbWVsaW5lKHRpbWVsaW5lLCBjaGlsZCwgcG9zaXRpb24sIHNraXBDaGVja3MpIHtcbiAgY2hpbGQucGFyZW50ICYmIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgY2hpbGQuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZSgoX2lzTnVtYmVyKHBvc2l0aW9uKSA/IHBvc2l0aW9uIDogcG9zaXRpb24gfHwgdGltZWxpbmUgIT09IF9nbG9iYWxUaW1lbGluZSA/IF9wYXJzZVBvc2l0aW9uKHRpbWVsaW5lLCBwb3NpdGlvbiwgY2hpbGQpIDogdGltZWxpbmUuX3RpbWUpICsgY2hpbGQuX2RlbGF5KTtcbiAgY2hpbGQuX2VuZCA9IF9yb3VuZFByZWNpc2UoY2hpbGQuX3N0YXJ0ICsgKGNoaWxkLnRvdGFsRHVyYXRpb24oKSAvIE1hdGguYWJzKGNoaWxkLnRpbWVTY2FsZSgpKSB8fCAwKSk7XG5cbiAgX2FkZExpbmtlZExpc3RJdGVtKHRpbWVsaW5lLCBjaGlsZCwgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aW1lbGluZS5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcblxuICBfaXNGcm9tT3JGcm9tU3RhcnQoY2hpbGQpIHx8ICh0aW1lbGluZS5fcmVjZW50ID0gY2hpbGQpO1xuICBza2lwQ2hlY2tzIHx8IF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCk7XG4gIHRpbWVsaW5lLl90cyA8IDAgJiYgX2FsaWduUGxheWhlYWQodGltZWxpbmUsIHRpbWVsaW5lLl90VGltZSk7IC8vIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIG5ldyBjaGlsZCBtYWtlcyBpdCBsb25nZXIsIHdlIG1heSBuZWVkIHRvIGFkanVzdCB0aGUgcGFyZW50J3MgX3N0YXJ0IChwdXNoIGl0IGJhY2spXG5cbiAgcmV0dXJuIHRpbWVsaW5lO1xufSxcbiAgICBfc2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zY3JvbGxUcmlnZ2VyKGFuaW1hdGlvbiwgdHJpZ2dlcikge1xuICByZXR1cm4gKF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIgfHwgX21pc3NpbmdQbHVnaW4oXCJzY3JvbGxUcmlnZ2VyXCIsIHRyaWdnZXIpKSAmJiBfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSh0cmlnZ2VyLCBhbmltYXRpb24pO1xufSxcbiAgICBfYXR0ZW1wdEluaXRUd2VlbiA9IGZ1bmN0aW9uIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSB7XG4gIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKTtcblxuICBpZiAoIXR3ZWVuLl9pbml0dGVkKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBpZiAoIWZvcmNlICYmIHR3ZWVuLl9wdCAmJiAhX3JldmVydGluZyAmJiAodHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkgIT09IGZhbHNlIHx8ICF0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSkgJiYgX2xhc3RSZW5kZXJlZEZyYW1lICE9PSBfdGlja2VyLmZyYW1lKSB7XG4gICAgX2xhenlUd2VlbnMucHVzaCh0d2Vlbik7XG5cbiAgICB0d2Vlbi5fbGF6eSA9IFt0VGltZSwgc3VwcHJlc3NFdmVudHNdO1xuICAgIHJldHVybiAxO1xuICB9XG59LFxuICAgIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQgPSBmdW5jdGlvbiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KF9yZWYpIHtcbiAgdmFyIHBhcmVudCA9IF9yZWYucGFyZW50O1xuICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5fdHMgJiYgcGFyZW50Ll9pbml0dGVkICYmICFwYXJlbnQuX2xvY2sgJiYgKHBhcmVudC5yYXdUaW1lKCkgPCAwIHx8IF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQocGFyZW50KSk7XG59LFxuICAgIC8vIGNoZWNrIHBhcmVudCdzIF9sb2NrIGJlY2F1c2Ugd2hlbiBhIHRpbWVsaW5lIHJlcGVhdHMveW95b3MgYW5kIGRvZXMgaXRzIGFydGlmaWNpYWwgd3JhcHBpbmcsIHdlIHNob3VsZG4ndCBmb3JjZSB0aGUgcmF0aW8gYmFjayB0byAwXG5faXNGcm9tT3JGcm9tU3RhcnQgPSBmdW5jdGlvbiBfaXNGcm9tT3JGcm9tU3RhcnQoX3JlZjIpIHtcbiAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhO1xuICByZXR1cm4gZGF0YSA9PT0gXCJpc0Zyb21TdGFydFwiIHx8IGRhdGEgPT09IFwiaXNTdGFydFwiO1xufSxcbiAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4gPSBmdW5jdGlvbiBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHZhciBwcmV2UmF0aW8gPSB0d2Vlbi5yYXRpbyxcbiAgICAgIHJhdGlvID0gdG90YWxUaW1lIDwgMCB8fCAhdG90YWxUaW1lICYmICghdHdlZW4uX3N0YXJ0ICYmIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQodHdlZW4pICYmICEoIXR3ZWVuLl9pbml0dGVkICYmIF9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpIHx8ICh0d2Vlbi5fdHMgPCAwIHx8IHR3ZWVuLl9kcC5fdHMgPCAwKSAmJiAhX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgPyAwIDogMSxcbiAgICAgIC8vIGlmIHRoZSB0d2VlbiBvciBpdHMgcGFyZW50IGlzIHJldmVyc2VkIGFuZCB0aGUgdG90YWxUaW1lIGlzIDAsIHdlIHNob3VsZCBnbyB0byBhIHJhdGlvIG9mIDAuIEVkZ2UgY2FzZTogaWYgYSBmcm9tKCkgb3IgZnJvbVRvKCkgc3RhZ2dlciB0d2VlbiBpcyBwbGFjZWQgbGF0ZXIgaW4gYSB0aW1lbGluZSwgdGhlIFwic3RhcnRBdFwiIHplcm8tZHVyYXRpb24gdHdlZW4gY291bGQgaW5pdGlhbGx5IHJlbmRlciBhdCBhIHRpbWUgd2hlbiB0aGUgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgaXMgdGVjaG5pY2FsbHkgQkVGT1JFIHdoZXJlIHRoaXMgdHdlZW4gaXMsIHNvIG1ha2Ugc3VyZSB0aGF0IGFueSBcImZyb21cIiBhbmQgXCJmcm9tVG9cIiBzdGFydEF0IHR3ZWVucyBhcmUgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUgYXQgYSByYXRpbyBvZiAxLlxuICByZXBlYXREZWxheSA9IHR3ZWVuLl9yRGVsYXksXG4gICAgICB0VGltZSA9IDAsXG4gICAgICBwdCxcbiAgICAgIGl0ZXJhdGlvbixcbiAgICAgIHByZXZJdGVyYXRpb247XG5cbiAgaWYgKHJlcGVhdERlbGF5ICYmIHR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvLyBpbiBjYXNlIHRoZXJlJ3MgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIHRoYXQgaGFzIGEgcmVwZWF0IHdpdGggYSByZXBlYXREZWxheVxuICAgIHRUaW1lID0gX2NsYW1wKDAsIHR3ZWVuLl90RHVyLCB0b3RhbFRpbWUpO1xuICAgIGl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0VGltZSwgcmVwZWF0RGVsYXkpO1xuICAgIHR3ZWVuLl95b3lvICYmIGl0ZXJhdGlvbiAmIDEgJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcblxuICAgIGlmIChpdGVyYXRpb24gIT09IF9hbmltYXRpb25DeWNsZSh0d2Vlbi5fdFRpbWUsIHJlcGVhdERlbGF5KSkge1xuICAgICAgLy8gaWYgaXRlcmF0aW9uIGNoYW5nZWRcbiAgICAgIHByZXZSYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIHR3ZWVuLnZhcnMucmVwZWF0UmVmcmVzaCAmJiB0d2Vlbi5faW5pdHRlZCAmJiB0d2Vlbi5pbnZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJhdGlvICE9PSBwcmV2UmF0aW8gfHwgX3JldmVydGluZyB8fCBmb3JjZSB8fCB0d2Vlbi5felRpbWUgPT09IF90aW55TnVtIHx8ICF0b3RhbFRpbWUgJiYgdHdlZW4uX3pUaW1lKSB7XG4gICAgaWYgKCF0d2Vlbi5faW5pdHRlZCAmJiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdG90YWxUaW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSkge1xuICAgICAgLy8gaWYgd2UgcmVuZGVyIHRoZSB2ZXJ5IGJlZ2lubmluZyAodGltZSA9PSAwKSBvZiBhIGZyb21UbygpLCB3ZSBtdXN0IGZvcmNlIHRoZSByZW5kZXIgKG5vcm1hbCB0d2VlbnMgd291bGRuJ3QgbmVlZCB0byByZW5kZXIgYXQgYSB0aW1lIG9mIDAgd2hlbiB0aGUgcHJldlRpbWUgd2FzIGFsc28gMCkuIFRoaXMgaXMgYWxzbyBtYW5kYXRvcnkgdG8gbWFrZSBzdXJlIG92ZXJ3cml0aW5nIGtpY2tzIGluIGltbWVkaWF0ZWx5LlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHByZXZJdGVyYXRpb24gPSB0d2Vlbi5felRpbWU7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lIHx8IChzdXBwcmVzc0V2ZW50cyA/IF90aW55TnVtIDogMCk7IC8vIHdoZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LlxuXG4gICAgc3VwcHJlc3NFdmVudHMgfHwgKHN1cHByZXNzRXZlbnRzID0gdG90YWxUaW1lICYmICFwcmV2SXRlcmF0aW9uKTsgLy8gaWYgaXQgd2FzIHJlbmRlcmVkIHByZXZpb3VzbHkgYXQgZXhhY3RseSAwIChfelRpbWUpIGFuZCBub3cgdGhlIHBsYXloZWFkIGlzIG1vdmluZyBhd2F5LCBET04nVCBmaXJlIGNhbGxiYWNrcyBvdGhlcndpc2UgdGhleSdsbCBzZWVtIGxpa2UgZHVwbGljYXRlcy5cblxuICAgIHR3ZWVuLnJhdGlvID0gcmF0aW87XG4gICAgdHdlZW4uX2Zyb20gJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcbiAgICB0d2Vlbi5fdGltZSA9IDA7XG4gICAgdHdlZW4uX3RUaW1lID0gdFRpbWU7XG4gICAgcHQgPSB0d2Vlbi5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG5cbiAgICB0b3RhbFRpbWUgPCAwICYmIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCB0cnVlKTtcbiAgICB0d2Vlbi5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICB0VGltZSAmJiB0d2Vlbi5fcmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0d2Vlbi5wYXJlbnQgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgaWYgKCh0b3RhbFRpbWUgPj0gdHdlZW4uX3REdXIgfHwgdG90YWxUaW1lIDwgMCkgJiYgdHdlZW4ucmF0aW8gPT09IHJhdGlvKSB7XG4gICAgICByYXRpbyAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0d2VlbiwgMSk7XG5cbiAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIV9yZXZlcnRpbmcpIHtcbiAgICAgICAgX2NhbGxiYWNrKHR3ZWVuLCByYXRpbyA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICB0d2Vlbi5fcHJvbSAmJiB0d2Vlbi5fcHJvbSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghdHdlZW4uX3pUaW1lKSB7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lO1xuICB9XG59LFxuICAgIF9maW5kTmV4dFBhdXNlVHdlZW4gPSBmdW5jdGlvbiBfZmluZE5leHRQYXVzZVR3ZWVuKGFuaW1hdGlvbiwgcHJldlRpbWUsIHRpbWUpIHtcbiAgdmFyIGNoaWxkO1xuXG4gIGlmICh0aW1lID4gcHJldlRpbWUpIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0IDw9IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPiBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9sYXN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA+PSB0aW1lKSB7XG4gICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0IDwgcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9wcmV2O1xuICAgIH1cbiAgfVxufSxcbiAgICBfc2V0RHVyYXRpb24gPSBmdW5jdGlvbiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBkdXJhdGlvbiwgc2tpcFVuY2FjaGUsIGxlYXZlUGxheWhlYWQpIHtcbiAgdmFyIHJlcGVhdCA9IGFuaW1hdGlvbi5fcmVwZWF0LFxuICAgICAgZHVyID0gX3JvdW5kUHJlY2lzZShkdXJhdGlvbikgfHwgMCxcbiAgICAgIHRvdGFsUHJvZ3Jlc3MgPSBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyO1xuICB0b3RhbFByb2dyZXNzICYmICFsZWF2ZVBsYXloZWFkICYmIChhbmltYXRpb24uX3RpbWUgKj0gZHVyIC8gYW5pbWF0aW9uLl9kdXIpO1xuICBhbmltYXRpb24uX2R1ciA9IGR1cjtcbiAgYW5pbWF0aW9uLl90RHVyID0gIXJlcGVhdCA/IGR1ciA6IHJlcGVhdCA8IDAgPyAxZTEwIDogX3JvdW5kUHJlY2lzZShkdXIgKiAocmVwZWF0ICsgMSkgKyBhbmltYXRpb24uX3JEZWxheSAqIHJlcGVhdCk7XG4gIHRvdGFsUHJvZ3Jlc3MgPiAwICYmICFsZWF2ZVBsYXloZWFkICYmIF9hbGlnblBsYXloZWFkKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl90VGltZSA9IGFuaW1hdGlvbi5fdER1ciAqIHRvdGFsUHJvZ3Jlc3MpO1xuICBhbmltYXRpb24ucGFyZW50ICYmIF9zZXRFbmQoYW5pbWF0aW9uKTtcbiAgc2tpcFVuY2FjaGUgfHwgX3VuY2FjaGUoYW5pbWF0aW9uLnBhcmVudCwgYW5pbWF0aW9uKTtcbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIF9vblVwZGF0ZVRvdGFsRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24gaW5zdGFuY2VvZiBUaW1lbGluZSA/IF91bmNhY2hlKGFuaW1hdGlvbikgOiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBhbmltYXRpb24uX2R1cik7XG59LFxuICAgIF96ZXJvUG9zaXRpb24gPSB7XG4gIF9zdGFydDogMCxcbiAgZW5kVGltZTogX2VtcHR5RnVuYyxcbiAgdG90YWxEdXJhdGlvbjogX2VtcHR5RnVuY1xufSxcbiAgICBfcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24sIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgdmFyIGxhYmVscyA9IGFuaW1hdGlvbi5sYWJlbHMsXG4gICAgICByZWNlbnQgPSBhbmltYXRpb24uX3JlY2VudCB8fCBfemVyb1Bvc2l0aW9uLFxuICAgICAgY2xpcHBlZER1cmF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgPj0gX2JpZ051bSA/IHJlY2VudC5lbmRUaW1lKGZhbHNlKSA6IGFuaW1hdGlvbi5fZHVyLFxuICAgICAgLy9pbiBjYXNlIHRoZXJlJ3MgYSBjaGlsZCB0aGF0IGluZmluaXRlbHkgcmVwZWF0cywgdXNlcnMgYWxtb3N0IG5ldmVyIGludGVuZCBmb3IgdGhlIGluc2VydGlvbiBwb2ludCBvZiBhIG5ldyBjaGlsZCB0byBiZSBiYXNlZCBvbiBhIFNVUEVSIGxvbmcgdmFsdWUgbGlrZSB0aGF0IHNvIHdlIGNsaXAgaXQgYW5kIGFzc3VtZSB0aGUgbW9zdCByZWNlbnRseS1hZGRlZCBjaGlsZCdzIGVuZFRpbWUgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cbiAgaSxcbiAgICAgIG9mZnNldCxcbiAgICAgIGlzUGVyY2VudDtcblxuICBpZiAoX2lzU3RyaW5nKHBvc2l0aW9uKSAmJiAoaXNOYU4ocG9zaXRpb24pIHx8IHBvc2l0aW9uIGluIGxhYmVscykpIHtcbiAgICAvL2lmIHRoZSBzdHJpbmcgaXMgYSBudW1iZXIgbGlrZSBcIjFcIiwgY2hlY2sgdG8gc2VlIGlmIHRoZXJlJ3MgYSBsYWJlbCB3aXRoIHRoYXQgbmFtZSwgb3RoZXJ3aXNlIGludGVycHJldCBpdCBhcyBhIG51bWJlciAoYWJzb2x1dGUgdmFsdWUpLlxuICAgIG9mZnNldCA9IHBvc2l0aW9uLmNoYXJBdCgwKTtcbiAgICBpc1BlcmNlbnQgPSBwb3NpdGlvbi5zdWJzdHIoLTEpID09PSBcIiVcIjtcbiAgICBpID0gcG9zaXRpb24uaW5kZXhPZihcIj1cIik7XG5cbiAgICBpZiAob2Zmc2V0ID09PSBcIjxcIiB8fCBvZmZzZXQgPT09IFwiPlwiKSB7XG4gICAgICBpID49IDAgJiYgKHBvc2l0aW9uID0gcG9zaXRpb24ucmVwbGFjZSgvPS8sIFwiXCIpKTtcbiAgICAgIHJldHVybiAob2Zmc2V0ID09PSBcIjxcIiA/IHJlY2VudC5fc3RhcnQgOiByZWNlbnQuZW5kVGltZShyZWNlbnQuX3JlcGVhdCA+PSAwKSkgKyAocGFyc2VGbG9hdChwb3NpdGlvbi5zdWJzdHIoMSkpIHx8IDApICogKGlzUGVyY2VudCA/IChpIDwgMCA/IHJlY2VudCA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKSAvIDEwMCA6IDEpO1xuICAgIH1cblxuICAgIGlmIChpIDwgMCkge1xuICAgICAgcG9zaXRpb24gaW4gbGFiZWxzIHx8IChsYWJlbHNbcG9zaXRpb25dID0gY2xpcHBlZER1cmF0aW9uKTtcbiAgICAgIHJldHVybiBsYWJlbHNbcG9zaXRpb25dO1xuICAgIH1cblxuICAgIG9mZnNldCA9IHBhcnNlRmxvYXQocG9zaXRpb24uY2hhckF0KGkgLSAxKSArIHBvc2l0aW9uLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGlzUGVyY2VudCAmJiBwZXJjZW50QW5pbWF0aW9uKSB7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgLyAxMDAgKiAoX2lzQXJyYXkocGVyY2VudEFuaW1hdGlvbikgPyBwZXJjZW50QW5pbWF0aW9uWzBdIDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBpID4gMSA/IF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24uc3Vic3RyKDAsIGkgLSAxKSwgcGVyY2VudEFuaW1hdGlvbikgKyBvZmZzZXQgOiBjbGlwcGVkRHVyYXRpb24gKyBvZmZzZXQ7XG4gIH1cblxuICByZXR1cm4gcG9zaXRpb24gPT0gbnVsbCA/IGNsaXBwZWREdXJhdGlvbiA6ICtwb3NpdGlvbjtcbn0sXG4gICAgX2NyZWF0ZVR3ZWVuVHlwZSA9IGZ1bmN0aW9uIF9jcmVhdGVUd2VlblR5cGUodHlwZSwgcGFyYW1zLCB0aW1lbGluZSkge1xuICB2YXIgaXNMZWdhY3kgPSBfaXNOdW1iZXIocGFyYW1zWzFdKSxcbiAgICAgIHZhcnNJbmRleCA9IChpc0xlZ2FjeSA/IDIgOiAxKSArICh0eXBlIDwgMiA/IDAgOiAxKSxcbiAgICAgIHZhcnMgPSBwYXJhbXNbdmFyc0luZGV4XSxcbiAgICAgIGlyVmFycyxcbiAgICAgIHBhcmVudDtcblxuICBpc0xlZ2FjeSAmJiAodmFycy5kdXJhdGlvbiA9IHBhcmFtc1sxXSk7XG4gIHZhcnMucGFyZW50ID0gdGltZWxpbmU7XG5cbiAgaWYgKHR5cGUpIHtcbiAgICBpclZhcnMgPSB2YXJzO1xuICAgIHBhcmVudCA9IHRpbWVsaW5lO1xuXG4gICAgd2hpbGUgKHBhcmVudCAmJiAhKFwiaW1tZWRpYXRlUmVuZGVyXCIgaW4gaXJWYXJzKSkge1xuICAgICAgLy8gaW5oZXJpdGFuY2UgaGFzbid0IGhhcHBlbmVkIHlldCwgYnV0IHNvbWVvbmUgbWF5IGhhdmUgc2V0IGEgZGVmYXVsdCBpbiBhbiBhbmNlc3RvciB0aW1lbGluZS4gV2UgY291bGQgZG8gdmFycy5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZShfaW5oZXJpdERlZmF1bHRzKHZhcnMpLmltbWVkaWF0ZVJlbmRlcikgYnV0IHRoYXQnZCBleGFjdCBhIHNsaWdodCBwZXJmb3JtYW5jZSBwZW5hbHR5IGJlY2F1c2UgX2luaGVyaXREZWZhdWx0cygpIGFsc28gcnVucyBpbiB0aGUgVHdlZW4gY29uc3RydWN0b3IuIFdlJ3JlIHBheWluZyBhIHNtYWxsIGtiIHByaWNlIGhlcmUgdG8gZ2FpbiBzcGVlZC5cbiAgICAgIGlyVmFycyA9IHBhcmVudC52YXJzLmRlZmF1bHRzIHx8IHt9O1xuICAgICAgcGFyZW50ID0gX2lzTm90RmFsc2UocGFyZW50LnZhcnMuaW5oZXJpdCkgJiYgcGFyZW50LnBhcmVudDtcbiAgICB9XG5cbiAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKGlyVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgIHR5cGUgPCAyID8gdmFycy5ydW5CYWNrd2FyZHMgPSAxIDogdmFycy5zdGFydEF0ID0gcGFyYW1zW3ZhcnNJbmRleCAtIDFdOyAvLyBcImZyb21cIiB2YXJzXG4gIH1cblxuICByZXR1cm4gbmV3IFR3ZWVuKHBhcmFtc1swXSwgdmFycywgcGFyYW1zW3ZhcnNJbmRleCArIDFdKTtcbn0sXG4gICAgX2NvbmRpdGlvbmFsUmV0dXJuID0gZnVuY3Rpb24gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jKSB7XG4gIHJldHVybiB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCA/IGZ1bmModmFsdWUpIDogZnVuYztcbn0sXG4gICAgX2NsYW1wID0gZnVuY3Rpb24gX2NsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPCBtaW4gPyBtaW4gOiB2YWx1ZSA+IG1heCA/IG1heCA6IHZhbHVlO1xufSxcbiAgICBnZXRVbml0ID0gZnVuY3Rpb24gZ2V0VW5pdCh2YWx1ZSwgdikge1xuICByZXR1cm4gIV9pc1N0cmluZyh2YWx1ZSkgfHwgISh2ID0gX3VuaXRFeHAuZXhlYyh2YWx1ZSkpID8gXCJcIiA6IHZbMV07XG59LFxuICAgIC8vIG5vdGU6IHByb3RlY3QgYWdhaW5zdCBwYWRkZWQgbnVtYmVycyBhcyBzdHJpbmdzLCBsaWtlIFwiMTAwLjEwMFwiLiBUaGF0IHNob3VsZG4ndCByZXR1cm4gXCIwMFwiIGFzIHRoZSB1bml0LiBJZiBpdCdzIG51bWVyaWMsIHJldHVybiBubyB1bml0LlxuY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gX2NsYW1wKG1pbiwgbWF4LCB2KTtcbiAgfSk7XG59LFxuICAgIF9zbGljZSA9IFtdLnNsaWNlLFxuICAgIF9pc0FycmF5TGlrZSA9IGZ1bmN0aW9uIF9pc0FycmF5TGlrZSh2YWx1ZSwgbm9uRW1wdHkpIHtcbiAgcmV0dXJuIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZSkgJiYgXCJsZW5ndGhcIiBpbiB2YWx1ZSAmJiAoIW5vbkVtcHR5ICYmICF2YWx1ZS5sZW5ndGggfHwgdmFsdWUubGVuZ3RoIC0gMSBpbiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWVbMF0pKSAmJiAhdmFsdWUubm9kZVR5cGUgJiYgdmFsdWUgIT09IF93aW47XG59LFxuICAgIF9mbGF0dGVuID0gZnVuY3Rpb24gX2ZsYXR0ZW4oYXIsIGxlYXZlU3RyaW5ncywgYWNjdW11bGF0b3IpIHtcbiAgaWYgKGFjY3VtdWxhdG9yID09PSB2b2lkIDApIHtcbiAgICBhY2N1bXVsYXRvciA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIGFyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIF9hY2N1bXVsYXRvcjtcblxuICAgIHJldHVybiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgfHwgX2lzQXJyYXlMaWtlKHZhbHVlLCAxKSA/IChfYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcikucHVzaC5hcHBseShfYWNjdW11bGF0b3IsIHRvQXJyYXkodmFsdWUpKSA6IGFjY3VtdWxhdG9yLnB1c2godmFsdWUpO1xuICB9KSB8fCBhY2N1bXVsYXRvcjtcbn0sXG4gICAgLy90YWtlcyBhbnkgdmFsdWUgYW5kIHJldHVybnMgYW4gYXJyYXkuIElmIGl0J3MgYSBzdHJpbmcgKGFuZCBsZWF2ZVN0cmluZ3MgaXNuJ3QgdHJ1ZSksIGl0J2xsIHVzZSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCkgYW5kIGNvbnZlcnQgdGhhdCB0byBhbiBhcnJheS4gSXQnbGwgYWxzbyBhY2NlcHQgaXRlcmFibGVzIGxpa2UgalF1ZXJ5IG9iamVjdHMuXG50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSwgc2NvcGUsIGxlYXZlU3RyaW5ncykge1xuICByZXR1cm4gX2NvbnRleHQgJiYgIXNjb3BlICYmIF9jb250ZXh0LnNlbGVjdG9yID8gX2NvbnRleHQuc2VsZWN0b3IodmFsdWUpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzICYmIChfY29yZUluaXR0ZWQgfHwgIV93YWtlKCkpID8gX3NsaWNlLmNhbGwoKHNjb3BlIHx8IF9kb2MpLnF1ZXJ5U2VsZWN0b3JBbGwodmFsdWUpLCAwKSA6IF9pc0FycmF5KHZhbHVlKSA/IF9mbGF0dGVuKHZhbHVlLCBsZWF2ZVN0cmluZ3MpIDogX2lzQXJyYXlMaWtlKHZhbHVlKSA/IF9zbGljZS5jYWxsKHZhbHVlLCAwKSA6IHZhbHVlID8gW3ZhbHVlXSA6IFtdO1xufSxcbiAgICBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHZhbHVlKSB7XG4gIHZhbHVlID0gdG9BcnJheSh2YWx1ZSlbMF0gfHwgX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgZWwgPSB2YWx1ZS5jdXJyZW50IHx8IHZhbHVlLm5hdGl2ZUVsZW1lbnQgfHwgdmFsdWU7XG4gICAgcmV0dXJuIHRvQXJyYXkodiwgZWwucXVlcnlTZWxlY3RvckFsbCA/IGVsIDogZWwgPT09IHZhbHVlID8gX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKSA6IHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgc2h1ZmZsZSA9IGZ1bmN0aW9uIHNodWZmbGUoYSkge1xuICByZXR1cm4gYS5zb3J0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gLjUgLSBNYXRoLnJhbmRvbSgpO1xuICB9KTtcbn0sXG4gICAgLy8gYWx0ZXJuYXRpdmUgdGhhdCdzIGEgYml0IGZhc3RlciBhbmQgbW9yZSByZWxpYWJseSBkaXZlcnNlIGJ1dCBiaWdnZXI6ICAgZm9yIChsZXQgaiwgdiwgaSA9IGEubGVuZ3RoOyBpOyBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaSksIHYgPSBhWy0taV0sIGFbaV0gPSBhW2pdLCBhW2pdID0gdik7IHJldHVybiBhO1xuLy9mb3IgZGlzdHJpYnV0aW5nIHZhbHVlcyBhY3Jvc3MgYW4gYXJyYXkuIENhbiBhY2NlcHQgYSBudW1iZXIsIGEgZnVuY3Rpb24gb3IgKG1vc3QgY29tbW9ubHkpIGEgZnVuY3Rpb24gd2hpY2ggY2FuIGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiB7YmFzZSwgYW1vdW50LCBmcm9tLCBlYXNlLCBncmlkLCBheGlzLCBsZW5ndGgsIGVhY2h9LiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBleHBlY3RzIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczogaW5kZXgsIHRhcmdldCwgYXJyYXkuIFJlY29nbml6ZXMgdGhlIGZvbGxvd2luZ1xuZGlzdHJpYnV0ZSA9IGZ1bmN0aW9uIGRpc3RyaWJ1dGUodikge1xuICBpZiAoX2lzRnVuY3Rpb24odikpIHtcbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIHZhciB2YXJzID0gX2lzT2JqZWN0KHYpID8gdiA6IHtcbiAgICBlYWNoOiB2XG4gIH0sXG4gICAgICAvL246MSBpcyBqdXN0IHRvIGluZGljYXRlIHYgd2FzIGEgbnVtYmVyOyB3ZSBsZXZlcmFnZSB0aGF0IGxhdGVyIHRvIHNldCB2IGFjY29yZGluZyB0byB0aGUgbGVuZ3RoIHdlIGdldC4gSWYgYSBudW1iZXIgaXMgcGFzc2VkIGluLCB3ZSB0cmVhdCBpdCBsaWtlIHRoZSBvbGQgc3RhZ2dlciB2YWx1ZSB3aGVyZSAwLjEsIGZvciBleGFtcGxlLCB3b3VsZCBtZWFuIHRoYXQgdGhpbmdzIHdvdWxkIGJlIGRpc3RyaWJ1dGVkIHdpdGggMC4xIGJldHdlZW4gZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheSByYXRoZXIgdGhhbiBhIHRvdGFsIFwiYW1vdW50XCIgdGhhdCdzIGNodW5rZWQgb3V0IGFtb25nIHRoZW0gYWxsLlxuICBlYXNlID0gX3BhcnNlRWFzZSh2YXJzLmVhc2UpLFxuICAgICAgZnJvbSA9IHZhcnMuZnJvbSB8fCAwLFxuICAgICAgYmFzZSA9IHBhcnNlRmxvYXQodmFycy5iYXNlKSB8fCAwLFxuICAgICAgY2FjaGUgPSB7fSxcbiAgICAgIGlzRGVjaW1hbCA9IGZyb20gPiAwICYmIGZyb20gPCAxLFxuICAgICAgcmF0aW9zID0gaXNOYU4oZnJvbSkgfHwgaXNEZWNpbWFsLFxuICAgICAgYXhpcyA9IHZhcnMuYXhpcyxcbiAgICAgIHJhdGlvWCA9IGZyb20sXG4gICAgICByYXRpb1kgPSBmcm9tO1xuXG4gIGlmIChfaXNTdHJpbmcoZnJvbSkpIHtcbiAgICByYXRpb1ggPSByYXRpb1kgPSB7XG4gICAgICBjZW50ZXI6IC41LFxuICAgICAgZWRnZXM6IC41LFxuICAgICAgZW5kOiAxXG4gICAgfVtmcm9tXSB8fCAwO1xuICB9IGVsc2UgaWYgKCFpc0RlY2ltYWwgJiYgcmF0aW9zKSB7XG4gICAgcmF0aW9YID0gZnJvbVswXTtcbiAgICByYXRpb1kgPSBmcm9tWzFdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpLCB0YXJnZXQsIGEpIHtcbiAgICB2YXIgbCA9IChhIHx8IHZhcnMpLmxlbmd0aCxcbiAgICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0sXG4gICAgICAgIG9yaWdpblgsXG4gICAgICAgIG9yaWdpblksXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGQsXG4gICAgICAgIGosXG4gICAgICAgIG1heCxcbiAgICAgICAgbWluLFxuICAgICAgICB3cmFwQXQ7XG5cbiAgICBpZiAoIWRpc3RhbmNlcykge1xuICAgICAgd3JhcEF0ID0gdmFycy5ncmlkID09PSBcImF1dG9cIiA/IDAgOiAodmFycy5ncmlkIHx8IFsxLCBfYmlnTnVtXSlbMV07XG5cbiAgICAgIGlmICghd3JhcEF0KSB7XG4gICAgICAgIG1heCA9IC1fYmlnTnVtO1xuXG4gICAgICAgIHdoaWxlIChtYXggPCAobWF4ID0gYVt3cmFwQXQrK10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgJiYgd3JhcEF0IDwgbCkge31cblxuICAgICAgICB3cmFwQXQgPCBsICYmIHdyYXBBdC0tO1xuICAgICAgfVxuXG4gICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSA9IFtdO1xuICAgICAgb3JpZ2luWCA9IHJhdGlvcyA/IE1hdGgubWluKHdyYXBBdCwgbCkgKiByYXRpb1ggLSAuNSA6IGZyb20gJSB3cmFwQXQ7XG4gICAgICBvcmlnaW5ZID0gd3JhcEF0ID09PSBfYmlnTnVtID8gMCA6IHJhdGlvcyA/IGwgKiByYXRpb1kgLyB3cmFwQXQgLSAuNSA6IGZyb20gLyB3cmFwQXQgfCAwO1xuICAgICAgbWF4ID0gMDtcbiAgICAgIG1pbiA9IF9iaWdOdW07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgeCA9IGogJSB3cmFwQXQgLSBvcmlnaW5YO1xuICAgICAgICB5ID0gb3JpZ2luWSAtIChqIC8gd3JhcEF0IHwgMCk7XG4gICAgICAgIGRpc3RhbmNlc1tqXSA9IGQgPSAhYXhpcyA/IF9zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoYXhpcyA9PT0gXCJ5XCIgPyB5IDogeCk7XG4gICAgICAgIGQgPiBtYXggJiYgKG1heCA9IGQpO1xuICAgICAgICBkIDwgbWluICYmIChtaW4gPSBkKTtcbiAgICAgIH1cblxuICAgICAgZnJvbSA9PT0gXCJyYW5kb21cIiAmJiBzaHVmZmxlKGRpc3RhbmNlcyk7XG4gICAgICBkaXN0YW5jZXMubWF4ID0gbWF4IC0gbWluO1xuICAgICAgZGlzdGFuY2VzLm1pbiA9IG1pbjtcbiAgICAgIGRpc3RhbmNlcy52ID0gbCA9IChwYXJzZUZsb2F0KHZhcnMuYW1vdW50KSB8fCBwYXJzZUZsb2F0KHZhcnMuZWFjaCkgKiAod3JhcEF0ID4gbCA/IGwgLSAxIDogIWF4aXMgPyBNYXRoLm1heCh3cmFwQXQsIGwgLyB3cmFwQXQpIDogYXhpcyA9PT0gXCJ5XCIgPyBsIC8gd3JhcEF0IDogd3JhcEF0KSB8fCAwKSAqIChmcm9tID09PSBcImVkZ2VzXCIgPyAtMSA6IDEpO1xuICAgICAgZGlzdGFuY2VzLmIgPSBsIDwgMCA/IGJhc2UgLSBsIDogYmFzZTtcbiAgICAgIGRpc3RhbmNlcy51ID0gZ2V0VW5pdCh2YXJzLmFtb3VudCB8fCB2YXJzLmVhY2gpIHx8IDA7IC8vdW5pdFxuXG4gICAgICBlYXNlID0gZWFzZSAmJiBsIDwgMCA/IF9pbnZlcnRFYXNlKGVhc2UpIDogZWFzZTtcbiAgICB9XG5cbiAgICBsID0gKGRpc3RhbmNlc1tpXSAtIGRpc3RhbmNlcy5taW4pIC8gZGlzdGFuY2VzLm1heCB8fCAwO1xuICAgIHJldHVybiBfcm91bmRQcmVjaXNlKGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlKGwpIDogbCkgKiBkaXN0YW5jZXMudikgKyBkaXN0YW5jZXMudTsgLy9yb3VuZCBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBmbG9hdGluZyBwb2ludCBlcnJvcnNcbiAgfTtcbn0sXG4gICAgX3JvdW5kTW9kaWZpZXIgPSBmdW5jdGlvbiBfcm91bmRNb2RpZmllcih2KSB7XG4gIC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cbiAgdmFyIHAgPSBNYXRoLnBvdygxMCwgKCh2ICsgXCJcIikuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aCk7IC8vdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGxpa2UgMjQgKiAwLjEgPT0gMi40MDAwMDAwMDAwMDAwMDA0KSwgd2UgY2hvcCBvZmYgYXQgYSBzcGVjaWZpYyBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgKG11Y2ggZmFzdGVyIHRoYW4gdG9GaXhlZCgpKVxuXG4gIHJldHVybiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIG4gPSBfcm91bmRQcmVjaXNlKE1hdGgucm91bmQocGFyc2VGbG9hdChyYXcpIC8gdikgKiB2ICogcCk7XG5cbiAgICByZXR1cm4gKG4gLSBuICUgMSkgLyBwICsgKF9pc051bWJlcihyYXcpID8gMCA6IGdldFVuaXQocmF3KSk7IC8vIG4gLSBuICUgMSByZXBsYWNlcyBNYXRoLmZsb29yKCkgaW4gb3JkZXIgdG8gaGFuZGxlIG5lZ2F0aXZlIHZhbHVlcyBwcm9wZXJseS4gRm9yIGV4YW1wbGUsIE1hdGguZmxvb3IoLTE1MC4wMDAwMDAwMDAwMDAwMykgaXMgMTUxIVxuICB9O1xufSxcbiAgICBzbmFwID0gZnVuY3Rpb24gc25hcChzbmFwVG8sIHZhbHVlKSB7XG4gIHZhciBpc0FycmF5ID0gX2lzQXJyYXkoc25hcFRvKSxcbiAgICAgIHJhZGl1cyxcbiAgICAgIGlzMkQ7XG5cbiAgaWYgKCFpc0FycmF5ICYmIF9pc09iamVjdChzbmFwVG8pKSB7XG4gICAgcmFkaXVzID0gaXNBcnJheSA9IHNuYXBUby5yYWRpdXMgfHwgX2JpZ051bTtcblxuICAgIGlmIChzbmFwVG8udmFsdWVzKSB7XG4gICAgICBzbmFwVG8gPSB0b0FycmF5KHNuYXBUby52YWx1ZXMpO1xuXG4gICAgICBpZiAoaXMyRCA9ICFfaXNOdW1iZXIoc25hcFRvWzBdKSkge1xuICAgICAgICByYWRpdXMgKj0gcmFkaXVzOyAvL3BlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB3ZSBkb24ndCBoYXZlIHRvIE1hdGguc3FydCgpIGluIHRoZSBsb29wLlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzbmFwVG8gPSBfcm91bmRNb2RpZmllcihzbmFwVG8uaW5jcmVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCAhaXNBcnJheSA/IF9yb3VuZE1vZGlmaWVyKHNuYXBUbykgOiBfaXNGdW5jdGlvbihzbmFwVG8pID8gZnVuY3Rpb24gKHJhdykge1xuICAgIGlzMkQgPSBzbmFwVG8ocmF3KTtcbiAgICByZXR1cm4gTWF0aC5hYnMoaXMyRCAtIHJhdykgPD0gcmFkaXVzID8gaXMyRCA6IHJhdztcbiAgfSA6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICB2YXIgeCA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy54IDogcmF3KSxcbiAgICAgICAgeSA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy55IDogMCksXG4gICAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICAgIGNsb3Nlc3QgPSAwLFxuICAgICAgICBpID0gc25hcFRvLmxlbmd0aCxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGlzMkQpIHtcbiAgICAgICAgZHggPSBzbmFwVG9baV0ueCAtIHg7XG4gICAgICAgIGR5ID0gc25hcFRvW2ldLnkgLSB5O1xuICAgICAgICBkeCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHggPSBNYXRoLmFicyhzbmFwVG9baV0gLSB4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGR4IDwgbWluKSB7XG4gICAgICAgIG1pbiA9IGR4O1xuICAgICAgICBjbG9zZXN0ID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZXN0ID0gIXJhZGl1cyB8fCBtaW4gPD0gcmFkaXVzID8gc25hcFRvW2Nsb3Nlc3RdIDogcmF3O1xuICAgIHJldHVybiBpczJEIHx8IGNsb3Nlc3QgPT09IHJhdyB8fCBfaXNOdW1iZXIocmF3KSA/IGNsb3Nlc3QgOiBjbG9zZXN0ICsgZ2V0VW5pdChyYXcpO1xuICB9KTtcbn0sXG4gICAgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4LCByb3VuZGluZ0luY3JlbWVudCwgcmV0dXJuRnVuY3Rpb24pIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihfaXNBcnJheShtaW4pID8gIW1heCA6IHJvdW5kaW5nSW5jcmVtZW50ID09PSB0cnVlID8gISEocm91bmRpbmdJbmNyZW1lbnQgPSAwKSA6ICFyZXR1cm5GdW5jdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNBcnJheShtaW4pID8gbWluW35+KE1hdGgucmFuZG9tKCkgKiBtaW4ubGVuZ3RoKV0gOiAocm91bmRpbmdJbmNyZW1lbnQgPSByb3VuZGluZ0luY3JlbWVudCB8fCAxZS01KSAmJiAocmV0dXJuRnVuY3Rpb24gPSByb3VuZGluZ0luY3JlbWVudCA8IDEgPyBNYXRoLnBvdygxMCwgKHJvdW5kaW5nSW5jcmVtZW50ICsgXCJcIikubGVuZ3RoIC0gMikgOiAxKSAmJiBNYXRoLmZsb29yKE1hdGgucm91bmQoKG1pbiAtIHJvdW5kaW5nSW5jcmVtZW50IC8gMiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgcm91bmRpbmdJbmNyZW1lbnQgKiAuOTkpKSAvIHJvdW5kaW5nSW5jcmVtZW50KSAqIHJvdW5kaW5nSW5jcmVtZW50ICogcmV0dXJuRnVuY3Rpb24pIC8gcmV0dXJuRnVuY3Rpb247XG4gIH0pO1xufSxcbiAgICBwaXBlID0gZnVuY3Rpb24gcGlwZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmN0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jdGlvbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHYsIGYpIHtcbiAgICAgIHJldHVybiBmKHYpO1xuICAgIH0sIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgdW5pdGl6ZSA9IGZ1bmN0aW9uIHVuaXRpemUoZnVuYywgdW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmMocGFyc2VGbG9hdCh2YWx1ZSkpICsgKHVuaXQgfHwgZ2V0VW5pdCh2YWx1ZSkpO1xuICB9O1xufSxcbiAgICBub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBtYXBSYW5nZShtaW4sIG1heCwgMCwgMSwgdmFsdWUpO1xufSxcbiAgICBfd3JhcEFycmF5ID0gZnVuY3Rpb24gX3dyYXBBcnJheShhLCB3cmFwcGVyLCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gYVt+fndyYXBwZXIoaW5kZXgpXTtcbiAgfSk7XG59LFxuICAgIHdyYXAgPSBmdW5jdGlvbiB3cmFwKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAvLyBOT1RFOiB3cmFwKCkgQ0FOTk9UIGJlIGFuIGFycm93IGZ1bmN0aW9uISBBIHZlcnkgb2RkIGNvbXBpbGluZyBidWcgY2F1c2VzIHByb2JsZW1zICh1bnJlbGF0ZWQgdG8gR1NBUCkuXG4gIHZhciByYW5nZSA9IG1heCAtIG1pbjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcCgwLCBtaW4ubGVuZ3RoKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIChyYW5nZSArICh2YWx1ZSAtIG1pbikgJSByYW5nZSkgJSByYW5nZSArIG1pbjtcbiAgfSk7XG59LFxuICAgIHdyYXBZb3lvID0gZnVuY3Rpb24gd3JhcFlveW8obWluLCBtYXgsIHZhbHVlKSB7XG4gIHZhciByYW5nZSA9IG1heCAtIG1pbixcbiAgICAgIHRvdGFsID0gcmFuZ2UgKiAyO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwWW95bygwLCBtaW4ubGVuZ3RoIC0gMSksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhbHVlID0gKHRvdGFsICsgKHZhbHVlIC0gbWluKSAlIHRvdGFsKSAlIHRvdGFsIHx8IDA7XG4gICAgcmV0dXJuIG1pbiArICh2YWx1ZSA+IHJhbmdlID8gdG90YWwgLSB2YWx1ZSA6IHZhbHVlKTtcbiAgfSk7XG59LFxuICAgIF9yZXBsYWNlUmFuZG9tID0gZnVuY3Rpb24gX3JlcGxhY2VSYW5kb20odmFsdWUpIHtcbiAgLy9yZXBsYWNlcyBhbGwgb2NjdXJyZW5jZXMgb2YgcmFuZG9tKC4uLikgaW4gYSBzdHJpbmcgd2l0aCB0aGUgY2FsY3VsYXRlZCByYW5kb20gdmFsdWUuIGNhbiBiZSBhIHJhbmdlIGxpa2UgcmFuZG9tKC0xMDAsIDEwMCwgNSkgb3IgYW4gYXJyYXkgbGlrZSByYW5kb20oWzAsIDEwMCwgNTAwXSlcbiAgdmFyIHByZXYgPSAwLFxuICAgICAgcyA9IFwiXCIsXG4gICAgICBpLFxuICAgICAgbnVtcyxcbiAgICAgIGVuZCxcbiAgICAgIGlzQXJyYXk7XG5cbiAgd2hpbGUgKH4oaSA9IHZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIsIHByZXYpKSkge1xuICAgIGVuZCA9IHZhbHVlLmluZGV4T2YoXCIpXCIsIGkpO1xuICAgIGlzQXJyYXkgPSB2YWx1ZS5jaGFyQXQoaSArIDcpID09PSBcIltcIjtcbiAgICBudW1zID0gdmFsdWUuc3Vic3RyKGkgKyA3LCBlbmQgLSBpIC0gNykubWF0Y2goaXNBcnJheSA/IF9kZWxpbWl0ZWRWYWx1ZUV4cCA6IF9zdHJpY3ROdW1FeHApO1xuICAgIHMgKz0gdmFsdWUuc3Vic3RyKHByZXYsIGkgLSBwcmV2KSArIHJhbmRvbShpc0FycmF5ID8gbnVtcyA6ICtudW1zWzBdLCBpc0FycmF5ID8gMCA6ICtudW1zWzFdLCArbnVtc1syXSB8fCAxZS01KTtcbiAgICBwcmV2ID0gZW5kICsgMTtcbiAgfVxuXG4gIHJldHVybiBzICsgdmFsdWUuc3Vic3RyKHByZXYsIHZhbHVlLmxlbmd0aCAtIHByZXYpO1xufSxcbiAgICBtYXBSYW5nZSA9IGZ1bmN0aW9uIG1hcFJhbmdlKGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgsIHZhbHVlKSB7XG4gIHZhciBpblJhbmdlID0gaW5NYXggLSBpbk1pbixcbiAgICAgIG91dFJhbmdlID0gb3V0TWF4IC0gb3V0TWluO1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gb3V0TWluICsgKCh2YWx1ZSAtIGluTWluKSAvIGluUmFuZ2UgKiBvdXRSYW5nZSB8fCAwKTtcbiAgfSk7XG59LFxuICAgIGludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RhcnQsIGVuZCwgcHJvZ3Jlc3MsIG11dGF0ZSkge1xuICB2YXIgZnVuYyA9IGlzTmFOKHN0YXJ0ICsgZW5kKSA/IDAgOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAoMSAtIHApICogc3RhcnQgKyBwICogZW5kO1xuICB9O1xuXG4gIGlmICghZnVuYykge1xuICAgIHZhciBpc1N0cmluZyA9IF9pc1N0cmluZyhzdGFydCksXG4gICAgICAgIG1hc3RlciA9IHt9LFxuICAgICAgICBwLFxuICAgICAgICBpLFxuICAgICAgICBpbnRlcnBvbGF0b3JzLFxuICAgICAgICBsLFxuICAgICAgICBpbDtcblxuICAgIHByb2dyZXNzID09PSB0cnVlICYmIChtdXRhdGUgPSAxKSAmJiAocHJvZ3Jlc3MgPSBudWxsKTtcblxuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgc3RhcnQgPSB7XG4gICAgICAgIHA6IHN0YXJ0XG4gICAgICB9O1xuICAgICAgZW5kID0ge1xuICAgICAgICBwOiBlbmRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChfaXNBcnJheShzdGFydCkgJiYgIV9pc0FycmF5KGVuZCkpIHtcbiAgICAgIGludGVycG9sYXRvcnMgPSBbXTtcbiAgICAgIGwgPSBzdGFydC5sZW5ndGg7XG4gICAgICBpbCA9IGwgLSAyO1xuXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludGVycG9sYXRvcnMucHVzaChpbnRlcnBvbGF0ZShzdGFydFtpIC0gMV0sIHN0YXJ0W2ldKSk7IC8vYnVpbGQgdGhlIGludGVycG9sYXRvcnMgdXAgZnJvbnQgYXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gdGhhdCB3aGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgbWFueSB0aW1lcywgaXQgY2FuIGp1c3QgcmV1c2UgdGhlbS5cbiAgICAgIH1cblxuICAgICAgbC0tO1xuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHAgKj0gbDtcbiAgICAgICAgdmFyIGkgPSBNYXRoLm1pbihpbCwgfn5wKTtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRvcnNbaV0ocCAtIGkpO1xuICAgICAgfTtcblxuICAgICAgcHJvZ3Jlc3MgPSBlbmQ7XG4gICAgfSBlbHNlIGlmICghbXV0YXRlKSB7XG4gICAgICBzdGFydCA9IF9tZXJnZShfaXNBcnJheShzdGFydCkgPyBbXSA6IHt9LCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnRlcnBvbGF0b3JzKSB7XG4gICAgICBmb3IgKHAgaW4gZW5kKSB7XG4gICAgICAgIF9hZGRQcm9wVHdlZW4uY2FsbChtYXN0ZXIsIHN0YXJ0LCBwLCBcImdldFwiLCBlbmRbcF0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHJldHVybiBfcmVuZGVyUHJvcFR3ZWVucyhwLCBtYXN0ZXIpIHx8IChpc1N0cmluZyA/IHN0YXJ0LnAgOiBzdGFydCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4ocHJvZ3Jlc3MsIGZ1bmMpO1xufSxcbiAgICBfZ2V0TGFiZWxJbkRpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRpbWVsaW5lLCBmcm9tVGltZSwgYmFja3dhcmQpIHtcbiAgLy91c2VkIGZvciBuZXh0TGFiZWwoKSBhbmQgcHJldmlvdXNMYWJlbCgpXG4gIHZhciBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgcCxcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgbGFiZWw7XG5cbiAgZm9yIChwIGluIGxhYmVscykge1xuICAgIGRpc3RhbmNlID0gbGFiZWxzW3BdIC0gZnJvbVRpbWU7XG5cbiAgICBpZiAoZGlzdGFuY2UgPCAwID09PSAhIWJhY2t3YXJkICYmIGRpc3RhbmNlICYmIG1pbiA+IChkaXN0YW5jZSA9IE1hdGguYWJzKGRpc3RhbmNlKSkpIHtcbiAgICAgIGxhYmVsID0gcDtcbiAgICAgIG1pbiA9IGRpc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsYWJlbDtcbn0sXG4gICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKGFuaW1hdGlvbiwgdHlwZSwgZXhlY3V0ZUxhenlGaXJzdCkge1xuICB2YXIgdiA9IGFuaW1hdGlvbi52YXJzLFxuICAgICAgY2FsbGJhY2sgPSB2W3R5cGVdLFxuICAgICAgcHJldkNvbnRleHQgPSBfY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBhbmltYXRpb24uX2N0eCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNjb3BlLFxuICAgICAgcmVzdWx0O1xuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwYXJhbXMgPSB2W3R5cGUgKyBcIlBhcmFtc1wiXTtcbiAgc2NvcGUgPSB2LmNhbGxiYWNrU2NvcGUgfHwgYW5pbWF0aW9uO1xuICBleGVjdXRlTGF6eUZpcnN0ICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uVXBkYXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblxuICBjb250ZXh0ICYmIChfY29udGV4dCA9IGNvbnRleHQpO1xuICByZXN1bHQgPSBwYXJhbXMgPyBjYWxsYmFjay5hcHBseShzY29wZSwgcGFyYW1zKSA6IGNhbGxiYWNrLmNhbGwoc2NvcGUpO1xuICBfY29udGV4dCA9IHByZXZDb250ZXh0O1xuICByZXR1cm4gcmVzdWx0O1xufSxcbiAgICBfaW50ZXJydXB0ID0gZnVuY3Rpb24gX2ludGVycnVwdChhbmltYXRpb24pIHtcbiAgX3JlbW92ZUZyb21QYXJlbnQoYW5pbWF0aW9uKTtcblxuICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciAmJiBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5raWxsKCEhX3JldmVydGluZyk7XG4gIGFuaW1hdGlvbi5wcm9ncmVzcygpIDwgMSAmJiBfY2FsbGJhY2soYW5pbWF0aW9uLCBcIm9uSW50ZXJydXB0XCIpO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcXVpY2tUd2VlbixcbiAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZSA9IFtdLFxuICAgIF9jcmVhdGVQbHVnaW4gPSBmdW5jdGlvbiBfY3JlYXRlUGx1Z2luKGNvbmZpZykge1xuICBpZiAoIWNvbmZpZykgcmV0dXJuO1xuICBjb25maWcgPSAhY29uZmlnLm5hbWUgJiYgY29uZmlnW1wiZGVmYXVsdFwiXSB8fCBjb25maWc7IC8vIFVNRCBwYWNrYWdpbmcgd3JhcHMgdGhpbmdzIG9kZGx5LCBzbyBmb3IgZXhhbXBsZSBNb3Rpb25QYXRoSGVscGVyIGJlY29tZXMge01vdGlvblBhdGhIZWxwZXI6TW90aW9uUGF0aEhlbHBlciwgZGVmYXVsdDpNb3Rpb25QYXRoSGVscGVyfS5cblxuICBpZiAoX3dpbmRvd0V4aXN0cygpIHx8IGNvbmZpZy5oZWFkbGVzcykge1xuICAgIC8vIGVkZ2UgY2FzZTogc29tZSBidWlsZCB0b29scyBtYXkgcGFzcyBpbiBhIG51bGwvdW5kZWZpbmVkIHZhbHVlXG4gICAgdmFyIG5hbWUgPSBjb25maWcubmFtZSxcbiAgICAgICAgaXNGdW5jID0gX2lzRnVuY3Rpb24oY29uZmlnKSxcbiAgICAgICAgUGx1Z2luID0gbmFtZSAmJiAhaXNGdW5jICYmIGNvbmZpZy5pbml0ID8gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fcHJvcHMgPSBbXTtcbiAgICB9IDogY29uZmlnLFxuICAgICAgICAvL2luIGNhc2Ugc29tZW9uZSBwYXNzZXMgaW4gYW4gb2JqZWN0IHRoYXQncyBub3QgYSBwbHVnaW4sIGxpa2UgQ3VzdG9tRWFzZVxuICAgIGluc3RhbmNlRGVmYXVsdHMgPSB7XG4gICAgICBpbml0OiBfZW1wdHlGdW5jLFxuICAgICAgcmVuZGVyOiBfcmVuZGVyUHJvcFR3ZWVucyxcbiAgICAgIGFkZDogX2FkZFByb3BUd2VlbixcbiAgICAgIGtpbGw6IF9raWxsUHJvcFR3ZWVuc09mLFxuICAgICAgbW9kaWZpZXI6IF9hZGRQbHVnaW5Nb2RpZmllcixcbiAgICAgIHJhd1ZhcnM6IDBcbiAgICB9LFxuICAgICAgICBzdGF0aWNzID0ge1xuICAgICAgdGFyZ2V0VGVzdDogMCxcbiAgICAgIGdldDogMCxcbiAgICAgIGdldFNldHRlcjogX2dldFNldHRlcixcbiAgICAgIGFsaWFzZXM6IHt9LFxuICAgICAgcmVnaXN0ZXI6IDBcbiAgICB9O1xuXG4gICAgX3dha2UoKTtcblxuICAgIGlmIChjb25maWcgIT09IFBsdWdpbikge1xuICAgICAgaWYgKF9wbHVnaW5zW25hbWVdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3NldERlZmF1bHRzKFBsdWdpbiwgX3NldERlZmF1bHRzKF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgaW5zdGFuY2VEZWZhdWx0cyksIHN0YXRpY3MpKTsgLy9zdGF0aWMgbWV0aG9kc1xuXG5cbiAgICAgIF9tZXJnZShQbHVnaW4ucHJvdG90eXBlLCBfbWVyZ2UoaW5zdGFuY2VEZWZhdWx0cywgX2NvcHlFeGNsdWRpbmcoY29uZmlnLCBzdGF0aWNzKSkpOyAvL2luc3RhbmNlIG1ldGhvZHNcblxuXG4gICAgICBfcGx1Z2luc1tQbHVnaW4ucHJvcCA9IG5hbWVdID0gUGx1Z2luO1xuXG4gICAgICBpZiAoY29uZmlnLnRhcmdldFRlc3QpIHtcbiAgICAgICAgX2hhcm5lc3NQbHVnaW5zLnB1c2goUGx1Z2luKTtcblxuICAgICAgICBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG4gICAgICB9XG5cbiAgICAgIG5hbWUgPSAobmFtZSA9PT0gXCJjc3NcIiA/IFwiQ1NTXCIgOiBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSkpICsgXCJQbHVnaW5cIjsgLy9mb3IgdGhlIGdsb2JhbCBuYW1lLiBcIm1vdGlvblBhdGhcIiBzaG91bGQgYmVjb21lIE1vdGlvblBhdGhQbHVnaW5cbiAgICB9XG5cbiAgICBfYWRkR2xvYmFsKG5hbWUsIFBsdWdpbik7XG5cbiAgICBjb25maWcucmVnaXN0ZXIgJiYgY29uZmlnLnJlZ2lzdGVyKGdzYXAsIFBsdWdpbiwgUHJvcFR3ZWVuKTtcbiAgfSBlbHNlIHtcbiAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZS5wdXNoKGNvbmZpZyk7XG4gIH1cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ09MT1JTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5fMjU1ID0gMjU1LFxuICAgIF9jb2xvckxvb2t1cCA9IHtcbiAgYXF1YTogWzAsIF8yNTUsIF8yNTVdLFxuICBsaW1lOiBbMCwgXzI1NSwgMF0sXG4gIHNpbHZlcjogWzE5MiwgMTkyLCAxOTJdLFxuICBibGFjazogWzAsIDAsIDBdLFxuICBtYXJvb246IFsxMjgsIDAsIDBdLFxuICB0ZWFsOiBbMCwgMTI4LCAxMjhdLFxuICBibHVlOiBbMCwgMCwgXzI1NV0sXG4gIG5hdnk6IFswLCAwLCAxMjhdLFxuICB3aGl0ZTogW18yNTUsIF8yNTUsIF8yNTVdLFxuICBvbGl2ZTogWzEyOCwgMTI4LCAwXSxcbiAgeWVsbG93OiBbXzI1NSwgXzI1NSwgMF0sXG4gIG9yYW5nZTogW18yNTUsIDE2NSwgMF0sXG4gIGdyYXk6IFsxMjgsIDEyOCwgMTI4XSxcbiAgcHVycGxlOiBbMTI4LCAwLCAxMjhdLFxuICBncmVlbjogWzAsIDEyOCwgMF0sXG4gIHJlZDogW18yNTUsIDAsIDBdLFxuICBwaW5rOiBbXzI1NSwgMTkyLCAyMDNdLFxuICBjeWFuOiBbMCwgXzI1NSwgXzI1NV0sXG4gIHRyYW5zcGFyZW50OiBbXzI1NSwgXzI1NSwgXzI1NSwgMF1cbn0sXG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGlkZWEgdG8gcmVwbGFjZSB0aGUgaGFyZC1jb2RlZCBjb2xvciBuYW1lIHZhbHVlcyAtIHB1dCB0aGlzIGluIHRoZSB0aWNrZXIud2FrZSgpIHdoZXJlIHdlIHNldCB0aGUgX2RvYzpcbi8vIGxldCBjdHggPSBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dChcIjJkXCIpO1xuLy8gX2ZvckVhY2hOYW1lKFwiYXF1YSxsaW1lLHNpbHZlcixibGFjayxtYXJvb24sdGVhbCxibHVlLG5hdnksd2hpdGUsb2xpdmUseWVsbG93LG9yYW5nZSxncmF5LHB1cnBsZSxncmVlbixyZWQscGluayxjeWFuXCIsIGNvbG9yID0+IHtjdHguZmlsbFN0eWxlID0gY29sb3I7IF9jb2xvckxvb2t1cFtjb2xvcl0gPSBzcGxpdENvbG9yKGN0eC5maWxsU3R5bGUpfSk7XG5faHVlID0gZnVuY3Rpb24gX2h1ZShoLCBtMSwgbTIpIHtcbiAgaCArPSBoIDwgMCA/IDEgOiBoID4gMSA/IC0xIDogMDtcbiAgcmV0dXJuIChoICogNiA8IDEgPyBtMSArIChtMiAtIG0xKSAqIGggKiA2IDogaCA8IC41ID8gbTIgOiBoICogMyA8IDIgPyBtMSArIChtMiAtIG0xKSAqICgyIC8gMyAtIGgpICogNiA6IG0xKSAqIF8yNTUgKyAuNSB8IDA7XG59LFxuICAgIHNwbGl0Q29sb3IgPSBmdW5jdGlvbiBzcGxpdENvbG9yKHYsIHRvSFNMLCBmb3JjZUFscGhhKSB7XG4gIHZhciBhID0gIXYgPyBfY29sb3JMb29rdXAuYmxhY2sgOiBfaXNOdW1iZXIodikgPyBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdIDogMCxcbiAgICAgIHIsXG4gICAgICBnLFxuICAgICAgYixcbiAgICAgIGgsXG4gICAgICBzLFxuICAgICAgbCxcbiAgICAgIG1heCxcbiAgICAgIG1pbixcbiAgICAgIGQsXG4gICAgICB3YXNIU0w7XG5cbiAgaWYgKCFhKSB7XG4gICAgaWYgKHYuc3Vic3RyKC0xKSA9PT0gXCIsXCIpIHtcbiAgICAgIC8vc29tZXRpbWVzIGEgdHJhaWxpbmcgY29tbWEgaXMgaW5jbHVkZWQgYW5kIHdlIHNob3VsZCBjaG9wIGl0IG9mZiAodHlwaWNhbGx5IGZyb20gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiB2YWx1ZXMgbGlrZSBhIHRleHRTaGFkb3c6XCIycHggMnB4IDJweCBibHVlLCA1cHggNXB4IDVweCByZ2IoMjU1LDAsMClcIiAtIGluIHRoaXMgZXhhbXBsZSBcImJsdWUsXCIgaGFzIGEgdHJhaWxpbmcgY29tbWEuIFdlIGNvdWxkIHN0cmlwIGl0IG91dCBpbnNpZGUgcGFyc2VDb21wbGV4KCkgYnV0IHdlJ2QgbmVlZCB0byBkbyBpdCB0byB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIHBsdXMgaXQgd291bGRuJ3QgcHJvdmlkZSBwcm90ZWN0aW9uIGZyb20gb3RoZXIgcG90ZW50aWFsIHNjZW5hcmlvcyBsaWtlIGlmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIHNpbWlsYXIgdmFsdWUuXG4gICAgICB2ID0gdi5zdWJzdHIoMCwgdi5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoX2NvbG9yTG9va3VwW3ZdKSB7XG4gICAgICBhID0gX2NvbG9yTG9va3VwW3ZdO1xuICAgIH0gZWxzZSBpZiAodi5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG4gICAgICBpZiAodi5sZW5ndGggPCA2KSB7XG4gICAgICAgIC8vZm9yIHNob3J0aGFuZCBsaWtlICM5RjAgb3IgIzlGMEYgKGNvdWxkIGhhdmUgYWxwaGEpXG4gICAgICAgIHIgPSB2LmNoYXJBdCgxKTtcbiAgICAgICAgZyA9IHYuY2hhckF0KDIpO1xuICAgICAgICBiID0gdi5jaGFyQXQoMyk7XG4gICAgICAgIHYgPSBcIiNcIiArIHIgKyByICsgZyArIGcgKyBiICsgYiArICh2Lmxlbmd0aCA9PT0gNSA/IHYuY2hhckF0KDQpICsgdi5jaGFyQXQoNCkgOiBcIlwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHYubGVuZ3RoID09PSA5KSB7XG4gICAgICAgIC8vIGhleCB3aXRoIGFscGhhLCBsaWtlICNmZDVlNTNmZlxuICAgICAgICBhID0gcGFyc2VJbnQodi5zdWJzdHIoMSwgNiksIDE2KTtcbiAgICAgICAgcmV0dXJuIFthID4+IDE2LCBhID4+IDggJiBfMjU1LCBhICYgXzI1NSwgcGFyc2VJbnQodi5zdWJzdHIoNyksIDE2KSAvIDI1NV07XG4gICAgICB9XG5cbiAgICAgIHYgPSBwYXJzZUludCh2LnN1YnN0cigxKSwgMTYpO1xuICAgICAgYSA9IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV07XG4gICAgfSBlbHNlIGlmICh2LnN1YnN0cigwLCAzKSA9PT0gXCJoc2xcIikge1xuICAgICAgYSA9IHdhc0hTTCA9IHYubWF0Y2goX3N0cmljdE51bUV4cCk7XG5cbiAgICAgIGlmICghdG9IU0wpIHtcbiAgICAgICAgaCA9ICthWzBdICUgMzYwIC8gMzYwO1xuICAgICAgICBzID0gK2FbMV0gLyAxMDA7XG4gICAgICAgIGwgPSArYVsyXSAvIDEwMDtcbiAgICAgICAgZyA9IGwgPD0gLjUgPyBsICogKHMgKyAxKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgIHIgPSBsICogMiAtIGc7XG4gICAgICAgIGEubGVuZ3RoID4gMyAmJiAoYVszXSAqPSAxKTsgLy9jYXN0IGFzIG51bWJlclxuXG4gICAgICAgIGFbMF0gPSBfaHVlKGggKyAxIC8gMywgciwgZyk7XG4gICAgICAgIGFbMV0gPSBfaHVlKGgsIHIsIGcpO1xuICAgICAgICBhWzJdID0gX2h1ZShoIC0gMSAvIDMsIHIsIGcpO1xuICAgICAgfSBlbHNlIGlmICh+di5pbmRleE9mKFwiPVwiKSkge1xuICAgICAgICAvL2lmIHJlbGF0aXZlIHZhbHVlcyBhcmUgZm91bmQsIGp1c3QgcmV0dXJuIHRoZSByYXcgc3RyaW5ncyB3aXRoIHRoZSByZWxhdGl2ZSBwcmVmaXhlcyBpbiBwbGFjZS5cbiAgICAgICAgYSA9IHYubWF0Y2goX251bUV4cCk7XG4gICAgICAgIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKSB8fCBfY29sb3JMb29rdXAudHJhbnNwYXJlbnQ7XG4gICAgfVxuXG4gICAgYSA9IGEubWFwKE51bWJlcik7XG4gIH1cblxuICBpZiAodG9IU0wgJiYgIXdhc0hTTCkge1xuICAgIHIgPSBhWzBdIC8gXzI1NTtcbiAgICBnID0gYVsxXSAvIF8yNTU7XG4gICAgYiA9IGFbMl0gLyBfMjU1O1xuICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgIGggPSBzID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZCA9IG1heCAtIG1pbjtcbiAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgIGggPSBtYXggPT09IHIgPyAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKSA6IG1heCA9PT0gZyA/IChiIC0gcikgLyBkICsgMiA6IChyIC0gZykgLyBkICsgNDtcbiAgICAgIGggKj0gNjA7XG4gICAgfVxuXG4gICAgYVswXSA9IH5+KGggKyAuNSk7XG4gICAgYVsxXSA9IH5+KHMgKiAxMDAgKyAuNSk7XG4gICAgYVsyXSA9IH5+KGwgKiAxMDAgKyAuNSk7XG4gIH1cblxuICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICByZXR1cm4gYTtcbn0sXG4gICAgX2NvbG9yT3JkZXJEYXRhID0gZnVuY3Rpb24gX2NvbG9yT3JkZXJEYXRhKHYpIHtcbiAgLy8gc3RyaXBzIG91dCB0aGUgY29sb3JzIGZyb20gdGhlIHN0cmluZywgZmluZHMgYWxsIHRoZSBudW1lcmljIHNsb3RzICh3aXRoIHVuaXRzKSBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aG9zZS4gVGhlIEFycmF5IGFsc28gaGFzIGEgXCJjXCIgcHJvcGVydHkgd2hpY2ggaXMgYW4gQXJyYXkgb2YgdGhlIGluZGV4IHZhbHVlcyB3aGVyZSB0aGUgY29sb3JzIGJlbG9uZy4gVGhpcyBpcyB0byBoZWxwIHdvcmsgYXJvdW5kIGlzc3VlcyB3aGVyZSB0aGVyZSdzIGEgbWlzLW1hdGNoZWQgb3JkZXIgb2YgY29sb3IvbnVtZXJpYyBkYXRhIGxpa2UgZHJvcC1zaGFkb3coI2YwMCAwcHggMXB4IDJweCkgYW5kIGRyb3Atc2hhZG93KDB4IDFweCAycHggI2YwMCkuIFRoaXMgaXMgYmFzaWNhbGx5IGEgaGVscGVyIGZ1bmN0aW9uIHVzZWQgaW4gX2Zvcm1hdENvbG9ycygpXG4gIHZhciB2YWx1ZXMgPSBbXSxcbiAgICAgIGMgPSBbXSxcbiAgICAgIGkgPSAtMTtcbiAgdi5zcGxpdChfY29sb3JFeHApLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgYSA9IHYubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgICB2YWx1ZXMucHVzaC5hcHBseSh2YWx1ZXMsIGEpO1xuICAgIGMucHVzaChpICs9IGEubGVuZ3RoICsgMSk7XG4gIH0pO1xuICB2YWx1ZXMuYyA9IGM7XG4gIHJldHVybiB2YWx1ZXM7XG59LFxuICAgIF9mb3JtYXRDb2xvcnMgPSBmdW5jdGlvbiBfZm9ybWF0Q29sb3JzKHMsIHRvSFNMLCBvcmRlck1hdGNoRGF0YSkge1xuICB2YXIgcmVzdWx0ID0gXCJcIixcbiAgICAgIGNvbG9ycyA9IChzICsgcmVzdWx0KS5tYXRjaChfY29sb3JFeHApLFxuICAgICAgdHlwZSA9IHRvSFNMID8gXCJoc2xhKFwiIDogXCJyZ2JhKFwiLFxuICAgICAgaSA9IDAsXG4gICAgICBjLFxuICAgICAgc2hlbGwsXG4gICAgICBkLFxuICAgICAgbDtcblxuICBpZiAoIWNvbG9ycykge1xuICAgIHJldHVybiBzO1xuICB9XG5cbiAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICByZXR1cm4gKGNvbG9yID0gc3BsaXRDb2xvcihjb2xvciwgdG9IU0wsIDEpKSAmJiB0eXBlICsgKHRvSFNMID8gY29sb3JbMF0gKyBcIixcIiArIGNvbG9yWzFdICsgXCIlLFwiICsgY29sb3JbMl0gKyBcIiUsXCIgKyBjb2xvclszXSA6IGNvbG9yLmpvaW4oXCIsXCIpKSArIFwiKVwiO1xuICB9KTtcblxuICBpZiAob3JkZXJNYXRjaERhdGEpIHtcbiAgICBkID0gX2NvbG9yT3JkZXJEYXRhKHMpO1xuICAgIGMgPSBvcmRlck1hdGNoRGF0YS5jO1xuXG4gICAgaWYgKGMuam9pbihyZXN1bHQpICE9PSBkLmMuam9pbihyZXN1bHQpKSB7XG4gICAgICBzaGVsbCA9IHMucmVwbGFjZShfY29sb3JFeHAsIFwiMVwiKS5zcGxpdChfbnVtV2l0aFVuaXRFeHApO1xuICAgICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArICh+Yy5pbmRleE9mKGkpID8gY29sb3JzLnNoaWZ0KCkgfHwgdHlwZSArIFwiMCwwLDAsMClcIiA6IChkLmxlbmd0aCA/IGQgOiBjb2xvcnMubGVuZ3RoID8gY29sb3JzIDogb3JkZXJNYXRjaERhdGEpLnNoaWZ0KCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghc2hlbGwpIHtcbiAgICBzaGVsbCA9IHMuc3BsaXQoX2NvbG9yRXhwKTtcbiAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyBjb2xvcnNbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdCArIHNoZWxsW2xdO1xufSxcbiAgICBfY29sb3JFeHAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzID0gXCIoPzpcXFxcYig/Oig/OnJnYnxyZ2JhfGhzbHxoc2xhKVxcXFwoLis/XFxcXCkpfFxcXFxCIyg/OlswLTlhLWZdezMsNH0pezEsMn1cXFxcYlwiLFxuICAgICAgLy93ZSdsbCBkeW5hbWljYWxseSBidWlsZCB0aGlzIFJlZ3VsYXIgRXhwcmVzc2lvbiB0byBjb25zZXJ2ZSBmaWxlIHNpemUuIEFmdGVyIGJ1aWxkaW5nIGl0LCBpdCB3aWxsIGJlIGFibGUgdG8gZmluZCByZ2IoKSwgcmdiYSgpLCAjIChoZXhhZGVjaW1hbCksIGFuZCBuYW1lZCBjb2xvciB2YWx1ZXMgbGlrZSByZWQsIGJsdWUsIHB1cnBsZSwgZXRjLixcbiAgcDtcblxuICBmb3IgKHAgaW4gX2NvbG9yTG9va3VwKSB7XG4gICAgcyArPSBcInxcIiArIHAgKyBcIlxcXFxiXCI7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cChzICsgXCIpXCIsIFwiZ2lcIik7XG59KCksXG4gICAgX2hzbEV4cCA9IC9oc2xbYV0/XFwoLyxcbiAgICBfY29sb3JTdHJpbmdGaWx0ZXIgPSBmdW5jdGlvbiBfY29sb3JTdHJpbmdGaWx0ZXIoYSkge1xuICB2YXIgY29tYmluZWQgPSBhLmpvaW4oXCIgXCIpLFxuICAgICAgdG9IU0w7XG4gIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gIGlmIChfY29sb3JFeHAudGVzdChjb21iaW5lZCkpIHtcbiAgICB0b0hTTCA9IF9oc2xFeHAudGVzdChjb21iaW5lZCk7XG4gICAgYVsxXSA9IF9mb3JtYXRDb2xvcnMoYVsxXSwgdG9IU0wpO1xuICAgIGFbMF0gPSBfZm9ybWF0Q29sb3JzKGFbMF0sIHRvSFNMLCBfY29sb3JPcmRlckRhdGEoYVsxXSkpOyAvLyBtYWtlIHN1cmUgdGhlIG9yZGVyIG9mIG51bWJlcnMvY29sb3JzIG1hdGNoIHdpdGggdGhlIEVORCB2YWx1ZS5cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJQ0tFUlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuX3RpY2tlckFjdGl2ZSxcbiAgICBfdGlja2VyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX2dldFRpbWUgPSBEYXRlLm5vdyxcbiAgICAgIF9sYWdUaHJlc2hvbGQgPSA1MDAsXG4gICAgICBfYWRqdXN0ZWRMYWcgPSAzMyxcbiAgICAgIF9zdGFydFRpbWUgPSBfZ2V0VGltZSgpLFxuICAgICAgX2xhc3RVcGRhdGUgPSBfc3RhcnRUaW1lLFxuICAgICAgX2dhcCA9IDEwMDAgLyAyNDAsXG4gICAgICBfbmV4dFRpbWUgPSBfZ2FwLFxuICAgICAgX2xpc3RlbmVycyA9IFtdLFxuICAgICAgX2lkLFxuICAgICAgX3JlcSxcbiAgICAgIF9yYWYsXG4gICAgICBfc2VsZixcbiAgICAgIF9kZWx0YSxcbiAgICAgIF9pLFxuICAgICAgX3RpY2sgPSBmdW5jdGlvbiBfdGljayh2KSB7XG4gICAgdmFyIGVsYXBzZWQgPSBfZ2V0VGltZSgpIC0gX2xhc3RVcGRhdGUsXG4gICAgICAgIG1hbnVhbCA9IHYgPT09IHRydWUsXG4gICAgICAgIG92ZXJsYXAsXG4gICAgICAgIGRpc3BhdGNoLFxuICAgICAgICB0aW1lLFxuICAgICAgICBmcmFtZTtcblxuICAgIChlbGFwc2VkID4gX2xhZ1RocmVzaG9sZCB8fCBlbGFwc2VkIDwgMCkgJiYgKF9zdGFydFRpbWUgKz0gZWxhcHNlZCAtIF9hZGp1c3RlZExhZyk7XG4gICAgX2xhc3RVcGRhdGUgKz0gZWxhcHNlZDtcbiAgICB0aW1lID0gX2xhc3RVcGRhdGUgLSBfc3RhcnRUaW1lO1xuICAgIG92ZXJsYXAgPSB0aW1lIC0gX25leHRUaW1lO1xuXG4gICAgaWYgKG92ZXJsYXAgPiAwIHx8IG1hbnVhbCkge1xuICAgICAgZnJhbWUgPSArK19zZWxmLmZyYW1lO1xuICAgICAgX2RlbHRhID0gdGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwO1xuICAgICAgX3NlbGYudGltZSA9IHRpbWUgPSB0aW1lIC8gMTAwMDtcbiAgICAgIF9uZXh0VGltZSArPSBvdmVybGFwICsgKG92ZXJsYXAgPj0gX2dhcCA/IDQgOiBfZ2FwIC0gb3ZlcmxhcCk7XG4gICAgICBkaXNwYXRjaCA9IDE7XG4gICAgfVxuXG4gICAgbWFudWFsIHx8IChfaWQgPSBfcmVxKF90aWNrKSk7IC8vbWFrZSBzdXJlIHRoZSByZXF1ZXN0IGlzIG1hZGUgYmVmb3JlIHdlIGRpc3BhdGNoIHRoZSBcInRpY2tcIiBldmVudCBzbyB0aGF0IHRpbWluZyBpcyBtYWludGFpbmVkLiBPdGhlcndpc2UsIGlmIHByb2Nlc3NpbmcgdGhlIFwidGlja1wiIHJlcXVpcmVzIGEgYnVuY2ggb2YgdGltZSAobGlrZSAxNW1zKSBhbmQgd2UncmUgdXNpbmcgYSBzZXRUaW1lb3V0KCkgdGhhdCdzIGJhc2VkIG9uIDE2LjdtcywgaXQnZCB0ZWNobmljYWxseSB0YWtlIDMxLjdtcyBiZXR3ZWVuIGZyYW1lcyBvdGhlcndpc2UuXG5cbiAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgIGZvciAoX2kgPSAwOyBfaSA8IF9saXN0ZW5lcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIC8vIHVzZSBfaSBhbmQgY2hlY2sgX2xpc3RlbmVycy5sZW5ndGggaW5zdGVhZCBvZiBhIHZhcmlhYmxlIGJlY2F1c2UgYSBsaXN0ZW5lciBjb3VsZCBnZXQgcmVtb3ZlZCBkdXJpbmcgdGhlIGxvb3AsIGFuZCBpZiB0aGF0IGhhcHBlbnMgdG8gYW4gZWxlbWVudCBsZXNzIHRoYW4gdGhlIGN1cnJlbnQgaW5kZXgsIGl0J2QgdGhyb3cgdGhpbmdzIG9mZiBpbiB0aGUgbG9vcC5cbiAgICAgICAgX2xpc3RlbmVyc1tfaV0odGltZSwgX2RlbHRhLCBmcmFtZSwgdik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9zZWxmID0ge1xuICAgIHRpbWU6IDAsXG4gICAgZnJhbWU6IDAsXG4gICAgdGljazogZnVuY3Rpb24gdGljaygpIHtcbiAgICAgIF90aWNrKHRydWUpO1xuICAgIH0sXG4gICAgZGVsdGFSYXRpbzogZnVuY3Rpb24gZGVsdGFSYXRpbyhmcHMpIHtcbiAgICAgIHJldHVybiBfZGVsdGEgLyAoMTAwMCAvIChmcHMgfHwgNjApKTtcbiAgICB9LFxuICAgIHdha2U6IGZ1bmN0aW9uIHdha2UoKSB7XG4gICAgICBpZiAoX2NvcmVSZWFkeSkge1xuICAgICAgICBpZiAoIV9jb3JlSW5pdHRlZCAmJiBfd2luZG93RXhpc3RzKCkpIHtcbiAgICAgICAgICBfd2luID0gX2NvcmVJbml0dGVkID0gd2luZG93O1xuICAgICAgICAgIF9kb2MgPSBfd2luLmRvY3VtZW50IHx8IHt9O1xuICAgICAgICAgIF9nbG9iYWxzLmdzYXAgPSBnc2FwO1xuICAgICAgICAgIChfd2luLmdzYXBWZXJzaW9ucyB8fCAoX3dpbi5nc2FwVmVyc2lvbnMgPSBbXSkpLnB1c2goZ3NhcC52ZXJzaW9uKTtcblxuICAgICAgICAgIF9pbnN0YWxsKF9pbnN0YWxsU2NvcGUgfHwgX3dpbi5HcmVlblNvY2tHbG9iYWxzIHx8ICFfd2luLmdzYXAgJiYgX3dpbiB8fCB7fSk7XG5cbiAgICAgICAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZS5mb3JFYWNoKF9jcmVhdGVQbHVnaW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JhZiA9IHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICBfaWQgJiYgX3NlbGYuc2xlZXAoKTtcblxuICAgICAgICBfcmVxID0gX3JhZiB8fCBmdW5jdGlvbiAoZikge1xuICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGYsIF9uZXh0VGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwICsgMSB8IDApO1xuICAgICAgICB9O1xuXG4gICAgICAgIF90aWNrZXJBY3RpdmUgPSAxO1xuXG4gICAgICAgIF90aWNrKDIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xlZXA6IGZ1bmN0aW9uIHNsZWVwKCkge1xuICAgICAgKF9yYWYgPyBjYW5jZWxBbmltYXRpb25GcmFtZSA6IGNsZWFyVGltZW91dCkoX2lkKTtcbiAgICAgIF90aWNrZXJBY3RpdmUgPSAwO1xuICAgICAgX3JlcSA9IF9lbXB0eUZ1bmM7XG4gICAgfSxcbiAgICBsYWdTbW9vdGhpbmc6IGZ1bmN0aW9uIGxhZ1Ntb290aGluZyh0aHJlc2hvbGQsIGFkanVzdGVkTGFnKSB7XG4gICAgICBfbGFnVGhyZXNob2xkID0gdGhyZXNob2xkIHx8IEluZmluaXR5OyAvLyB6ZXJvIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBiYXNpY2FsbHkgdW5saW1pdGVkXG5cbiAgICAgIF9hZGp1c3RlZExhZyA9IE1hdGgubWluKGFkanVzdGVkTGFnIHx8IDMzLCBfbGFnVGhyZXNob2xkKTtcbiAgICB9LFxuICAgIGZwczogZnVuY3Rpb24gZnBzKF9mcHMpIHtcbiAgICAgIF9nYXAgPSAxMDAwIC8gKF9mcHMgfHwgMjQwKTtcbiAgICAgIF9uZXh0VGltZSA9IF9zZWxmLnRpbWUgKiAxMDAwICsgX2dhcDtcbiAgICB9LFxuICAgIGFkZDogZnVuY3Rpb24gYWRkKGNhbGxiYWNrLCBvbmNlLCBwcmlvcml0aXplKSB7XG4gICAgICB2YXIgZnVuYyA9IG9uY2UgPyBmdW5jdGlvbiAodCwgZCwgZiwgdikge1xuICAgICAgICBjYWxsYmFjayh0LCBkLCBmLCB2KTtcblxuICAgICAgICBfc2VsZi5yZW1vdmUoZnVuYyk7XG4gICAgICB9IDogY2FsbGJhY2s7XG5cbiAgICAgIF9zZWxmLnJlbW92ZShjYWxsYmFjayk7XG5cbiAgICAgIF9saXN0ZW5lcnNbcHJpb3JpdGl6ZSA/IFwidW5zaGlmdFwiIDogXCJwdXNoXCJdKGZ1bmMpO1xuXG4gICAgICBfd2FrZSgpO1xuXG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGNhbGxiYWNrLCBpKSB7XG4gICAgICB+KGkgPSBfbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spKSAmJiBfbGlzdGVuZXJzLnNwbGljZShpLCAxKSAmJiBfaSA+PSBpICYmIF9pLS07XG4gICAgfSxcbiAgICBfbGlzdGVuZXJzOiBfbGlzdGVuZXJzXG4gIH07XG4gIHJldHVybiBfc2VsZjtcbn0oKSxcbiAgICBfd2FrZSA9IGZ1bmN0aW9uIF93YWtlKCkge1xuICByZXR1cm4gIV90aWNrZXJBY3RpdmUgJiYgX3RpY2tlci53YWtlKCk7XG59LFxuICAgIC8vYWxzbyBlbnN1cmVzIHRoZSBjb3JlIGNsYXNzZXMgYXJlIGluaXRpYWxpemVkLlxuXG4vKlxuKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIEVBU0lOR1xuKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuX2Vhc2VNYXAgPSB7fSxcbiAgICBfY3VzdG9tRWFzZUV4cCA9IC9eW1xcZC5cXC1NXVtcXGQuXFwtLFxcc10vLFxuICAgIF9xdW90ZXNFeHAgPSAvW1wiJ10vZyxcbiAgICBfcGFyc2VPYmplY3RJblN0cmluZyA9IGZ1bmN0aW9uIF9wYXJzZU9iamVjdEluU3RyaW5nKHZhbHVlKSB7XG4gIC8vdGFrZXMgYSBzdHJpbmcgbGlrZSBcInt3aWdnbGVzOjEwLCB0eXBlOmFudGljaXBhdGV9KVwiIGFuZCB0dXJucyBpdCBpbnRvIGEgcmVhbCBvYmplY3QuIE5vdGljZSBpdCBlbmRzIGluIFwiKVwiIGFuZCBpbmNsdWRlcyB0aGUge30gd3JhcHBlcnMuIFRoaXMgaXMgYmVjYXVzZSB3ZSBvbmx5IHVzZSB0aGlzIGZ1bmN0aW9uIGZvciBwYXJzaW5nIGVhc2UgY29uZmlncyBhbmQgcHJpb3JpdGl6ZWQgb3B0aW1pemF0aW9uIHJhdGhlciB0aGFuIHJldXNhYmlsaXR5LlxuICB2YXIgb2JqID0ge30sXG4gICAgICBzcGxpdCA9IHZhbHVlLnN1YnN0cigxLCB2YWx1ZS5sZW5ndGggLSAzKS5zcGxpdChcIjpcIiksXG4gICAgICBrZXkgPSBzcGxpdFswXSxcbiAgICAgIGkgPSAxLFxuICAgICAgbCA9IHNwbGl0Lmxlbmd0aCxcbiAgICAgIGluZGV4LFxuICAgICAgdmFsLFxuICAgICAgcGFyc2VkVmFsO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFsID0gc3BsaXRbaV07XG4gICAgaW5kZXggPSBpICE9PSBsIC0gMSA/IHZhbC5sYXN0SW5kZXhPZihcIixcIikgOiB2YWwubGVuZ3RoO1xuICAgIHBhcnNlZFZhbCA9IHZhbC5zdWJzdHIoMCwgaW5kZXgpO1xuICAgIG9ialtrZXldID0gaXNOYU4ocGFyc2VkVmFsKSA/IHBhcnNlZFZhbC5yZXBsYWNlKF9xdW90ZXNFeHAsIFwiXCIpLnRyaW0oKSA6ICtwYXJzZWRWYWw7XG4gICAga2V5ID0gdmFsLnN1YnN0cihpbmRleCArIDEpLnRyaW0oKTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF92YWx1ZUluUGFyZW50aGVzZXMgPSBmdW5jdGlvbiBfdmFsdWVJblBhcmVudGhlc2VzKHZhbHVlKSB7XG4gIHZhciBvcGVuID0gdmFsdWUuaW5kZXhPZihcIihcIikgKyAxLFxuICAgICAgY2xvc2UgPSB2YWx1ZS5pbmRleE9mKFwiKVwiKSxcbiAgICAgIG5lc3RlZCA9IHZhbHVlLmluZGV4T2YoXCIoXCIsIG9wZW4pO1xuICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKG9wZW4sIH5uZXN0ZWQgJiYgbmVzdGVkIDwgY2xvc2UgPyB2YWx1ZS5pbmRleE9mKFwiKVwiLCBjbG9zZSArIDEpIDogY2xvc2UpO1xufSxcbiAgICBfY29uZmlnRWFzZUZyb21TdHJpbmcgPSBmdW5jdGlvbiBfY29uZmlnRWFzZUZyb21TdHJpbmcobmFtZSkge1xuICAvL25hbWUgY2FuIGJlIGEgc3RyaW5nIGxpa2UgXCJlbGFzdGljLm91dCgxLDAuNSlcIiwgYW5kIHBhc3MgaW4gX2Vhc2VNYXAgYXMgb2JqIGFuZCBpdCdsbCBwYXJzZSBpdCBvdXQgYW5kIGNhbGwgdGhlIGFjdHVhbCBmdW5jdGlvbiBsaWtlIF9lYXNlTWFwLkVsYXN0aWMuZWFzZU91dC5jb25maWcoMSwwLjUpLiBJdCB3aWxsIGFsc28gcGFyc2UgY3VzdG9tIGVhc2Ugc3RyaW5ncyBhcyBsb25nIGFzIEN1c3RvbUVhc2UgaXMgbG9hZGVkIGFuZCByZWdpc3RlcmVkIChpbnRlcm5hbGx5IGFzIF9lYXNlTWFwLl9DRSkuXG4gIHZhciBzcGxpdCA9IChuYW1lICsgXCJcIikuc3BsaXQoXCIoXCIpLFxuICAgICAgZWFzZSA9IF9lYXNlTWFwW3NwbGl0WzBdXTtcbiAgcmV0dXJuIGVhc2UgJiYgc3BsaXQubGVuZ3RoID4gMSAmJiBlYXNlLmNvbmZpZyA/IGVhc2UuY29uZmlnLmFwcGx5KG51bGwsIH5uYW1lLmluZGV4T2YoXCJ7XCIpID8gW19wYXJzZU9iamVjdEluU3RyaW5nKHNwbGl0WzFdKV0gOiBfdmFsdWVJblBhcmVudGhlc2VzKG5hbWUpLnNwbGl0KFwiLFwiKS5tYXAoX251bWVyaWNJZlBvc3NpYmxlKSkgOiBfZWFzZU1hcC5fQ0UgJiYgX2N1c3RvbUVhc2VFeHAudGVzdChuYW1lKSA/IF9lYXNlTWFwLl9DRShcIlwiLCBuYW1lKSA6IGVhc2U7XG59LFxuICAgIF9pbnZlcnRFYXNlID0gZnVuY3Rpb24gX2ludmVydEVhc2UoZWFzZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2UoMSAtIHApO1xuICB9O1xufSxcbiAgICAvLyBhbGxvdyB5b3lvRWFzZSB0byBiZSBzZXQgaW4gY2hpbGRyZW4gYW5kIGhhdmUgdGhvc2UgYWZmZWN0ZWQgd2hlbiB0aGUgcGFyZW50L2FuY2VzdG9yIHRpbWVsaW5lIHlveW9zLlxuX3Byb3BhZ2F0ZVlveW9FYXNlID0gZnVuY3Rpb24gX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pIHtcbiAgdmFyIGNoaWxkID0gdGltZWxpbmUuX2ZpcnN0LFxuICAgICAgZWFzZTtcblxuICB3aGlsZSAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUaW1lbGluZSkge1xuICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKGNoaWxkLCBpc1lveW8pO1xuICAgIH0gZWxzZSBpZiAoY2hpbGQudmFycy55b3lvRWFzZSAmJiAoIWNoaWxkLl95b3lvIHx8ICFjaGlsZC5fcmVwZWF0KSAmJiBjaGlsZC5feW95byAhPT0gaXNZb3lvKSB7XG4gICAgICBpZiAoY2hpbGQudGltZWxpbmUpIHtcbiAgICAgICAgX3Byb3BhZ2F0ZVlveW9FYXNlKGNoaWxkLnRpbWVsaW5lLCBpc1lveW8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWFzZSA9IGNoaWxkLl9lYXNlO1xuICAgICAgICBjaGlsZC5fZWFzZSA9IGNoaWxkLl95RWFzZTtcbiAgICAgICAgY2hpbGQuX3lFYXNlID0gZWFzZTtcbiAgICAgICAgY2hpbGQuX3lveW8gPSBpc1lveW87XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgfVxufSxcbiAgICBfcGFyc2VFYXNlID0gZnVuY3Rpb24gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICByZXR1cm4gIWVhc2UgPyBkZWZhdWx0RWFzZSA6IChfaXNGdW5jdGlvbihlYXNlKSA/IGVhc2UgOiBfZWFzZU1hcFtlYXNlXSB8fCBfY29uZmlnRWFzZUZyb21TdHJpbmcoZWFzZSkpIHx8IGRlZmF1bHRFYXNlO1xufSxcbiAgICBfaW5zZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnNlcnRFYXNlKG5hbWVzLCBlYXNlSW4sIGVhc2VPdXQsIGVhc2VJbk91dCkge1xuICBpZiAoZWFzZU91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgICAgcmV0dXJuIDEgLSBlYXNlSW4oMSAtIHApO1xuICAgIH07XG4gIH1cblxuICBpZiAoZWFzZUluT3V0ID09PSB2b2lkIDApIHtcbiAgICBlYXNlSW5PdXQgPSBmdW5jdGlvbiBlYXNlSW5PdXQocCkge1xuICAgICAgcmV0dXJuIHAgPCAuNSA/IGVhc2VJbihwICogMikgLyAyIDogMSAtIGVhc2VJbigoMSAtIHApICogMikgLyAyO1xuICAgIH07XG4gIH1cblxuICB2YXIgZWFzZSA9IHtcbiAgICBlYXNlSW46IGVhc2VJbixcbiAgICBlYXNlT3V0OiBlYXNlT3V0LFxuICAgIGVhc2VJbk91dDogZWFzZUluT3V0XG4gIH0sXG4gICAgICBsb3dlcmNhc2VOYW1lO1xuXG4gIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfZWFzZU1hcFtuYW1lXSA9IF9nbG9iYWxzW25hbWVdID0gZWFzZTtcbiAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXSA9IGVhc2VPdXQ7XG5cbiAgICBmb3IgKHZhciBwIGluIGVhc2UpIHtcbiAgICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgKyAocCA9PT0gXCJlYXNlSW5cIiA/IFwiLmluXCIgOiBwID09PSBcImVhc2VPdXRcIiA/IFwiLm91dFwiIDogXCIuaW5PdXRcIildID0gX2Vhc2VNYXBbbmFtZSArIFwiLlwiICsgcF0gPSBlYXNlW3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9lYXNlSW5PdXRGcm9tT3V0ID0gZnVuY3Rpb24gX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IC41ID8gKDEgLSBlYXNlT3V0KDEgLSBwICogMikpIC8gMiA6IC41ICsgZWFzZU91dCgocCAtIC41KSAqIDIpIC8gMjtcbiAgfTtcbn0sXG4gICAgX2NvbmZpZ0VsYXN0aWMgPSBmdW5jdGlvbiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICB2YXIgcDEgPSBhbXBsaXR1ZGUgPj0gMSA/IGFtcGxpdHVkZSA6IDEsXG4gICAgICAvL25vdGU6IGlmIGFtcGxpdHVkZSBpcyA8IDEsIHdlIHNpbXBseSBhZGp1c3QgdGhlIHBlcmlvZCBmb3IgYSBtb3JlIG5hdHVyYWwgZmVlbC4gT3RoZXJ3aXNlIHRoZSBtYXRoIGRvZXNuJ3Qgd29yayByaWdodCBhbmQgdGhlIGN1cnZlIHN0YXJ0cyBhdCAxLlxuICBwMiA9IChwZXJpb2QgfHwgKHR5cGUgPyAuMyA6IC40NSkpIC8gKGFtcGxpdHVkZSA8IDEgPyBhbXBsaXR1ZGUgOiAxKSxcbiAgICAgIHAzID0gcDIgLyBfMlBJICogKE1hdGguYXNpbigxIC8gcDEpIHx8IDApLFxuICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID09PSAxID8gMSA6IHAxICogTWF0aC5wb3coMiwgLTEwICogcCkgKiBfc2luKChwIC0gcDMpICogcDIpICsgMTtcbiAgfSxcbiAgICAgIGVhc2UgPSB0eXBlID09PSBcIm91dFwiID8gZWFzZU91dCA6IHR5cGUgPT09IFwiaW5cIiA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSA6IF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpO1xuXG4gIHAyID0gXzJQSSAvIHAyOyAvL3ByZWNhbGN1bGF0ZSB0byBvcHRpbWl6ZVxuXG4gIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gICAgcmV0dXJuIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKTtcbiAgfTtcblxuICByZXR1cm4gZWFzZTtcbn0sXG4gICAgX2NvbmZpZ0JhY2sgPSBmdW5jdGlvbiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpIHtcbiAgaWYgKG92ZXJzaG9vdCA9PT0gdm9pZCAwKSB7XG4gICAgb3ZlcnNob290ID0gMS43MDE1ODtcbiAgfVxuXG4gIHZhciBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgcmV0dXJuIHAgPyAtLXAgKiBwICogKChvdmVyc2hvb3QgKyAxKSAqIHAgKyBvdmVyc2hvb3QpICsgMSA6IDA7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChvdmVyc2hvb3QpIHtcbiAgICByZXR1cm4gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KTtcbiAgfTtcblxuICByZXR1cm4gZWFzZTtcbn07IC8vIGEgY2hlYXBlciAoa2IgYW5kIGNwdSkgYnV0IG1vcmUgbWlsZCB3YXkgdG8gZ2V0IGEgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIGJ5IGZlZWRpbmcgaW4gYSB2YWx1ZSBiZXR3ZWVuIC0xIChlYXNlSW4pIGFuZCAxIChlYXNlT3V0KSB3aGVyZSAwIGlzIGxpbmVhci5cbi8vIF93ZWlnaHRlZEVhc2UgPSByYXRpbyA9PiB7XG4vLyBcdGxldCB5ID0gMC41ICsgcmF0aW8gLyAyO1xuLy8gXHRyZXR1cm4gcCA9PiAoMiAqICgxIC0gcCkgKiBwICogeSArIHAgKiBwKTtcbi8vIH0sXG4vLyBhIHN0cm9uZ2VyIChidXQgbW9yZSBleHBlbnNpdmUga2IvY3B1KSBwYXJhbWV0ZXJpemVkIHdlaWdodGVkIGVhc2UgdGhhdCBsZXRzIHlvdSBmZWVkIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlU3Ryb25nID0gcmF0aW8gPT4ge1xuLy8gXHRyYXRpbyA9IC41ICsgcmF0aW8gLyAyO1xuLy8gXHRsZXQgbyA9IDEgLyAzICogKHJhdGlvIDwgLjUgPyByYXRpbyA6IDEgLSByYXRpbyksXG4vLyBcdFx0YiA9IHJhdGlvIC0gbyxcbi8vIFx0XHRjID0gcmF0aW8gKyBvO1xuLy8gXHRyZXR1cm4gcCA9PiBwID09PSAxID8gcCA6IDMgKiBiICogKDEgLSBwKSAqICgxIC0gcCkgKiBwICsgMyAqIGMgKiAoMSAtIHApICogcCAqIHAgKyBwICogcCAqIHA7XG4vLyB9O1xuXG5cbl9mb3JFYWNoTmFtZShcIkxpbmVhcixRdWFkLEN1YmljLFF1YXJ0LFF1aW50LFN0cm9uZ1wiLCBmdW5jdGlvbiAobmFtZSwgaSkge1xuICB2YXIgcG93ZXIgPSBpIDwgNSA/IGkgKyAxIDogaTtcblxuICBfaW5zZXJ0RWFzZShuYW1lICsgXCIsUG93ZXJcIiArIChwb3dlciAtIDEpLCBpID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gTWF0aC5wb3cocCwgcG93ZXIpO1xuICB9IDogZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcDtcbiAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSBwLCBwb3dlcik7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/IE1hdGgucG93KHAgKiAyLCBwb3dlcikgLyAyIDogMSAtIE1hdGgucG93KCgxIC0gcCkgKiAyLCBwb3dlcikgLyAyO1xuICB9KTtcbn0pO1xuXG5fZWFzZU1hcC5MaW5lYXIuZWFzZU5vbmUgPSBfZWFzZU1hcC5ub25lID0gX2Vhc2VNYXAuTGluZWFyLmVhc2VJbjtcblxuX2luc2VydEVhc2UoXCJFbGFzdGljXCIsIF9jb25maWdFbGFzdGljKFwiaW5cIiksIF9jb25maWdFbGFzdGljKFwib3V0XCIpLCBfY29uZmlnRWxhc3RpYygpKTtcblxuKGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBuMSA9IDEgLyBjLFxuICAgICAgbjIgPSAyICogbjEsXG4gICAgICBuMyA9IDIuNSAqIG4xLFxuICAgICAgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwIDwgbjEgPyBuICogcCAqIHAgOiBwIDwgbjIgPyBuICogTWF0aC5wb3cocCAtIDEuNSAvIGMsIDIpICsgLjc1IDogcCA8IG4zID8gbiAqIChwIC09IDIuMjUgLyBjKSAqIHAgKyAuOTM3NSA6IG4gKiBNYXRoLnBvdyhwIC0gMi42MjUgLyBjLCAyKSArIC45ODQzNzU7XG4gIH07XG5cbiAgX2luc2VydEVhc2UoXCJCb3VuY2VcIiwgZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9LCBlYXNlT3V0KTtcbn0pKDcuNTYyNSwgMi43NSk7XG5cbl9pbnNlcnRFYXNlKFwiRXhwb1wiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA/IE1hdGgucG93KDIsIDEwICogKHAgLSAxKSkgOiAwO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiQ2lyY1wiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gLShfc3FydCgxIC0gcCAqIHApIC0gMSk7XG59KTtcblxuX2luc2VydEVhc2UoXCJTaW5lXCIsIGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwID09PSAxID8gMSA6IC1fY29zKHAgKiBfSEFMRl9QSSkgKyAxO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiQmFja1wiLCBfY29uZmlnQmFjayhcImluXCIpLCBfY29uZmlnQmFjayhcIm91dFwiKSwgX2NvbmZpZ0JhY2soKSk7XG5cbl9lYXNlTWFwLlN0ZXBwZWRFYXNlID0gX2Vhc2VNYXAuc3RlcHMgPSBfZ2xvYmFscy5TdGVwcGVkRWFzZSA9IHtcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcoc3RlcHMsIGltbWVkaWF0ZVN0YXJ0KSB7XG4gICAgaWYgKHN0ZXBzID09PSB2b2lkIDApIHtcbiAgICAgIHN0ZXBzID0gMTtcbiAgICB9XG5cbiAgICB2YXIgcDEgPSAxIC8gc3RlcHMsXG4gICAgICAgIHAyID0gc3RlcHMgKyAoaW1tZWRpYXRlU3RhcnQgPyAwIDogMSksXG4gICAgICAgIHAzID0gaW1tZWRpYXRlU3RhcnQgPyAxIDogMCxcbiAgICAgICAgbWF4ID0gMSAtIF90aW55TnVtO1xuICAgIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuICgocDIgKiBfY2xhbXAoMCwgbWF4LCBwKSB8IDApICsgcDMpICogcDE7XG4gICAgfTtcbiAgfVxufTtcbl9kZWZhdWx0cy5lYXNlID0gX2Vhc2VNYXBbXCJxdWFkLm91dFwiXTtcblxuX2ZvckVhY2hOYW1lKFwib25Db21wbGV0ZSxvblVwZGF0ZSxvblN0YXJ0LG9uUmVwZWF0LG9uUmV2ZXJzZUNvbXBsZXRlLG9uSW50ZXJydXB0XCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfY2FsbGJhY2tOYW1lcyArPSBuYW1lICsgXCIsXCIgKyBuYW1lICsgXCJQYXJhbXMsXCI7XG59KTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ0FDSEVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIEdTQ2FjaGUgPSBmdW5jdGlvbiBHU0NhY2hlKHRhcmdldCwgaGFybmVzcykge1xuICB0aGlzLmlkID0gX2dzSUQrKztcbiAgdGFyZ2V0Ll9nc2FwID0gdGhpcztcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMuaGFybmVzcyA9IGhhcm5lc3M7XG4gIHRoaXMuZ2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0IDogX2dldFByb3BlcnR5O1xuICB0aGlzLnNldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldFNldHRlciA6IF9nZXRTZXR0ZXI7XG59O1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBTklNQVRJT05cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZXhwb3J0IHZhciBBbmltYXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBbmltYXRpb24odmFycykge1xuICAgIHRoaXMudmFycyA9IHZhcnM7XG4gICAgdGhpcy5fZGVsYXkgPSArdmFycy5kZWxheSB8fCAwO1xuXG4gICAgaWYgKHRoaXMuX3JlcGVhdCA9IHZhcnMucmVwZWF0ID09PSBJbmZpbml0eSA/IC0yIDogdmFycy5yZXBlYXQgfHwgMCkge1xuICAgICAgLy8gVE9ETzogcmVwZWF0OiBJbmZpbml0eSBvbiBhIHRpbWVsaW5lJ3MgY2hpbGRyZW4gbXVzdCBmbGFnIHRoYXQgdGltZWxpbmUgaW50ZXJuYWxseSBhbmQgYWZmZWN0IGl0cyB0b3RhbER1cmF0aW9uLCBvdGhlcndpc2UgaXQnbGwgc3RvcCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIHdoZW4gcmVhY2hpbmcgdGhlIHN0YXJ0LlxuICAgICAgdGhpcy5fckRlbGF5ID0gdmFycy5yZXBlYXREZWxheSB8fCAwO1xuICAgICAgdGhpcy5feW95byA9ICEhdmFycy55b3lvIHx8ICEhdmFycy55b3lvRWFzZTtcbiAgICB9XG5cbiAgICB0aGlzLl90cyA9IDE7XG5cbiAgICBfc2V0RHVyYXRpb24odGhpcywgK3ZhcnMuZHVyYXRpb24sIDEsIDEpO1xuXG4gICAgdGhpcy5kYXRhID0gdmFycy5kYXRhO1xuXG4gICAgaWYgKF9jb250ZXh0KSB7XG4gICAgICB0aGlzLl9jdHggPSBfY29udGV4dDtcblxuICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRoaXMpO1xuICAgIH1cblxuICAgIF90aWNrZXJBY3RpdmUgfHwgX3RpY2tlci53YWtlKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQW5pbWF0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGVsYXkgPSBmdW5jdGlvbiBkZWxheSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5zdGFydFRpbWUodGhpcy5fc3RhcnQgKyB2YWx1ZSAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIHRoaXMuX2RlbGF5ID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZGVsYXk7XG4gIH07XG5cbiAgX3Byb3RvLmR1cmF0aW9uID0gZnVuY3Rpb24gZHVyYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxEdXJhdGlvbih0aGlzLl9yZXBlYXQgPiAwID8gdmFsdWUgKyAodmFsdWUgKyB0aGlzLl9yRGVsYXkpICogdGhpcy5fcmVwZWF0IDogdmFsdWUpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgJiYgdGhpcy5fZHVyO1xuICB9O1xuXG4gIF9wcm90by50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24gdG90YWxEdXJhdGlvbih2YWx1ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3REdXI7XG4gICAgfVxuXG4gICAgdGhpcy5fZGlydHkgPSAwO1xuICAgIHJldHVybiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fcmVwZWF0IDwgMCA/IHZhbHVlIDogKHZhbHVlIC0gdGhpcy5fcmVwZWF0ICogdGhpcy5fckRlbGF5KSAvICh0aGlzLl9yZXBlYXQgKyAxKSk7XG4gIH07XG5cbiAgX3Byb3RvLnRvdGFsVGltZSA9IGZ1bmN0aW9uIHRvdGFsVGltZShfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIF93YWtlKCk7XG5cbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90VGltZTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gdGhpcy5fZHA7XG5cbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLl90cykge1xuICAgICAgX2FsaWduUGxheWhlYWQodGhpcywgX3RvdGFsVGltZSk7XG5cbiAgICAgICFwYXJlbnQuX2RwIHx8IHBhcmVudC5wYXJlbnQgfHwgX3Bvc3RBZGRDaGVja3MocGFyZW50LCB0aGlzKTsgLy8gZWRnZSBjYXNlOiBpZiB0aGlzIGlzIGEgY2hpbGQgb2YgYSB0aW1lbGluZSB0aGF0IGFscmVhZHkgY29tcGxldGVkLCBmb3IgZXhhbXBsZSwgd2UgbXVzdCByZS1hY3RpdmF0ZSB0aGUgcGFyZW50LlxuICAgICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3IgdGltZWxpbmVzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZCwgd2Ugc2hvdWxkIHJlc2V0IHRoZWlyIHRvdGFsVGltZSgpIHdoaWNoIHdpbGwgYWxzbyBlbnN1cmUgdGhhdCB0aGV5J3JlIGxpbmVkIHVwIHByb3Blcmx5IGFuZCBlbmFibGVkLiBTa2lwIGZvciBhbmltYXRpb25zIHRoYXQgYXJlIG9uIHRoZSByb290ICh3YXN0ZWZ1bCkuIEV4YW1wbGU6IGEgVGltZWxpbmVMaXRlLmV4cG9ydFJvb3QoKSBpcyBwZXJmb3JtZWQgd2hlbiB0aGVyZSdzIGEgcGF1c2VkIHR3ZWVuIG9uIHRoZSByb290LCB0aGUgZXhwb3J0IHdpbGwgbm90IGNvbXBsZXRlIHVudGlsIHRoYXQgdHdlZW4gaXMgdW5wYXVzZWQsIGJ1dCBpbWFnaW5lIGEgY2hpbGQgZ2V0cyByZXN0YXJ0ZWQgbGF0ZXIsIGFmdGVyIGFsbCBbdW5wYXVzZWRdIHR3ZWVucyBoYXZlIGNvbXBsZXRlZC4gVGhlIHN0YXJ0IG9mIHRoYXQgY2hpbGQgd291bGQgZ2V0IHB1c2hlZCBvdXQsIGJ1dCBvbmUgb2YgdGhlIGFuY2VzdG9ycyBtYXkgaGF2ZSBjb21wbGV0ZWQuXG5cbiAgICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LnBhcmVudC5fdGltZSAhPT0gcGFyZW50Ll9zdGFydCArIChwYXJlbnQuX3RzID49IDAgPyBwYXJlbnQuX3RUaW1lIC8gcGFyZW50Ll90cyA6IChwYXJlbnQudG90YWxEdXJhdGlvbigpIC0gcGFyZW50Ll90VGltZSkgLyAtcGFyZW50Ll90cykpIHtcbiAgICAgICAgICBwYXJlbnQudG90YWxUaW1lKHBhcmVudC5fdFRpbWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnBhcmVudCAmJiB0aGlzLl9kcC5hdXRvUmVtb3ZlQ2hpbGRyZW4gJiYgKHRoaXMuX3RzID4gMCAmJiBfdG90YWxUaW1lIDwgdGhpcy5fdER1ciB8fCB0aGlzLl90cyA8IDAgJiYgX3RvdGFsVGltZSA+IDAgfHwgIXRoaXMuX3REdXIgJiYgIV90b3RhbFRpbWUpKSB7XG4gICAgICAgIC8vaWYgdGhlIGFuaW1hdGlvbiBkb2Vzbid0IGhhdmUgYSBwYXJlbnQsIHB1dCBpdCBiYWNrIGludG8gaXRzIGxhc3QgcGFyZW50IChyZWNvcmRlZCBhcyBfZHAgZm9yIGV4YWN0bHkgY2FzZXMgbGlrZSB0aGlzKS4gTGltaXQgdG8gcGFyZW50cyB3aXRoIGF1dG9SZW1vdmVDaGlsZHJlbiAobGlrZSBnbG9iYWxUaW1lbGluZSkgc28gdGhhdCBpZiB0aGUgdXNlciBtYW51YWxseSByZW1vdmVzIGFuIGFuaW1hdGlvbiBmcm9tIGEgdGltZWxpbmUgYW5kIHRoZW4gYWx0ZXJzIGl0cyBwbGF5aGVhZCwgaXQgZG9lc24ndCBnZXQgYWRkZWQgYmFjayBpbi5cbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGhpcy5fZHAsIHRoaXMsIHRoaXMuX3N0YXJ0IC0gdGhpcy5fZGVsYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl90VGltZSAhPT0gX3RvdGFsVGltZSB8fCAhdGhpcy5fZHVyICYmICFzdXBwcmVzc0V2ZW50cyB8fCB0aGlzLl9pbml0dGVkICYmIE1hdGguYWJzKHRoaXMuX3pUaW1lKSA9PT0gX3RpbnlOdW0gfHwgIV90b3RhbFRpbWUgJiYgIXRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuYWRkIHx8IHRoaXMuX3B0TG9va3VwKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIF9wdExvb2t1cCBvbiBhIFR3ZWVuIGluc3RhbmNlIHRvIGVuc3VyZSBpdCBoYXMgYWN0dWFsbHkgZmluaXNoZWQgYmVpbmcgaW5zdGFudGlhdGVkLCBvdGhlcndpc2UgaWYgdGhpcy5yZXZlcnNlKCkgZ2V0cyBjYWxsZWQgaW4gdGhlIEFuaW1hdGlvbiBjb25zdHJ1Y3RvciwgaXQgY291bGQgdHJpZ2dlciBhIHJlbmRlcigpIGhlcmUgZXZlbiB0aG91Z2ggdGhlIF90YXJnZXRzIHdlcmVuJ3QgcG9wdWxhdGVkLCB0aHVzIHdoZW4gX2luaXQoKSBpcyBjYWxsZWQgdGhlcmUgd29uJ3QgYmUgYW55IFByb3BUd2VlbnMgKGl0J2xsIGFjdCBsaWtlIHRoZSB0d2VlbiBpcyBub24tZnVuY3Rpb25hbClcbiAgICAgIHRoaXMuX3RzIHx8ICh0aGlzLl9wVGltZSA9IF90b3RhbFRpbWUpOyAvLyBvdGhlcndpc2UsIGlmIGFuIGFuaW1hdGlvbiBpcyBwYXVzZWQsIHRoZW4gdGhlIHBsYXloZWFkIGlzIG1vdmVkIGJhY2sgdG8gemVybywgdGhlbiByZXN1bWVkLCBpdCdkIHJldmVydCBiYWNrIHRvIHRoZSBvcmlnaW5hbCB0aW1lIGF0IHRoZSBwYXVzZVxuICAgICAgLy9pZiAoIXRoaXMuX2xvY2spIHsgLy8gYXZvaWQgZW5kbGVzcyByZWN1cnNpb24gKG5vdCBzdXJlIHdlIG5lZWQgdGhpcyB5ZXQgb3IgaWYgaXQncyB3b3J0aCB0aGUgcGVyZm9ybWFuY2UgaGl0KVxuICAgICAgLy8gICB0aGlzLl9sb2NrID0gMTtcblxuICAgICAgX2xhenlTYWZlUmVuZGVyKHRoaXMsIF90b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzKTsgLy8gICB0aGlzLl9sb2NrID0gMDtcbiAgICAgIC8vfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnRpbWUgPSBmdW5jdGlvbiB0aW1lKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUoTWF0aC5taW4odGhpcy50b3RhbER1cmF0aW9uKCksIHZhbHVlICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpKSAlICh0aGlzLl9kdXIgKyB0aGlzLl9yRGVsYXkpIHx8ICh2YWx1ZSA/IHRoaXMuX2R1ciA6IDApLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl90aW1lOyAvLyBub3RlOiBpZiB0aGUgbW9kdWx1cyByZXN1bHRzIGluIDAsIHRoZSBwbGF5aGVhZCBjb3VsZCBiZSBleGFjdGx5IGF0IHRoZSBlbmQgb3IgdGhlIGJlZ2lubmluZywgYW5kIHdlIGFsd2F5cyBkZWZlciB0byB0aGUgRU5EIHdpdGggYSBub24temVybyB2YWx1ZSwgb3RoZXJ3aXNlIGlmIHlvdSBzZXQgdGhlIHRpbWUoKSB0byB0aGUgdmVyeSBlbmQgKGR1cmF0aW9uKCkpLCBpdCB3b3VsZCByZW5kZXIgYXQgdGhlIFNUQVJUIVxuICB9O1xuXG4gIF9wcm90by50b3RhbFByb2dyZXNzID0gZnVuY3Rpb24gdG90YWxQcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMudG90YWxEdXJhdGlvbigpICogdmFsdWUsIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMudG90YWxEdXJhdGlvbigpID8gTWF0aC5taW4oMSwgdGhpcy5fdFRpbWUgLyB0aGlzLl90RHVyKSA6IHRoaXMucmF3VGltZSgpID4gMCA/IDEgOiAwO1xuICB9O1xuXG4gIF9wcm90by5wcm9ncmVzcyA9IGZ1bmN0aW9uIHByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5kdXJhdGlvbigpICogKHRoaXMuX3lveW8gJiYgISh0aGlzLml0ZXJhdGlvbigpICYgMSkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcyksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuZHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RpbWUgLyB0aGlzLl9kdXIpIDogdGhpcy5yYXdUaW1lKCkgPiAwID8gMSA6IDA7XG4gIH07XG5cbiAgX3Byb3RvLml0ZXJhdGlvbiA9IGZ1bmN0aW9uIGl0ZXJhdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICB2YXIgY3ljbGVEdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24oKSArIHRoaXMuX3JEZWxheTtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5fdGltZSArICh2YWx1ZSAtIDEpICogY3ljbGVEdXJhdGlvbiwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fcmVwZWF0ID8gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKSArIDEgOiAxO1xuICB9IC8vIHBvdGVudGlhbCBmdXR1cmUgYWRkaXRpb246XG4gIC8vIGlzUGxheWluZ0JhY2t3YXJkcygpIHtcbiAgLy8gXHRsZXQgYW5pbWF0aW9uID0gdGhpcyxcbiAgLy8gXHRcdG9yaWVudGF0aW9uID0gMTsgLy8gMSA9IGZvcndhcmQsIC0xID0gYmFja3dhcmRcbiAgLy8gXHR3aGlsZSAoYW5pbWF0aW9uKSB7XG4gIC8vIFx0XHRvcmllbnRhdGlvbiAqPSBhbmltYXRpb24ucmV2ZXJzZWQoKSB8fCAoYW5pbWF0aW9uLnJlcGVhdCgpICYmICEoYW5pbWF0aW9uLml0ZXJhdGlvbigpICYgMSkpID8gLTEgOiAxO1xuICAvLyBcdFx0YW5pbWF0aW9uID0gYW5pbWF0aW9uLnBhcmVudDtcbiAgLy8gXHR9XG4gIC8vIFx0cmV0dXJuIG9yaWVudGF0aW9uIDwgMDtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvLnRpbWVTY2FsZSA9IGZ1bmN0aW9uIHRpbWVTY2FsZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ydHMgPT09IC1fdGlueU51bSA/IDAgOiB0aGlzLl9ydHM7IC8vIHJlY29yZGVkIHRpbWVTY2FsZS4gU3BlY2lhbCBjYXNlOiBpZiBzb21lb25lIGNhbGxzIHJldmVyc2UoKSBvbiBhbiBhbmltYXRpb24gd2l0aCB0aW1lU2NhbGUgb2YgMCwgd2UgYXNzaWduIGl0IC1fdGlueU51bSB0byByZW1lbWJlciBpdCdzIHJldmVyc2VkLlxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ydHMgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgdFRpbWUgPSB0aGlzLnBhcmVudCAmJiB0aGlzLl90cyA/IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRoaXMucGFyZW50Ll90aW1lLCB0aGlzKSA6IHRoaXMuX3RUaW1lOyAvLyBtYWtlIHN1cmUgdG8gZG8gdGhlIHBhcmVudFRvQ2hpbGRUb3RhbFRpbWUoKSBCRUZPUkUgc2V0dGluZyB0aGUgbmV3IF90cyBiZWNhdXNlIHRoZSBvbGQgb25lIG11c3QgYmUgdXNlZCBpbiB0aGF0IGNhbGN1bGF0aW9uLlxuICAgIC8vIGZ1dHVyZSBhZGRpdGlvbj8gVXAgc2lkZTogZmFzdCBhbmQgbWluaW1hbCBmaWxlIHNpemUuIERvd24gc2lkZTogb25seSB3b3JrcyBvbiB0aGlzIGFuaW1hdGlvbjsgaWYgYSB0aW1lbGluZSBpcyByZXZlcnNlZCwgZm9yIGV4YW1wbGUsIGl0cyBjaGlsZHJlbnMnIG9uUmV2ZXJzZSB3b3VsZG4ndCBnZXQgY2FsbGVkLlxuICAgIC8vKCt2YWx1ZSA8IDAgJiYgdGhpcy5fcnRzID49IDApICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmV2ZXJzZVwiLCB0cnVlKTtcbiAgICAvLyBwcmlvcml0aXplIHJlbmRlcmluZyB3aGVyZSB0aGUgcGFyZW50J3MgcGxheWhlYWQgbGluZXMgdXAgaW5zdGVhZCBvZiB0aGlzLl90VGltZSBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIGEgdHdlZW4gdGhhdCdzIGFuaW1hdGluZyBhbm90aGVyIHR3ZWVuJ3MgdGltZVNjYWxlIGluIHRoZSBzYW1lIHJlbmRlcmluZyBsb29wIChzYW1lIHBhcmVudCksIHRodXMgaWYgdGhlIHRpbWVTY2FsZSB0d2VlbiByZW5kZXJzIGZpcnN0LCBpdCB3b3VsZCBhbHRlciBfc3RhcnQgQkVGT1JFIF90VGltZSB3YXMgc2V0IG9uIHRoYXQgdGljayAoaW4gdGhlIHJlbmRlcmluZyBsb29wKSwgZWZmZWN0aXZlbHkgZnJlZXppbmcgaXQgdW50aWwgdGhlIHRpbWVTY2FsZSB0d2VlbiBmaW5pc2hlcy5cblxuICAgIHRoaXMuX3J0cyA9ICt2YWx1ZSB8fCAwO1xuICAgIHRoaXMuX3RzID0gdGhpcy5fcHMgfHwgdmFsdWUgPT09IC1fdGlueU51bSA/IDAgOiB0aGlzLl9ydHM7IC8vIF90cyBpcyB0aGUgZnVuY3Rpb25hbCB0aW1lU2NhbGUgd2hpY2ggd291bGQgYmUgMCBpZiB0aGUgYW5pbWF0aW9uIGlzIHBhdXNlZC5cblxuICAgIHRoaXMudG90YWxUaW1lKF9jbGFtcCgtTWF0aC5hYnModGhpcy5fZGVsYXkpLCB0aGlzLl90RHVyLCB0VGltZSksIHN1cHByZXNzRXZlbnRzICE9PSBmYWxzZSk7XG5cbiAgICBfc2V0RW5kKHRoaXMpOyAvLyBpZiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgd2FzIGZhbHNlLCB0aGUgZW5kIHRpbWUgZGlkbid0IGdldCB1cGRhdGVkIGluIHRoZSBfYWxpZ25QbGF5aGVhZCgpIG1ldGhvZCwgc28gZG8gaXQgaGVyZS5cblxuXG4gICAgcmV0dXJuIF9yZWNhY2hlQW5jZXN0b3JzKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5wYXVzZWQgPSBmdW5jdGlvbiBwYXVzZWQodmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcHMgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9wcyA9IHZhbHVlO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcFRpbWUgPSB0aGlzLl90VGltZSB8fCBNYXRoLm1heCgtdGhpcy5fZGVsYXksIHRoaXMucmF3VGltZSgpKTsgLy8gaWYgdGhlIHBhdXNlIG9jY3VycyBkdXJpbmcgdGhlIGRlbGF5IHBoYXNlLCBtYWtlIHN1cmUgdGhhdCdzIGZhY3RvcmVkIGluIHdoZW4gcmVzdW1pbmcuXG5cbiAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9hY3QgPSAwOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlLCBzbyBhIHBhdXNlZCB0d2VlbiB3b3VsZCBlZmZlY3RpdmVseSBoYXZlIGEgdGltZVNjYWxlIG9mIDAuIFdlIHJlY29yZCB0aGUgXCJyZWFsXCIgdGltZVNjYWxlIGFzIF9ydHMgKHJlY29yZGVkIHRpbWUgc2NhbGUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfd2FrZSgpO1xuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fcnRzOyAvL29ubHkgZGVmZXIgdG8gX3BUaW1lIChwYXVzZVRpbWUpIGlmIHRUaW1lIGlzIHplcm8uIFJlbWVtYmVyLCBzb21lb25lIGNvdWxkIHBhdXNlKCkgYW4gYW5pbWF0aW9uLCB0aGVuIHNjcnViIHRoZSBwbGF5aGVhZCBhbmQgcmVzdW1lKCkuIElmIHRoZSBwYXJlbnQgZG9lc24ndCBoYXZlIHNtb290aENoaWxkVGltaW5nLCB3ZSByZW5kZXIgYXQgdGhlIHJhd1RpbWUoKSBiZWNhdXNlIHRoZSBzdGFydFRpbWUgd29uJ3QgZ2V0IHVwZGF0ZWQuXG5cbiAgICAgICAgdGhpcy50b3RhbFRpbWUodGhpcy5wYXJlbnQgJiYgIXRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nID8gdGhpcy5yYXdUaW1lKCkgOiB0aGlzLl90VGltZSB8fCB0aGlzLl9wVGltZSwgdGhpcy5wcm9ncmVzcygpID09PSAxICYmIE1hdGguYWJzKHRoaXMuX3pUaW1lKSAhPT0gX3RpbnlOdW0gJiYgKHRoaXMuX3RUaW1lIC09IF90aW55TnVtKSk7IC8vIGVkZ2UgY2FzZTogYW5pbWF0aW9uLnByb2dyZXNzKDEpLnBhdXNlKCkucGxheSgpIHdvdWxkbid0IHJlbmRlciBhZ2FpbiBiZWNhdXNlIHRoZSBwbGF5aGVhZCBpcyBhbHJlYWR5IGF0IHRoZSBlbmQsIGJ1dCB0aGUgY2FsbCB0byB0b3RhbFRpbWUoKSBiZWxvdyB3aWxsIGFkZCBpdCBiYWNrIHRvIGl0cyBwYXJlbnQuLi5hbmQgbm90IHJlbW92ZSBpdCBhZ2FpbiAoc2luY2UgcmVtb3Zpbmcgb25seSBoYXBwZW5zIHVwb24gcmVuZGVyaW5nIGF0IGEgbmV3IHRpbWUpLiBPZmZzZXR0aW5nIHRoZSBfdFRpbWUgc2xpZ2h0bHkgaXMgZG9uZSBzaW1wbHkgdG8gY2F1c2UgdGhlIGZpbmFsIHJlbmRlciBpbiB0b3RhbFRpbWUoKSB0aGF0J2xsIHBvcCBpdCBvZmYgaXRzIHRpbWVsaW5lIChpZiBhdXRvUmVtb3ZlQ2hpbGRyZW4gaXMgdHJ1ZSwgb2YgY291cnNlKS4gQ2hlY2sgdG8gbWFrZSBzdXJlIF96VGltZSBpc24ndCAtX3RpbnlOdW0gdG8gYXZvaWQgYW4gZWRnZSBjYXNlIHdoZXJlIHRoZSBwbGF5aGVhZCBpcyBwdXNoZWQgdG8gdGhlIGVuZCBidXQgSU5TSURFIGEgdHdlZW4vY2FsbGJhY2ssIHRoZSB0aW1lbGluZSBpdHNlbGYgaXMgcGF1c2VkIHRodXMgaGFsdGluZyByZW5kZXJpbmcgYW5kIGxlYXZpbmcgYSBmZXcgdW5yZW5kZXJlZC4gV2hlbiByZXN1bWluZywgaXQgd291bGRuJ3QgcmVuZGVyIHRob3NlIG90aGVyd2lzZS5cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uc3RhcnRUaW1lID0gZnVuY3Rpb24gc3RhcnRUaW1lKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3N0YXJ0ID0gdmFsdWU7XG4gICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7XG4gICAgICBwYXJlbnQgJiYgKHBhcmVudC5fc29ydCB8fCAhdGhpcy5wYXJlbnQpICYmIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgdGhpcywgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RhcnQ7XG4gIH07XG5cbiAgX3Byb3RvLmVuZFRpbWUgPSBmdW5jdGlvbiBlbmRUaW1lKGluY2x1ZGVSZXBlYXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0ICsgKF9pc05vdEZhbHNlKGluY2x1ZGVSZXBlYXRzKSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5kdXJhdGlvbigpKSAvIE1hdGguYWJzKHRoaXMuX3RzIHx8IDEpO1xuICB9O1xuXG4gIF9wcm90by5yYXdUaW1lID0gZnVuY3Rpb24gcmF3VGltZSh3cmFwUmVwZWF0cykge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDsgLy8gX2RwID0gZGV0YWNoZWQgcGFyZW50XG5cbiAgICByZXR1cm4gIXBhcmVudCA/IHRoaXMuX3RUaW1lIDogd3JhcFJlcGVhdHMgJiYgKCF0aGlzLl90cyB8fCB0aGlzLl9yZXBlYXQgJiYgdGhpcy5fdGltZSAmJiB0aGlzLnRvdGFsUHJvZ3Jlc3MoKSA8IDEpID8gdGhpcy5fdFRpbWUgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSA6ICF0aGlzLl90cyA/IHRoaXMuX3RUaW1lIDogX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50LnJhd1RpbWUod3JhcFJlcGVhdHMpLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkge1xuICAgICAgY29uZmlnID0gX3JldmVydENvbmZpZztcbiAgICB9XG5cbiAgICB2YXIgcHJldklzUmV2ZXJ0aW5nID0gX3JldmVydGluZztcbiAgICBfcmV2ZXJ0aW5nID0gY29uZmlnO1xuXG4gICAgaWYgKHRoaXMuX2luaXR0ZWQgfHwgdGhpcy5fc3RhcnRBdCkge1xuICAgICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLnJldmVydChjb25maWcpO1xuICAgICAgdGhpcy50b3RhbFRpbWUoLTAuMDEsIGNvbmZpZy5zdXBwcmVzc0V2ZW50cyk7XG4gICAgfVxuXG4gICAgdGhpcy5kYXRhICE9PSBcIm5lc3RlZFwiICYmIGNvbmZpZy5raWxsICE9PSBmYWxzZSAmJiB0aGlzLmtpbGwoKTtcbiAgICBfcmV2ZXJ0aW5nID0gcHJldklzUmV2ZXJ0aW5nO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5nbG9iYWxUaW1lID0gZnVuY3Rpb24gZ2xvYmFsVGltZShyYXdUaW1lKSB7XG4gICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMsXG4gICAgICAgIHRpbWUgPSBhcmd1bWVudHMubGVuZ3RoID8gcmF3VGltZSA6IGFuaW1hdGlvbi5yYXdUaW1lKCk7XG5cbiAgICB3aGlsZSAoYW5pbWF0aW9uKSB7XG4gICAgICB0aW1lID0gYW5pbWF0aW9uLl9zdGFydCArIHRpbWUgLyAoTWF0aC5hYnMoYW5pbWF0aW9uLl90cykgfHwgMSk7XG4gICAgICBhbmltYXRpb24gPSBhbmltYXRpb24uX2RwO1xuICAgIH1cblxuICAgIHJldHVybiAhdGhpcy5wYXJlbnQgJiYgdGhpcy5fc2F0ID8gdGhpcy5fc2F0Lmdsb2JhbFRpbWUocmF3VGltZSkgOiB0aW1lOyAvLyB0aGUgX3N0YXJ0QXQgdHdlZW5zIGZvciAuZnJvbVRvKCkgYW5kIC5mcm9tKCkgdGhhdCBoYXZlIGltbWVkaWF0ZVJlbmRlciBzaG91bGQgYWx3YXlzIGJlIEZJUlNUIGluIHRoZSB0aW1lbGluZSAoaW1wb3J0YW50IGZvciBjb250ZXh0LnJldmVydCgpKS4gXCJfc2F0XCIgc3RhbmRzIGZvciBfc3RhcnRBdFR3ZWVuLCByZWZlcnJpbmcgdG8gdGhlIHBhcmVudCB0d2VlbiB0aGF0IGNyZWF0ZWQgdGhlIF9zdGFydEF0LiBXZSBtdXN0IGRpc2Nlcm4gaWYgdGhhdCB0d2VlbiBoYWQgaW1tZWRpYXRlUmVuZGVyIHNvIHRoYXQgd2UgY2FuIGtub3cgd2hldGhlciBvciBub3QgdG8gcHJpb3JpdGl6ZSBpdCBpbiByZXZlcnQoKS5cbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0ID0gZnVuY3Rpb24gcmVwZWF0KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3JlcGVhdCA9IHZhbHVlID09PSBJbmZpbml0eSA/IC0yIDogdmFsdWU7XG4gICAgICByZXR1cm4gX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVwZWF0ID09PSAtMiA/IEluZmluaXR5IDogdGhpcy5fcmVwZWF0O1xuICB9O1xuXG4gIF9wcm90by5yZXBlYXREZWxheSA9IGZ1bmN0aW9uIHJlcGVhdERlbGF5KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fdGltZTtcbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhbHVlO1xuXG4gICAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuXG4gICAgICByZXR1cm4gdGltZSA/IHRoaXMudGltZSh0aW1lKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JEZWxheTtcbiAgfTtcblxuICBfcHJvdG8ueW95byA9IGZ1bmN0aW9uIHlveW8odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5feW95byA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3lveW87XG4gIH07XG5cbiAgX3Byb3RvLnNlZWsgPSBmdW5jdGlvbiBzZWVrKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3RhcnQgPSBmdW5jdGlvbiByZXN0YXJ0KGluY2x1ZGVEZWxheSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5KCkudG90YWxUaW1lKGluY2x1ZGVEZWxheSA/IC10aGlzLl9kZWxheSA6IDAsIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgYXRUaW1lICE9IG51bGwgJiYgdGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnBhdXNlZCh0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2VkID0gZnVuY3Rpb24gcmV2ZXJzZWQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgISF2YWx1ZSAhPT0gdGhpcy5yZXZlcnNlZCgpICYmIHRoaXMudGltZVNjYWxlKC10aGlzLl9ydHMgfHwgKHZhbHVlID8gLV90aW55TnVtIDogMCkpOyAvLyBpbiBjYXNlIHRpbWVTY2FsZSBpcyB6ZXJvLCByZXZlcnNpbmcgd291bGQgaGF2ZSBubyBlZmZlY3Qgc28gd2UgdXNlIF90aW55TnVtLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcnRzIDwgMDtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5faW5pdHRlZCA9IHRoaXMuX2FjdCA9IDA7XG4gICAgdGhpcy5felRpbWUgPSAtX3RpbnlOdW07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwLFxuICAgICAgICBzdGFydCA9IHRoaXMuX3N0YXJ0LFxuICAgICAgICByYXdUaW1lO1xuICAgIHJldHVybiAhISghcGFyZW50IHx8IHRoaXMuX3RzICYmIHRoaXMuX2luaXR0ZWQgJiYgcGFyZW50LmlzQWN0aXZlKCkgJiYgKHJhd1RpbWUgPSBwYXJlbnQucmF3VGltZSh0cnVlKSkgPj0gc3RhcnQgJiYgcmF3VGltZSA8IHRoaXMuZW5kVGltZSh0cnVlKSAtIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8uZXZlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIGV2ZW50Q2FsbGJhY2sodHlwZSwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB2YXJzID0gdGhpcy52YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGRlbGV0ZSB2YXJzW3R5cGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyc1t0eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICBwYXJhbXMgJiYgKHZhcnNbdHlwZSArIFwiUGFyYW1zXCJdID0gcGFyYW1zKTtcbiAgICAgICAgdHlwZSA9PT0gXCJvblVwZGF0ZVwiICYmICh0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhcnNbdHlwZV07XG4gIH07XG5cbiAgX3Byb3RvLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIGYgPSBfaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgICBfcmVzb2x2ZSA9IGZ1bmN0aW9uIF9yZXNvbHZlKCkge1xuICAgICAgICB2YXIgX3RoZW4gPSBzZWxmLnRoZW47XG4gICAgICAgIHNlbGYudGhlbiA9IG51bGw7IC8vIHRlbXBvcmFyaWx5IG51bGwgdGhlIHRoZW4oKSBtZXRob2QgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzIyKVxuXG4gICAgICAgIF9pc0Z1bmN0aW9uKGYpICYmIChmID0gZihzZWxmKSkgJiYgKGYudGhlbiB8fCBmID09PSBzZWxmKSAmJiAoc2VsZi50aGVuID0gX3RoZW4pO1xuICAgICAgICByZXNvbHZlKGYpO1xuICAgICAgICBzZWxmLnRoZW4gPSBfdGhlbjtcbiAgICAgIH07XG5cbiAgICAgIGlmIChzZWxmLl9pbml0dGVkICYmIHNlbGYudG90YWxQcm9ncmVzcygpID09PSAxICYmIHNlbGYuX3RzID49IDAgfHwgIXNlbGYuX3RUaW1lICYmIHNlbGYuX3RzIDwgMCkge1xuICAgICAgICBfcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5fcHJvbSA9IF9yZXNvbHZlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5raWxsID0gZnVuY3Rpb24ga2lsbCgpIHtcbiAgICBfaW50ZXJydXB0KHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBBbmltYXRpb247XG59KCk7XG5cbl9zZXREZWZhdWx0cyhBbmltYXRpb24ucHJvdG90eXBlLCB7XG4gIF90aW1lOiAwLFxuICBfc3RhcnQ6IDAsXG4gIF9lbmQ6IDAsXG4gIF90VGltZTogMCxcbiAgX3REdXI6IDAsXG4gIF9kaXJ0eTogMCxcbiAgX3JlcGVhdDogMCxcbiAgX3lveW86IGZhbHNlLFxuICBwYXJlbnQ6IG51bGwsXG4gIF9pbml0dGVkOiBmYWxzZSxcbiAgX3JEZWxheTogMCxcbiAgX3RzOiAxLFxuICBfZHA6IDAsXG4gIHJhdGlvOiAwLFxuICBfelRpbWU6IC1fdGlueU51bSxcbiAgX3Byb206IDAsXG4gIF9wczogZmFsc2UsXG4gIF9ydHM6IDFcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJTUVMSU5FXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFRpbWVsaW5lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVsaW5lLCBfQW5pbWF0aW9uKTtcblxuICBmdW5jdGlvbiBUaW1lbGluZSh2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9BbmltYXRpb24uY2FsbCh0aGlzLCB2YXJzKSB8fCB0aGlzO1xuICAgIF90aGlzLmxhYmVscyA9IHt9O1xuICAgIF90aGlzLnNtb290aENoaWxkVGltaW5nID0gISF2YXJzLnNtb290aENoaWxkVGltaW5nO1xuICAgIF90aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9ICEhdmFycy5hdXRvUmVtb3ZlQ2hpbGRyZW47XG4gICAgX3RoaXMuX3NvcnQgPSBfaXNOb3RGYWxzZSh2YXJzLnNvcnRDaGlsZHJlbik7XG4gICAgX2dsb2JhbFRpbWVsaW5lICYmIF9hZGRUb1RpbWVsaW5lKHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBvc2l0aW9uKTtcbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpcy5wYXVzZWQodHJ1ZSk7XG4gICAgdmFycy5zY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB2YXJzLnNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gVGltZWxpbmUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMCwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSAhIXZhcnMuaW1tZWRpYXRlUmVuZGVyO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIDEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoY2FsbGJhY2ssIHBhcmFtcywgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcyksIHBvc2l0aW9uKTtcbiAgfSAvL09OTFkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkhIE1heWJlIGRlbGV0ZT9cbiAgO1xuXG4gIF9wcm90bzIuc3RhZ2dlclRvID0gZnVuY3Rpb24gc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB2YXJzLnN0YWdnZXIgPSB2YXJzLnN0YWdnZXIgfHwgc3RhZ2dlcjtcbiAgICB2YXJzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlQWxsO1xuICAgIHZhcnMub25Db21wbGV0ZVBhcmFtcyA9IG9uQ29tcGxldGVBbGxQYXJhbXM7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb20gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbSh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLnJ1bkJhY2t3YXJkcyA9IDE7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh2YXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbVRvID0gZnVuY3Rpb24gc3RhZ2dlckZyb21Ubyh0YXJnZXRzLCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModG9WYXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX2RpcnR5ID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lIDw9IDAgPyAwIDogX3JvdW5kUHJlY2lzZSh0b3RhbFRpbWUpLFxuICAgICAgICAvLyBpZiBhIHBhdXNlZCB0aW1lbGluZSBpcyByZXN1bWVkIChvciBpdHMgX3N0YXJ0IGlzIHVwZGF0ZWQgZm9yIGFub3RoZXIgcmVhc29uLi4ud2hpY2ggcm91bmRzIGl0KSwgdGhhdCBjb3VsZCByZXN1bHQgaW4gdGhlIHBsYXloZWFkIHNoaWZ0aW5nIGEgKip0aW55KiogYW1vdW50IGFuZCBhIHplcm8tZHVyYXRpb24gY2hpbGQgYXQgdGhhdCBzcG90IG1heSBnZXQgcmVuZGVyZWQgYXQgYSBkaWZmZXJlbnQgcmF0aW8sIGxpa2UgaXRzIHRvdGFsVGltZSBpbiByZW5kZXIoKSBtYXkgYmUgMWUtMTcgaW5zdGVhZCBvZiAwLCBmb3IgZXhhbXBsZS5cbiAgICBjcm9zc2luZ1N0YXJ0ID0gdGhpcy5felRpbWUgPCAwICE9PSB0b3RhbFRpbWUgPCAwICYmICh0aGlzLl9pbml0dGVkIHx8ICFkdXIpLFxuICAgICAgICB0aW1lLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2UGF1c2VkLFxuICAgICAgICBwYXVzZVR3ZWVuLFxuICAgICAgICB0aW1lU2NhbGUsXG4gICAgICAgIHByZXZTdGFydCxcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgeW95byxcbiAgICAgICAgaXNZb3lvO1xuICAgIHRoaXMgIT09IF9nbG9iYWxUaW1lbGluZSAmJiB0VGltZSA+IHREdXIgJiYgdG90YWxUaW1lID49IDAgJiYgKHRUaW1lID0gdER1cik7XG5cbiAgICBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8IGZvcmNlIHx8IGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiBkdXIpIHtcbiAgICAgICAgLy9pZiB0b3RhbER1cmF0aW9uKCkgZmluZHMgYSBjaGlsZCB3aXRoIGEgbmVnYXRpdmUgc3RhcnRUaW1lIGFuZCBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCB0aGluZ3MgZ2V0IHNoaWZ0ZWQgYXJvdW5kIGludGVybmFsbHkgc28gd2UgbmVlZCB0byBhZGp1c3QgdGhlIHRpbWUgYWNjb3JkaW5nbHkuIEZvciBleGFtcGxlLCBpZiBhIHR3ZWVuIHN0YXJ0cyBhdCAtMzAgd2UgbXVzdCBzaGlmdCBFVkVSWVRISU5HIGZvcndhcmQgMzAgc2Vjb25kcyBhbmQgbW92ZSB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIGJhY2t3YXJkIGJ5IDMwIHNlY29uZHMgc28gdGhhdCB0aGluZ3MgYWxpZ24gd2l0aCB0aGUgcGxheWhlYWQgKG5vIGp1bXApLlxuICAgICAgICB0VGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgIHRvdGFsVGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0O1xuICAgICAgdGltZVNjYWxlID0gdGhpcy5fdHM7XG4gICAgICBwcmV2UGF1c2VkID0gIXRpbWVTY2FsZTtcblxuICAgICAgaWYgKGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgICAgZHVyIHx8IChwcmV2VGltZSA9IHRoaXMuX3pUaW1lKTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgICAgICAodG90YWxUaW1lIHx8ICFzdXBwcmVzc0V2ZW50cykgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgeW95byA9IHRoaXMuX3lveW87XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIHRvdGFsVGltZSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRpb24gPSB+fih0VGltZSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHRUaW1lIC8gY3ljbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRpbWUgPiBkdXIgJiYgKHRpbWUgPSBkdXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG4gICAgICAgICFwcmV2VGltZSAmJiB0aGlzLl90VGltZSAmJiBwcmV2SXRlcmF0aW9uICE9PSBpdGVyYXRpb24gJiYgdGhpcy5fdFRpbWUgLSBwcmV2SXRlcmF0aW9uICogY3ljbGVEdXJhdGlvbiAtIHRoaXMuX2R1ciA8PSAwICYmIChwcmV2SXRlcmF0aW9uID0gaXRlcmF0aW9uKTsgLy8gZWRnZSBjYXNlIC0gaWYgc29tZW9uZSBkb2VzIGFkZFBhdXNlKCkgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIGEgcmVwZWF0aW5nIHRpbWVsaW5lLCB0aGF0IHBhdXNlIGlzIHRlY2huaWNhbGx5IGF0IHRoZSBzYW1lIHNwb3QgYXMgdGhlIGVuZCB3aGljaCBjYXVzZXMgdGhpcy5fdGltZSB0byBnZXQgc2V0IHRvIDAgd2hlbiB0aGUgdG90YWxUaW1lIHdvdWxkIG5vcm1hbGx5IHBsYWNlIHRoZSBwbGF5aGVhZCBhdCB0aGUgZW5kLiBTZWUgaHR0cHM6Ly9nc2FwLmNvbS9mb3J1bXMvdG9waWMvMjM4MjMtY2xvc2luZy1uYXYtYW5pbWF0aW9uLW5vdC13b3JraW5nLW9uLWllLWFuZC1pcGhvbmUtNi1tYXliZS1vdGhlci1vbGRlci1icm93c2VyLz90YWI9Y29tbWVudHMjY29tbWVudC0xMTMwMDUgYWxzbywgdGhpcy5fdFRpbWUgLSBwcmV2SXRlcmF0aW9uICogY3ljbGVEdXJhdGlvbiAtIHRoaXMuX2R1ciA8PSAwIGp1c3QgY2hlY2tzIHRvIG1ha2Ugc3VyZSBpdCB3YXNuJ3QgcHJldmlvdXNseSBpbiB0aGUgXCJyZXBlYXREZWxheVwiIHBvcnRpb25cblxuICAgICAgICBpZiAoeW95byAmJiBpdGVyYXRpb24gJiAxKSB7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgICAgaXNZb3lvID0gMTtcbiAgICAgICAgfVxuICAgICAgICAvKlxuICAgICAgICBtYWtlIHN1cmUgY2hpbGRyZW4gYXQgdGhlIGVuZC9iZWdpbm5pbmcgb2YgdGhlIHRpbWVsaW5lIGFyZSByZW5kZXJlZCBwcm9wZXJseS4gSWYsIGZvciBleGFtcGxlLFxuICAgICAgICBhIDMtc2Vjb25kIGxvbmcgdGltZWxpbmUgcmVuZGVyZWQgYXQgMi45IHNlY29uZHMgcHJldmlvdXNseSwgYW5kIG5vdyByZW5kZXJzIGF0IDMuMiBzZWNvbmRzICh3aGljaFxuICAgICAgICB3b3VsZCBnZXQgdHJhbnNsYXRlZCB0byAyLjggc2Vjb25kcyBpZiB0aGUgdGltZWxpbmUgeW95b3Mgb3IgMC4yIHNlY29uZHMgaWYgaXQganVzdCByZXBlYXRzKSwgdGhlcmVcbiAgICAgICAgY291bGQgYmUgYSBjYWxsYmFjayBvciBhIHNob3J0IHR3ZWVuIHRoYXQncyBhdCAyLjk1IG9yIDMgc2Vjb25kcyBpbiB3aGljaCB3b3VsZG4ndCByZW5kZXIuIFNvXG4gICAgICAgIHdlIG5lZWQgdG8gcHVzaCB0aGUgdGltZWxpbmUgdG8gdGhlIGVuZCAoYW5kL29yIGJlZ2lubmluZyBkZXBlbmRpbmcgb24gaXRzIHlveW8gdmFsdWUpLiBBbHNvIHdlIG11c3RcbiAgICAgICAgZW5zdXJlIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9yIGVuZCBvZiB0aGUgVGltZWxpbmUgd29yay5cbiAgICAgICAgKi9cblxuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24gJiYgIXRoaXMuX2xvY2spIHtcbiAgICAgICAgICB2YXIgcmV3aW5kaW5nID0geW95byAmJiBwcmV2SXRlcmF0aW9uICYgMSxcbiAgICAgICAgICAgICAgZG9lc1dyYXAgPSByZXdpbmRpbmcgPT09ICh5b3lvICYmIGl0ZXJhdGlvbiAmIDEpO1xuICAgICAgICAgIGl0ZXJhdGlvbiA8IHByZXZJdGVyYXRpb24gJiYgKHJld2luZGluZyA9ICFyZXdpbmRpbmcpO1xuICAgICAgICAgIHByZXZUaW1lID0gcmV3aW5kaW5nID8gMCA6IHRUaW1lICUgZHVyID8gZHVyIDogdFRpbWU7IC8vIGlmIHRoZSBwbGF5aGVhZCBpcyBsYW5kaW5nIGV4YWN0bHkgYXQgdGhlIGVuZCBvZiBhbiBpdGVyYXRpb24sIHVzZSB0aGF0IHRvdGFsVGltZSByYXRoZXIgdGhhbiBvbmx5IHRoZSBkdXJhdGlvbiwgb3RoZXJ3aXNlIGl0J2xsIHNraXAgdGhlIDJuZCByZW5kZXIgc2luY2UgaXQncyBlZmZlY3RpdmVseSBhdCB0aGUgc2FtZSB0aW1lLlxuXG4gICAgICAgICAgdGhpcy5fbG9jayA9IDE7XG4gICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUgfHwgKGlzWW95byA/IDAgOiBfcm91bmRQcmVjaXNlKGl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24pKSwgc3VwcHJlc3NFdmVudHMsICFkdXIpLl9sb2NrID0gMDtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lOyAvLyBpZiBhIHVzZXIgZ2V0cyB0aGUgaXRlcmF0aW9uKCkgaW5zaWRlIHRoZSBvblJlcGVhdCwgZm9yIGV4YW1wbGUsIGl0IHNob3VsZCBiZSBhY2N1cmF0ZS5cblxuICAgICAgICAgICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcbiAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICh0aGlzLmludmFsaWRhdGUoKS5fbG9jayA9IDEpO1xuXG4gICAgICAgICAgaWYgKHByZXZUaW1lICYmIHByZXZUaW1lICE9PSB0aGlzLl90aW1lIHx8IHByZXZQYXVzZWQgIT09ICF0aGlzLl90cyB8fCB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXRoaXMucGFyZW50ICYmICF0aGlzLl9hY3QpIHtcbiAgICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGlzIDAgYW5kIHdlIHJlbmRlciBhdCB0aGUgdmVyeSBlbmQsIF90aW1lIHdpbGwgYmUgdGhlIGVuZCwgdGh1cyB3b24ndCBtYXRjaC4gU28gaW4gdGhpcyBlZGdlIGNhc2UsIHByZXZUaW1lIHdvbid0IG1hdGNoIF90aW1lIGJ1dCB0aGF0J3Mgb2theS4gSWYgaXQgZ2V0cyBraWxsZWQgaW4gdGhlIG9uUmVwZWF0LCBlamVjdCBhcyB3ZWxsLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZHVyID0gdGhpcy5fZHVyOyAvLyBpbiBjYXNlIHRoZSBkdXJhdGlvbiBjaGFuZ2VkIGluIHRoZSBvblJlcGVhdFxuXG4gICAgICAgICAgdER1ciA9IHRoaXMuX3REdXI7XG5cbiAgICAgICAgICBpZiAoZG9lc1dyYXApIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSAyO1xuICAgICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyBkdXIgOiAtMC4wMDAxO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgICAgICAgIGlmICghdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0gLy9pbiBvcmRlciBmb3IgeW95b0Vhc2UgdG8gd29yayBwcm9wZXJseSB3aGVuIHRoZXJlJ3MgYSBzdGFnZ2VyLCB3ZSBtdXN0IHN3YXAgb3V0IHRoZSBlYXNlIGluIGVhY2ggc3ViLXR3ZWVuLlxuXG5cbiAgICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UodGhpcywgaXNZb3lvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faGFzUGF1c2UgJiYgIXRoaXMuX2ZvcmNpbmcgJiYgdGhpcy5fbG9jayA8IDIpIHtcbiAgICAgICAgcGF1c2VUd2VlbiA9IF9maW5kTmV4dFBhdXNlVHdlZW4odGhpcywgX3JvdW5kUHJlY2lzZShwcmV2VGltZSksIF9yb3VuZFByZWNpc2UodGltZSkpO1xuXG4gICAgICAgIGlmIChwYXVzZVR3ZWVuKSB7XG4gICAgICAgICAgdFRpbWUgLT0gdGltZSAtICh0aW1lID0gcGF1c2VUd2Vlbi5fc3RhcnQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgIHRoaXMuX2FjdCA9ICF0aW1lU2NhbGU7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgdGhpcy5fb25VcGRhdGUgPSB0aGlzLnZhcnMub25VcGRhdGU7XG4gICAgICAgIHRoaXMuX2luaXR0ZWQgPSAxO1xuICAgICAgICB0aGlzLl96VGltZSA9IHRvdGFsVGltZTtcbiAgICAgICAgcHJldlRpbWUgPSAwOyAvLyB1cG9uIGluaXQsIHRoZSBwbGF5aGVhZCBzaG91bGQgYWx3YXlzIGdvIGZvcndhcmQ7IHNvbWVvbmUgY291bGQgaW52YWxpZGF0ZSgpIGEgY29tcGxldGVkIHRpbWVsaW5lIGFuZCB0aGVuIGlmIHRoZXkgcmVzdGFydCgpLCB0aGF0IHdvdWxkIG1ha2UgY2hpbGQgdHdlZW5zIHJlbmRlciBpbiByZXZlcnNlIG9yZGVyIHdoaWNoIGNvdWxkIGxvY2sgaW4gdGhlIHdyb25nIHN0YXJ0aW5nIHZhbHVlcyBpZiB0aGV5IGJ1aWxkIG9uIGVhY2ggb3RoZXIsIGxpa2UgdGwudG8ob2JqLCB7eDogMTAwfSkudG8ob2JqLCB7eDogMH0pLlxuICAgICAgfVxuXG4gICAgICBpZiAoIXByZXZUaW1lICYmIHRpbWUgJiYgIXN1cHByZXNzRXZlbnRzICYmICFpdGVyYXRpb24pIHtcbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25TdGFydFwiKTtcblxuICAgICAgICBpZiAodGhpcy5fdFRpbWUgIT09IHRUaW1lKSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSB0aGUgb25TdGFydCB0cmlnZ2VyZWQgYSByZW5kZXIgYXQgYSBkaWZmZXJlbnQgc3BvdCwgZWplY3QuIExpa2UgaWYgc29tZW9uZSBkaWQgYW5pbWF0aW9uLnBhdXNlKDAuNSkgb3Igc29tZXRoaW5nIGluc2lkZSB0aGUgb25TdGFydC5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGltZSA+PSBwcmV2VGltZSAmJiB0b3RhbFRpbWUgPj0gMCkge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuXG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgICAgICAgIGlmICgoY2hpbGQuX2FjdCB8fCB0aW1lID49IGNoaWxkLl9zdGFydCkgJiYgY2hpbGQuX3RzICYmIHBhdXNlVHdlZW4gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vIGFuIGV4dHJlbWUgZWRnZSBjYXNlIC0gdGhlIGNoaWxkJ3MgcmVuZGVyIGNvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGtpbGwoKSB0aGUgXCJuZXh0XCIgb25lIGluIHRoZSBsaW5rZWQgbGlzdCwgb3IgcmVwYXJlbnQgaXQuIEluIHRoYXQgY2FzZSB3ZSBtdXN0IHJlLWluaXRpYXRlIHRoZSB3aG9sZSByZW5kZXIgdG8gYmUgc2FmZS5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQucmVuZGVyKGNoaWxkLl90cyA+IDAgPyAodGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXG4gICAgICAgICAgICBpZiAodGltZSAhPT0gdGhpcy5fdGltZSB8fCAhdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgICAgLy9pbiBjYXNlIGEgdHdlZW4gcGF1c2VzIG9yIHNlZWtzIHRoZSB0aW1lbGluZSB3aGVuIHJlbmRlcmluZywgbGlrZSBpbnNpZGUgb2YgYW4gb25VcGRhdGUvb25Db21wbGV0ZVxuICAgICAgICAgICAgICBwYXVzZVR3ZWVuID0gMDtcbiAgICAgICAgICAgICAgbmV4dCAmJiAodFRpbWUgKz0gdGhpcy5felRpbWUgPSAtX3RpbnlOdW0pOyAvLyBpdCBkaWRuJ3QgZmluaXNoIHJlbmRlcmluZywgc28gZmxhZyB6VGltZSBhcyBuZWdhdGl2ZSBzbyB0aGF0IHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkID0gdGhpcy5fbGFzdDtcbiAgICAgICAgdmFyIGFkanVzdGVkVGltZSA9IHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lOyAvL3doZW4gdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydCBvZiB0aGlzIHRpbWVsaW5lLCB3ZSBtdXN0IHBhc3MgdGhhdCBpbmZvcm1hdGlvbiBkb3duIHRvIHRoZSBjaGlsZCBhbmltYXRpb25zIHNvIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMga25vdyB3aGV0aGVyIHRvIHJlbmRlciB0aGVpciBzdGFydGluZyBvciBlbmRpbmcgdmFsdWVzLlxuXG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgIG5leHQgPSBjaGlsZC5fcHJldjtcblxuICAgICAgICAgIGlmICgoY2hpbGQuX2FjdCB8fCBhZGp1c3RlZFRpbWUgPD0gY2hpbGQuX2VuZCkgJiYgY2hpbGQuX3RzICYmIHBhdXNlVHdlZW4gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vIGFuIGV4dHJlbWUgZWRnZSBjYXNlIC0gdGhlIGNoaWxkJ3MgcmVuZGVyIGNvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGtpbGwoKSB0aGUgXCJuZXh0XCIgb25lIGluIHRoZSBsaW5rZWQgbGlzdCwgb3IgcmVwYXJlbnQgaXQuIEluIHRoYXQgY2FzZSB3ZSBtdXN0IHJlLWluaXRpYXRlIHRoZSB3aG9sZSByZW5kZXIgdG8gYmUgc2FmZS5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQucmVuZGVyKGNoaWxkLl90cyA+IDAgPyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlIHx8IF9yZXZlcnRpbmcgJiYgKGNoaWxkLl9pbml0dGVkIHx8IGNoaWxkLl9zdGFydEF0KSk7IC8vIGlmIHJldmVydGluZywgd2Ugc2hvdWxkIGFsd2F5cyBmb3JjZSByZW5kZXJzIG9mIGluaXR0ZWQgdHdlZW5zIChidXQgcmVtZW1iZXIgdGhhdCAuZnJvbVRvKCkgb3IgLmZyb20oKSBtYXkgaGF2ZSBhIF9zdGFydEF0IGJ1dCBub3QgX2luaXR0ZWQgeWV0KS4gSWYsIGZvciBleGFtcGxlLCBhIC5mcm9tVG8oKSB0d2VlbiB3aXRoIGEgc3RhZ2dlciAod2hpY2ggY3JlYXRlcyBhbiBpbnRlcm5hbCB0aW1lbGluZSkgZ2V0cyByZXZlcnRlZCBCRUZPUkUgc29tZSBvZiBpdHMgY2hpbGQgdHdlZW5zIHJlbmRlciBmb3IgdGhlIGZpcnN0IHRpbWUsIGl0IG1heSBub3QgcHJvcGVybHkgdHJpZ2dlciB0aGVtIHRvIHJldmVydC5cblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gYWRqdXN0ZWRUaW1lID8gLV90aW55TnVtIDogX3RpbnlOdW0pOyAvLyBpdCBkaWRuJ3QgZmluaXNoIHJlbmRlcmluZywgc28gYWRqdXN0IHpUaW1lIHNvIHRoYXQgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGF1c2VUd2VlbiAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICBwYXVzZVR3ZWVuLnJlbmRlcih0aW1lID49IHByZXZUaW1lID8gMCA6IC1fdGlueU51bSkuX3pUaW1lID0gdGltZSA+PSBwcmV2VGltZSA/IDEgOiAtMTtcblxuICAgICAgICBpZiAodGhpcy5fdHMpIHtcbiAgICAgICAgICAvL3RoZSBjYWxsYmFjayByZXN1bWVkIHBsYXliYWNrISBTbyBzaW5jZSB3ZSBtYXkgaGF2ZSBoZWxkIGJhY2sgdGhlIHBsYXloZWFkIGR1ZSB0byB3aGVyZSB0aGUgcGF1c2UgaXMgcG9zaXRpb25lZCwgZ28gYWhlYWQgYW5kIGp1bXAgdG8gd2hlcmUgaXQncyBTVVBQT1NFRCB0byBiZSAoaWYgbm8gcGF1c2UgaGFwcGVuZWQpLlxuICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gcHJldlN0YXJ0OyAvL2lmIHRoZSBwYXVzZSB3YXMgYXQgYW4gZWFybGllciB0aW1lIGFuZCB0aGUgdXNlciByZXN1bWVkIGluIHRoZSBjYWxsYmFjaywgaXQgY291bGQgcmVwb3NpdGlvbiB0aGUgdGltZWxpbmUgKGNoYW5naW5nIGl0cyBzdGFydFRpbWUpLCB0aHJvd2luZyB0aGluZ3Mgb2ZmIHNsaWdodGx5LCBzbyB3ZSBtYWtlIHN1cmUgdGhlIF9zdGFydCBkb2Vzbid0IHNoaWZ0LlxuXG4gICAgICAgICAgX3NldEVuZCh0aGlzKTtcblxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIsIHRydWUpO1xuICAgICAgaWYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RUaW1lID49IHRoaXMudG90YWxEdXJhdGlvbigpIHx8ICF0VGltZSAmJiBwcmV2VGltZSkgaWYgKHByZXZTdGFydCA9PT0gdGhpcy5fc3RhcnQgfHwgTWF0aC5hYnModGltZVNjYWxlKSAhPT0gTWF0aC5hYnModGhpcy5fdHMpKSBpZiAoIXRoaXMuX2xvY2spIHtcbiAgICAgICAgLy8gcmVtZW1iZXIsIGEgY2hpbGQncyBjYWxsYmFjayBtYXkgYWx0ZXIgdGhpcyB0aW1lbGluZSdzIHBsYXloZWFkIG9yIHRpbWVTY2FsZSB3aGljaCBpcyB3aHkgd2UgbmVlZCB0byBhZGQgc29tZSBvZiB0aGVzZSBjaGVja3MuXG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKHRvdGFsVGltZSA8IDAgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUgfHwgIXREdXIpKSB7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyICYmIHRvdGFsVGltZSA+PSAwID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGQgPSBmdW5jdGlvbiBhZGQoY2hpbGQsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBfaXNOdW1iZXIocG9zaXRpb24pIHx8IChwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uLCBjaGlsZCkpO1xuXG4gICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBBbmltYXRpb24pKSB7XG4gICAgICBpZiAoX2lzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuYWRkKG9iaiwgcG9zaXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZExhYmVsKGNoaWxkLCBwb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcyAhPT0gY2hpbGQgPyBfYWRkVG9UaW1lbGluZSh0aGlzLCBjaGlsZCwgcG9zaXRpb24pIDogdGhpczsgLy9kb24ndCBhbGxvdyBhIHRpbWVsaW5lIHRvIGJlIGFkZGVkIHRvIGl0c2VsZiBhcyBhIGNoaWxkIVxuICB9O1xuXG4gIF9wcm90bzIuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbiBnZXRDaGlsZHJlbihuZXN0ZWQsIHR3ZWVucywgdGltZWxpbmVzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKG5lc3RlZCA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0d2VlbnMgPT09IHZvaWQgMCkge1xuICAgICAgdHdlZW5zID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGltZWxpbmVzID09PSB2b2lkIDApIHtcbiAgICAgIHRpbWVsaW5lcyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IC1fYmlnTnVtO1xuICAgIH1cblxuICAgIHZhciBhID0gW10sXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICAgIHR3ZWVucyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVsaW5lcyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICAgIG5lc3RlZCAmJiBhLnB1c2guYXBwbHkoYSwgY2hpbGQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHdlZW5zLCB0aW1lbGluZXMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0QnlJZCA9IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IHRoaXMuZ2V0Q2hpbGRyZW4oMSwgMSwgMSksXG4gICAgICAgIGkgPSBhbmltYXRpb25zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChhbmltYXRpb25zW2ldLnZhcnMuaWQgPT09IGlkKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShjaGlsZCkge1xuICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVMYWJlbChjaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMua2lsbFR3ZWVuc09mKGNoaWxkKTtcbiAgICB9XG5cbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgY2hpbGQpO1xuXG4gICAgaWYgKGNoaWxkID09PSB0aGlzLl9yZWNlbnQpIHtcbiAgICAgIHRoaXMuX3JlY2VudCA9IHRoaXMuX2xhc3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAxO1xuXG4gICAgaWYgKCF0aGlzLl9kcCAmJiB0aGlzLl90cykge1xuICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIHRoZSBnbG9iYWwgdGltZWxpbmUgKG9yIGFueSBvdGhlciB0aGF0IGhhcyBubyBwYXJlbnQgb3IgZGV0YWNoZWQgcGFyZW50KS5cbiAgICAgIHRoaXMuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShfdGlja2VyLnRpbWUgLSAodGhpcy5fdHMgPiAwID8gX3RvdGFsVGltZTIgLyB0aGlzLl90cyA6ICh0aGlzLnRvdGFsRHVyYXRpb24oKSAtIF90b3RhbFRpbWUyKSAvIC10aGlzLl90cykpO1xuICAgIH1cblxuICAgIF9BbmltYXRpb24ucHJvdG90eXBlLnRvdGFsVGltZS5jYWxsKHRoaXMsIF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cyk7XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZExhYmVsID0gZnVuY3Rpb24gYWRkTGFiZWwobGFiZWwsIHBvc2l0aW9uKSB7XG4gICAgdGhpcy5sYWJlbHNbbGFiZWxdID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChsYWJlbCkge1xuICAgIGRlbGV0ZSB0aGlzLmxhYmVsc1tsYWJlbF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRQYXVzZSA9IGZ1bmN0aW9uIGFkZFBhdXNlKHBvc2l0aW9uLCBjYWxsYmFjaywgcGFyYW1zKSB7XG4gICAgdmFyIHQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjayB8fCBfZW1wdHlGdW5jLCBwYXJhbXMpO1xuICAgIHQuZGF0YSA9IFwiaXNQYXVzZVwiO1xuICAgIHRoaXMuX2hhc1BhdXNlID0gMTtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgdCwgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZVBhdXNlID0gZnVuY3Rpb24gcmVtb3ZlUGF1c2UocG9zaXRpb24pIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICBwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA9PT0gcG9zaXRpb24gJiYgY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIpIHtcbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHZhciB0d2VlbnMgPSB0aGlzLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpLFxuICAgICAgICBpID0gdHdlZW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuICE9PSB0d2VlbnNbaV0gJiYgdHdlZW5zW2ldLmtpbGwodGFyZ2V0cywgcHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0VHdlZW5zT2YgPSBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGlzR2xvYmFsVGltZSA9IF9pc051bWJlcihvbmx5QWN0aXZlKSxcbiAgICAgICAgLy8gYSBudW1iZXIgaXMgaW50ZXJwcmV0ZWQgYXMgYSBnbG9iYWwgdGltZS4gSWYgdGhlIGFuaW1hdGlvbiBzcGFuc1xuICAgIGNoaWxkcmVuO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICBpZiAoX2FycmF5Q29udGFpbnNBbnkoY2hpbGQuX3RhcmdldHMsIHBhcnNlZFRhcmdldHMpICYmIChpc0dsb2JhbFRpbWUgPyAoIV9vdmVyd3JpdGluZ1R3ZWVuIHx8IGNoaWxkLl9pbml0dGVkICYmIGNoaWxkLl90cykgJiYgY2hpbGQuZ2xvYmFsVGltZSgwKSA8PSBvbmx5QWN0aXZlICYmIGNoaWxkLmdsb2JhbFRpbWUoY2hpbGQudG90YWxEdXJhdGlvbigpKSA+IG9ubHlBY3RpdmUgOiAhb25seUFjdGl2ZSB8fCBjaGlsZC5pc0FjdGl2ZSgpKSkge1xuICAgICAgICAgIC8vIG5vdGU6IGlmIHRoaXMgaXMgZm9yIG92ZXJ3cml0aW5nLCBpdCBzaG91bGQgb25seSBiZSBmb3IgdHdlZW5zIHRoYXQgYXJlbid0IHBhdXNlZCBhbmQgYXJlIGluaXR0ZWQuXG4gICAgICAgICAgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgoY2hpbGRyZW4gPSBjaGlsZC5nZXRUd2VlbnNPZihwYXJzZWRUYXJnZXRzLCBvbmx5QWN0aXZlKSkubGVuZ3RoKSB7XG4gICAgICAgIGEucHVzaC5hcHBseShhLCBjaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBmZWF0dXJlIC0gdGFyZ2V0cygpIG9uIHRpbWVsaW5lc1xuICAvLyB0YXJnZXRzKCkge1xuICAvLyBcdGxldCByZXN1bHQgPSBbXTtcbiAgLy8gXHR0aGlzLmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKS5mb3JFYWNoKHQgPT4gcmVzdWx0LnB1c2goLi4udC50YXJnZXRzKCkpKTtcbiAgLy8gXHRyZXR1cm4gcmVzdWx0LmZpbHRlcigodiwgaSkgPT4gcmVzdWx0LmluZGV4T2YodikgPT09IGkpO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8yLnR3ZWVuVG8gPSBmdW5jdGlvbiB0d2VlblRvKHBvc2l0aW9uLCB2YXJzKSB7XG4gICAgdmFycyA9IHZhcnMgfHwge307XG5cbiAgICB2YXIgdGwgPSB0aGlzLFxuICAgICAgICBlbmRUaW1lID0gX3BhcnNlUG9zaXRpb24odGwsIHBvc2l0aW9uKSxcbiAgICAgICAgX3ZhcnMgPSB2YXJzLFxuICAgICAgICBzdGFydEF0ID0gX3ZhcnMuc3RhcnRBdCxcbiAgICAgICAgX29uU3RhcnQgPSBfdmFycy5vblN0YXJ0LFxuICAgICAgICBvblN0YXJ0UGFyYW1zID0gX3ZhcnMub25TdGFydFBhcmFtcyxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3ZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBpbml0dGVkLFxuICAgICAgICB0d2VlbiA9IFR3ZWVuLnRvKHRsLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgZWFzZTogdmFycy5lYXNlIHx8IFwibm9uZVwiLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgdGltZTogZW5kVGltZSxcbiAgICAgIG92ZXJ3cml0ZTogXCJhdXRvXCIsXG4gICAgICBkdXJhdGlvbjogdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpIHx8IF90aW55TnVtLFxuICAgICAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHtcbiAgICAgICAgdGwucGF1c2UoKTtcblxuICAgICAgICBpZiAoIWluaXR0ZWQpIHtcbiAgICAgICAgICB2YXIgZHVyYXRpb24gPSB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSk7XG4gICAgICAgICAgdHdlZW4uX2R1ciAhPT0gZHVyYXRpb24gJiYgX3NldER1cmF0aW9uKHR3ZWVuLCBkdXJhdGlvbiwgMCwgMSkucmVuZGVyKHR3ZWVuLl90aW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBpbml0dGVkID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9vblN0YXJ0ICYmIF9vblN0YXJ0LmFwcGx5KHR3ZWVuLCBvblN0YXJ0UGFyYW1zIHx8IFtdKTsgLy9pbiBjYXNlIHRoZSB1c2VyIGhhZCBhbiBvblN0YXJ0IGluIHRoZSB2YXJzIC0gd2UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgaXQuXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuXG4gICAgcmV0dXJuIGltbWVkaWF0ZVJlbmRlciA/IHR3ZWVuLnJlbmRlcigwKSA6IHR3ZWVuO1xuICB9O1xuXG4gIF9wcm90bzIudHdlZW5Gcm9tVG8gPSBmdW5jdGlvbiB0d2VlbkZyb21Ubyhmcm9tUG9zaXRpb24sIHRvUG9zaXRpb24sIHZhcnMpIHtcbiAgICByZXR1cm4gdGhpcy50d2VlblRvKHRvUG9zaXRpb24sIF9zZXREZWZhdWx0cyh7XG4gICAgICBzdGFydEF0OiB7XG4gICAgICAgIHRpbWU6IF9wYXJzZVBvc2l0aW9uKHRoaXMsIGZyb21Qb3NpdGlvbilcbiAgICAgIH1cbiAgICB9LCB2YXJzKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZWNlbnQgPSBmdW5jdGlvbiByZWNlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY2VudDtcbiAgfTtcblxuICBfcHJvdG8yLm5leHRMYWJlbCA9IGZ1bmN0aW9uIG5leHRMYWJlbChhZnRlclRpbWUpIHtcbiAgICBpZiAoYWZ0ZXJUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGFmdGVyVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGFmdGVyVGltZSkpO1xuICB9O1xuXG4gIF9wcm90bzIucHJldmlvdXNMYWJlbCA9IGZ1bmN0aW9uIHByZXZpb3VzTGFiZWwoYmVmb3JlVGltZSkge1xuICAgIGlmIChiZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGJlZm9yZVRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBiZWZvcmVUaW1lKSwgMSk7XG4gIH07XG5cbiAgX3Byb3RvMi5jdXJyZW50TGFiZWwgPSBmdW5jdGlvbiBjdXJyZW50TGFiZWwodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuc2Vlayh2YWx1ZSwgdHJ1ZSkgOiB0aGlzLnByZXZpb3VzTGFiZWwodGhpcy5fdGltZSArIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8yLnNoaWZ0Q2hpbGRyZW4gPSBmdW5jdGlvbiBzaGlmdENoaWxkcmVuKGFtb3VudCwgYWRqdXN0TGFiZWxzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGxhYmVscyA9IHRoaXMubGFiZWxzLFxuICAgICAgICBwO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgY2hpbGQuX3N0YXJ0ICs9IGFtb3VudDtcbiAgICAgICAgY2hpbGQuX2VuZCArPSBhbW91bnQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKGFkanVzdExhYmVscykge1xuICAgICAgZm9yIChwIGluIGxhYmVscykge1xuICAgICAgICBpZiAobGFiZWxzW3BdID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgICBsYWJlbHNbcF0gKz0gYW1vdW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoc29mdCkge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuICAgIHRoaXMuX2xvY2sgPSAwO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBjaGlsZC5pbnZhbGlkYXRlKHNvZnQpO1xuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gX0FuaW1hdGlvbi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMsIHNvZnQpO1xuICB9O1xuXG4gIF9wcm90bzIuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcihpbmNsdWRlTGFiZWxzKSB7XG4gICAgaWYgKGluY2x1ZGVMYWJlbHMgPT09IHZvaWQgMCkge1xuICAgICAgaW5jbHVkZUxhYmVscyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIG5leHQ7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIHRoaXMucmVtb3ZlKGNoaWxkKTtcbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICB0aGlzLl9kcCAmJiAodGhpcy5fdGltZSA9IHRoaXMuX3RUaW1lID0gdGhpcy5fcFRpbWUgPSAwKTtcbiAgICBpbmNsdWRlTGFiZWxzICYmICh0aGlzLmxhYmVscyA9IHt9KTtcbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24gdG90YWxEdXJhdGlvbih2YWx1ZSkge1xuICAgIHZhciBtYXggPSAwLFxuICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgY2hpbGQgPSBzZWxmLl9sYXN0LFxuICAgICAgICBwcmV2U3RhcnQgPSBfYmlnTnVtLFxuICAgICAgICBwcmV2LFxuICAgICAgICBzdGFydCxcbiAgICAgICAgcGFyZW50O1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBzZWxmLnRpbWVTY2FsZSgoc2VsZi5fcmVwZWF0IDwgMCA/IHNlbGYuZHVyYXRpb24oKSA6IHNlbGYudG90YWxEdXJhdGlvbigpKSAvIChzZWxmLnJldmVyc2VkKCkgPyAtdmFsdWUgOiB2YWx1ZSkpO1xuICAgIH1cblxuICAgIGlmIChzZWxmLl9kaXJ0eSkge1xuICAgICAgcGFyZW50ID0gc2VsZi5wYXJlbnQ7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICBwcmV2ID0gY2hpbGQuX3ByZXY7IC8vcmVjb3JkIGl0IGhlcmUgaW4gY2FzZSB0aGUgdHdlZW4gY2hhbmdlcyBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2UuLi5cblxuICAgICAgICBjaGlsZC5fZGlydHkgJiYgY2hpbGQudG90YWxEdXJhdGlvbigpOyAvL2NvdWxkIGNoYW5nZSB0aGUgdHdlZW4uX3N0YXJ0VGltZSwgc28gbWFrZSBzdXJlIHRoZSBhbmltYXRpb24ncyBjYWNoZSBpcyBjbGVhbiBiZWZvcmUgYW5hbHl6aW5nIGl0LlxuXG4gICAgICAgIHN0YXJ0ID0gY2hpbGQuX3N0YXJ0O1xuXG4gICAgICAgIGlmIChzdGFydCA+IHByZXZTdGFydCAmJiBzZWxmLl9zb3J0ICYmIGNoaWxkLl90cyAmJiAhc2VsZi5fbG9jaykge1xuICAgICAgICAgIC8vaW4gY2FzZSBvbmUgb2YgdGhlIHR3ZWVucyBzaGlmdGVkIG91dCBvZiBvcmRlciwgaXQgbmVlZHMgdG8gYmUgcmUtaW5zZXJ0ZWQgaW50byB0aGUgY29ycmVjdCBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2VcbiAgICAgICAgICBzZWxmLl9sb2NrID0gMTsgLy9wcmV2ZW50IGVuZGxlc3MgcmVjdXJzaXZlIGNhbGxzIC0gdGhlcmUgYXJlIG1ldGhvZHMgdGhhdCBnZXQgdHJpZ2dlcmVkIHRoYXQgY2hlY2sgZHVyYXRpb24vdG90YWxEdXJhdGlvbiB3aGVuIHdlIGFkZCgpLlxuXG4gICAgICAgICAgX2FkZFRvVGltZWxpbmUoc2VsZiwgY2hpbGQsIHN0YXJ0IC0gY2hpbGQuX2RlbGF5LCAxKS5fbG9jayA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldlN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnQgPCAwICYmIGNoaWxkLl90cykge1xuICAgICAgICAgIC8vY2hpbGRyZW4gYXJlbid0IGFsbG93ZWQgdG8gaGF2ZSBuZWdhdGl2ZSBzdGFydFRpbWVzIHVubGVzcyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCBzbyBhZGp1c3QgaGVyZSBpZiBvbmUgaXMgZm91bmQuXG4gICAgICAgICAgbWF4IC09IHN0YXJ0O1xuXG4gICAgICAgICAgaWYgKCFwYXJlbnQgJiYgIXNlbGYuX2RwIHx8IHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcpIHtcbiAgICAgICAgICAgIHNlbGYuX3N0YXJ0ICs9IHN0YXJ0IC8gc2VsZi5fdHM7XG4gICAgICAgICAgICBzZWxmLl90aW1lIC09IHN0YXJ0O1xuICAgICAgICAgICAgc2VsZi5fdFRpbWUgLT0gc3RhcnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5zaGlmdENoaWxkcmVuKC1zdGFydCwgZmFsc2UsIC0xZTk5OSk7XG4gICAgICAgICAgcHJldlN0YXJ0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkLl9lbmQgPiBtYXggJiYgY2hpbGQuX3RzICYmIChtYXggPSBjaGlsZC5fZW5kKTtcbiAgICAgICAgY2hpbGQgPSBwcmV2O1xuICAgICAgfVxuXG4gICAgICBfc2V0RHVyYXRpb24oc2VsZiwgc2VsZiA9PT0gX2dsb2JhbFRpbWVsaW5lICYmIHNlbGYuX3RpbWUgPiBtYXggPyBzZWxmLl90aW1lIDogbWF4LCAxLCAxKTtcblxuICAgICAgc2VsZi5fZGlydHkgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLl90RHVyO1xuICB9O1xuXG4gIFRpbWVsaW5lLnVwZGF0ZVJvb3QgPSBmdW5jdGlvbiB1cGRhdGVSb290KHRpbWUpIHtcbiAgICBpZiAoX2dsb2JhbFRpbWVsaW5lLl90cykge1xuICAgICAgX2xhenlTYWZlUmVuZGVyKF9nbG9iYWxUaW1lbGluZSwgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGltZSwgX2dsb2JhbFRpbWVsaW5lKSk7XG5cbiAgICAgIF9sYXN0UmVuZGVyZWRGcmFtZSA9IF90aWNrZXIuZnJhbWU7XG4gICAgfVxuXG4gICAgaWYgKF90aWNrZXIuZnJhbWUgPj0gX25leHRHQ0ZyYW1lKSB7XG4gICAgICBfbmV4dEdDRnJhbWUgKz0gX2NvbmZpZy5hdXRvU2xlZXAgfHwgMTIwO1xuICAgICAgdmFyIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcbiAgICAgIGlmICghY2hpbGQgfHwgIWNoaWxkLl90cykgaWYgKF9jb25maWcuYXV0b1NsZWVwICYmIF90aWNrZXIuX2xpc3RlbmVycy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHdoaWxlIChjaGlsZCAmJiAhY2hpbGQuX3RzKSB7XG4gICAgICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkIHx8IF90aWNrZXIuc2xlZXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRpbWVsaW5lO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVGltZWxpbmUucHJvdG90eXBlLCB7XG4gIF9sb2NrOiAwLFxuICBfaGFzUGF1c2U6IDAsXG4gIF9mb3JjaW5nOiAwXG59KTtcblxudmFyIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKSB7XG4gIC8vbm90ZTogd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZywgbnVsbCwgc2V0dGVyKSxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIG1hdGNoSW5kZXggPSAwLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnROdW1zLFxuICAgICAgY29sb3IsXG4gICAgICBlbmROdW0sXG4gICAgICBjaHVuayxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgaGFzUmFuZG9tLFxuICAgICAgYTtcbiAgcHQuYiA9IHN0YXJ0O1xuICBwdC5lID0gZW5kO1xuICBzdGFydCArPSBcIlwiOyAvL2Vuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoaGFzUmFuZG9tID0gfmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgIGVuZCA9IF9yZXBsYWNlUmFuZG9tKGVuZCk7XG4gIH1cblxuICBpZiAoc3RyaW5nRmlsdGVyKSB7XG4gICAgYSA9IFtzdGFydCwgZW5kXTtcbiAgICBzdHJpbmdGaWx0ZXIoYSwgdGFyZ2V0LCBwcm9wKTsgLy9wYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLlxuXG4gICAgc3RhcnQgPSBhWzBdO1xuICAgIGVuZCA9IGFbMV07XG4gIH1cblxuICBzdGFydE51bXMgPSBzdGFydC5tYXRjaChfY29tcGxleFN0cmluZ051bUV4cCkgfHwgW107XG5cbiAgd2hpbGUgKHJlc3VsdCA9IF9jb21wbGV4U3RyaW5nTnVtRXhwLmV4ZWMoZW5kKSkge1xuICAgIGVuZE51bSA9IHJlc3VsdFswXTtcbiAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiKSB7XG4gICAgICBjb2xvciA9IDE7XG4gICAgfVxuXG4gICAgaWYgKGVuZE51bSAhPT0gc3RhcnROdW1zW21hdGNoSW5kZXgrK10pIHtcbiAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydE51bXNbbWF0Y2hJbmRleCAtIDFdKSB8fCAwOyAvL3RoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cbiAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgcDogY2h1bmsgfHwgbWF0Y2hJbmRleCA9PT0gMSA/IGNodW5rIDogXCIsXCIsXG4gICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgYzogZW5kTnVtLmNoYXJBdCgxKSA9PT0gXCI9XCIgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgZW5kTnVtKSAtIHN0YXJ0TnVtIDogcGFyc2VGbG9hdChlbmROdW0pIC0gc3RhcnROdW0sXG4gICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCA/IE1hdGgucm91bmQgOiAwXG4gICAgICB9O1xuICAgICAgaW5kZXggPSBfY29tcGxleFN0cmluZ051bUV4cC5sYXN0SW5kZXg7XG4gICAgfVxuICB9XG5cbiAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjsgLy93ZSB1c2UgdGhlIFwiY1wiIG9mIHRoZSBQcm9wVHdlZW4gdG8gc3RvcmUgdGhlIGZpbmFsIHBhcnQgb2YgdGhlIHN0cmluZyAoYWZ0ZXIgdGhlIGxhc3QgbnVtYmVyKVxuXG4gIHB0LmZwID0gZnVuY1BhcmFtO1xuXG4gIGlmIChfcmVsRXhwLnRlc3QoZW5kKSB8fCBoYXNSYW5kb20pIHtcbiAgICBwdC5lID0gMDsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuICB9XG5cbiAgdGhpcy5fcHQgPSBwdDsgLy9zdGFydCB0aGUgbGlua2VkIGxpc3Qgd2l0aCB0aGlzIG5ldyBQcm9wVHdlZW4uIFJlbWVtYmVyLCB3ZSBjYWxsIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodHdlZW5JbnN0YW5jZS4uLikgdG8gZW5zdXJlIHRoYXQgaXQncyBzY29wZWQgcHJvcGVybHkuIFdlIG1heSBjYWxsIGl0IGZyb20gd2l0aGluIGEgcGx1Z2luIHRvbywgdGh1cyBcInRoaXNcIiB3b3VsZCByZWZlciB0byB0aGUgcGx1Z2luLlxuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX2FkZFByb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBpbmRleCwgdGFyZ2V0cywgbW9kaWZpZXIsIHN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtLCBvcHRpb25hbCkge1xuICBfaXNGdW5jdGlvbihlbmQpICYmIChlbmQgPSBlbmQoaW5kZXggfHwgMCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG4gIHZhciBjdXJyZW50VmFsdWUgPSB0YXJnZXRbcHJvcF0sXG4gICAgICBwYXJzZWRTdGFydCA9IHN0YXJ0ICE9PSBcImdldFwiID8gc3RhcnQgOiAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IGN1cnJlbnRWYWx1ZSA6IGZ1bmNQYXJhbSA/IHRhcmdldFtwcm9wLmluZGV4T2YoXCJzZXRcIikgfHwgIV9pc0Z1bmN0aW9uKHRhcmdldFtcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKSA/IHByb3AgOiBcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKGZ1bmNQYXJhbSkgOiB0YXJnZXRbcHJvcF0oKSxcbiAgICAgIHNldHRlciA9ICFfaXNGdW5jdGlvbihjdXJyZW50VmFsdWUpID8gX3NldHRlclBsYWluIDogZnVuY1BhcmFtID8gX3NldHRlckZ1bmNXaXRoUGFyYW0gOiBfc2V0dGVyRnVuYyxcbiAgICAgIHB0O1xuXG4gIGlmIChfaXNTdHJpbmcoZW5kKSkge1xuICAgIGlmICh+ZW5kLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICAgIH1cblxuICAgIGlmIChlbmQuY2hhckF0KDEpID09PSBcIj1cIikge1xuICAgICAgcHQgPSBfcGFyc2VSZWxhdGl2ZShwYXJzZWRTdGFydCwgZW5kKSArIChnZXRVbml0KHBhcnNlZFN0YXJ0KSB8fCAwKTtcblxuICAgICAgaWYgKHB0IHx8IHB0ID09PSAwKSB7XG4gICAgICAgIC8vIHRvIGF2b2lkIGlzTmFOLCBsaWtlIGlmIHNvbWVvbmUgcGFzc2VzIGluIGEgdmFsdWUgbGlrZSBcIiE9IHdoYXRldmVyXCJcbiAgICAgICAgZW5kID0gcHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKCFvcHRpb25hbCB8fCBwYXJzZWRTdGFydCAhPT0gZW5kIHx8IF9mb3JjZUFsbFByb3BUd2VlbnMpIHtcbiAgICBpZiAoIWlzTmFOKHBhcnNlZFN0YXJ0ICogZW5kKSAmJiBlbmQgIT09IFwiXCIpIHtcbiAgICAgIC8vIGZ1biBmYWN0OiBhbnkgbnVtYmVyIG11bHRpcGxpZWQgYnkgXCJcIiBpcyBldmFsdWF0ZWQgYXMgdGhlIG51bWJlciAwIVxuICAgICAgcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCB0YXJnZXQsIHByb3AsICtwYXJzZWRTdGFydCB8fCAwLCBlbmQgLSAocGFyc2VkU3RhcnQgfHwgMCksIHR5cGVvZiBjdXJyZW50VmFsdWUgPT09IFwiYm9vbGVhblwiID8gX3JlbmRlckJvb2xlYW4gOiBfcmVuZGVyUGxhaW4sIDAsIHNldHRlcik7XG4gICAgICBmdW5jUGFyYW0gJiYgKHB0LmZwID0gZnVuY1BhcmFtKTtcbiAgICAgIG1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0aGlzLCB0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRoaXMuX3B0ID0gcHQ7XG4gICAgfVxuXG4gICAgIWN1cnJlbnRWYWx1ZSAmJiAhKHByb3AgaW4gdGFyZ2V0KSAmJiBfbWlzc2luZ1BsdWdpbihwcm9wLCBlbmQpO1xuICAgIHJldHVybiBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHRoaXMsIHRhcmdldCwgcHJvcCwgcGFyc2VkU3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIgfHwgX2NvbmZpZy5zdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSk7XG4gIH1cbn0sXG4gICAgLy9jcmVhdGVzIGEgY29weSBvZiB0aGUgdmFycyBvYmplY3QgYW5kIHByb2Nlc3NlcyBhbnkgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIChwdXR0aW5nIHRoZSByZXN1bHRpbmcgdmFsdWVzIGRpcmVjdGx5IGludG8gdGhlIGNvcHkpIGFzIHdlbGwgYXMgc3RyaW5ncyB3aXRoIFwicmFuZG9tKClcIiBpbiB0aGVtLiBJdCBkb2VzIE5PVCBwcm9jZXNzIHJlbGF0aXZlIHZhbHVlcy5cbl9wcm9jZXNzVmFycyA9IGZ1bmN0aW9uIF9wcm9jZXNzVmFycyh2YXJzLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzLCB0d2Vlbikge1xuICBfaXNGdW5jdGlvbih2YXJzKSAmJiAodmFycyA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpO1xuXG4gIGlmICghX2lzT2JqZWN0KHZhcnMpIHx8IHZhcnMuc3R5bGUgJiYgdmFycy5ub2RlVHlwZSB8fCBfaXNBcnJheSh2YXJzKSB8fCBfaXNUeXBlZEFycmF5KHZhcnMpKSB7XG4gICAgcmV0dXJuIF9pc1N0cmluZyh2YXJzKSA/IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykgOiB2YXJzO1xuICB9XG5cbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIHZhcnMpIHtcbiAgICBjb3B5W3BdID0gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnNbcF0sIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfY2hlY2tQbHVnaW4gPSBmdW5jdGlvbiBfY2hlY2tQbHVnaW4ocHJvcGVydHksIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gIHZhciBwbHVnaW4sIHB0LCBwdExvb2t1cCwgaTtcblxuICBpZiAoX3BsdWdpbnNbcHJvcGVydHldICYmIChwbHVnaW4gPSBuZXcgX3BsdWdpbnNbcHJvcGVydHldKCkpLmluaXQodGFyZ2V0LCBwbHVnaW4ucmF3VmFycyA/IHZhcnNbcHJvcGVydHldIDogX3Byb2Nlc3NWYXJzKHZhcnNbcHJvcGVydHldLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzLCB0d2VlbiksIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgdHdlZW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHR3ZWVuLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgcGx1Z2luLnJlbmRlciwgcGx1Z2luLCAwLCBwbHVnaW4ucHJpb3JpdHkpO1xuXG4gICAgaWYgKHR3ZWVuICE9PSBfcXVpY2tUd2Vlbikge1xuICAgICAgcHRMb29rdXAgPSB0d2Vlbi5fcHRMb29rdXBbdHdlZW4uX3RhcmdldHMuaW5kZXhPZih0YXJnZXQpXTsgLy9ub3RlOiB3ZSBjYW4ndCB1c2UgdHdlZW4uX3B0TG9va3VwW2luZGV4XSBiZWNhdXNlIGZvciBzdGFnZ2VyZWQgdHdlZW5zLCB0aGUgaW5kZXggZnJvbSB0aGUgZnVsbFRhcmdldHMgYXJyYXkgd29uJ3QgbWF0Y2ggd2hhdCBpdCBpcyBpbiBlYWNoIGluZGl2aWR1YWwgdHdlZW4gdGhhdCBzcGF3bnMgZnJvbSB0aGUgc3RhZ2dlci5cblxuICAgICAgaSA9IHBsdWdpbi5fcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHB0TG9va3VwW3BsdWdpbi5fcHJvcHNbaV1dID0gcHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBsdWdpbjtcbn0sXG4gICAgX292ZXJ3cml0aW5nVHdlZW4sXG4gICAgLy9zdG9yZSBhIHJlZmVyZW5jZSB0ZW1wb3JhcmlseSBzbyB3ZSBjYW4gYXZvaWQgb3ZlcndyaXRpbmcgaXRzZWxmLlxuX2ZvcmNlQWxsUHJvcFR3ZWVucyxcbiAgICBfaW5pdFR3ZWVuID0gZnVuY3Rpb24gX2luaXRUd2Vlbih0d2VlbiwgdGltZSwgdFRpbWUpIHtcbiAgdmFyIHZhcnMgPSB0d2Vlbi52YXJzLFxuICAgICAgZWFzZSA9IHZhcnMuZWFzZSxcbiAgICAgIHN0YXJ0QXQgPSB2YXJzLnN0YXJ0QXQsXG4gICAgICBpbW1lZGlhdGVSZW5kZXIgPSB2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgIGxhenkgPSB2YXJzLmxhenksXG4gICAgICBvblVwZGF0ZSA9IHZhcnMub25VcGRhdGUsXG4gICAgICBydW5CYWNrd2FyZHMgPSB2YXJzLnJ1bkJhY2t3YXJkcyxcbiAgICAgIHlveW9FYXNlID0gdmFycy55b3lvRWFzZSxcbiAgICAgIGtleWZyYW1lcyA9IHZhcnMua2V5ZnJhbWVzLFxuICAgICAgYXV0b1JldmVydCA9IHZhcnMuYXV0b1JldmVydCxcbiAgICAgIGR1ciA9IHR3ZWVuLl9kdXIsXG4gICAgICBwcmV2U3RhcnRBdCA9IHR3ZWVuLl9zdGFydEF0LFxuICAgICAgdGFyZ2V0cyA9IHR3ZWVuLl90YXJnZXRzLFxuICAgICAgcGFyZW50ID0gdHdlZW4ucGFyZW50LFxuICAgICAgZnVsbFRhcmdldHMgPSBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQudmFycy50YXJnZXRzIDogdGFyZ2V0cyxcbiAgICAgIGF1dG9PdmVyd3JpdGUgPSB0d2Vlbi5fb3ZlcndyaXRlID09PSBcImF1dG9cIiAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICAgIHRsID0gdHdlZW4udGltZWxpbmUsXG4gICAgICBjbGVhblZhcnMsXG4gICAgICBpLFxuICAgICAgcCxcbiAgICAgIHB0LFxuICAgICAgdGFyZ2V0LFxuICAgICAgaGFzUHJpb3JpdHksXG4gICAgICBnc0RhdGEsXG4gICAgICBoYXJuZXNzLFxuICAgICAgcGx1Z2luLFxuICAgICAgcHRMb29rdXAsXG4gICAgICBpbmRleCxcbiAgICAgIGhhcm5lc3NWYXJzLFxuICAgICAgb3ZlcndyaXR0ZW47XG4gIHRsICYmICgha2V5ZnJhbWVzIHx8ICFlYXNlKSAmJiAoZWFzZSA9IFwibm9uZVwiKTtcbiAgdHdlZW4uX2Vhc2UgPSBfcGFyc2VFYXNlKGVhc2UsIF9kZWZhdWx0cy5lYXNlKTtcbiAgdHdlZW4uX3lFYXNlID0geW95b0Vhc2UgPyBfaW52ZXJ0RWFzZShfcGFyc2VFYXNlKHlveW9FYXNlID09PSB0cnVlID8gZWFzZSA6IHlveW9FYXNlLCBfZGVmYXVsdHMuZWFzZSkpIDogMDtcblxuICBpZiAoeW95b0Vhc2UgJiYgdHdlZW4uX3lveW8gJiYgIXR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvL3RoZXJlIG11c3QgaGF2ZSBiZWVuIGEgcGFyZW50IHRpbWVsaW5lIHdpdGggeW95bzp0cnVlIHRoYXQgaXMgY3VycmVudGx5IGluIGl0cyB5b3lvIHBoYXNlLCBzbyBmbGlwIHRoZSBlYXNlcy5cbiAgICB5b3lvRWFzZSA9IHR3ZWVuLl95RWFzZTtcbiAgICB0d2Vlbi5feUVhc2UgPSB0d2Vlbi5fZWFzZTtcbiAgICB0d2Vlbi5fZWFzZSA9IHlveW9FYXNlO1xuICB9XG5cbiAgdHdlZW4uX2Zyb20gPSAhdGwgJiYgISF2YXJzLnJ1bkJhY2t3YXJkczsgLy9uZXN0ZWQgdGltZWxpbmVzIHNob3VsZCBuZXZlciBydW4gYmFja3dhcmRzIC0gdGhlIGJhY2t3YXJkcy1uZXNzIGlzIGluIHRoZSBjaGlsZCB0d2VlbnMuXG5cbiAgaWYgKCF0bCB8fCBrZXlmcmFtZXMgJiYgIXZhcnMuc3RhZ2dlcikge1xuICAgIC8vaWYgdGhlcmUncyBhbiBpbnRlcm5hbCB0aW1lbGluZSwgc2tpcCBhbGwgdGhlIHBhcnNpbmcgYmVjYXVzZSB3ZSBwYXNzZWQgdGhhdCB0YXNrIGRvd24gdGhlIGNoYWluLlxuICAgIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwO1xuICAgIGhhcm5lc3NWYXJzID0gaGFybmVzcyAmJiB2YXJzW2hhcm5lc3MucHJvcF07IC8vc29tZW9uZSBtYXkgbmVlZCB0byBzcGVjaWZ5IENTUy1zcGVjaWZpYyB2YWx1ZXMgQU5EIG5vbi1DU1MgdmFsdWVzLCBsaWtlIGlmIHRoZSBlbGVtZW50IGhhcyBhbiBcInhcIiBwcm9wZXJ0eSBwbHVzIGl0J3MgYSBzdGFuZGFyZCBET00gZWxlbWVudC4gV2UgYWxsb3cgcGVvcGxlIHRvIGRpc3Rpbmd1aXNoIGJ5IHdyYXBwaW5nIHBsdWdpbi1zcGVjaWZpYyBzdHVmZiBpbiBhIGNzczp7fSBvYmplY3QgZm9yIGV4YW1wbGUuXG5cbiAgICBjbGVhblZhcnMgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfcmVzZXJ2ZWRQcm9wcyk7XG5cbiAgICBpZiAocHJldlN0YXJ0QXQpIHtcbiAgICAgIHByZXZTdGFydEF0Ll96VGltZSA8IDAgJiYgcHJldlN0YXJ0QXQucHJvZ3Jlc3MoMSk7IC8vIGluIGNhc2UgaXQncyBhIGxhenkgc3RhcnRBdCB0aGF0IGhhc24ndCByZW5kZXJlZCB5ZXQuXG5cbiAgICAgIHRpbWUgPCAwICYmIHJ1bkJhY2t3YXJkcyAmJiBpbW1lZGlhdGVSZW5kZXIgJiYgIWF1dG9SZXZlcnQgPyBwcmV2U3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpIDogcHJldlN0YXJ0QXQucmV2ZXJ0KHJ1bkJhY2t3YXJkcyAmJiBkdXIgPyBfcmV2ZXJ0Q29uZmlnTm9LaWxsIDogX3N0YXJ0QXRSZXZlcnRDb25maWcpOyAvLyBpZiBpdCdzIGEgXCJzdGFydEF0XCIgKG5vdCBcImZyb20oKVwiIG9yIHJ1bkJhY2t3YXJkczogdHJ1ZSksIHdlIG9ubHkgbmVlZCB0byBkbyBhIHNoYWxsb3cgcmV2ZXJ0IChrZWVwIHRyYW5zZm9ybXMgY2FjaGVkIGluIENTU1BsdWdpbilcbiAgICAgIC8vIGRvbid0IGp1c3QgX3JlbW92ZUZyb21QYXJlbnQocHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKSkgYmVjYXVzZSB0aGF0J2xsIGxlYXZlIGlubGluZSBzdHlsZXMuIFdlJ3JlIGNyZWF0aW5nIGEgbmV3IF9zdGFydEF0IGZvciBcInN0YXJ0QXRcIiB0d2VlbnMgdGhhdCByZS1jYXB0dXJlIHRoaW5ncyB0byBlbnN1cmUgdGhhdCBpZiB0aGUgcHJlLXR3ZWVuIHZhbHVlcyBjaGFuZ2VkIHNpbmNlIHRoZSB0d2VlbiB3YXMgY3JlYXRlZCwgdGhleSdyZSByZWNvcmRlZC5cblxuICAgICAgcHJldlN0YXJ0QXQuX2xhenkgPSAwO1xuICAgIH1cblxuICAgIGlmIChzdGFydEF0KSB7XG4gICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgICBkYXRhOiBcImlzU3RhcnRcIixcbiAgICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlcjogdHJ1ZSxcbiAgICAgICAgbGF6eTogIXByZXZTdGFydEF0ICYmIF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICBzdGFydEF0OiBudWxsLFxuICAgICAgICBkZWxheTogMCxcbiAgICAgICAgb25VcGRhdGU6IG9uVXBkYXRlICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX2NhbGxiYWNrKHR3ZWVuLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgICB9LFxuICAgICAgICBzdGFnZ2VyOiAwXG4gICAgICB9LCBzdGFydEF0KSkpOyAvL2NvcHkgdGhlIHByb3BlcnRpZXMvdmFsdWVzIGludG8gYSBuZXcgb2JqZWN0IHRvIGF2b2lkIGNvbGxpc2lvbnMsIGxpa2UgdmFyIHRvID0ge3g6MH0sIGZyb20gPSB7eDo1MDB9OyB0aW1lbGluZS5mcm9tVG8oZSwgZnJvbSwgdG8pLmZyb21UbyhlLCB0bywgZnJvbSk7XG5cblxuICAgICAgdHdlZW4uX3N0YXJ0QXQuX2RwID0gMDsgLy8gZG9uJ3QgYWxsb3cgaXQgdG8gZ2V0IHB1dCBiYWNrIGludG8gcm9vdCB0aW1lbGluZSEgTGlrZSB3aGVuIHJldmVydCgpIGlzIGNhbGxlZCBhbmQgdG90YWxUaW1lKCkgZ2V0cyBzZXQuXG5cbiAgICAgIHR3ZWVuLl9zdGFydEF0Ll9zYXQgPSB0d2VlbjsgLy8gdXNlZCBpbiBnbG9iYWxUaW1lKCkuIF9zYXQgc3RhbmRzIGZvciBfc3RhcnRBdFR3ZWVuXG5cbiAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nIHx8ICFpbW1lZGlhdGVSZW5kZXIgJiYgIWF1dG9SZXZlcnQpICYmIHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKTsgLy8gcmFyZSBlZGdlIGNhc2UsIGxpa2UgaWYgYSByZW5kZXIgaXMgZm9yY2VkIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gb2YgYSBub24taW5pdHRlZCB0d2Vlbi5cblxuICAgICAgaWYgKGltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICBpZiAoZHVyICYmIHRpbWUgPD0gMCAmJiB0VGltZSA8PSAwKSB7XG4gICAgICAgICAgLy8gY2hlY2sgdFRpbWUgaGVyZSBiZWNhdXNlIGluIHRoZSBjYXNlIG9mIGEgeW95byB0d2VlbiB3aG9zZSBwbGF5aGVhZCBnZXRzIHB1c2hlZCB0byB0aGUgZW5kIGxpa2UgdHdlZW4ucHJvZ3Jlc3MoMSksIHdlIHNob3VsZCBhbGxvdyBpdCB0aHJvdWdoIHNvIHRoYXQgdGhlIG9uQ29tcGxldGUgZ2V0cyBmaXJlZCBwcm9wZXJseS5cbiAgICAgICAgICB0aW1lICYmICh0d2Vlbi5felRpbWUgPSB0aW1lKTtcbiAgICAgICAgICByZXR1cm47IC8vd2Ugc2tpcCBpbml0aWFsaXphdGlvbiBoZXJlIHNvIHRoYXQgb3ZlcndyaXRpbmcgZG9lc24ndCBvY2N1ciB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zLiBPdGhlcndpc2UsIGlmIHlvdSBjcmVhdGUgc2V2ZXJhbCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZSB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0L3Byb3BlcnRpZXMgdG8gZHJvcCBpbnRvIGEgVGltZWxpbmUsIHRoZSBsYXN0IG9uZSBjcmVhdGVkIHdvdWxkIG92ZXJ3cml0ZSB0aGUgZmlyc3Qgb25lcyBiZWNhdXNlIHRoZXkgZGlkbid0IGdldCBwbGFjZWQgaW50byB0aGUgdGltZWxpbmUgeWV0IGJlZm9yZSB0aGUgZmlyc3QgcmVuZGVyIG9jY3VycyBhbmQga2lja3MgaW4gb3ZlcndyaXRpbmcuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJ1bkJhY2t3YXJkcyAmJiBkdXIpIHtcbiAgICAgIC8vZnJvbSgpIHR3ZWVucyBtdXN0IGJlIGhhbmRsZWQgdW5pcXVlbHk6IHRoZWlyIGJlZ2lubmluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZCBidXQgd2UgZG9uJ3Qgd2FudCBvdmVyd3JpdGluZyB0byBvY2N1ciB5ZXQgKHdoZW4gdGltZSBpcyBzdGlsbCAwKS4gV2FpdCB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zIGJlZm9yZSBkb2luZyBhbGwgdGhlIHJvdXRpbmVzIGxpa2Ugb3ZlcndyaXRpbmcuIEF0IHRoYXQgdGltZSwgd2Ugc2hvdWxkIHJlbmRlciBhdCB0aGUgRU5EIG9mIHRoZSB0d2VlbiB0byBlbnN1cmUgdGhhdCB0aGluZ3MgaW5pdGlhbGl6ZSBjb3JyZWN0bHkgKHJlbWVtYmVyLCBmcm9tKCkgdHdlZW5zIGdvIGJhY2t3YXJkcylcbiAgICAgIGlmICghcHJldlN0YXJ0QXQpIHtcbiAgICAgICAgdGltZSAmJiAoaW1tZWRpYXRlUmVuZGVyID0gZmFsc2UpOyAvL2luIHJhcmUgY2FzZXMgKGxpa2UgaWYgYSBmcm9tKCkgdHdlZW4gcnVucyBhbmQgdGhlbiBpcyBpbnZhbGlkYXRlKCktZWQpLCBpbW1lZGlhdGVSZW5kZXIgY291bGQgYmUgdHJ1ZSBidXQgdGhlIGluaXRpYWwgZm9yY2VkLXJlbmRlciBnZXRzIHNraXBwZWQsIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSB0aGUgcmVuZGVyIGluIHRoaXMgY29udGV4dCB3aGVuIHRoZSBfdGltZSBpcyBncmVhdGVyIHRoYW4gMFxuXG4gICAgICAgIHAgPSBfc2V0RGVmYXVsdHMoe1xuICAgICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgICAgZGF0YTogXCJpc0Zyb21TdGFydFwiLFxuICAgICAgICAgIC8vd2UgdGFnIHRoZSB0d2VlbiB3aXRoIGFzIFwiaXNGcm9tU3RhcnRcIiBzbyB0aGF0IGlmIFtpbnNpZGUgYSBwbHVnaW5dIHdlIG5lZWQgdG8gb25seSBkbyBzb21ldGhpbmcgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4sIHdlIGhhdmUgYSB3YXkgb2YgaWRlbnRpZnlpbmcgdGhpcyB0d2VlbiBhcyBtZXJlbHkgdGhlIG9uZSB0aGF0J3Mgc2V0dGluZyB0aGUgYmVnaW5uaW5nIHZhbHVlcyBmb3IgYSBcImZyb20oKVwiIHR3ZWVuLiBGb3IgZXhhbXBsZSwgY2xlYXJQcm9wcyBpbiBDU1NQbHVnaW4gc2hvdWxkIG9ubHkgZ2V0IGFwcGxpZWQgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4gYW5kIHdpdGhvdXQgdGhpcyB0YWcsIGZyb20oLi4ue2hlaWdodDoxMDAsIGNsZWFyUHJvcHM6XCJoZWlnaHRcIiwgZGVsYXk6MX0pIHdvdWxkIHdpcGUgdGhlIGhlaWdodCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0d2VlbiBhbmQgYWZ0ZXIgMSBzZWNvbmQsIGl0J2Qga2ljayBiYWNrIGluLlxuICAgICAgICAgIGxhenk6IGltbWVkaWF0ZVJlbmRlciAmJiAhcHJldlN0YXJ0QXQgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiBpbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgICAgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyByZW5kZXIgaW1tZWRpYXRlbHkgYnkgZGVmYXVsdCwgYnV0IGlmIHdlJ3JlIG5vdCBzcGVjaWZpY2FsbHkgaW5zdHJ1Y3RlZCB0byByZW5kZXIgdGhpcyB0d2VlbiBpbW1lZGlhdGVseSwgd2Ugc2hvdWxkIHNraXAgdGhpcyBhbmQgbWVyZWx5IF9pbml0KCkgdG8gcmVjb3JkIHRoZSBzdGFydGluZyB2YWx1ZXMgKHJlbmRlcmluZyB0aGVtIGltbWVkaWF0ZWx5IHdvdWxkIHB1c2ggdGhlbSB0byBjb21wbGV0aW9uIHdoaWNoIGlzIHdhc3RlZnVsIGluIHRoYXQgY2FzZSAtIHdlJ2QgaGF2ZSB0byByZW5kZXIoLTEpIGltbWVkaWF0ZWx5IGFmdGVyKVxuICAgICAgICAgIHN0YWdnZXI6IDAsXG4gICAgICAgICAgcGFyZW50OiBwYXJlbnQgLy9lbnN1cmVzIHRoYXQgbmVzdGVkIHR3ZWVucyB0aGF0IGhhZCBhIHN0YWdnZXIgYXJlIGhhbmRsZWQgcHJvcGVybHksIGxpa2UgZ3NhcC5mcm9tKFwiLmNsYXNzXCIsIHt5OiBnc2FwLnV0aWxzLndyYXAoWy0xMDAsMTAwXSksIHN0YWdnZXI6IDAuNX0pXG5cbiAgICAgICAgfSwgY2xlYW5WYXJzKTtcbiAgICAgICAgaGFybmVzc1ZhcnMgJiYgKHBbaGFybmVzcy5wcm9wXSA9IGhhcm5lc3NWYXJzKTsgLy8gaW4gY2FzZSBzb21lb25lIGRvZXMgc29tZXRoaW5nIGxpa2UgLmZyb20oLi4uLCB7Y3NzOnt9fSlcblxuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBwKSk7XG5cbiAgICAgICAgdHdlZW4uX3N0YXJ0QXQuX2RwID0gMDsgLy8gZG9uJ3QgYWxsb3cgaXQgdG8gZ2V0IHB1dCBiYWNrIGludG8gcm9vdCB0aW1lbGluZSFcblxuICAgICAgICB0d2Vlbi5fc3RhcnRBdC5fc2F0ID0gdHdlZW47IC8vIHVzZWQgaW4gZ2xvYmFsVGltZSgpXG5cbiAgICAgICAgdGltZSA8IDAgJiYgKF9yZXZlcnRpbmcgPyB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZ05vS2lsbCkgOiB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpKTtcbiAgICAgICAgdHdlZW4uX3pUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoIWltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICAgIF9pbml0VHdlZW4odHdlZW4uX3N0YXJ0QXQsIF90aW55TnVtLCBfdGlueU51bSk7IC8vZW5zdXJlcyB0aGF0IHRoZSBpbml0aWFsIHZhbHVlcyBhcmUgcmVjb3JkZWRcblxuICAgICAgICB9IGVsc2UgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHdlZW4uX3B0ID0gdHdlZW4uX3B0Q2FjaGUgPSAwO1xuICAgIGxhenkgPSBkdXIgJiYgX2lzTm90RmFsc2UobGF6eSkgfHwgbGF6eSAmJiAhZHVyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRhcmdldCA9IHRhcmdldHNbaV07XG4gICAgICBnc0RhdGEgPSB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModGFyZ2V0cylbaV0uX2dzYXA7XG4gICAgICB0d2Vlbi5fcHRMb29rdXBbaV0gPSBwdExvb2t1cCA9IHt9O1xuICAgICAgX2xhenlMb29rdXBbZ3NEYXRhLmlkXSAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTsgLy9pZiBvdGhlciB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0IGhhdmUgcmVjZW50bHkgaW5pdHRlZCBidXQgaGF2ZW4ndCByZW5kZXJlZCB5ZXQsIHdlJ3ZlIGdvdCB0byBmb3JjZSB0aGUgcmVuZGVyIHNvIHRoYXQgdGhlIHN0YXJ0aW5nIHZhbHVlcyBhcmUgY29ycmVjdCAoaW1hZ2luZSBwb3B1bGF0aW5nIGEgdGltZWxpbmUgd2l0aCBhIGJ1bmNoIG9mIHNlcXVlbnRpYWwgdHdlZW5zIGFuZCB0aGVuIGp1bXBpbmcgdG8gdGhlIGVuZClcblxuICAgICAgaW5kZXggPSBmdWxsVGFyZ2V0cyA9PT0gdGFyZ2V0cyA/IGkgOiBmdWxsVGFyZ2V0cy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgIGlmIChoYXJuZXNzICYmIChwbHVnaW4gPSBuZXcgaGFybmVzcygpKS5pbml0KHRhcmdldCwgaGFybmVzc1ZhcnMgfHwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIGZ1bGxUYXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgdHdlZW4uX3B0ID0gcHQgPSBuZXcgUHJvcFR3ZWVuKHR3ZWVuLl9wdCwgdGFyZ2V0LCBwbHVnaW4ubmFtZSwgMCwgMSwgcGx1Z2luLnJlbmRlciwgcGx1Z2luLCAwLCBwbHVnaW4ucHJpb3JpdHkpO1xuXG4gICAgICAgIHBsdWdpbi5fcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgIHB0TG9va3VwW25hbWVdID0gcHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBsdWdpbi5wcmlvcml0eSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXJuZXNzIHx8IGhhcm5lc3NWYXJzKSB7XG4gICAgICAgIGZvciAocCBpbiBjbGVhblZhcnMpIHtcbiAgICAgICAgICBpZiAoX3BsdWdpbnNbcF0gJiYgKHBsdWdpbiA9IF9jaGVja1BsdWdpbihwLCBjbGVhblZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCBmdWxsVGFyZ2V0cykpKSB7XG4gICAgICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHB0TG9va3VwW3BdID0gcHQgPSBfYWRkUHJvcFR3ZWVuLmNhbGwodHdlZW4sIHRhcmdldCwgcCwgXCJnZXRcIiwgY2xlYW5WYXJzW3BdLCBpbmRleCwgZnVsbFRhcmdldHMsIDAsIHZhcnMuc3RyaW5nRmlsdGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHdlZW4uX29wICYmIHR3ZWVuLl9vcFtpXSAmJiB0d2Vlbi5raWxsKHRhcmdldCwgdHdlZW4uX29wW2ldKTtcblxuICAgICAgaWYgKGF1dG9PdmVyd3JpdGUgJiYgdHdlZW4uX3B0KSB7XG4gICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gdHdlZW47XG5cbiAgICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXQsIHB0TG9va3VwLCB0d2Vlbi5nbG9iYWxUaW1lKHRpbWUpKTsgLy8gbWFrZSBzdXJlIHRoZSBvdmVyd3JpdGluZyBkb2Vzbid0IG92ZXJ3cml0ZSBUSElTIHR3ZWVuISEhXG5cblxuICAgICAgICBvdmVyd3JpdHRlbiA9ICF0d2Vlbi5wYXJlbnQ7XG4gICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICAgIH1cblxuICAgICAgdHdlZW4uX3B0ICYmIGxhenkgJiYgKF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gPSAxKTtcbiAgICB9XG5cbiAgICBoYXNQcmlvcml0eSAmJiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHR3ZWVuKTtcbiAgICB0d2Vlbi5fb25Jbml0ICYmIHR3ZWVuLl9vbkluaXQodHdlZW4pOyAvL3BsdWdpbnMgbGlrZSBSb3VuZFByb3BzIG11c3Qgd2FpdCB1bnRpbCBBTEwgb2YgdGhlIFByb3BUd2VlbnMgYXJlIGluc3RhbnRpYXRlZC4gSW4gdGhlIHBsdWdpbidzIGluaXQoKSBmdW5jdGlvbiwgaXQgc2V0cyB0aGUgX29uSW5pdCBvbiB0aGUgdHdlZW4gaW5zdGFuY2UuIE1heSBub3QgYmUgcHJldHR5L2ludHVpdGl2ZSwgYnV0IGl0J3MgZmFzdCBhbmQga2VlcHMgZmlsZSBzaXplIGRvd24uXG4gIH1cblxuICB0d2Vlbi5fb25VcGRhdGUgPSBvblVwZGF0ZTtcbiAgdHdlZW4uX2luaXR0ZWQgPSAoIXR3ZWVuLl9vcCB8fCB0d2Vlbi5fcHQpICYmICFvdmVyd3JpdHRlbjsgLy8gaWYgb3ZlcndyaXR0ZW5Qcm9wcyByZXN1bHRlZCBpbiB0aGUgZW50aXJlIHR3ZWVuIGJlaW5nIGtpbGxlZCwgZG8gTk9UIGZsYWcgaXQgYXMgaW5pdHRlZCBvciBlbHNlIGl0IG1heSByZW5kZXIgZm9yIG9uZSB0aWNrLlxuXG4gIGtleWZyYW1lcyAmJiB0aW1lIDw9IDAgJiYgdGwucmVuZGVyKF9iaWdOdW0sIHRydWUsIHRydWUpOyAvLyBpZiB0aGVyZSdzIGEgMCUga2V5ZnJhbWUsIGl0J2xsIHJlbmRlciBpbiB0aGUgXCJiZWZvcmVcIiBzdGF0ZSBmb3IgYW55IHN0YWdnZXJlZC9kZWxheWVkIGFuaW1hdGlvbnMgdGh1cyB3aGVuIHRoZSBmb2xsb3dpbmcgdHdlZW4gaW5pdGlhbGl6ZXMsIGl0J2xsIHVzZSB0aGUgXCJiZWZvcmVcIiBzdGF0ZSBpbnN0ZWFkIG9mIHRoZSBcImFmdGVyXCIgc3RhdGUgYXMgdGhlIGluaXRpYWwgdmFsdWVzLlxufSxcbiAgICBfdXBkYXRlUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF91cGRhdGVQcm9wVHdlZW5zKHR3ZWVuLCBwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUsIHJhdGlvLCB0aW1lLCBza2lwUmVjdXJzaW9uKSB7XG4gIHZhciBwdENhY2hlID0gKHR3ZWVuLl9wdCAmJiB0d2Vlbi5fcHRDYWNoZSB8fCAodHdlZW4uX3B0Q2FjaGUgPSB7fSkpW3Byb3BlcnR5XSxcbiAgICAgIHB0LFxuICAgICAgcm9vdFBULFxuICAgICAgbG9va3VwLFxuICAgICAgaTtcblxuICBpZiAoIXB0Q2FjaGUpIHtcbiAgICBwdENhY2hlID0gdHdlZW4uX3B0Q2FjaGVbcHJvcGVydHldID0gW107XG4gICAgbG9va3VwID0gdHdlZW4uX3B0TG9va3VwO1xuICAgIGkgPSB0d2Vlbi5fdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IGxvb2t1cFtpXVtwcm9wZXJ0eV07XG5cbiAgICAgIGlmIChwdCAmJiBwdC5kICYmIHB0LmQuX3B0KSB7XG4gICAgICAgIC8vIGl0J3MgYSBwbHVnaW4sIHNvIGZpbmQgdGhlIG5lc3RlZCBQcm9wVHdlZW5cbiAgICAgICAgcHQgPSBwdC5kLl9wdDtcblxuICAgICAgICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcGVydHkgJiYgcHQuZnAgIT09IHByb3BlcnR5KSB7XG4gICAgICAgICAgLy8gXCJmcFwiIGlzIGZ1bmN0aW9uUGFyYW0gZm9yIHRoaW5ncyBsaWtlIHNldHRpbmcgQ1NTIHZhcmlhYmxlcyB3aGljaCByZXF1aXJlIC5zZXRQcm9wZXJ0eShcIi0tdmFyLW5hbWVcIiwgdmFsdWUpXG4gICAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXB0KSB7XG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIFByb3BUd2VlbiBhc3NvY2lhdGVkIHdpdGggdGhhdCBwcm9wZXJ0eSwgc28gd2UgbXVzdCBGT1JDRSBvbmUgdG8gYmUgY3JlYXRlZCBhbmQgZGl0Y2ggb3V0IG9mIHRoaXNcbiAgICAgICAgLy8gaWYgdGhlIHR3ZWVuIGhhcyBvdGhlciBwcm9wZXJ0aWVzIHRoYXQgYWxyZWFkeSByZW5kZXJlZCBhdCBuZXcgcG9zaXRpb25zLCB3ZSdkIG5vcm1hbGx5IGhhdmUgdG8gcmV3aW5kIHRvIHB1dCB0aGVtIGJhY2sgbGlrZSB0d2Vlbi5yZW5kZXIoMCwgdHJ1ZSkgYmVmb3JlIGZvcmNpbmcgYW4gX2luaXRUd2VlbigpLCBidXQgdGhhdCBjYW4gY3JlYXRlIGFub3RoZXIgZWRnZSBjYXNlIGxpa2UgdHdlZW5pbmcgYSB0aW1lbGluZSdzIHByb2dyZXNzIHdvdWxkIHRyaWdnZXIgb25VcGRhdGVzIHRvIGZpcmUgd2hpY2ggY291bGQgbW92ZSBvdGhlciB0aGluZ3MgYXJvdW5kLiBJdCdzIGJldHRlciB0byBqdXN0IGluZm9ybSB1c2VycyB0aGF0IC5yZXNldFRvKCkgc2hvdWxkIE9OTFkgYmUgdXNlZCBmb3IgdHdlZW5zIHRoYXQgYWxyZWFkeSBoYXZlIHRoYXQgcHJvcGVydHkuIEZvciBleGFtcGxlLCB5b3UgY2FuJ3QgZ3NhcC50byguLi57IHk6IDAgfSkgYW5kIHRoZW4gdHdlZW4ucmVzdFRvKFwieFwiLCAyMDApIGZvciBleGFtcGxlLlxuICAgICAgICBfZm9yY2VBbGxQcm9wVHdlZW5zID0gMTsgLy8gb3RoZXJ3aXNlLCB3aGVuIHdlIF9hZGRQcm9wVHdlZW4oKSBhbmQgaXQgZmluZHMgbm8gY2hhbmdlIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgdmFsdWVzLCBpdCBza2lwcyBjcmVhdGluZyBhIFByb3BUd2VlbiAoZm9yIGVmZmljaWVuY3kuLi53aHkgdHdlZW4gd2hlbiB0aGVyZSdzIG5vIGRpZmZlcmVuY2U/KSBidXQgaW4gdGhpcyBjYXNlIHdlIE5FRUQgdGhhdCBQcm9wVHdlZW4gY3JlYXRlZCBzbyB3ZSBjYW4gZWRpdCBpdC5cblxuICAgICAgICB0d2Vlbi52YXJzW3Byb3BlcnR5XSA9IFwiKz0wXCI7XG5cbiAgICAgICAgX2luaXRUd2Vlbih0d2VlbiwgdGltZSk7XG5cbiAgICAgICAgX2ZvcmNlQWxsUHJvcFR3ZWVucyA9IDA7XG4gICAgICAgIHJldHVybiBza2lwUmVjdXJzaW9uID8gX3dhcm4ocHJvcGVydHkgKyBcIiBub3QgZWxpZ2libGUgZm9yIHJlc2V0XCIpIDogMTsgLy8gaWYgc29tZW9uZSB0cmllcyB0byBkbyBhIHF1aWNrVG8oKSBvbiBhIHNwZWNpYWwgcHJvcGVydHkgbGlrZSBib3JkZXJSYWRpdXMgd2hpY2ggbXVzdCBnZXQgc3BsaXQgaW50byA0IGRpZmZlcmVudCBwcm9wZXJ0aWVzLCB0aGF0J3Mgbm90IGVsaWdpYmxlIGZvciAucmVzZXRUbygpLlxuICAgICAgfVxuXG4gICAgICBwdENhY2hlLnB1c2gocHQpO1xuICAgIH1cbiAgfVxuXG4gIGkgPSBwdENhY2hlLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgcm9vdFBUID0gcHRDYWNoZVtpXTtcbiAgICBwdCA9IHJvb3RQVC5fcHQgfHwgcm9vdFBUOyAvLyBjb21wbGV4IHZhbHVlcyBtYXkgaGF2ZSBuZXN0ZWQgUHJvcFR3ZWVucy4gV2Ugb25seSBhY2NvbW1vZGF0ZSB0aGUgRklSU1QgdmFsdWUuXG5cbiAgICBwdC5zID0gKHN0YXJ0IHx8IHN0YXJ0ID09PSAwKSAmJiAhc3RhcnRJc1JlbGF0aXZlID8gc3RhcnQgOiBwdC5zICsgKHN0YXJ0IHx8IDApICsgcmF0aW8gKiBwdC5jO1xuICAgIHB0LmMgPSB2YWx1ZSAtIHB0LnM7XG4gICAgcm9vdFBULmUgJiYgKHJvb3RQVC5lID0gX3JvdW5kKHZhbHVlKSArIGdldFVuaXQocm9vdFBULmUpKTsgLy8gbWFpbmx5IGZvciBDU1NQbHVnaW4gKGVuZCB2YWx1ZSlcblxuICAgIHJvb3RQVC5iICYmIChyb290UFQuYiA9IHB0LnMgKyBnZXRVbml0KHJvb3RQVC5iKSk7IC8vIChiZWdpbm5pbmcgdmFsdWUpXG4gIH1cbn0sXG4gICAgX2FkZEFsaWFzZXNUb1ZhcnMgPSBmdW5jdGlvbiBfYWRkQWxpYXNlc1RvVmFycyh0YXJnZXRzLCB2YXJzKSB7XG4gIHZhciBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMCxcbiAgICAgIHByb3BlcnR5QWxpYXNlcyA9IGhhcm5lc3MgJiYgaGFybmVzcy5hbGlhc2VzLFxuICAgICAgY29weSxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgYWxpYXNlcztcblxuICBpZiAoIXByb3BlcnR5QWxpYXNlcykge1xuICAgIHJldHVybiB2YXJzO1xuICB9XG5cbiAgY29weSA9IF9tZXJnZSh7fSwgdmFycyk7XG5cbiAgZm9yIChwIGluIHByb3BlcnR5QWxpYXNlcykge1xuICAgIGlmIChwIGluIGNvcHkpIHtcbiAgICAgIGFsaWFzZXMgPSBwcm9wZXJ0eUFsaWFzZXNbcF0uc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IGFsaWFzZXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvcHlbYWxpYXNlc1tpXV0gPSBjb3B5W3BdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICAvLyBwYXJzZXMgbXVsdGlwbGUgZm9ybWF0cywgbGlrZSB7XCIwJVwiOiB7eDogMTAwfSwge1wiNTAlXCI6IHt4OiAtMjB9fSBhbmQgeyB4OiB7XCIwJVwiOiAxMDAsIFwiNTAlXCI6IC0yMH0gfSwgYW5kIGFuIFwiZWFzZVwiIGNhbiBiZSBzZXQgb24gYW55IG9iamVjdC4gV2UgcG9wdWxhdGUgYW4gXCJhbGxQcm9wc1wiIG9iamVjdCB3aXRoIGFuIEFycmF5IGZvciBlYWNoIHByb3BlcnR5LCBsaWtlIHt4OiBbe30sIHt9XSwgeTpbe30sIHt9XX0gd2l0aCBkYXRhIGZvciBlYWNoIHByb3BlcnR5IHR3ZWVuLiBUaGUgb2JqZWN0cyBoYXZlIGEgXCJ0XCIgKHRpbWUpLCBcInZcIiwgKHZhbHVlKSwgYW5kIFwiZVwiIChlYXNlKSBwcm9wZXJ0eS4gVGhpcyBhbGxvd3MgdXMgdG8gcGllY2UgdG9nZXRoZXIgYSB0aW1lbGluZSBsYXRlci5cbl9wYXJzZUtleWZyYW1lID0gZnVuY3Rpb24gX3BhcnNlS2V5ZnJhbWUocHJvcCwgb2JqLCBhbGxQcm9wcywgZWFzZUVhY2gpIHtcbiAgdmFyIGVhc2UgPSBvYmouZWFzZSB8fCBlYXNlRWFjaCB8fCBcInBvd2VyMS5pbk91dFwiLFxuICAgICAgcCxcbiAgICAgIGE7XG5cbiAgaWYgKF9pc0FycmF5KG9iaikpIHtcbiAgICBhID0gYWxsUHJvcHNbcHJvcF0gfHwgKGFsbFByb3BzW3Byb3BdID0gW10pOyAvLyB0ID0gdGltZSAob3V0IG9mIDEwMCksIHYgPSB2YWx1ZSwgZSA9IGVhc2VcblxuICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuICAgICAgcmV0dXJuIGEucHVzaCh7XG4gICAgICAgIHQ6IGkgLyAob2JqLmxlbmd0aCAtIDEpICogMTAwLFxuICAgICAgICB2OiB2YWx1ZSxcbiAgICAgICAgZTogZWFzZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChwIGluIG9iaikge1xuICAgICAgYSA9IGFsbFByb3BzW3BdIHx8IChhbGxQcm9wc1twXSA9IFtdKTtcbiAgICAgIHAgPT09IFwiZWFzZVwiIHx8IGEucHVzaCh7XG4gICAgICAgIHQ6IHBhcnNlRmxvYXQocHJvcCksXG4gICAgICAgIHY6IG9ialtwXSxcbiAgICAgICAgZTogZWFzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9wYXJzZUZ1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9wYXJzZUZ1bmNPclN0cmluZyh2YWx1ZSwgdHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbCh0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSA6IF9pc1N0cmluZyh2YWx1ZSkgJiYgfnZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIpID8gX3JlcGxhY2VSYW5kb20odmFsdWUpIDogdmFsdWU7XG59LFxuICAgIF9zdGFnZ2VyVHdlZW5Qcm9wcyA9IF9jYWxsYmFja05hbWVzICsgXCJyZXBlYXQscmVwZWF0RGVsYXkseW95byxyZXBlYXRSZWZyZXNoLHlveW9FYXNlLGF1dG9SZXZlcnRcIixcbiAgICBfc3RhZ2dlclByb3BzVG9Ta2lwID0ge307XG5cbl9mb3JFYWNoTmFtZShfc3RhZ2dlclR3ZWVuUHJvcHMgKyBcIixpZCxzdGFnZ2VyLGRlbGF5LGR1cmF0aW9uLHBhdXNlZCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfc3RhZ2dlclByb3BzVG9Ta2lwW25hbWVdID0gMTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgVHdlZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRpb24yKSB7XG4gIF9pbmhlcml0c0xvb3NlKFR3ZWVuLCBfQW5pbWF0aW9uMik7XG5cbiAgZnVuY3Rpb24gVHdlZW4odGFyZ2V0cywgdmFycywgcG9zaXRpb24sIHNraXBJbmhlcml0KSB7XG4gICAgdmFyIF90aGlzMztcblxuICAgIGlmICh0eXBlb2YgdmFycyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcG9zaXRpb24uZHVyYXRpb24gPSB2YXJzO1xuICAgICAgdmFycyA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gPSBudWxsO1xuICAgIH1cblxuICAgIF90aGlzMyA9IF9BbmltYXRpb24yLmNhbGwodGhpcywgc2tpcEluaGVyaXQgPyB2YXJzIDogX2luaGVyaXREZWZhdWx0cyh2YXJzKSkgfHwgdGhpcztcbiAgICB2YXIgX3RoaXMzJHZhcnMgPSBfdGhpczMudmFycyxcbiAgICAgICAgZHVyYXRpb24gPSBfdGhpczMkdmFycy5kdXJhdGlvbixcbiAgICAgICAgZGVsYXkgPSBfdGhpczMkdmFycy5kZWxheSxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3RoaXMzJHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBzdGFnZ2VyID0gX3RoaXMzJHZhcnMuc3RhZ2dlcixcbiAgICAgICAgb3ZlcndyaXRlID0gX3RoaXMzJHZhcnMub3ZlcndyaXRlLFxuICAgICAgICBrZXlmcmFtZXMgPSBfdGhpczMkdmFycy5rZXlmcmFtZXMsXG4gICAgICAgIGRlZmF1bHRzID0gX3RoaXMzJHZhcnMuZGVmYXVsdHMsXG4gICAgICAgIHNjcm9sbFRyaWdnZXIgPSBfdGhpczMkdmFycy5zY3JvbGxUcmlnZ2VyLFxuICAgICAgICB5b3lvRWFzZSA9IF90aGlzMyR2YXJzLnlveW9FYXNlLFxuICAgICAgICBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICAgIHBhcnNlZFRhcmdldHMgPSAoX2lzQXJyYXkodGFyZ2V0cykgfHwgX2lzVHlwZWRBcnJheSh0YXJnZXRzKSA/IF9pc051bWJlcih0YXJnZXRzWzBdKSA6IFwibGVuZ3RoXCIgaW4gdmFycykgPyBbdGFyZ2V0c10gOiB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICB0bCxcbiAgICAgICAgaSxcbiAgICAgICAgY29weSxcbiAgICAgICAgbCxcbiAgICAgICAgcCxcbiAgICAgICAgY3VyVGFyZ2V0LFxuICAgICAgICBzdGFnZ2VyRnVuYyxcbiAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlO1xuICAgIF90aGlzMy5fdGFyZ2V0cyA9IHBhcnNlZFRhcmdldHMubGVuZ3RoID8gX2hhcm5lc3MocGFyc2VkVGFyZ2V0cykgOiBfd2FybihcIkdTQVAgdGFyZ2V0IFwiICsgdGFyZ2V0cyArIFwiIG5vdCBmb3VuZC4gaHR0cHM6Ly9nc2FwLmNvbVwiLCAhX2NvbmZpZy5udWxsVGFyZ2V0V2FybikgfHwgW107XG4gICAgX3RoaXMzLl9wdExvb2t1cCA9IFtdOyAvL1Byb3BUd2VlbiBsb29rdXAuIEFuIGFycmF5IGNvbnRhaW5pbmcgYW4gb2JqZWN0IGZvciBlYWNoIHRhcmdldCwgaGF2aW5nIGtleXMgZm9yIGVhY2ggdHdlZW5pbmcgcHJvcGVydHlcblxuICAgIF90aGlzMy5fb3ZlcndyaXRlID0gb3ZlcndyaXRlO1xuXG4gICAgaWYgKGtleWZyYW1lcyB8fCBzdGFnZ2VyIHx8IF9pc0Z1bmNPclN0cmluZyhkdXJhdGlvbikgfHwgX2lzRnVuY09yU3RyaW5nKGRlbGF5KSkge1xuICAgICAgdmFycyA9IF90aGlzMy52YXJzO1xuICAgICAgdGwgPSBfdGhpczMudGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICAgICAgICBkYXRhOiBcIm5lc3RlZFwiLFxuICAgICAgICBkZWZhdWx0czogZGVmYXVsdHMgfHwge30sXG4gICAgICAgIHRhcmdldHM6IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC52YXJzLnRhcmdldHMgOiBwYXJzZWRUYXJnZXRzXG4gICAgICB9KTsgLy8gd2UgbmVlZCB0byBzdG9yZSB0aGUgdGFyZ2V0cyBiZWNhdXNlIGZvciBzdGFnZ2VycyBhbmQga2V5ZnJhbWVzLCB3ZSBlbmQgdXAgY3JlYXRpbmcgYW4gaW5kaXZpZHVhbCB0d2VlbiBmb3IgZWFjaCBidXQgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG5lZWQgdG8ga25vdyB0aGUgaW5kZXggYW5kIHRoZSB3aG9sZSBBcnJheSBvZiB0YXJnZXRzLlxuXG4gICAgICB0bC5raWxsKCk7XG4gICAgICB0bC5wYXJlbnQgPSB0bC5fZHAgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG4gICAgICB0bC5fc3RhcnQgPSAwO1xuXG4gICAgICBpZiAoc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgICAgbCA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuICAgICAgICBzdGFnZ2VyRnVuYyA9IHN0YWdnZXIgJiYgZGlzdHJpYnV0ZShzdGFnZ2VyKTtcblxuICAgICAgICBpZiAoX2lzT2JqZWN0KHN0YWdnZXIpKSB7XG4gICAgICAgICAgLy91c2VycyBjYW4gcGFzcyBpbiBjYWxsYmFja3MgbGlrZSBvblN0YXJ0L29uQ29tcGxldGUgaW4gdGhlIHN0YWdnZXIgb2JqZWN0LiBUaGVzZSBzaG91bGQgZmlyZSB3aXRoIGVhY2ggaW5kaXZpZHVhbCB0d2Vlbi5cbiAgICAgICAgICBmb3IgKHAgaW4gc3RhZ2dlcikge1xuICAgICAgICAgICAgaWYgKH5fc3RhZ2dlclR3ZWVuUHJvcHMuaW5kZXhPZihwKSkge1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgfHwgKHN0YWdnZXJWYXJzVG9NZXJnZSA9IHt9KTtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlW3BdID0gc3RhZ2dlcltwXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY29weSA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9zdGFnZ2VyUHJvcHNUb1NraXApO1xuICAgICAgICAgIGNvcHkuc3RhZ2dlciA9IDA7XG4gICAgICAgICAgeW95b0Vhc2UgJiYgKGNvcHkueW95b0Vhc2UgPSB5b3lvRWFzZSk7XG4gICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlICYmIF9tZXJnZShjb3B5LCBzdGFnZ2VyVmFyc1RvTWVyZ2UpO1xuICAgICAgICAgIGN1clRhcmdldCA9IHBhcnNlZFRhcmdldHNbaV07IC8vZG9uJ3QganVzdCBjb3B5IGR1cmF0aW9uIG9yIGRlbGF5IGJlY2F1c2UgaWYgdGhleSdyZSBhIHN0cmluZyBvciBmdW5jdGlvbiwgd2UnZCBlbmQgdXAgaW4gYW4gaW5maW5pdGUgbG9vcCBiZWNhdXNlIF9pc0Z1bmNPclN0cmluZygpIHdvdWxkIGV2YWx1YXRlIGFzIHRydWUgaW4gdGhlIGNoaWxkIHR3ZWVucywgZW50ZXJpbmcgdGhpcyBsb29wLCBldGMuIFNvIHdlIHBhcnNlIHRoZSB2YWx1ZSBzdHJhaWdodCBmcm9tIHZhcnMgYW5kIGRlZmF1bHQgdG8gMC5cblxuICAgICAgICAgIGNvcHkuZHVyYXRpb24gPSArX3BhcnNlRnVuY09yU3RyaW5nKGR1cmF0aW9uLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cyk7XG4gICAgICAgICAgY29weS5kZWxheSA9ICgrX3BhcnNlRnVuY09yU3RyaW5nKGRlbGF5LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgfHwgMCkgLSBfdGhpczMuX2RlbGF5O1xuXG4gICAgICAgICAgaWYgKCFzdGFnZ2VyICYmIGwgPT09IDEgJiYgY29weS5kZWxheSkge1xuICAgICAgICAgICAgLy8gaWYgc29tZW9uZSBkb2VzIGRlbGF5OlwicmFuZG9tKDEsIDUpXCIsIHJlcGVhdDotMSwgZm9yIGV4YW1wbGUsIHRoZSBkZWxheSBzaG91bGRuJ3QgYmUgaW5zaWRlIHRoZSByZXBlYXQuXG4gICAgICAgICAgICBfdGhpczMuX2RlbGF5ID0gZGVsYXkgPSBjb3B5LmRlbGF5O1xuICAgICAgICAgICAgX3RoaXMzLl9zdGFydCArPSBkZWxheTtcbiAgICAgICAgICAgIGNvcHkuZGVsYXkgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLnRvKGN1clRhcmdldCwgY29weSwgc3RhZ2dlckZ1bmMgPyBzdGFnZ2VyRnVuYyhpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpIDogMCk7XG4gICAgICAgICAgdGwuX2Vhc2UgPSBfZWFzZU1hcC5ub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgdGwuZHVyYXRpb24oKSA/IGR1cmF0aW9uID0gZGVsYXkgPSAwIDogX3RoaXMzLnRpbWVsaW5lID0gMDsgLy8gaWYgdGhlIHRpbWVsaW5lJ3MgZHVyYXRpb24gaXMgMCwgd2UgZG9uJ3QgbmVlZCBhIHRpbWVsaW5lIGludGVybmFsbHkhXG4gICAgICB9IGVsc2UgaWYgKGtleWZyYW1lcykge1xuICAgICAgICBfaW5oZXJpdERlZmF1bHRzKF9zZXREZWZhdWx0cyh0bC52YXJzLmRlZmF1bHRzLCB7XG4gICAgICAgICAgZWFzZTogXCJub25lXCJcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRsLl9lYXNlID0gX3BhcnNlRWFzZShrZXlmcmFtZXMuZWFzZSB8fCB2YXJzLmVhc2UgfHwgXCJub25lXCIpO1xuICAgICAgICB2YXIgdGltZSA9IDAsXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAga2YsXG4gICAgICAgICAgICB2O1xuXG4gICAgICAgIGlmIChfaXNBcnJheShrZXlmcmFtZXMpKSB7XG4gICAgICAgICAga2V5ZnJhbWVzLmZvckVhY2goZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGwudG8ocGFyc2VkVGFyZ2V0cywgZnJhbWUsIFwiPlwiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0bC5kdXJhdGlvbigpOyAvLyB0byBlbnN1cmUgdGwuX2R1ciBpcyBjYWNoZWQgYmVjYXVzZSB3ZSB0YXAgaW50byBpdCBmb3IgcGVyZm9ybWFuY2UgcHVycG9zZXMgaW4gdGhlIHJlbmRlcigpIG1ldGhvZC5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3B5ID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgICAgICBwID09PSBcImVhc2VcIiB8fCBwID09PSBcImVhc2VFYWNoXCIgfHwgX3BhcnNlS2V5ZnJhbWUocCwga2V5ZnJhbWVzW3BdLCBjb3B5LCBrZXlmcmFtZXMuZWFzZUVhY2gpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAocCBpbiBjb3B5KSB7XG4gICAgICAgICAgICBhID0gY29weVtwXS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLnQgLSBiLnQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRpbWUgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBrZiA9IGFbaV07XG4gICAgICAgICAgICAgIHYgPSB7XG4gICAgICAgICAgICAgICAgZWFzZToga2YuZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogKGtmLnQgLSAoaSA/IGFbaSAtIDFdLnQgOiAwKSkgLyAxMDAgKiBkdXJhdGlvblxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB2W3BdID0ga2YudjtcbiAgICAgICAgICAgICAgdGwudG8ocGFyc2VkVGFyZ2V0cywgdiwgdGltZSk7XG4gICAgICAgICAgICAgIHRpbWUgKz0gdi5kdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0bC5kdXJhdGlvbigpIDwgZHVyYXRpb24gJiYgdGwudG8oe30sIHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAtIHRsLmR1cmF0aW9uKClcbiAgICAgICAgICB9KTsgLy8gaW4gY2FzZSBrZXlmcmFtZXMgZGlkbid0IGdvIHRvIDEwMCVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkdXJhdGlvbiB8fCBfdGhpczMuZHVyYXRpb24oZHVyYXRpb24gPSB0bC5kdXJhdGlvbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMzLnRpbWVsaW5lID0gMDsgLy9zcGVlZCBvcHRpbWl6YXRpb24sIGZhc3RlciBsb29rdXBzIChubyBnb2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluKVxuICAgIH1cblxuICAgIGlmIChvdmVyd3JpdGUgPT09IHRydWUgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMpIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpO1xuXG4gICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHBhcnNlZFRhcmdldHMpO1xuXG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUocGFyZW50LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIHBvc2l0aW9uKTtcblxuICAgIHZhcnMucmV2ZXJzZWQgJiYgX3RoaXMzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpczMucGF1c2VkKHRydWUpO1xuXG4gICAgaWYgKGltbWVkaWF0ZVJlbmRlciB8fCAhZHVyYXRpb24gJiYgIWtleWZyYW1lcyAmJiBfdGhpczMuX3N0YXJ0ID09PSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSkgJiYgX2lzTm90RmFsc2UoaW1tZWRpYXRlUmVuZGVyKSAmJiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpKSAmJiBwYXJlbnQuZGF0YSAhPT0gXCJuZXN0ZWRcIikge1xuICAgICAgX3RoaXMzLl90VGltZSA9IC1fdGlueU51bTsgLy9mb3JjZXMgYSByZW5kZXIgd2l0aG91dCBoYXZpbmcgdG8gc2V0IHRoZSByZW5kZXIoKSBcImZvcmNlXCIgcGFyYW1ldGVyIHRvIHRydWUgYmVjYXVzZSB3ZSB3YW50IHRvIGFsbG93IGxhenlpbmcgYnkgZGVmYXVsdCAodXNpbmcgdGhlIFwiZm9yY2VcIiBwYXJhbWV0ZXIgYWx3YXlzIGZvcmNlcyBhbiBpbW1lZGlhdGUgZnVsbCByZW5kZXIpXG5cbiAgICAgIF90aGlzMy5yZW5kZXIoTWF0aC5tYXgoMCwgLWRlbGF5KSB8fCAwKTsgLy9pbiBjYXNlIGRlbGF5IGlzIG5lZ2F0aXZlXG5cbiAgICB9XG5cbiAgICBzY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgc2Nyb2xsVHJpZ2dlcik7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIHZhciBfcHJvdG8zID0gVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX3REdXIsXG4gICAgICAgIGR1ciA9IHRoaXMuX2R1cixcbiAgICAgICAgaXNOZWdhdGl2ZSA9IHRvdGFsVGltZSA8IDAsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lID4gdER1ciAtIF90aW55TnVtICYmICFpc05lZ2F0aXZlID8gdER1ciA6IHRvdGFsVGltZSA8IF90aW55TnVtID8gMCA6IHRvdGFsVGltZSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgcHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgaXNZb3lvLFxuICAgICAgICByYXRpbyxcbiAgICAgICAgdGltZWxpbmUsXG4gICAgICAgIHlveW9FYXNlO1xuXG4gICAgaWYgKCFkdXIpIHtcbiAgICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgfSBlbHNlIGlmICh0VGltZSAhPT0gdGhpcy5fdFRpbWUgfHwgIXRvdGFsVGltZSB8fCBmb3JjZSB8fCAhdGhpcy5faW5pdHRlZCAmJiB0aGlzLl90VGltZSB8fCB0aGlzLl9zdGFydEF0ICYmIHRoaXMuX3pUaW1lIDwgMCAhPT0gaXNOZWdhdGl2ZSkge1xuICAgICAgLy90aGlzIHNlbnNlcyBpZiB3ZSdyZSBjcm9zc2luZyBvdmVyIHRoZSBzdGFydCB0aW1lLCBpbiB3aGljaCBjYXNlIHdlIG11c3QgcmVjb3JkIF96VGltZSBhbmQgZm9yY2UgdGhlIHJlbmRlciwgYnV0IHdlIGRvIGl0IGluIHRoaXMgbGVuZ3RoeSBjb25kaXRpb25hbCB3YXkgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgKHVzdWFsbHkgd2UgY2FuIHNraXAgdGhlIGNhbGN1bGF0aW9ucyk6IHRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuX3pUaW1lIDwgMCkgIT09ICh0b3RhbFRpbWUgPCAwKVxuICAgICAgdGltZSA9IHRUaW1lO1xuICAgICAgdGltZWxpbmUgPSB0aGlzLnRpbWVsaW5lO1xuXG4gICAgICBpZiAodGhpcy5fcmVwZWF0KSB7XG4gICAgICAgIC8vYWRqdXN0IHRoZSB0aW1lIGZvciByZXBlYXRzIGFuZCB5b3lvc1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiBpc05lZ2F0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSBfcm91bmRQcmVjaXNlKHRUaW1lIC8gY3ljbGVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzWW95byA9IHRoaXMuX3lveW8gJiYgaXRlcmF0aW9uICYgMTtcblxuICAgICAgICBpZiAoaXNZb3lvKSB7XG4gICAgICAgICAgeW95b0Vhc2UgPSB0aGlzLl95RWFzZTtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgIGlmICh0aW1lID09PSBwcmV2VGltZSAmJiAhZm9yY2UgJiYgdGhpcy5faW5pdHRlZCAmJiBpdGVyYXRpb24gPT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICAvL2NvdWxkIGJlIGR1cmluZyB0aGUgcmVwZWF0RGVsYXkgcGFydC4gTm8gbmVlZCB0byByZW5kZXIgYW5kIGZpcmUgY2FsbGJhY2tzLlxuICAgICAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICAgICAgdGltZWxpbmUgJiYgdGhpcy5feUVhc2UgJiYgX3Byb3BhZ2F0ZVlveW9FYXNlKHRpbWVsaW5lLCBpc1lveW8pOyAvL3JlcGVhdFJlZnJlc2ggZnVuY3Rpb25hbGl0eVxuXG4gICAgICAgICAgaWYgKHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgIXRoaXMuX2xvY2sgJiYgdGhpcy5fdGltZSAhPT0gY3ljbGVEdXJhdGlvbiAmJiB0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgICAgICAvLyB0aGlzLl90aW1lIHdpbGwgPT09IGN5Y2xlRHVyYXRpb24gd2hlbiB3ZSByZW5kZXIgYXQgRVhBQ1RMWSB0aGUgZW5kIG9mIGFuIGl0ZXJhdGlvbi4gV2l0aG91dCB0aGlzIGNvbmRpdGlvbiwgaXQnZCBvZnRlbiBkbyB0aGUgcmVwZWF0UmVmcmVzaCByZW5kZXIgVFdJQ0UgKGFnYWluIG9uIHRoZSB2ZXJ5IG5leHQgdGljaykuXG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gZm9yY2UgPSAxOyAvL2ZvcmNlLCBvdGhlcndpc2UgaWYgbGF6eSBpcyB0cnVlLCB0aGUgX2F0dGVtcHRJbml0VHdlZW4oKSB3aWxsIHJldHVybiBhbmQgd2UnbGwganVtcCBvdXQgYW5kIGdldCBjYXVnaHQgYm91bmNpbmcgb24gZWFjaCB0aWNrLlxuXG4gICAgICAgICAgICB0aGlzLnJlbmRlcihfcm91bmRQcmVjaXNlKGN5Y2xlRHVyYXRpb24gKiBpdGVyYXRpb24pLCB0cnVlKS5pbnZhbGlkYXRlKCkuX2xvY2sgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgaWYgKF9hdHRlbXB0SW5pdFR3ZWVuKHRoaXMsIGlzTmVnYXRpdmUgPyB0b3RhbFRpbWUgOiB0aW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMsIHRUaW1lKSkge1xuICAgICAgICAgIHRoaXMuX3RUaW1lID0gMDsgLy8gaW4gY29uc3RydWN0b3IgaWYgaW1tZWRpYXRlUmVuZGVyIGlzIHRydWUsIHdlIHNldCBfdFRpbWUgdG8gLV90aW55TnVtIHRvIGhhdmUgdGhlIHBsYXloZWFkIGNyb3NzIHRoZSBzdGFydGluZyBwb2ludCBidXQgd2UgY2FuJ3QgbGVhdmUgX3RUaW1lIGFzIGEgbmVnYXRpdmUgbnVtYmVyLlxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUgJiYgIShmb3JjZSAmJiB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiBpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24pKSB7XG4gICAgICAgICAgLy8gcmFyZSBlZGdlIGNhc2UgLSBkdXJpbmcgaW5pdGlhbGl6YXRpb24sIGFuIG9uVXBkYXRlIGluIHRoZSBfc3RhcnRBdCAoLmZyb21UbygpKSBtaWdodCBmb3JjZSB0aGlzIHR3ZWVuIHRvIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90IGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGRpdGNoIHRoaXMgcmVuZGVyKCkgY2FsbCBzbyB0aGF0IGl0IGRvZXNuJ3QgcmV2ZXJ0IHRoZSB2YWx1ZXMuIEJ1dCB3ZSBhbHNvIGRvbid0IHdhbnQgdG8gZHVtcCBpZiB3ZSdyZSBkb2luZyBhIHJlcGVhdFJlZnJlc2ggcmVuZGVyIVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGR1ciAhPT0gdGhpcy5fZHVyKSB7XG4gICAgICAgICAgLy8gd2hpbGUgaW5pdHRpbmcsIGEgcGx1Z2luIGxpa2UgSW5lcnRpYVBsdWdpbiBtaWdodCBhbHRlciB0aGUgZHVyYXRpb24sIHNvIHJlcnVuIGZyb20gdGhlIHN0YXJ0IHRvIGVuc3VyZSBldmVyeXRoaW5nIHJlbmRlcnMgYXMgaXQgc2hvdWxkLlxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuXG4gICAgICBpZiAoIXRoaXMuX2FjdCAmJiB0aGlzLl90cykge1xuICAgICAgICB0aGlzLl9hY3QgPSAxOyAvL2FzIGxvbmcgYXMgaXQncyBub3QgcGF1c2VkLCBmb3JjZSBpdCB0byBiZSBhY3RpdmUgc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGluZGVwZW5kZW50IG9mIHRoZSBwYXJlbnQgdGltZWxpbmUsIGl0J2xsIGJlIGZvcmNlZCB0byByZS1yZW5kZXIgb24gdGhlIG5leHQgdGljay5cblxuICAgICAgICB0aGlzLl9sYXp5ID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gKHlveW9FYXNlIHx8IHRoaXMuX2Vhc2UpKHRpbWUgLyBkdXIpO1xuXG4gICAgICBpZiAodGhpcy5fZnJvbSkge1xuICAgICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lICYmICFwcmV2VGltZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgIWl0ZXJhdGlvbikge1xuICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gdFRpbWUpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBvblN0YXJ0IHRyaWdnZXJlZCBhIHJlbmRlciBhdCBhIGRpZmZlcmVudCBzcG90LCBlamVjdC4gTGlrZSBpZiBzb21lb25lIGRpZCBhbmltYXRpb24ucGF1c2UoMC41KSBvciBzb21ldGhpbmcgaW5zaWRlIHRoZSBvblN0YXJ0LlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHB0ID0gdGhpcy5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUgJiYgdGltZWxpbmUucmVuZGVyKHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lbGluZS5fZHVyICogdGltZWxpbmUuX2Vhc2UodGltZSAvIHRoaXMuX2R1ciksIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkgfHwgdGhpcy5fc3RhcnRBdCAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuXG4gICAgICBpZiAodGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIGlzTmVnYXRpdmUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpOyAvL25vdGU6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSB0dWNrIHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIGxlc3MgdHJhdmVsZWQgYXJlYXMgKG1vc3QgdHdlZW5zIGRvbid0IGhhdmUgYW4gb25VcGRhdGUpLiBXZSdkIGp1c3QgaGF2ZSBpdCBhdCB0aGUgZW5kIGJlZm9yZSB0aGUgb25Db21wbGV0ZSwgYnV0IHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQgYmVmb3JlIGFueSBvblVwZGF0ZSBpcyBjYWxsZWQsIHNvIHdlIEFMU08gcHV0IGl0IGhlcmUgYW5kIHRoZW4gaWYgaXQncyBub3QgY2FsbGVkLCB3ZSBkbyBzbyBsYXRlciBuZWFyIHRoZSBvbkNvbXBsZXRlLlxuXG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXBlYXQgJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmIHRoaXMudmFycy5vblJlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG5cbiAgICAgIGlmICgodFRpbWUgPT09IHRoaXMuX3REdXIgfHwgIXRUaW1lKSAmJiB0aGlzLl90VGltZSA9PT0gdFRpbWUpIHtcbiAgICAgICAgaXNOZWdhdGl2ZSAmJiAhdGhpcy5fb25VcGRhdGUgJiYgX3Jld2luZFN0YXJ0QXQodGhpcywgdG90YWxUaW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHRoaXMuX3REdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgd2UncmUgcmVuZGVyaW5nIGF0IGV4YWN0bHkgYSB0aW1lIG9mIDAsIGFzIHRoZXJlIGNvdWxkIGJlIGF1dG9SZXZlcnQgdmFsdWVzIHRoYXQgc2hvdWxkIGdldCBzZXQgb24gdGhlIG5leHQgdGljayAoaWYgdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydFRpbWUsIG5lZ2F0aXZlIHRvdGFsVGltZSkuIERvbid0IHJlbW92ZSBpZiB0aGUgdGltZWxpbmUgaXMgcmV2ZXJzZWQgYW5kIHRoZSBwbGF5aGVhZCBpc24ndCBhdCAwLCBvdGhlcndpc2UgdGwucHJvZ3Jlc3MoMSkucmV2ZXJzZSgpIHdvbid0IHdvcmsuIE9ubHkgcmVtb3ZlIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCB0aGUgZW5kIGFuZCB0aW1lU2NhbGUgaXMgcG9zaXRpdmUsIG9yIGlmIHRoZSBwbGF5aGVhZCBpcyBhdCAwIGFuZCB0aGUgdGltZVNjYWxlIGlzIG5lZ2F0aXZlLlxuXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIShpc05lZ2F0aXZlICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8IGlzWW95bykpIHtcbiAgICAgICAgICAvLyBpZiBwcmV2VGltZSBhbmQgdFRpbWUgYXJlIHplcm8sIHdlIHNob3VsZG4ndCBmaXJlIHRoZSBvblJldmVyc2VDb21wbGV0ZS4gVGhpcyBjb3VsZCBoYXBwZW4gaWYgeW91IGdzYXAudG8oLi4uIHtwYXVzZWQ6dHJ1ZX0pLnBsYXkoKTtcbiAgICAgICAgICBfY2FsbGJhY2sodGhpcywgdFRpbWUgPT09IHREdXIgPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICB0aGlzLl9wcm9tICYmICEodFRpbWUgPCB0RHVyICYmIHRoaXMudGltZVNjYWxlKCkgPiAwKSAmJiB0aGlzLl9wcm9tKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8zLnRhcmdldHMgPSBmdW5jdGlvbiB0YXJnZXRzKCkge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXRzO1xuICB9O1xuXG4gIF9wcm90bzMuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoc29mdCkge1xuICAgIC8vIFwic29mdFwiIGdpdmVzIHVzIGEgd2F5IHRvIGNsZWFyIG91dCBldmVyeXRoaW5nIEVYQ0VQVCB0aGUgcmVjb3JkZWQgcHJlLVwiZnJvbVwiIHBvcnRpb24gb2YgZnJvbSgpIHR3ZWVucy4gT3RoZXJ3aXNlLCBmb3IgZXhhbXBsZSwgaWYgeW91IHR3ZWVuLnByb2dyZXNzKDEpLnJlbmRlcigwLCB0cnVlIHRydWUpLmludmFsaWRhdGUoKSwgdGhlIFwiZnJvbVwiIHZhbHVlcyB3b3VsZCBwZXJzaXN0IGFuZCB0aGVuIG9uIHRoZSBuZXh0IHJlbmRlciwgdGhlIGZyb20oKSB0d2VlbnMgd291bGQgaW5pdGlhbGl6ZSBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgd291bGQgbWF0Y2ggdGhlIFwiZnJvbVwiIHZhbHVlcywgdGh1cyBhbmltYXRlIGZyb20gdGhlIHNhbWUgdmFsdWUgdG8gdGhlIHNhbWUgdmFsdWUgKG5vIGFuaW1hdGlvbikuIFdlIHRhcCBpbnRvIHRoaXMgaW4gU2Nyb2xsVHJpZ2dlcidzIHJlZnJlc2goKSB3aGVyZSB3ZSBtdXN0IHB1c2ggYSB0d2VlbiB0byBjb21wbGV0aW9uIGFuZCB0aGVuIGJhY2sgYWdhaW4gYnV0IGhvbm9yIGl0cyBpbml0IHN0YXRlIGluIGNhc2UgdGhlIHR3ZWVuIGlzIGRlcGVuZGVudCBvbiBhbm90aGVyIHR3ZWVuIGZ1cnRoZXIgdXAgb24gdGhlIHBhZ2UuXG4gICAgKCFzb2Z0IHx8ICF0aGlzLnZhcnMucnVuQmFja3dhcmRzKSAmJiAodGhpcy5fc3RhcnRBdCA9IDApO1xuICAgIHRoaXMuX3B0ID0gdGhpcy5fb3AgPSB0aGlzLl9vblVwZGF0ZSA9IHRoaXMuX2xhenkgPSB0aGlzLnJhdGlvID0gMDtcbiAgICB0aGlzLl9wdExvb2t1cCA9IFtdO1xuICAgIHRoaXMudGltZWxpbmUgJiYgdGhpcy50aW1lbGluZS5pbnZhbGlkYXRlKHNvZnQpO1xuICAgIHJldHVybiBfQW5pbWF0aW9uMi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMsIHNvZnQpO1xuICB9O1xuXG4gIF9wcm90bzMucmVzZXRUbyA9IGZ1bmN0aW9uIHJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCBza2lwUmVjdXJzaW9uKSB7XG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgICB0aGlzLl90cyB8fCB0aGlzLnBsYXkoKTtcbiAgICB2YXIgdGltZSA9IE1hdGgubWluKHRoaXMuX2R1ciwgKHRoaXMuX2RwLl90aW1lIC0gdGhpcy5fc3RhcnQpICogdGhpcy5fdHMpLFxuICAgICAgICByYXRpbztcbiAgICB0aGlzLl9pbml0dGVkIHx8IF9pbml0VHdlZW4odGhpcywgdGltZSk7XG4gICAgcmF0aW8gPSB0aGlzLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpOyAvLyBkb24ndCBqdXN0IGdldCB0d2Vlbi5yYXRpbyBiZWNhdXNlIGl0IG1heSBub3QgaGF2ZSByZW5kZXJlZCB5ZXQuXG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGFkZGl0aW9uIHRvIGFsbG93IGFuIG9iamVjdCB3aXRoIG11bHRpcGxlIHZhbHVlcyB0byB1cGRhdGUsIGxpa2UgdHdlZW4ucmVzZXRUbyh7eDogMTAwLCB5OiAyMDB9KTsgQXQgdGhpcyBwb2ludCwgaXQgZG9lc24ndCBzZWVtIHdvcnRoIHRoZSBhZGRlZCBrYiBnaXZlbiB0aGUgZmFjdCB0aGF0IG1vc3QgdXNlcnMgd2lsbCBsaWtlbHkgb3B0IGZvciB0aGUgY29udmVuaWVudCBnc2FwLnF1aWNrVG8oKSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCB0aGlzIG1ldGhvZC5cbiAgICAvLyBpZiAoX2lzT2JqZWN0KHByb3BlcnR5KSkgeyAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cbiAgICAvLyBcdGZvciAocCBpbiBwcm9wZXJ0eSkge1xuICAgIC8vIFx0XHRpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcCwgcHJvcGVydHlbcF0sIHZhbHVlID8gdmFsdWVbcF0gOiBudWxsLCBzdGFydCwgcmF0aW8sIHRpbWUpKSB7XG4gICAgLy8gXHRcdFx0cmV0dXJuIHRoaXMucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpOyAvLyBpZiBhIFByb3BUd2VlbiB3YXNuJ3QgZm91bmQgZm9yIHRoZSBwcm9wZXJ0eSwgaXQnbGwgZ2V0IGZvcmNlZCB3aXRoIGEgcmUtaW5pdGlhbGl6YXRpb24gc28gd2UgbmVlZCB0byBqdW1wIG91dCBhbmQgc3RhcnQgb3ZlciBhZ2Fpbi5cbiAgICAvLyBcdFx0fVxuICAgIC8vIFx0fVxuICAgIC8vIH0gZWxzZSB7XG5cbiAgICBpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSwgc2tpcFJlY3Vyc2lvbikpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCAxKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgfSAvL31cblxuXG4gICAgX2FsaWduUGxheWhlYWQodGhpcywgMCk7XG5cbiAgICB0aGlzLnBhcmVudCB8fCBfYWRkTGlua2VkTGlzdEl0ZW0odGhpcy5fZHAsIHRoaXMsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGhpcy5fZHAuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKDApO1xuICB9O1xuXG4gIF9wcm90bzMua2lsbCA9IGZ1bmN0aW9uIGtpbGwodGFyZ2V0cywgdmFycykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSBcImFsbFwiO1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0cyAmJiAoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikpIHtcbiAgICAgIHRoaXMuX2xhenkgPSB0aGlzLl9wdCA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyBfaW50ZXJydXB0KHRoaXMpIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy50aW1lbGluZSkge1xuICAgICAgdmFyIHREdXIgPSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKTtcbiAgICAgIHRoaXMudGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHZhcnMsIF9vdmVyd3JpdGluZ1R3ZWVuICYmIF9vdmVyd3JpdGluZ1R3ZWVuLnZhcnMub3ZlcndyaXRlICE9PSB0cnVlKS5fZmlyc3QgfHwgX2ludGVycnVwdCh0aGlzKTsgLy8gaWYgbm90aGluZyBpcyBsZWZ0IHR3ZWVuaW5nLCBpbnRlcnJ1cHQuXG5cbiAgICAgIHRoaXMucGFyZW50ICYmIHREdXIgIT09IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpICYmIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9kdXIgKiB0aGlzLnRpbWVsaW5lLl90RHVyIC8gdER1ciwgMCwgMSk7IC8vIGlmIGEgbmVzdGVkIHR3ZWVuIGlzIGtpbGxlZCB0aGF0IGNoYW5nZXMgdGhlIGR1cmF0aW9uLCBpdCBzaG91bGQgYWZmZWN0IHRoaXMgdHdlZW4ncyBkdXJhdGlvbi4gV2UgbXVzdCB1c2UgdGhlIHJhdGlvLCB0aG91Z2gsIGJlY2F1c2Ugc29tZXRpbWVzIHRoZSBpbnRlcm5hbCB0aW1lbGluZSBpcyBzdHJldGNoZWQgbGlrZSBmb3Iga2V5ZnJhbWVzIHdoZXJlIHRoZXkgZG9uJ3QgYWxsIGFkZCB1cCB0byB3aGF0ZXZlciB0aGUgcGFyZW50IHR3ZWVuJ3MgZHVyYXRpb24gd2FzIHNldCB0by5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZFRhcmdldHMgPSB0aGlzLl90YXJnZXRzLFxuICAgICAgICBraWxsaW5nVGFyZ2V0cyA9IHRhcmdldHMgPyB0b0FycmF5KHRhcmdldHMpIDogcGFyc2VkVGFyZ2V0cyxcbiAgICAgICAgcHJvcFR3ZWVuTG9va3VwID0gdGhpcy5fcHRMb29rdXAsXG4gICAgICAgIGZpcnN0UFQgPSB0aGlzLl9wdCxcbiAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wcyxcbiAgICAgICAgY3VyTG9va3VwLFxuICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHAsXG4gICAgICAgIHB0LFxuICAgICAgICBpO1xuXG4gICAgaWYgKCghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSAmJiBfYXJyYXlzTWF0Y2gocGFyc2VkVGFyZ2V0cywga2lsbGluZ1RhcmdldHMpKSB7XG4gICAgICB2YXJzID09PSBcImFsbFwiICYmICh0aGlzLl9wdCA9IDApO1xuICAgICAgcmV0dXJuIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgfVxuXG4gICAgb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX29wID0gdGhpcy5fb3AgfHwgW107XG5cbiAgICBpZiAodmFycyAhPT0gXCJhbGxcIikge1xuICAgICAgLy9zbyBwZW9wbGUgY2FuIHBhc3MgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICBwID0ge307XG5cbiAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHBbbmFtZV0gPSAxO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXJzID0gcDtcbiAgICAgIH1cblxuICAgICAgdmFycyA9IF9hZGRBbGlhc2VzVG9WYXJzKHBhcnNlZFRhcmdldHMsIHZhcnMpO1xuICAgIH1cblxuICAgIGkgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICh+a2lsbGluZ1RhcmdldHMuaW5kZXhPZihwYXJzZWRUYXJnZXRzW2ldKSkge1xuICAgICAgICBjdXJMb29rdXAgPSBwcm9wVHdlZW5Mb29rdXBbaV07XG5cbiAgICAgICAgaWYgKHZhcnMgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgICBvdmVyd3JpdHRlblByb3BzW2ldID0gdmFycztcbiAgICAgICAgICBwcm9wcyA9IGN1ckxvb2t1cDtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gfHwge307XG4gICAgICAgICAgcHJvcHMgPSB2YXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChwIGluIHByb3BzKSB7XG4gICAgICAgICAgcHQgPSBjdXJMb29rdXAgJiYgY3VyTG9va3VwW3BdO1xuXG4gICAgICAgICAgaWYgKHB0KSB7XG4gICAgICAgICAgICBpZiAoIShcImtpbGxcIiBpbiBwdC5kKSB8fCBwdC5kLmtpbGwocCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIGN1ckxvb2t1cFtwXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VyT3ZlcndyaXRlUHJvcHMgIT09IFwiYWxsXCIpIHtcbiAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzW3BdID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0dGVkICYmICF0aGlzLl9wdCAmJiBmaXJzdFBUICYmIF9pbnRlcnJ1cHQodGhpcyk7IC8vaWYgYWxsIHR3ZWVuaW5nIHByb3BlcnRpZXMgYXJlIGtpbGxlZCwga2lsbCB0aGUgdHdlZW4uIFdpdGhvdXQgdGhpcyBsaW5lLCBpZiB0aGVyZSdzIGEgdHdlZW4gd2l0aCBtdWx0aXBsZSB0YXJnZXRzIGFuZCB0aGVuIHlvdSBraWxsVHdlZW5zT2YoKSBlYWNoIHRhcmdldCBpbmRpdmlkdWFsbHksIHRoZSB0d2VlbiB3b3VsZCB0ZWNobmljYWxseSBzdGlsbCByZW1haW4gYWN0aXZlIGFuZCBmaXJlIGl0cyBvbkNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBwcm9wZXJ0aWVzIHR3ZWVuaW5nLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgVHdlZW4udG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBhcmd1bWVudHNbMl0pO1xuICB9O1xuXG4gIFR3ZWVuLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24gZGVsYXllZENhbGwoZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBUd2VlbihjYWxsYmFjaywgMCwge1xuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgIG9uQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25Db21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIGNhbGxiYWNrU2NvcGU6IHNjb3BlXG4gICAgfSk7IC8vIHdlIG11c3QgdXNlIG9uUmV2ZXJzZUNvbXBsZXRlIHRvbyBmb3IgdGhpbmdzIGxpa2UgdGltZWxpbmUuYWRkKCgpID0+IHsuLi59KSB3aGljaCBzaG91bGQgYmUgdHJpZ2dlcmVkIGluIEJPVEggZGlyZWN0aW9ucyAoZm9yd2FyZCBhbmQgcmV2ZXJzZSlcbiAgfTtcblxuICBUd2Vlbi5mcm9tVG8gPSBmdW5jdGlvbiBmcm9tVG8odGFyZ2V0cywgZnJvbVZhcnMsIHRvVmFycykge1xuICAgIHJldHVybiBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgVHdlZW4uc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMpIHtcbiAgICB2YXJzLmR1cmF0aW9uID0gMDtcbiAgICB2YXJzLnJlcGVhdERlbGF5IHx8ICh2YXJzLnJlcGVhdCA9IDApO1xuICAgIHJldHVybiBuZXcgVHdlZW4odGFyZ2V0cywgdmFycyk7XG4gIH07XG5cbiAgVHdlZW4ua2lsbFR3ZWVuc09mID0gZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpO1xuICB9O1xuXG4gIHJldHVybiBUd2Vlbjtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFR3ZWVuLnByb3RvdHlwZSwge1xuICBfdGFyZ2V0czogW10sXG4gIF9sYXp5OiAwLFxuICBfc3RhcnRBdDogMCxcbiAgX29wOiAwLFxuICBfb25Jbml0OiAwXG59KTsgLy9hZGQgdGhlIHBlcnRpbmVudCB0aW1lbGluZSBtZXRob2RzIHRvIFR3ZWVuIGluc3RhbmNlcyBzbyB0aGF0IHVzZXJzIGNhbiBjaGFpbiBjb252ZW5pZW50bHkgYW5kIGNyZWF0ZSBhIHRpbWVsaW5lIGF1dG9tYXRpY2FsbHkuIChyZW1vdmVkIGR1ZSB0byBjb25jZXJucyB0aGF0IGl0J2QgdWx0aW1hdGVseSBhZGQgdG8gbW9yZSBjb25mdXNpb24gZXNwZWNpYWxseSBmb3IgYmVnaW5uZXJzKVxuLy8gX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sc2V0LGNhbGwsYWRkLGFkZExhYmVsLGFkZFBhdXNlXCIsIG5hbWUgPT4ge1xuLy8gXHRUd2Vlbi5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbi8vIFx0XHRsZXQgdGwgPSBuZXcgVGltZWxpbmUoKTtcbi8vIFx0XHRyZXR1cm4gX2FkZFRvVGltZWxpbmUodGwsIHRoaXMpW25hbWVdLmFwcGx5KHRsLCB0b0FycmF5KGFyZ3VtZW50cykpO1xuLy8gXHR9XG4vLyB9KTtcbi8vZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuIExldmVyYWdlIHRoZSB0aW1lbGluZSBjYWxscy5cblxuXG5fZm9yRWFjaE5hbWUoXCJzdGFnZ2VyVG8sc3RhZ2dlckZyb20sc3RhZ2dlckZyb21Ub1wiLCBmdW5jdGlvbiAobmFtZSkge1xuICBUd2VlbltuYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUoKSxcbiAgICAgICAgcGFyYW1zID0gX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHBhcmFtcy5zcGxpY2UobmFtZSA9PT0gXCJzdGFnZ2VyRnJvbVRvXCIgPyA1IDogNCwgMCwgMCk7XG4gICAgcmV0dXJuIHRsW25hbWVdLmFwcGx5KHRsLCBwYXJhbXMpO1xuICB9O1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFBST1BUV0VFTlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbnZhciBfc2V0dGVyUGxhaW4gPSBmdW5jdGlvbiBfc2V0dGVyUGxhaW4odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckZ1bmMgPSBmdW5jdGlvbiBfc2V0dGVyRnVuYyh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSh2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJGdW5jV2l0aFBhcmFtID0gZnVuY3Rpb24gX3NldHRlckZ1bmNXaXRoUGFyYW0odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0oZGF0YS5mcCwgdmFsdWUpO1xufSxcbiAgICBfc2V0dGVyQXR0cmlidXRlID0gZnVuY3Rpb24gX3NldHRlckF0dHJpYnV0ZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnNldEF0dHJpYnV0ZShwcm9wZXJ0eSwgdmFsdWUpO1xufSxcbiAgICBfZ2V0U2V0dGVyID0gZnVuY3Rpb24gX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih0YXJnZXRbcHJvcGVydHldKSA/IF9zZXR0ZXJGdW5jIDogX2lzVW5kZWZpbmVkKHRhcmdldFtwcm9wZXJ0eV0pICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUgPyBfc2V0dGVyQXR0cmlidXRlIDogX3NldHRlclBsYWluO1xufSxcbiAgICBfcmVuZGVyUGxhaW4gPSBmdW5jdGlvbiBfcmVuZGVyUGxhaW4ocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMDAwKSAvIDEwMDAwMDAsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyQm9vbGVhbiA9IGZ1bmN0aW9uIF9yZW5kZXJCb29sZWFuKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgISEoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNvbXBsZXhTdHJpbmcgPSBmdW5jdGlvbiBfcmVuZGVyQ29tcGxleFN0cmluZyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdCxcbiAgICAgIHMgPSBcIlwiO1xuXG4gIGlmICghcmF0aW8gJiYgZGF0YS5iKSB7XG4gICAgLy9iID0gYmVnaW5uaW5nIHN0cmluZ1xuICAgIHMgPSBkYXRhLmI7XG4gIH0gZWxzZSBpZiAocmF0aW8gPT09IDEgJiYgZGF0YS5lKSB7XG4gICAgLy9lID0gZW5kaW5nIHN0cmluZ1xuICAgIHMgPSBkYXRhLmU7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBzID0gcHQucCArIChwdC5tID8gcHQubShwdC5zICsgcHQuYyAqIHJhdGlvKSA6IE1hdGgucm91bmQoKHB0LnMgKyBwdC5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDApICsgczsgLy93ZSB1c2UgdGhlIFwicFwiIHByb3BlcnR5IGZvciB0aGUgdGV4dCBpbmJldHdlZW4gKGxpa2UgYSBzdWZmaXgpLiBBbmQgaW4gdGhlIGNvbnRleHQgb2YgYSBjb21wbGV4IHN0cmluZywgdGhlIG1vZGlmaWVyIChtKSBpcyB0eXBpY2FsbHkganVzdCBNYXRoLnJvdW5kKCksIGxpa2UgZm9yIFJHQiBjb2xvcnMuXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgcyArPSBkYXRhLmM7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBjaHVuayBvZiBub24tbnVtZXJpYyB0ZXh0LlxuICB9XG5cbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHMsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF9yZW5kZXJQcm9wVHdlZW5zKHJhdGlvLCBkYXRhKSB7XG4gIHZhciBwdCA9IGRhdGEuX3B0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cbn0sXG4gICAgX2FkZFBsdWdpbk1vZGlmaWVyID0gZnVuY3Rpb24gX2FkZFBsdWdpbk1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgIG5leHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuICAgIHB0LnAgPT09IHByb3BlcnR5ICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0KTtcbiAgICBwdCA9IG5leHQ7XG4gIH1cbn0sXG4gICAgX2tpbGxQcm9wVHdlZW5zT2YgPSBmdW5jdGlvbiBfa2lsbFByb3BUd2VlbnNPZihwcm9wZXJ0eSkge1xuICB2YXIgcHQgPSB0aGlzLl9wdCxcbiAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyxcbiAgICAgIG5leHQ7XG5cbiAgd2hpbGUgKHB0KSB7XG4gICAgbmV4dCA9IHB0Ll9uZXh0O1xuXG4gICAgaWYgKHB0LnAgPT09IHByb3BlcnR5ICYmICFwdC5vcCB8fCBwdC5vcCA9PT0gcHJvcGVydHkpIHtcbiAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBwdCwgXCJfcHRcIik7XG4gICAgfSBlbHNlIGlmICghcHQuZGVwKSB7XG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcgPSAxO1xuICAgIH1cblxuICAgIHB0ID0gbmV4dDtcbiAgfVxuXG4gIHJldHVybiAhaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nO1xufSxcbiAgICBfc2V0dGVyV2l0aE1vZGlmaWVyID0gZnVuY3Rpb24gX3NldHRlcldpdGhNb2RpZmllcih0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgZGF0YSkge1xuICBkYXRhLm1TZXQodGFyZ2V0LCBwcm9wZXJ0eSwgZGF0YS5tLmNhbGwoZGF0YS50d2VlbiwgdmFsdWUsIGRhdGEubXQpLCBkYXRhKTtcbn0sXG4gICAgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSA9IGZ1bmN0aW9uIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkocGFyZW50KSB7XG4gIHZhciBwdCA9IHBhcmVudC5fcHQsXG4gICAgICBuZXh0LFxuICAgICAgcHQyLFxuICAgICAgZmlyc3QsXG4gICAgICBsYXN0OyAvL3NvcnRzIHRoZSBQcm9wVHdlZW4gbGlua2VkIGxpc3QgaW4gb3JkZXIgb2YgcHJpb3JpdHkgYmVjYXVzZSBzb21lIHBsdWdpbnMgbmVlZCB0byBkbyB0aGVpciB3b3JrIGFmdGVyIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyB3ZXJlIGNyZWF0ZWQgKGxpa2UgUm91bmRQcm9wc1BsdWdpbiBhbmQgTW9kaWZpZXJzUGx1Z2luKVxuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdDIgPSBmaXJzdDtcblxuICAgIHdoaWxlIChwdDIgJiYgcHQyLnByID4gcHQucHIpIHtcbiAgICAgIHB0MiA9IHB0Mi5fbmV4dDtcbiAgICB9XG5cbiAgICBpZiAocHQuX3ByZXYgPSBwdDIgPyBwdDIuX3ByZXYgOiBsYXN0KSB7XG4gICAgICBwdC5fcHJldi5fbmV4dCA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXJzdCA9IHB0O1xuICAgIH1cblxuICAgIGlmIChwdC5fbmV4dCA9IHB0Mikge1xuICAgICAgcHQyLl9wcmV2ID0gcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3QgPSBwdDtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICBwYXJlbnQuX3B0ID0gZmlyc3Q7XG59OyAvL1Byb3BUd2VlbiBrZXk6IHQgPSB0YXJnZXQsIHAgPSBwcm9wLCByID0gcmVuZGVyZXIsIGQgPSBkYXRhLCBzID0gc3RhcnQsIGMgPSBjaGFuZ2UsIG9wID0gb3ZlcndyaXRlUHJvcGVydHkgKE9OTFkgcG9wdWxhdGVkIHdoZW4gaXQncyBkaWZmZXJlbnQgdGhhbiBwKSwgcHIgPSBwcmlvcml0eSwgX25leHQvX3ByZXYgZm9yIHRoZSBsaW5rZWQgbGlzdCBzaWJsaW5ncywgc2V0ID0gc2V0dGVyLCBtID0gbW9kaWZpZXIsIG1TZXQgPSBtb2RpZmllclNldHRlciAodGhlIG9yaWdpbmFsIHNldHRlciwgYmVmb3JlIGEgbW9kaWZpZXIgd2FzIGFkZGVkKVxuXG5cbmV4cG9ydCB2YXIgUHJvcFR3ZWVuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJvcFR3ZWVuKG5leHQsIHRhcmdldCwgcHJvcCwgc3RhcnQsIGNoYW5nZSwgcmVuZGVyZXIsIGRhdGEsIHNldHRlciwgcHJpb3JpdHkpIHtcbiAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgdGhpcy5zID0gc3RhcnQ7XG4gICAgdGhpcy5jID0gY2hhbmdlO1xuICAgIHRoaXMucCA9IHByb3A7XG4gICAgdGhpcy5yID0gcmVuZGVyZXIgfHwgX3JlbmRlclBsYWluO1xuICAgIHRoaXMuZCA9IGRhdGEgfHwgdGhpcztcbiAgICB0aGlzLnNldCA9IHNldHRlciB8fCBfc2V0dGVyUGxhaW47XG4gICAgdGhpcy5wciA9IHByaW9yaXR5IHx8IDA7XG4gICAgdGhpcy5fbmV4dCA9IG5leHQ7XG5cbiAgICBpZiAobmV4dCkge1xuICAgICAgbmV4dC5fcHJldiA9IHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90bzQgPSBQcm9wVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzQubW9kaWZpZXIgPSBmdW5jdGlvbiBtb2RpZmllcihmdW5jLCB0d2VlbiwgdGFyZ2V0KSB7XG4gICAgdGhpcy5tU2V0ID0gdGhpcy5tU2V0IHx8IHRoaXMuc2V0OyAvL2luIGNhc2UgaXQgd2FzIGFscmVhZHkgc2V0IChhIFByb3BUd2VlbiBjYW4gb25seSBoYXZlIG9uZSBtb2RpZmllcilcblxuICAgIHRoaXMuc2V0ID0gX3NldHRlcldpdGhNb2RpZmllcjtcbiAgICB0aGlzLm0gPSBmdW5jO1xuICAgIHRoaXMubXQgPSB0YXJnZXQ7IC8vbW9kaWZpZXIgdGFyZ2V0XG5cbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG4gIH07XG5cbiAgcmV0dXJuIFByb3BUd2Vlbjtcbn0oKTsgLy9Jbml0aWFsaXphdGlvbiB0YXNrc1xuXG5fZm9yRWFjaE5hbWUoX2NhbGxiYWNrTmFtZXMgKyBcInBhcmVudCxkdXJhdGlvbixlYXNlLGRlbGF5LG92ZXJ3cml0ZSxydW5CYWNrd2FyZHMsc3RhcnRBdCx5b3lvLGltbWVkaWF0ZVJlbmRlcixyZXBlYXQscmVwZWF0RGVsYXksZGF0YSxwYXVzZWQscmV2ZXJzZWQsbGF6eSxjYWxsYmFja1Njb3BlLHN0cmluZ0ZpbHRlcixpZCx5b3lvRWFzZSxzdGFnZ2VyLGluaGVyaXQscmVwZWF0UmVmcmVzaCxrZXlmcmFtZXMsYXV0b1JldmVydCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG59KTtcblxuX2dsb2JhbHMuVHdlZW5NYXggPSBfZ2xvYmFscy5Ud2VlbkxpdGUgPSBUd2Vlbjtcbl9nbG9iYWxzLlRpbWVsaW5lTGl0ZSA9IF9nbG9iYWxzLlRpbWVsaW5lTWF4ID0gVGltZWxpbmU7XG5fZ2xvYmFsVGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICBzb3J0Q2hpbGRyZW46IGZhbHNlLFxuICBkZWZhdWx0czogX2RlZmF1bHRzLFxuICBhdXRvUmVtb3ZlQ2hpbGRyZW46IHRydWUsXG4gIGlkOiBcInJvb3RcIixcbiAgc21vb3RoQ2hpbGRUaW1pbmc6IHRydWVcbn0pO1xuX2NvbmZpZy5zdHJpbmdGaWx0ZXIgPSBfY29sb3JTdHJpbmdGaWx0ZXI7XG5cbnZhciBfbWVkaWEgPSBbXSxcbiAgICBfbGlzdGVuZXJzID0ge30sXG4gICAgX2VtcHR5QXJyYXkgPSBbXSxcbiAgICBfbGFzdE1lZGlhVGltZSA9IDAsXG4gICAgX2NvbnRleHRJRCA9IDAsXG4gICAgX2Rpc3BhdGNoID0gZnVuY3Rpb24gX2Rpc3BhdGNoKHR5cGUpIHtcbiAgcmV0dXJuIChfbGlzdGVuZXJzW3R5cGVdIHx8IF9lbXB0eUFycmF5KS5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZigpO1xuICB9KTtcbn0sXG4gICAgX29uTWVkaWFDaGFuZ2UgPSBmdW5jdGlvbiBfb25NZWRpYUNoYW5nZSgpIHtcbiAgdmFyIHRpbWUgPSBEYXRlLm5vdygpLFxuICAgICAgbWF0Y2hlcyA9IFtdO1xuXG4gIGlmICh0aW1lIC0gX2xhc3RNZWRpYVRpbWUgPiAyKSB7XG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYUluaXRcIik7XG5cbiAgICBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIHF1ZXJpZXMgPSBjLnF1ZXJpZXMsXG4gICAgICAgICAgY29uZGl0aW9ucyA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICBwLFxuICAgICAgICAgIGFueU1hdGNoLFxuICAgICAgICAgIHRvZ2dsZWQ7XG5cbiAgICAgIGZvciAocCBpbiBxdWVyaWVzKSB7XG4gICAgICAgIG1hdGNoID0gX3dpbi5tYXRjaE1lZGlhKHF1ZXJpZXNbcF0pLm1hdGNoZXM7IC8vIEZpcmVmb3ggZG9lc24ndCB1cGRhdGUgdGhlIFwibWF0Y2hlc1wiIHByb3BlcnR5IG9mIHRoZSBNZWRpYVF1ZXJ5TGlzdCBvYmplY3QgY29ycmVjdGx5IC0gaXQgb25seSBkb2VzIHNvIGFzIGl0IGNhbGxzIGl0cyBjaGFuZ2UgaGFuZGxlciAtIHNvIHdlIG11c3QgcmUtY3JlYXRlIGEgbWVkaWEgcXVlcnkgaGVyZSB0byBlbnN1cmUgaXQncyBhY2N1cmF0ZS5cblxuICAgICAgICBtYXRjaCAmJiAoYW55TWF0Y2ggPSAxKTtcblxuICAgICAgICBpZiAobWF0Y2ggIT09IGNvbmRpdGlvbnNbcF0pIHtcbiAgICAgICAgICBjb25kaXRpb25zW3BdID0gbWF0Y2g7XG4gICAgICAgICAgdG9nZ2xlZCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRvZ2dsZWQpIHtcbiAgICAgICAgYy5yZXZlcnQoKTtcbiAgICAgICAgYW55TWF0Y2ggJiYgbWF0Y2hlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVJldmVydFwiKTtcblxuICAgIG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMub25NYXRjaChjLCBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICByZXR1cm4gYy5hZGQobnVsbCwgZnVuYyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG5cbiAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhXCIpO1xuICB9XG59O1xuXG52YXIgQ29udGV4dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICB0aGlzLnNlbGVjdG9yID0gc2NvcGUgJiYgc2VsZWN0b3Ioc2NvcGUpO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIHRoaXMuX3IgPSBbXTsgLy8gcmV0dXJuZWQvY2xlYW51cCBmdW5jdGlvbnNcblxuICAgIHRoaXMuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuaWQgPSBfY29udGV4dElEKys7IC8vIHRvIHdvcmsgYXJvdW5kIGlzc3VlcyB0aGF0IGZyYW1ld29ya3MgbGlrZSBWdWUgY2F1c2UgYnkgbWFraW5nIHRoaW5ncyBpbnRvIFByb3hpZXMgd2hpY2ggbWFrZSBpdCBpbXBvc3NpYmxlIHRvIGRvIHNvbWV0aGluZyBsaWtlIF9tZWRpYS5pbmRleE9mKHRoaXMpIGJlY2F1c2UgXCJ0aGlzXCIgd291bGQgbm8gbG9uZ2VyIHJlZmVyIHRvIHRoZSBDb250ZXh0IGluc3RhbmNlIGl0c2VsZiAtIGl0J2QgcmVmZXIgdG8gYSBQcm94eSEgV2UgbmVlZGVkIGEgd2F5IHRvIGlkZW50aWZ5IHRoZSBjb250ZXh0IHVuaXF1ZWx5XG5cbiAgICBmdW5jICYmIHRoaXMuYWRkKGZ1bmMpO1xuICB9XG5cbiAgdmFyIF9wcm90bzUgPSBDb250ZXh0LnByb3RvdHlwZTtcblxuICBfcHJvdG81LmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBmdW5jLCBzY29wZSkge1xuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBhZGRpdGlvbiBpZiB3ZSBuZWVkIHRoZSBhYmlsaXR5IHRvIGFkZCgpIGFuIGFuaW1hdGlvbiB0byBhIGNvbnRleHQgYW5kIGZvciB3aGF0ZXZlciByZWFzb24gY2Fubm90IGNyZWF0ZSB0aGF0IGFuaW1hdGlvbiBpbnNpZGUgb2YgYSBjb250ZXh0LmFkZCgoKSA9PiB7Li4ufSkgZnVuY3Rpb24uXG4gICAgLy8gaWYgKG5hbWUgJiYgX2lzRnVuY3Rpb24obmFtZS5yZXZlcnQpKSB7XG4gICAgLy8gXHR0aGlzLmRhdGEucHVzaChuYW1lKTtcbiAgICAvLyBcdHJldHVybiAobmFtZS5fY3R4ID0gdGhpcyk7XG4gICAgLy8gfVxuICAgIGlmIChfaXNGdW5jdGlvbihuYW1lKSkge1xuICAgICAgc2NvcGUgPSBmdW5jO1xuICAgICAgZnVuYyA9IG5hbWU7XG4gICAgICBuYW1lID0gX2lzRnVuY3Rpb247XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBmID0gZnVuY3Rpb24gZigpIHtcbiAgICAgIHZhciBwcmV2ID0gX2NvbnRleHQsXG4gICAgICAgICAgcHJldlNlbGVjdG9yID0gc2VsZi5zZWxlY3RvcixcbiAgICAgICAgICByZXN1bHQ7XG4gICAgICBwcmV2ICYmIHByZXYgIT09IHNlbGYgJiYgcHJldi5kYXRhLnB1c2goc2VsZik7XG4gICAgICBzY29wZSAmJiAoc2VsZi5zZWxlY3RvciA9IHNlbGVjdG9yKHNjb3BlKSk7XG4gICAgICBfY29udGV4dCA9IHNlbGY7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG4gICAgICBfaXNGdW5jdGlvbihyZXN1bHQpICYmIHNlbGYuX3IucHVzaChyZXN1bHQpO1xuICAgICAgX2NvbnRleHQgPSBwcmV2O1xuICAgICAgc2VsZi5zZWxlY3RvciA9IHByZXZTZWxlY3RvcjtcbiAgICAgIHNlbGYuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgc2VsZi5sYXN0ID0gZjtcbiAgICByZXR1cm4gbmFtZSA9PT0gX2lzRnVuY3Rpb24gPyBmKHNlbGYsIGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICByZXR1cm4gc2VsZi5hZGQobnVsbCwgZnVuYyk7XG4gICAgfSkgOiBuYW1lID8gc2VsZltuYW1lXSA9IGYgOiBmO1xuICB9O1xuXG4gIF9wcm90bzUuaWdub3JlID0gZnVuY3Rpb24gaWdub3JlKGZ1bmMpIHtcbiAgICB2YXIgcHJldiA9IF9jb250ZXh0O1xuICAgIF9jb250ZXh0ID0gbnVsbDtcbiAgICBmdW5jKHRoaXMpO1xuICAgIF9jb250ZXh0ID0gcHJldjtcbiAgfTtcblxuICBfcHJvdG81LmdldFR3ZWVucyA9IGZ1bmN0aW9uIGdldFR3ZWVucygpIHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIENvbnRleHQgPyBhLnB1c2guYXBwbHkoYSwgZS5nZXRUd2VlbnMoKSkgOiBlIGluc3RhbmNlb2YgVHdlZW4gJiYgIShlLnBhcmVudCAmJiBlLnBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiKSAmJiBhLnB1c2goZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgX3Byb3RvNS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuX3IubGVuZ3RoID0gdGhpcy5kYXRhLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgX3Byb3RvNS5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQsIG1hdGNoTWVkaWEpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIGlmIChyZXZlcnQpIHtcbiAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0d2VlbnMgPSBfdGhpczQuZ2V0VHdlZW5zKCksXG4gICAgICAgICAgICBpID0gX3RoaXM0LmRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgdDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgLy8gRmxpcCBwbHVnaW4gdHdlZW5zIGFyZSB2ZXJ5IGRpZmZlcmVudCBpbiB0aGF0IHRoZXkgc2hvdWxkIGFjdHVhbGx5IGJlIHB1c2hlZCB0byB0aGVpciBlbmQuIFRoZSBwbHVnaW4gcmVwbGFjZXMgdGhlIHRpbWVsaW5lJ3MgLnJldmVydCgpIG1ldGhvZCB0byBkbyBleGFjdGx5IHRoYXQuIEJ1dCB3ZSBhbHNvIG5lZWQgdG8gcmVtb3ZlIGFueSBvZiB0aG9zZSBuZXN0ZWQgdHdlZW5zIGluc2lkZSB0aGUgZmxpcCB0aW1lbGluZSBzbyB0aGF0IHRoZXkgZG9uJ3QgZ2V0IGluZGl2aWR1YWxseSByZXZlcnRlZC5cbiAgICAgICAgICB0ID0gX3RoaXM0LmRhdGFbaV07XG5cbiAgICAgICAgICBpZiAodC5kYXRhID09PSBcImlzRmxpcFwiKSB7XG4gICAgICAgICAgICB0LnJldmVydCgpO1xuICAgICAgICAgICAgdC5nZXRDaGlsZHJlbih0cnVlLCB0cnVlLCBmYWxzZSkuZm9yRWFjaChmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHR3ZWVucy5zcGxpY2UodHdlZW5zLmluZGV4T2YodHdlZW4pLCAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBzYXZlIGFzIGFuIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBjYWNoZSB0aGUgZ2xvYmFsVGltZSBmb3IgZWFjaCB0d2VlbiB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZSBkdXJpbmcgdGhlIHNvcnRcblxuXG4gICAgICAgIHR3ZWVucy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZzogdC5fZHVyIHx8IHQuX2RlbGF5IHx8IHQuX3NhdCAmJiAhdC5fc2F0LnZhcnMuaW1tZWRpYXRlUmVuZGVyID8gdC5nbG9iYWxUaW1lKDApIDogLUluZmluaXR5LFxuICAgICAgICAgICAgdDogdFxuICAgICAgICAgIH07XG4gICAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gYi5nIC0gYS5nIHx8IC1JbmZpbml0eTtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAobykge1xuICAgICAgICAgIHJldHVybiBvLnQucmV2ZXJ0KHJldmVydCk7XG4gICAgICAgIH0pOyAvLyBub3RlOiBhbGwgb2YgdGhlIF9zdGFydEF0IHR3ZWVucyBzaG91bGQgYmUgcmV2ZXJ0ZWQgaW4gcmV2ZXJzZSBvcmRlciB0aGF0IHRoZXkgd2VyZSBjcmVhdGVkLCBhbmQgdGhleSdsbCBhbGwgaGF2ZSB0aGUgc2FtZSBnbG9iYWxUaW1lICgtMSkgc28gdGhlIFwiIHx8IC0xXCIgaW4gdGhlIHNvcnQga2VlcHMgdGhlIG9yZGVyIHByb3Blcmx5LlxuXG4gICAgICAgIGkgPSBfdGhpczQuZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBsb29wIGJhY2t3YXJkcyBzbyB0aGF0LCBmb3IgZXhhbXBsZSwgU3BsaXRUZXh0cyB0aGF0IHdlcmUgY3JlYXRlZCBsYXRlciBvbiB0aGUgc2FtZSBlbGVtZW50IGdldCByZXZlcnRlZCBmaXJzdFxuICAgICAgICAgIHQgPSBfdGhpczQuZGF0YVtpXTtcblxuICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgICAgICAgIGlmICh0LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgICAgICAgICAgdC5zY3JvbGxUcmlnZ2VyICYmIHQuc2Nyb2xsVHJpZ2dlci5yZXZlcnQoKTtcbiAgICAgICAgICAgICAgdC5raWxsKCk7IC8vIGRvbid0IHJldmVydCgpIHRoZSB0aW1lbGluZSBiZWNhdXNlIHRoYXQncyBkdXBsaWNhdGluZyBlZmZvcnRzIHNpbmNlIHdlIGFscmVhZHkgcmV2ZXJ0ZWQgYWxsIHRoZSB0d2VlbnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgISh0IGluc3RhbmNlb2YgVHdlZW4pICYmIHQucmV2ZXJ0ICYmIHQucmV2ZXJ0KHJldmVydCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXM0Ll9yLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gZihyZXZlcnQsIF90aGlzNCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzNC5pc1JldmVydGVkID0gdHJ1ZTtcbiAgICAgIH0pKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBlLmtpbGwgJiYgZS5raWxsKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICBpZiAobWF0Y2hNZWRpYSkge1xuICAgICAgdmFyIGkgPSBfbWVkaWEubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIC8vIHByZXZpb3VzbHksIHdlIGNoZWNrZWQgX21lZGlhLmluZGV4T2YodGhpcyksIGJ1dCBzb21lIGZyYW1ld29ya3MgbGlrZSBWdWUgZW5mb3JjZSBQcm94eSBvYmplY3RzIHRoYXQgbWFrZSBpdCBpbXBvc3NpYmxlIHRvIGdldCB0aGUgcHJvcGVyIHJlc3VsdCB0aGF0IHdheSwgc28gd2UgbXVzdCB1c2UgYSB1bmlxdWUgSUQgbnVtYmVyIGluc3RlYWQuXG4gICAgICAgIF9tZWRpYVtpXS5pZCA9PT0gdGhpcy5pZCAmJiBfbWVkaWEuc3BsaWNlKGksIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG81LnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICB0aGlzLmtpbGwoY29uZmlnIHx8IHt9KTtcbiAgfTtcblxuICByZXR1cm4gQ29udGV4dDtcbn0oKTtcblxudmFyIE1hdGNoTWVkaWEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgdGhpcy5jb250ZXh0cyA9IFtdO1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICBfY29udGV4dCAmJiBfY29udGV4dC5kYXRhLnB1c2godGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvNiA9IE1hdGNoTWVkaWEucHJvdG90eXBlO1xuXG4gIF9wcm90bzYuYWRkID0gZnVuY3Rpb24gYWRkKGNvbmRpdGlvbnMsIGZ1bmMsIHNjb3BlKSB7XG4gICAgX2lzT2JqZWN0KGNvbmRpdGlvbnMpIHx8IChjb25kaXRpb25zID0ge1xuICAgICAgbWF0Y2hlczogY29uZGl0aW9uc1xuICAgIH0pO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQoMCwgc2NvcGUgfHwgdGhpcy5zY29wZSksXG4gICAgICAgIGNvbmQgPSBjb250ZXh0LmNvbmRpdGlvbnMgPSB7fSxcbiAgICAgICAgbXEsXG4gICAgICAgIHAsXG4gICAgICAgIGFjdGl2ZTtcbiAgICBfY29udGV4dCAmJiAhY29udGV4dC5zZWxlY3RvciAmJiAoY29udGV4dC5zZWxlY3RvciA9IF9jb250ZXh0LnNlbGVjdG9yKTsgLy8gaW4gY2FzZSBhIGNvbnRleHQgaXMgY3JlYXRlZCBpbnNpZGUgYSBjb250ZXh0LiBMaWtlIGEgZ3NhcC5tYXRjaE1lZGlhKCkgdGhhdCdzIGluc2lkZSBhIHNjb3BlZCBnc2FwLmNvbnRleHQoKVxuXG4gICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgIGZ1bmMgPSBjb250ZXh0LmFkZChcIm9uTWF0Y2hcIiwgZnVuYyk7XG4gICAgY29udGV4dC5xdWVyaWVzID0gY29uZGl0aW9ucztcblxuICAgIGZvciAocCBpbiBjb25kaXRpb25zKSB7XG4gICAgICBpZiAocCA9PT0gXCJhbGxcIikge1xuICAgICAgICBhY3RpdmUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXEgPSBfd2luLm1hdGNoTWVkaWEoY29uZGl0aW9uc1twXSk7XG5cbiAgICAgICAgaWYgKG1xKSB7XG4gICAgICAgICAgX21lZGlhLmluZGV4T2YoY29udGV4dCkgPCAwICYmIF9tZWRpYS5wdXNoKGNvbnRleHQpO1xuICAgICAgICAgIChjb25kW3BdID0gbXEubWF0Y2hlcykgJiYgKGFjdGl2ZSA9IDEpO1xuICAgICAgICAgIG1xLmFkZExpc3RlbmVyID8gbXEuYWRkTGlzdGVuZXIoX29uTWVkaWFDaGFuZ2UpIDogbXEuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBfb25NZWRpYUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3RpdmUgJiYgZnVuYyhjb250ZXh0LCBmdW5jdGlvbiAoZikge1xuICAgICAgcmV0dXJuIGNvbnRleHQuYWRkKG51bGwsIGYpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHJlZnJlc2goKSB7XG4gIC8vIFx0bGV0IHRpbWUgPSBfbGFzdE1lZGlhVGltZSxcbiAgLy8gXHRcdG1lZGlhID0gX21lZGlhO1xuICAvLyBcdF9sYXN0TWVkaWFUaW1lID0gLTE7XG4gIC8vIFx0X21lZGlhID0gdGhpcy5jb250ZXh0cztcbiAgLy8gXHRfb25NZWRpYUNoYW5nZSgpO1xuICAvLyBcdF9sYXN0TWVkaWFUaW1lID0gdGltZTtcbiAgLy8gXHRfbWVkaWEgPSBtZWRpYTtcbiAgLy8gfVxuICA7XG5cbiAgX3Byb3RvNi5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgdGhpcy5raWxsKGNvbmZpZyB8fCB7fSk7XG4gIH07XG5cbiAgX3Byb3RvNi5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQpIHtcbiAgICB0aGlzLmNvbnRleHRzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLmtpbGwocmV2ZXJ0LCB0cnVlKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWF0Y2hNZWRpYTtcbn0oKTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogR1NBUFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbnZhciBfZ3NhcCA9IHtcbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVBsdWdpbihjb25maWcpO1xuICAgIH0pO1xuICB9LFxuICB0aW1lbGluZTogZnVuY3Rpb24gdGltZWxpbmUodmFycykge1xuICAgIHJldHVybiBuZXcgVGltZWxpbmUodmFycyk7XG4gIH0sXG4gIGdldFR3ZWVuc09mOiBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKTtcbiAgfSxcbiAgZ2V0UHJvcGVydHk6IGZ1bmN0aW9uIGdldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICBfaXNTdHJpbmcodGFyZ2V0KSAmJiAodGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpWzBdKTsgLy9pbiBjYXNlIHNlbGVjdG9yIHRleHQgb3IgYW4gYXJyYXkgaXMgcGFzc2VkIGluXG5cbiAgICB2YXIgZ2V0dGVyID0gX2dldENhY2hlKHRhcmdldCB8fCB7fSkuZ2V0LFxuICAgICAgICBmb3JtYXQgPSB1bml0ID8gX3Bhc3NUaHJvdWdoIDogX251bWVyaWNJZlBvc3NpYmxlO1xuXG4gICAgdW5pdCA9PT0gXCJuYXRpdmVcIiAmJiAodW5pdCA9IFwiXCIpO1xuICAgIHJldHVybiAhdGFyZ2V0ID8gdGFyZ2V0IDogIXByb3BlcnR5ID8gZnVuY3Rpb24gKHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgICByZXR1cm4gZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgICB9IDogZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgfSxcbiAgcXVpY2tTZXR0ZXI6IGZ1bmN0aW9uIHF1aWNrU2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHtcbiAgICB0YXJnZXQgPSB0b0FycmF5KHRhcmdldCk7XG5cbiAgICBpZiAodGFyZ2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBzZXR0ZXJzID0gdGFyZ2V0Lm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gZ3NhcC5xdWlja1NldHRlcih0LCBwcm9wZXJ0eSwgdW5pdCk7XG4gICAgICB9KSxcbiAgICAgICAgICBsID0gc2V0dGVycy5sZW5ndGg7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpID0gbDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgc2V0dGVyc1tpXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gdGFyZ2V0WzBdIHx8IHt9O1xuXG4gICAgdmFyIFBsdWdpbiA9IF9wbHVnaW5zW3Byb3BlcnR5XSxcbiAgICAgICAgY2FjaGUgPSBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgICAgcCA9IGNhY2hlLmhhcm5lc3MgJiYgKGNhY2hlLmhhcm5lc3MuYWxpYXNlcyB8fCB7fSlbcHJvcGVydHldIHx8IHByb3BlcnR5LFxuICAgICAgICAvLyBpbiBjYXNlIGl0J3MgYW4gYWxpYXMsIGxpa2UgXCJyb3RhdGVcIiBmb3IgXCJyb3RhdGlvblwiLlxuICAgIHNldHRlciA9IFBsdWdpbiA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIHAgPSBuZXcgUGx1Z2luKCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgPSAwO1xuICAgICAgcC5pbml0KHRhcmdldCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBfcXVpY2tUd2VlbiwgMCwgW3RhcmdldF0pO1xuICAgICAgcC5yZW5kZXIoMSwgcCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgJiYgX3JlbmRlclByb3BUd2VlbnMoMSwgX3F1aWNrVHdlZW4pO1xuICAgIH0gOiBjYWNoZS5zZXQodGFyZ2V0LCBwKTtcblxuICAgIHJldHVybiBQbHVnaW4gPyBzZXR0ZXIgOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBzZXR0ZXIodGFyZ2V0LCBwLCB1bml0ID8gdmFsdWUgKyB1bml0IDogdmFsdWUsIGNhY2hlLCAxKTtcbiAgICB9O1xuICB9LFxuICBxdWlja1RvOiBmdW5jdGlvbiBxdWlja1RvKHRhcmdldCwgcHJvcGVydHksIHZhcnMpIHtcbiAgICB2YXIgX21lcmdlMjtcblxuICAgIHZhciB0d2VlbiA9IGdzYXAudG8odGFyZ2V0LCBfbWVyZ2UoKF9tZXJnZTIgPSB7fSwgX21lcmdlMltwcm9wZXJ0eV0gPSBcIis9MC4xXCIsIF9tZXJnZTIucGF1c2VkID0gdHJ1ZSwgX21lcmdlMiksIHZhcnMgfHwge30pKSxcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmModmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpIHtcbiAgICAgIHJldHVybiB0d2Vlbi5yZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSk7XG4gICAgfTtcblxuICAgIGZ1bmMudHdlZW4gPSB0d2VlbjtcbiAgICByZXR1cm4gZnVuYztcbiAgfSxcbiAgaXNUd2VlbmluZzogZnVuY3Rpb24gaXNUd2VlbmluZyh0YXJnZXRzKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCB0cnVlKS5sZW5ndGggPiAwO1xuICB9LFxuICBkZWZhdWx0czogZnVuY3Rpb24gZGVmYXVsdHModmFsdWUpIHtcbiAgICB2YWx1ZSAmJiB2YWx1ZS5lYXNlICYmICh2YWx1ZS5lYXNlID0gX3BhcnNlRWFzZSh2YWx1ZS5lYXNlLCBfZGVmYXVsdHMuZWFzZSkpO1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKF9kZWZhdWx0cywgdmFsdWUgfHwge30pO1xuICB9LFxuICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZyh2YWx1ZSkge1xuICAgIHJldHVybiBfbWVyZ2VEZWVwKF9jb25maWcsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgcmVnaXN0ZXJFZmZlY3Q6IGZ1bmN0aW9uIHJlZ2lzdGVyRWZmZWN0KF9yZWYzKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3QsXG4gICAgICAgIHBsdWdpbnMgPSBfcmVmMy5wbHVnaW5zLFxuICAgICAgICBkZWZhdWx0cyA9IF9yZWYzLmRlZmF1bHRzLFxuICAgICAgICBleHRlbmRUaW1lbGluZSA9IF9yZWYzLmV4dGVuZFRpbWVsaW5lO1xuICAgIChwbHVnaW5zIHx8IFwiXCIpLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW5OYW1lKSB7XG4gICAgICByZXR1cm4gcGx1Z2luTmFtZSAmJiAhX3BsdWdpbnNbcGx1Z2luTmFtZV0gJiYgIV9nbG9iYWxzW3BsdWdpbk5hbWVdICYmIF93YXJuKG5hbWUgKyBcIiBlZmZlY3QgcmVxdWlyZXMgXCIgKyBwbHVnaW5OYW1lICsgXCIgcGx1Z2luLlwiKTtcbiAgICB9KTtcblxuICAgIF9lZmZlY3RzW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHRsKSB7XG4gICAgICByZXR1cm4gZWZmZWN0KHRvQXJyYXkodGFyZ2V0cyksIF9zZXREZWZhdWx0cyh2YXJzIHx8IHt9LCBkZWZhdWx0cyksIHRsKTtcbiAgICB9O1xuXG4gICAgaWYgKGV4dGVuZFRpbWVsaW5lKSB7XG4gICAgICBUaW1lbGluZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKF9lZmZlY3RzW25hbWVdKHRhcmdldHMsIF9pc09iamVjdCh2YXJzKSA/IHZhcnMgOiAocG9zaXRpb24gPSB2YXJzKSAmJiB7fSwgdGhpcyksIHBvc2l0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICByZWdpc3RlckVhc2U6IGZ1bmN0aW9uIHJlZ2lzdGVyRWFzZShuYW1lLCBlYXNlKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfcGFyc2VFYXNlKGVhc2UpO1xuICB9LFxuICBwYXJzZUVhc2U6IGZ1bmN0aW9uIHBhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkgOiBfZWFzZU1hcDtcbiAgfSxcbiAgZ2V0QnlJZDogZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0QnlJZChpZCk7XG4gIH0sXG4gIGV4cG9ydFJvb3Q6IGZ1bmN0aW9uIGV4cG9ydFJvb3QodmFycywgaW5jbHVkZURlbGF5ZWRDYWxscykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUodmFycyksXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBuZXh0O1xuICAgIHRsLnNtb290aENoaWxkVGltaW5nID0gX2lzTm90RmFsc2UodmFycy5zbW9vdGhDaGlsZFRpbWluZyk7XG5cbiAgICBfZ2xvYmFsVGltZWxpbmUucmVtb3ZlKHRsKTtcblxuICAgIHRsLl9kcCA9IDA7IC8vb3RoZXJ3aXNlIGl0J2xsIGdldCByZS1hY3RpdmF0ZWQgd2hlbiBhZGRpbmcgY2hpbGRyZW4gYW5kIGJlIHJlLWludHJvZHVjZWQgaW50byBfZ2xvYmFsVGltZWxpbmUncyBsaW5rZWQgbGlzdCAodGhlbiBhZGRlZCB0byBpdHNlbGYpLlxuXG4gICAgdGwuX3RpbWUgPSB0bC5fdFRpbWUgPSBfZ2xvYmFsVGltZWxpbmUuX3RpbWU7XG4gICAgY2hpbGQgPSBfZ2xvYmFsVGltZWxpbmUuX2ZpcnN0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgIGlmIChpbmNsdWRlRGVsYXllZENhbGxzIHx8ICEoIWNoaWxkLl9kdXIgJiYgY2hpbGQgaW5zdGFuY2VvZiBUd2VlbiAmJiBjaGlsZC52YXJzLm9uQ29tcGxldGUgPT09IGNoaWxkLl90YXJnZXRzWzBdKSkge1xuICAgICAgICBfYWRkVG9UaW1lbGluZSh0bCwgY2hpbGQsIGNoaWxkLl9zdGFydCAtIGNoaWxkLl9kZWxheSk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICBfYWRkVG9UaW1lbGluZShfZ2xvYmFsVGltZWxpbmUsIHRsLCAwKTtcblxuICAgIHJldHVybiB0bDtcbiAgfSxcbiAgY29udGV4dDogZnVuY3Rpb24gY29udGV4dChmdW5jLCBzY29wZSkge1xuICAgIHJldHVybiBmdW5jID8gbmV3IENvbnRleHQoZnVuYywgc2NvcGUpIDogX2NvbnRleHQ7XG4gIH0sXG4gIG1hdGNoTWVkaWE6IGZ1bmN0aW9uIG1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICByZXR1cm4gbmV3IE1hdGNoTWVkaWEoc2NvcGUpO1xuICB9LFxuICBtYXRjaE1lZGlhUmVmcmVzaDogZnVuY3Rpb24gbWF0Y2hNZWRpYVJlZnJlc2goKSB7XG4gICAgcmV0dXJuIF9tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICB2YXIgY29uZCA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICBmb3VuZCxcbiAgICAgICAgICBwO1xuXG4gICAgICBmb3IgKHAgaW4gY29uZCkge1xuICAgICAgICBpZiAoY29uZFtwXSkge1xuICAgICAgICAgIGNvbmRbcF0gPSBmYWxzZTtcbiAgICAgICAgICBmb3VuZCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm91bmQgJiYgYy5yZXZlcnQoKTtcbiAgICB9KSB8fCBfb25NZWRpYUNoYW5nZSgpO1xuICB9LFxuICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdIHx8IChfbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuICAgIH5hLmluZGV4T2YoY2FsbGJhY2spIHx8IGEucHVzaChjYWxsYmFjayk7XG4gIH0sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgYSA9IF9saXN0ZW5lcnNbdHlwZV0sXG4gICAgICAgIGkgPSBhICYmIGEuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgaSA+PSAwICYmIGEuc3BsaWNlKGksIDEpO1xuICB9LFxuICB1dGlsczoge1xuICAgIHdyYXA6IHdyYXAsXG4gICAgd3JhcFlveW86IHdyYXBZb3lvLFxuICAgIGRpc3RyaWJ1dGU6IGRpc3RyaWJ1dGUsXG4gICAgcmFuZG9tOiByYW5kb20sXG4gICAgc25hcDogc25hcCxcbiAgICBub3JtYWxpemU6IG5vcm1hbGl6ZSxcbiAgICBnZXRVbml0OiBnZXRVbml0LFxuICAgIGNsYW1wOiBjbGFtcCxcbiAgICBzcGxpdENvbG9yOiBzcGxpdENvbG9yLFxuICAgIHRvQXJyYXk6IHRvQXJyYXksXG4gICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgIG1hcFJhbmdlOiBtYXBSYW5nZSxcbiAgICBwaXBlOiBwaXBlLFxuICAgIHVuaXRpemU6IHVuaXRpemUsXG4gICAgaW50ZXJwb2xhdGU6IGludGVycG9sYXRlLFxuICAgIHNodWZmbGU6IHNodWZmbGVcbiAgfSxcbiAgaW5zdGFsbDogX2luc3RhbGwsXG4gIGVmZmVjdHM6IF9lZmZlY3RzLFxuICB0aWNrZXI6IF90aWNrZXIsXG4gIHVwZGF0ZVJvb3Q6IFRpbWVsaW5lLnVwZGF0ZVJvb3QsXG4gIHBsdWdpbnM6IF9wbHVnaW5zLFxuICBnbG9iYWxUaW1lbGluZTogX2dsb2JhbFRpbWVsaW5lLFxuICBjb3JlOiB7XG4gICAgUHJvcFR3ZWVuOiBQcm9wVHdlZW4sXG4gICAgZ2xvYmFsczogX2FkZEdsb2JhbCxcbiAgICBUd2VlbjogVHdlZW4sXG4gICAgVGltZWxpbmU6IFRpbWVsaW5lLFxuICAgIEFuaW1hdGlvbjogQW5pbWF0aW9uLFxuICAgIGdldENhY2hlOiBfZ2V0Q2FjaGUsXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtOiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sXG4gICAgcmV2ZXJ0aW5nOiBmdW5jdGlvbiByZXZlcnRpbmcoKSB7XG4gICAgICByZXR1cm4gX3JldmVydGluZztcbiAgICB9LFxuICAgIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQodG9BZGQpIHtcbiAgICAgIGlmICh0b0FkZCAmJiBfY29udGV4dCkge1xuICAgICAgICBfY29udGV4dC5kYXRhLnB1c2godG9BZGQpO1xuXG4gICAgICAgIHRvQWRkLl9jdHggPSBfY29udGV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9jb250ZXh0O1xuICAgIH0sXG4gICAgc3VwcHJlc3NPdmVyd3JpdGVzOiBmdW5jdGlvbiBzdXBwcmVzc092ZXJ3cml0ZXModmFsdWUpIHtcbiAgICAgIHJldHVybiBfc3VwcHJlc3NPdmVyd3JpdGVzID0gdmFsdWU7XG4gICAgfVxuICB9XG59O1xuXG5fZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxkZWxheWVkQ2FsbCxzZXQsa2lsbFR3ZWVuc09mXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfZ3NhcFtuYW1lXSA9IFR3ZWVuW25hbWVdO1xufSk7XG5cbl90aWNrZXIuYWRkKFRpbWVsaW5lLnVwZGF0ZVJvb3QpO1xuXG5fcXVpY2tUd2VlbiA9IF9nc2FwLnRvKHt9LCB7XG4gIGR1cmF0aW9uOiAwXG59KTsgLy8gLS0tLSBFWFRSQSBQTFVHSU5TIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBfZ2V0UGx1Z2luUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2dldFBsdWdpblByb3BUd2VlbihwbHVnaW4sIHByb3ApIHtcbiAgdmFyIHB0ID0gcGx1Z2luLl9wdDtcblxuICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcCAmJiBwdC5vcCAhPT0gcHJvcCAmJiBwdC5mcCAhPT0gcHJvcCkge1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRNb2RpZmllcnMgPSBmdW5jdGlvbiBfYWRkTW9kaWZpZXJzKHR3ZWVuLCBtb2RpZmllcnMpIHtcbiAgdmFyIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgcHQ7XG5cbiAgZm9yIChwIGluIG1vZGlmaWVycykge1xuICAgIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHB0ID0gdHdlZW4uX3B0TG9va3VwW2ldW3BdO1xuXG4gICAgICBpZiAocHQgJiYgKHB0ID0gcHQuZCkpIHtcbiAgICAgICAgaWYgKHB0Ll9wdCkge1xuICAgICAgICAgIC8vIGlzIGEgcGx1Z2luXG4gICAgICAgICAgcHQgPSBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHB0LCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB0ICYmIHB0Lm1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyc1twXSwgdHdlZW4sIHRhcmdldHNbaV0sIHApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSxcbiAgICBfYnVpbGRNb2RpZmllclBsdWdpbiA9IGZ1bmN0aW9uIF9idWlsZE1vZGlmaWVyUGx1Z2luKG5hbWUsIG1vZGlmaWVyKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICByYXdWYXJzOiAxLFxuICAgIC8vZG9uJ3QgcHJlLXByb2Nlc3MgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG9yIFwicmFuZG9tKClcIiBzdHJpbmdzLlxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbikge1xuICAgICAgdHdlZW4uX29uSW5pdCA9IGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICB2YXIgdGVtcCwgcDtcblxuICAgICAgICBpZiAoX2lzU3RyaW5nKHZhcnMpKSB7XG4gICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVtcFtuYW1lXSA9IDE7XG4gICAgICAgICAgfSk7IC8vaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgdG8gcm91bmRQcm9wcywgbGlrZSBcIngseVwiLCB3ZSByb3VuZCB0byB3aG9sZSBudW1iZXJzLlxuXG5cbiAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb2RpZmllcikge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICAgICAgICB0ZW1wW3BdID0gbW9kaWZpZXIodmFyc1twXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBfYWRkTW9kaWZpZXJzKHR3ZWVuLCB2YXJzKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTsgLy9yZWdpc3RlciBjb3JlIHBsdWdpbnNcblxuXG5leHBvcnQgdmFyIGdzYXAgPSBfZ3NhcC5yZWdpc3RlclBsdWdpbih7XG4gIG5hbWU6IFwiYXR0clwiLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHAsIHB0LCB2O1xuICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcblxuICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICB2ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShwKSB8fCBcIlwiO1xuICAgICAgcHQgPSB0aGlzLmFkZCh0YXJnZXQsIFwic2V0QXR0cmlidXRlXCIsICh2IHx8IDApICsgXCJcIiwgdmFyc1twXSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgcHQub3AgPSBwO1xuICAgICAgcHQuYiA9IHY7IC8vIHJlY29yZCB0aGUgYmVnaW5uaW5nIHZhbHVlIHNvIHdlIGNhbiByZXZlcnQoKVxuXG4gICAgICB0aGlzLl9wcm9wcy5wdXNoKHApO1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgX3JldmVydGluZyA/IHB0LnNldChwdC50LCBwdC5wLCBwdC5iLCBwdCkgOiBwdC5yKHJhdGlvLCBwdC5kKTsgLy8gaWYgcmV2ZXJ0aW5nLCBnbyBiYWNrIHRvIHRoZSBvcmlnaW5hbCAocHQuYilcblxuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG4gIH1cbn0sIHtcbiAgbmFtZTogXCJlbmRBcnJheVwiLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFsdWUpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMuYWRkKHRhcmdldCwgaSwgdGFyZ2V0W2ldIHx8IDAsIHZhbHVlW2ldLCAwLCAwLCAwLCAwLCAwLCAxKTtcbiAgICB9XG4gIH1cbn0sIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwicm91bmRQcm9wc1wiLCBfcm91bmRNb2RpZmllciksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwibW9kaWZpZXJzXCIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcInNuYXBcIiwgc25hcCkpIHx8IF9nc2FwOyAvL3RvIHByZXZlbnQgdGhlIGNvcmUgcGx1Z2lucyBmcm9tIGJlaW5nIGRyb3BwZWQgdmlhIGFnZ3Jlc3NpdmUgdHJlZSBzaGFraW5nLCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGUgdmFyaWFibGUgZGVjbGFyYXRpb24gaW4gdGhpcyB3YXkuXG5cblR3ZWVuLnZlcnNpb24gPSBUaW1lbGluZS52ZXJzaW9uID0gZ3NhcC52ZXJzaW9uID0gXCIzLjEyLjVcIjtcbl9jb3JlUmVhZHkgPSAxO1xuX3dpbmRvd0V4aXN0cygpICYmIF93YWtlKCk7XG52YXIgUG93ZXIwID0gX2Vhc2VNYXAuUG93ZXIwLFxuICAgIFBvd2VyMSA9IF9lYXNlTWFwLlBvd2VyMSxcbiAgICBQb3dlcjIgPSBfZWFzZU1hcC5Qb3dlcjIsXG4gICAgUG93ZXIzID0gX2Vhc2VNYXAuUG93ZXIzLFxuICAgIFBvd2VyNCA9IF9lYXNlTWFwLlBvd2VyNCxcbiAgICBMaW5lYXIgPSBfZWFzZU1hcC5MaW5lYXIsXG4gICAgUXVhZCA9IF9lYXNlTWFwLlF1YWQsXG4gICAgQ3ViaWMgPSBfZWFzZU1hcC5DdWJpYyxcbiAgICBRdWFydCA9IF9lYXNlTWFwLlF1YXJ0LFxuICAgIFF1aW50ID0gX2Vhc2VNYXAuUXVpbnQsXG4gICAgU3Ryb25nID0gX2Vhc2VNYXAuU3Ryb25nLFxuICAgIEVsYXN0aWMgPSBfZWFzZU1hcC5FbGFzdGljLFxuICAgIEJhY2sgPSBfZWFzZU1hcC5CYWNrLFxuICAgIFN0ZXBwZWRFYXNlID0gX2Vhc2VNYXAuU3RlcHBlZEVhc2UsXG4gICAgQm91bmNlID0gX2Vhc2VNYXAuQm91bmNlLFxuICAgIFNpbmUgPSBfZWFzZU1hcC5TaW5lLFxuICAgIEV4cG8gPSBfZWFzZU1hcC5FeHBvLFxuICAgIENpcmMgPSBfZWFzZU1hcC5DaXJjO1xuZXhwb3J0IHsgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjIH07XG5leHBvcnQgeyBUd2VlbiBhcyBUd2Vlbk1heCwgVHdlZW4gYXMgVHdlZW5MaXRlLCBUaW1lbGluZSBhcyBUaW1lbGluZU1heCwgVGltZWxpbmUgYXMgVGltZWxpbmVMaXRlLCBnc2FwIGFzIGRlZmF1bHQsIHdyYXAsIHdyYXBZb3lvLCBkaXN0cmlidXRlLCByYW5kb20sIHNuYXAsIG5vcm1hbGl6ZSwgZ2V0VW5pdCwgY2xhbXAsIHNwbGl0Q29sb3IsIHRvQXJyYXksIHNlbGVjdG9yLCBtYXBSYW5nZSwgcGlwZSwgdW5pdGl6ZSwgaW50ZXJwb2xhdGUsIHNodWZmbGUgfTsgLy9leHBvcnQgc29tZSBpbnRlcm5hbCBtZXRob2RzL29yb2plY3RzIGZvciB1c2UgaW4gQ1NTUGx1Z2luIHNvIHRoYXQgd2UgY2FuIGV4dGVybmFsaXplIHRoYXQgZmlsZSBhbmQgYWxsb3cgY3VzdG9tIGJ1aWxkcyB0aGF0IGV4Y2x1ZGUgaXQuXG5cbmV4cG9ydCB7IF9nZXRQcm9wZXJ0eSwgX251bUV4cCwgX251bVdpdGhVbml0RXhwLCBfaXNTdHJpbmcsIF9pc1VuZGVmaW5lZCwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIF9yZWxFeHAsIF9zZXREZWZhdWx0cywgX3JlbW92ZUxpbmtlZExpc3RJdGVtLCBfZm9yRWFjaE5hbWUsIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHksIF9jb2xvclN0cmluZ0ZpbHRlciwgX3JlcGxhY2VSYW5kb20sIF9jaGVja1BsdWdpbiwgX3BsdWdpbnMsIF90aWNrZXIsIF9jb25maWcsIF9yb3VuZE1vZGlmaWVyLCBfcm91bmQsIF9taXNzaW5nUGx1Z2luLCBfZ2V0U2V0dGVyLCBfZ2V0Q2FjaGUsIF9jb2xvckV4cCwgX3BhcnNlUmVsYXRpdmUgfTsiLCJpbXBvcnQgeyBnc2FwLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMsIFR3ZWVuTGl0ZSwgVGltZWxpbmVMaXRlLCBUaW1lbGluZU1heCB9IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuaW1wb3J0IHsgQ1NTUGx1Z2luIH0gZnJvbSBcIi4vQ1NTUGx1Z2luLmpzXCI7XG52YXIgZ3NhcFdpdGhDU1MgPSBnc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbikgfHwgZ3NhcCxcbiAgICAvLyB0byBwcm90ZWN0IGZyb20gdHJlZSBzaGFraW5nXG5Ud2Vlbk1heFdpdGhDU1MgPSBnc2FwV2l0aENTUy5jb3JlLlR3ZWVuO1xuZXhwb3J0IHsgZ3NhcFdpdGhDU1MgYXMgZ3NhcCwgZ3NhcFdpdGhDU1MgYXMgZGVmYXVsdCwgQ1NTUGx1Z2luLCBUd2Vlbk1heFdpdGhDU1MgYXMgVHdlZW5NYXgsIFR3ZWVuTGl0ZSwgVGltZWxpbmVNYXgsIFRpbWVsaW5lTGl0ZSwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjIH07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnZXMtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzID0gZnVuY3Rpb24gaGFzUHJvcGVydHlEZXNjcmlwdG9ycygpIHtcblx0cmV0dXJuICEhJGRlZmluZVByb3BlcnR5O1xufTtcblxuaGFzUHJvcGVydHlEZXNjcmlwdG9ycy5oYXNBcnJheUxlbmd0aERlZmluZUJ1ZyA9IGZ1bmN0aW9uIGhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnKCkge1xuXHQvLyBub2RlIHYwLjYgaGFzIGEgYnVnIHdoZXJlIGFycmF5IGxlbmd0aHMgY2FuIGJlIFNldCBidXQgbm90IERlZmluZWRcblx0aWYgKCEkZGVmaW5lUHJvcGVydHkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHR0cnkge1xuXHRcdHJldHVybiAkZGVmaW5lUHJvcGVydHkoW10sICdsZW5ndGgnLCB7IHZhbHVlOiAxIH0pLmxlbmd0aCAhPT0gMTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIEluIEZpcmVmb3ggNC0yMiwgZGVmaW5pbmcgbGVuZ3RoIG9uIGFuIGFycmF5IHRocm93cyBhbiBleGNlcHRpb24uXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzUHJvcGVydHlEZXNjcmlwdG9ycztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRlc3QgPSB7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0Zm9vOiB7fVxufTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc1Byb3RvKCkge1xuXHQvLyBAdHMtZXhwZWN0LWVycm9yOiBUUyBlcnJvcnMgb24gYW4gaW5oZXJpdGVkIHByb3BlcnR5IGZvciBzb21lIHJlYXNvblxuXHRyZXR1cm4geyBfX3Byb3RvX186IHRlc3QgfS5mb28gPT09IHRlc3QuZm9vXG5cdFx0JiYgISh0ZXN0IGluc3RhbmNlb2YgJE9iamVjdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb3JpZ1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tdW5yZWFjaGFibGUtbG9vcFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG52YXIgJGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gYmluZC5jYWxsKGNhbGwsICRoYXNPd24pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc3Vycm9nYXRlX3BhaXJzXzEgPSByZXF1aXJlKFwiLi9zdXJyb2dhdGUtcGFpcnNcIik7XG52YXIgSFRNTF9BTFBIQSA9IFsnYXBvcycsICduYnNwJywgJ2lleGNsJywgJ2NlbnQnLCAncG91bmQnLCAnY3VycmVuJywgJ3llbicsICdicnZiYXInLCAnc2VjdCcsICd1bWwnLCAnY29weScsICdvcmRmJywgJ2xhcXVvJywgJ25vdCcsICdzaHknLCAncmVnJywgJ21hY3InLCAnZGVnJywgJ3BsdXNtbicsICdzdXAyJywgJ3N1cDMnLCAnYWN1dGUnLCAnbWljcm8nLCAncGFyYScsICdtaWRkb3QnLCAnY2VkaWwnLCAnc3VwMScsICdvcmRtJywgJ3JhcXVvJywgJ2ZyYWMxNCcsICdmcmFjMTInLCAnZnJhYzM0JywgJ2lxdWVzdCcsICdBZ3JhdmUnLCAnQWFjdXRlJywgJ0FjaXJjJywgJ0F0aWxkZScsICdBdW1sJywgJ0FyaW5nJywgJ0FFbGlnJywgJ0NjZWRpbCcsICdFZ3JhdmUnLCAnRWFjdXRlJywgJ0VjaXJjJywgJ0V1bWwnLCAnSWdyYXZlJywgJ0lhY3V0ZScsICdJY2lyYycsICdJdW1sJywgJ0VUSCcsICdOdGlsZGUnLCAnT2dyYXZlJywgJ09hY3V0ZScsICdPY2lyYycsICdPdGlsZGUnLCAnT3VtbCcsICd0aW1lcycsICdPc2xhc2gnLCAnVWdyYXZlJywgJ1VhY3V0ZScsICdVY2lyYycsICdVdW1sJywgJ1lhY3V0ZScsICdUSE9STicsICdzemxpZycsICdhZ3JhdmUnLCAnYWFjdXRlJywgJ2FjaXJjJywgJ2F0aWxkZScsICdhdW1sJywgJ2FyaW5nJywgJ2FlbGlnJywgJ2NjZWRpbCcsICdlZ3JhdmUnLCAnZWFjdXRlJywgJ2VjaXJjJywgJ2V1bWwnLCAnaWdyYXZlJywgJ2lhY3V0ZScsICdpY2lyYycsICdpdW1sJywgJ2V0aCcsICdudGlsZGUnLCAnb2dyYXZlJywgJ29hY3V0ZScsICdvY2lyYycsICdvdGlsZGUnLCAnb3VtbCcsICdkaXZpZGUnLCAnb3NsYXNoJywgJ3VncmF2ZScsICd1YWN1dGUnLCAndWNpcmMnLCAndXVtbCcsICd5YWN1dGUnLCAndGhvcm4nLCAneXVtbCcsICdxdW90JywgJ2FtcCcsICdsdCcsICdndCcsICdPRWxpZycsICdvZWxpZycsICdTY2Fyb24nLCAnc2Nhcm9uJywgJ1l1bWwnLCAnY2lyYycsICd0aWxkZScsICdlbnNwJywgJ2Vtc3AnLCAndGhpbnNwJywgJ3p3bmonLCAnendqJywgJ2xybScsICdybG0nLCAnbmRhc2gnLCAnbWRhc2gnLCAnbHNxdW8nLCAncnNxdW8nLCAnc2JxdW8nLCAnbGRxdW8nLCAncmRxdW8nLCAnYmRxdW8nLCAnZGFnZ2VyJywgJ0RhZ2dlcicsICdwZXJtaWwnLCAnbHNhcXVvJywgJ3JzYXF1bycsICdldXJvJywgJ2Zub2YnLCAnQWxwaGEnLCAnQmV0YScsICdHYW1tYScsICdEZWx0YScsICdFcHNpbG9uJywgJ1pldGEnLCAnRXRhJywgJ1RoZXRhJywgJ0lvdGEnLCAnS2FwcGEnLCAnTGFtYmRhJywgJ011JywgJ051JywgJ1hpJywgJ09taWNyb24nLCAnUGknLCAnUmhvJywgJ1NpZ21hJywgJ1RhdScsICdVcHNpbG9uJywgJ1BoaScsICdDaGknLCAnUHNpJywgJ09tZWdhJywgJ2FscGhhJywgJ2JldGEnLCAnZ2FtbWEnLCAnZGVsdGEnLCAnZXBzaWxvbicsICd6ZXRhJywgJ2V0YScsICd0aGV0YScsICdpb3RhJywgJ2thcHBhJywgJ2xhbWJkYScsICdtdScsICdudScsICd4aScsICdvbWljcm9uJywgJ3BpJywgJ3JobycsICdzaWdtYWYnLCAnc2lnbWEnLCAndGF1JywgJ3Vwc2lsb24nLCAncGhpJywgJ2NoaScsICdwc2knLCAnb21lZ2EnLCAndGhldGFzeW0nLCAndXBzaWgnLCAncGl2JywgJ2J1bGwnLCAnaGVsbGlwJywgJ3ByaW1lJywgJ1ByaW1lJywgJ29saW5lJywgJ2ZyYXNsJywgJ3dlaWVycCcsICdpbWFnZScsICdyZWFsJywgJ3RyYWRlJywgJ2FsZWZzeW0nLCAnbGFycicsICd1YXJyJywgJ3JhcnInLCAnZGFycicsICdoYXJyJywgJ2NyYXJyJywgJ2xBcnInLCAndUFycicsICdyQXJyJywgJ2RBcnInLCAnaEFycicsICdmb3JhbGwnLCAncGFydCcsICdleGlzdCcsICdlbXB0eScsICduYWJsYScsICdpc2luJywgJ25vdGluJywgJ25pJywgJ3Byb2QnLCAnc3VtJywgJ21pbnVzJywgJ2xvd2FzdCcsICdyYWRpYycsICdwcm9wJywgJ2luZmluJywgJ2FuZycsICdhbmQnLCAnb3InLCAnY2FwJywgJ2N1cCcsICdpbnQnLCAndGhlcmU0JywgJ3NpbScsICdjb25nJywgJ2FzeW1wJywgJ25lJywgJ2VxdWl2JywgJ2xlJywgJ2dlJywgJ3N1YicsICdzdXAnLCAnbnN1YicsICdzdWJlJywgJ3N1cGUnLCAnb3BsdXMnLCAnb3RpbWVzJywgJ3BlcnAnLCAnc2RvdCcsICdsY2VpbCcsICdyY2VpbCcsICdsZmxvb3InLCAncmZsb29yJywgJ2xhbmcnLCAncmFuZycsICdsb3onLCAnc3BhZGVzJywgJ2NsdWJzJywgJ2hlYXJ0cycsICdkaWFtcyddO1xudmFyIEhUTUxfQ09ERVMgPSBbMzksIDE2MCwgMTYxLCAxNjIsIDE2MywgMTY0LCAxNjUsIDE2NiwgMTY3LCAxNjgsIDE2OSwgMTcwLCAxNzEsIDE3MiwgMTczLCAxNzQsIDE3NSwgMTc2LCAxNzcsIDE3OCwgMTc5LCAxODAsIDE4MSwgMTgyLCAxODMsIDE4NCwgMTg1LCAxODYsIDE4NywgMTg4LCAxODksIDE5MCwgMTkxLCAxOTIsIDE5MywgMTk0LCAxOTUsIDE5NiwgMTk3LCAxOTgsIDE5OSwgMjAwLCAyMDEsIDIwMiwgMjAzLCAyMDQsIDIwNSwgMjA2LCAyMDcsIDIwOCwgMjA5LCAyMTAsIDIxMSwgMjEyLCAyMTMsIDIxNCwgMjE1LCAyMTYsIDIxNywgMjE4LCAyMTksIDIyMCwgMjIxLCAyMjIsIDIyMywgMjI0LCAyMjUsIDIyNiwgMjI3LCAyMjgsIDIyOSwgMjMwLCAyMzEsIDIzMiwgMjMzLCAyMzQsIDIzNSwgMjM2LCAyMzcsIDIzOCwgMjM5LCAyNDAsIDI0MSwgMjQyLCAyNDMsIDI0NCwgMjQ1LCAyNDYsIDI0NywgMjQ4LCAyNDksIDI1MCwgMjUxLCAyNTIsIDI1MywgMjU0LCAyNTUsIDM0LCAzOCwgNjAsIDYyLCAzMzgsIDMzOSwgMzUyLCAzNTMsIDM3NiwgNzEwLCA3MzIsIDgxOTQsIDgxOTUsIDgyMDEsIDgyMDQsIDgyMDUsIDgyMDYsIDgyMDcsIDgyMTEsIDgyMTIsIDgyMTYsIDgyMTcsIDgyMTgsIDgyMjAsIDgyMjEsIDgyMjIsIDgyMjQsIDgyMjUsIDgyNDAsIDgyNDksIDgyNTAsIDgzNjQsIDQwMiwgOTEzLCA5MTQsIDkxNSwgOTE2LCA5MTcsIDkxOCwgOTE5LCA5MjAsIDkyMSwgOTIyLCA5MjMsIDkyNCwgOTI1LCA5MjYsIDkyNywgOTI4LCA5MjksIDkzMSwgOTMyLCA5MzMsIDkzNCwgOTM1LCA5MzYsIDkzNywgOTQ1LCA5NDYsIDk0NywgOTQ4LCA5NDksIDk1MCwgOTUxLCA5NTIsIDk1MywgOTU0LCA5NTUsIDk1NiwgOTU3LCA5NTgsIDk1OSwgOTYwLCA5NjEsIDk2MiwgOTYzLCA5NjQsIDk2NSwgOTY2LCA5NjcsIDk2OCwgOTY5LCA5NzcsIDk3OCwgOTgyLCA4MjI2LCA4MjMwLCA4MjQyLCA4MjQzLCA4MjU0LCA4MjYwLCA4NDcyLCA4NDY1LCA4NDc2LCA4NDgyLCA4NTAxLCA4NTkyLCA4NTkzLCA4NTk0LCA4NTk1LCA4NTk2LCA4NjI5LCA4NjU2LCA4NjU3LCA4NjU4LCA4NjU5LCA4NjYwLCA4NzA0LCA4NzA2LCA4NzA3LCA4NzA5LCA4NzExLCA4NzEyLCA4NzEzLCA4NzE1LCA4NzE5LCA4NzIxLCA4NzIyLCA4NzI3LCA4NzMwLCA4NzMzLCA4NzM0LCA4NzM2LCA4NzQzLCA4NzQ0LCA4NzQ1LCA4NzQ2LCA4NzQ3LCA4NzU2LCA4NzY0LCA4NzczLCA4Nzc2LCA4ODAwLCA4ODAxLCA4ODA0LCA4ODA1LCA4ODM0LCA4ODM1LCA4ODM2LCA4ODM4LCA4ODM5LCA4ODUzLCA4ODU1LCA4ODY5LCA4OTAxLCA4OTY4LCA4OTY5LCA4OTcwLCA4OTcxLCA5MDAxLCA5MDAyLCA5Njc0LCA5ODI0LCA5ODI3LCA5ODI5LCA5ODMwXTtcbnZhciBhbHBoYUluZGV4ID0ge307XG52YXIgbnVtSW5kZXggPSB7fTtcbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW5ndGggPSBIVE1MX0FMUEhBLmxlbmd0aDtcbiAgICB3aGlsZSAoaSA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYSA9IEhUTUxfQUxQSEFbaV07XG4gICAgICAgIHZhciBjID0gSFRNTF9DT0RFU1tpXTtcbiAgICAgICAgYWxwaGFJbmRleFthXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgIG51bUluZGV4W2NdID0gYTtcbiAgICAgICAgaSsrO1xuICAgIH1cbn0pKCk7XG52YXIgSHRtbDRFbnRpdGllcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdG1sNEVudGl0aWVzKCkge1xuICAgIH1cbiAgICBIdG1sNEVudGl0aWVzLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mKCM/W1xcd1xcZF0rKTs/L2csIGZ1bmN0aW9uIChzLCBlbnRpdHkpIHtcbiAgICAgICAgICAgIHZhciBjaHI7XG4gICAgICAgICAgICBpZiAoZW50aXR5LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IGVudGl0eS5jaGFyQXQoMSkudG9Mb3dlckNhc2UoKSA9PT0gJ3gnID9cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoZW50aXR5LnN1YnN0cigyKSwgMTYpIDpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoZW50aXR5LnN1YnN0cigxKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihjb2RlKSB8fCBjb2RlID49IC0zMjc2OCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA8PSA2NTUzNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNociA9IHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaHIgPSBhbHBoYUluZGV4W2VudGl0eV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2hyIHx8IHM7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSHRtbDRFbnRpdGllcy5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbDRFbnRpdGllcygpLmRlY29kZShzdHIpO1xuICAgIH07XG4gICAgSHRtbDRFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBhbHBoYSA9IG51bUluZGV4W3N0ci5jaGFyQ29kZUF0KGkpXTtcbiAgICAgICAgICAgIHJlc3VsdCArPSBhbHBoYSA/IFwiJlwiICsgYWxwaGEgKyBcIjtcIiA6IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIEh0bWw0RW50aXRpZXMuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWw0RW50aXRpZXMoKS5lbmNvZGUoc3RyKTtcbiAgICB9O1xuICAgIEh0bWw0RW50aXRpZXMucHJvdG90eXBlLmVuY29kZU5vblVURiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgc3RyTGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgY2MgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIHZhciBhbHBoYSA9IG51bUluZGV4W2NjXTtcbiAgICAgICAgICAgIGlmIChhbHBoYSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIiZcIiArIGFscGhhICsgXCI7XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjYyA8IDMyIHx8IGNjID4gMTI2KSB7XG4gICAgICAgICAgICAgICAgaWYgKGNjID49IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVGcm9tICYmIGNjIDw9IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVUbykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIHN1cnJvZ2F0ZV9wYWlyc18xLmdldENvZGVQb2ludChzdHIsIGkpICsgJzsnO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIGNjICsgJzsnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBIdG1sNEVudGl0aWVzLmVuY29kZU5vblVURiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdG1sNEVudGl0aWVzKCkuZW5jb2RlTm9uVVRGKHN0cik7XG4gICAgfTtcbiAgICBIdG1sNEVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGVOb25BU0NJSSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgc3RyTGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKGMgPD0gMjU1KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0cltpKytdO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPj0gc3Vycm9nYXRlX3BhaXJzXzEuaGlnaFN1cnJvZ2F0ZUZyb20gJiYgYyA8PSBzdXJyb2dhdGVfcGFpcnNfMS5oaWdoU3Vycm9nYXRlVG8pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIHN1cnJvZ2F0ZV9wYWlyc18xLmdldENvZGVQb2ludChzdHIsIGkpICsgJzsnO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgYyArICc7JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgSHRtbDRFbnRpdGllcy5lbmNvZGVOb25BU0NJSSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdG1sNEVudGl0aWVzKCkuZW5jb2RlTm9uQVNDSUkoc3RyKTtcbiAgICB9O1xuICAgIHJldHVybiBIdG1sNEVudGl0aWVzO1xufSgpKTtcbmV4cG9ydHMuSHRtbDRFbnRpdGllcyA9IEh0bWw0RW50aXRpZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBzdXJyb2dhdGVfcGFpcnNfMSA9IHJlcXVpcmUoXCIuL3N1cnJvZ2F0ZS1wYWlyc1wiKTtcbnZhciBFTlRJVElFUyA9IFtbJ0FhY3V0ZScsIFsxOTNdXSwgWydhYWN1dGUnLCBbMjI1XV0sIFsnQWJyZXZlJywgWzI1OF1dLCBbJ2FicmV2ZScsIFsyNTldXSwgWydhYycsIFs4NzY2XV0sIFsnYWNkJywgWzg3NjddXSwgWydhY0UnLCBbODc2NiwgODE5XV0sIFsnQWNpcmMnLCBbMTk0XV0sIFsnYWNpcmMnLCBbMjI2XV0sIFsnYWN1dGUnLCBbMTgwXV0sIFsnQWN5JywgWzEwNDBdXSwgWydhY3knLCBbMTA3Ml1dLCBbJ0FFbGlnJywgWzE5OF1dLCBbJ2FlbGlnJywgWzIzMF1dLCBbJ2FmJywgWzgyODldXSwgWydBZnInLCBbMTIwMDY4XV0sIFsnYWZyJywgWzEyMDA5NF1dLCBbJ0FncmF2ZScsIFsxOTJdXSwgWydhZ3JhdmUnLCBbMjI0XV0sIFsnYWxlZnN5bScsIFs4NTAxXV0sIFsnYWxlcGgnLCBbODUwMV1dLCBbJ0FscGhhJywgWzkxM11dLCBbJ2FscGhhJywgWzk0NV1dLCBbJ0FtYWNyJywgWzI1Nl1dLCBbJ2FtYWNyJywgWzI1N11dLCBbJ2FtYWxnJywgWzEwODE1XV0sIFsnYW1wJywgWzM4XV0sIFsnQU1QJywgWzM4XV0sIFsnYW5kYW5kJywgWzEwODM3XV0sIFsnQW5kJywgWzEwODM1XV0sIFsnYW5kJywgWzg3NDNdXSwgWydhbmRkJywgWzEwODQ0XV0sIFsnYW5kc2xvcGUnLCBbMTA4NDBdXSwgWydhbmR2JywgWzEwODQyXV0sIFsnYW5nJywgWzg3MzZdXSwgWydhbmdlJywgWzEwNjYwXV0sIFsnYW5nbGUnLCBbODczNl1dLCBbJ2FuZ21zZGFhJywgWzEwNjY0XV0sIFsnYW5nbXNkYWInLCBbMTA2NjVdXSwgWydhbmdtc2RhYycsIFsxMDY2Nl1dLCBbJ2FuZ21zZGFkJywgWzEwNjY3XV0sIFsnYW5nbXNkYWUnLCBbMTA2NjhdXSwgWydhbmdtc2RhZicsIFsxMDY2OV1dLCBbJ2FuZ21zZGFnJywgWzEwNjcwXV0sIFsnYW5nbXNkYWgnLCBbMTA2NzFdXSwgWydhbmdtc2QnLCBbODczN11dLCBbJ2FuZ3J0JywgWzg3MzVdXSwgWydhbmdydHZiJywgWzg4OTRdXSwgWydhbmdydHZiZCcsIFsxMDY1M11dLCBbJ2FuZ3NwaCcsIFs4NzM4XV0sIFsnYW5nc3QnLCBbMTk3XV0sIFsnYW5nemFycicsIFs5MDg0XV0sIFsnQW9nb24nLCBbMjYwXV0sIFsnYW9nb24nLCBbMjYxXV0sIFsnQW9wZicsIFsxMjAxMjBdXSwgWydhb3BmJywgWzEyMDE0Nl1dLCBbJ2FwYWNpcicsIFsxMDg2M11dLCBbJ2FwJywgWzg3NzZdXSwgWydhcEUnLCBbMTA4NjRdXSwgWydhcGUnLCBbODc3OF1dLCBbJ2FwaWQnLCBbODc3OV1dLCBbJ2Fwb3MnLCBbMzldXSwgWydBcHBseUZ1bmN0aW9uJywgWzgyODldXSwgWydhcHByb3gnLCBbODc3Nl1dLCBbJ2FwcHJveGVxJywgWzg3NzhdXSwgWydBcmluZycsIFsxOTddXSwgWydhcmluZycsIFsyMjldXSwgWydBc2NyJywgWzExOTk2NF1dLCBbJ2FzY3InLCBbMTE5OTkwXV0sIFsnQXNzaWduJywgWzg3ODhdXSwgWydhc3QnLCBbNDJdXSwgWydhc3ltcCcsIFs4Nzc2XV0sIFsnYXN5bXBlcScsIFs4NzgxXV0sIFsnQXRpbGRlJywgWzE5NV1dLCBbJ2F0aWxkZScsIFsyMjddXSwgWydBdW1sJywgWzE5Nl1dLCBbJ2F1bWwnLCBbMjI4XV0sIFsnYXdjb25pbnQnLCBbODc1NV1dLCBbJ2F3aW50JywgWzEwNzY5XV0sIFsnYmFja2NvbmcnLCBbODc4MF1dLCBbJ2JhY2tlcHNpbG9uJywgWzEwMTRdXSwgWydiYWNrcHJpbWUnLCBbODI0NV1dLCBbJ2JhY2tzaW0nLCBbODc2NV1dLCBbJ2JhY2tzaW1lcScsIFs4OTA5XV0sIFsnQmFja3NsYXNoJywgWzg3MjZdXSwgWydCYXJ2JywgWzEwOTgzXV0sIFsnYmFydmVlJywgWzg4OTNdXSwgWydiYXJ3ZWQnLCBbODk2NV1dLCBbJ0JhcndlZCcsIFs4OTY2XV0sIFsnYmFyd2VkZ2UnLCBbODk2NV1dLCBbJ2JicmsnLCBbOTE0MV1dLCBbJ2Jicmt0YnJrJywgWzkxNDJdXSwgWydiY29uZycsIFs4NzgwXV0sIFsnQmN5JywgWzEwNDFdXSwgWydiY3knLCBbMTA3M11dLCBbJ2JkcXVvJywgWzgyMjJdXSwgWydiZWNhdXMnLCBbODc1N11dLCBbJ2JlY2F1c2UnLCBbODc1N11dLCBbJ0JlY2F1c2UnLCBbODc1N11dLCBbJ2JlbXB0eXYnLCBbMTA2NzJdXSwgWydiZXBzaScsIFsxMDE0XV0sIFsnYmVybm91JywgWzg0OTJdXSwgWydCZXJub3VsbGlzJywgWzg0OTJdXSwgWydCZXRhJywgWzkxNF1dLCBbJ2JldGEnLCBbOTQ2XV0sIFsnYmV0aCcsIFs4NTAyXV0sIFsnYmV0d2VlbicsIFs4ODEyXV0sIFsnQmZyJywgWzEyMDA2OV1dLCBbJ2JmcicsIFsxMjAwOTVdXSwgWydiaWdjYXAnLCBbODg5OF1dLCBbJ2JpZ2NpcmMnLCBbOTcxMV1dLCBbJ2JpZ2N1cCcsIFs4ODk5XV0sIFsnYmlnb2RvdCcsIFsxMDc1Ml1dLCBbJ2JpZ29wbHVzJywgWzEwNzUzXV0sIFsnYmlnb3RpbWVzJywgWzEwNzU0XV0sIFsnYmlnc3FjdXAnLCBbMTA3NThdXSwgWydiaWdzdGFyJywgWzk3MzNdXSwgWydiaWd0cmlhbmdsZWRvd24nLCBbOTY2MV1dLCBbJ2JpZ3RyaWFuZ2xldXAnLCBbOTY1MV1dLCBbJ2JpZ3VwbHVzJywgWzEwNzU2XV0sIFsnYmlndmVlJywgWzg4OTddXSwgWydiaWd3ZWRnZScsIFs4ODk2XV0sIFsnYmthcm93JywgWzEwNTA5XV0sIFsnYmxhY2tsb3plbmdlJywgWzEwNzMxXV0sIFsnYmxhY2tzcXVhcmUnLCBbOTY0Ml1dLCBbJ2JsYWNrdHJpYW5nbGUnLCBbOTY1Ml1dLCBbJ2JsYWNrdHJpYW5nbGVkb3duJywgWzk2NjJdXSwgWydibGFja3RyaWFuZ2xlbGVmdCcsIFs5NjY2XV0sIFsnYmxhY2t0cmlhbmdsZXJpZ2h0JywgWzk2NTZdXSwgWydibGFuaycsIFs5MjUxXV0sIFsnYmxrMTInLCBbOTYxOF1dLCBbJ2JsazE0JywgWzk2MTddXSwgWydibGszNCcsIFs5NjE5XV0sIFsnYmxvY2snLCBbOTYwOF1dLCBbJ2JuZScsIFs2MSwgODQyMV1dLCBbJ2JuZXF1aXYnLCBbODgwMSwgODQyMV1dLCBbJ2JOb3QnLCBbMTA5ODldXSwgWydibm90JywgWzg5NzZdXSwgWydCb3BmJywgWzEyMDEyMV1dLCBbJ2JvcGYnLCBbMTIwMTQ3XV0sIFsnYm90JywgWzg4NjldXSwgWydib3R0b20nLCBbODg2OV1dLCBbJ2Jvd3RpZScsIFs4OTA0XV0sIFsnYm94Ym94JywgWzEwNjk3XV0sIFsnYm94ZGwnLCBbOTQ4OF1dLCBbJ2JveGRMJywgWzk1NTddXSwgWydib3hEbCcsIFs5NTU4XV0sIFsnYm94REwnLCBbOTU1OV1dLCBbJ2JveGRyJywgWzk0ODRdXSwgWydib3hkUicsIFs5NTU0XV0sIFsnYm94RHInLCBbOTU1NV1dLCBbJ2JveERSJywgWzk1NTZdXSwgWydib3hoJywgWzk0NzJdXSwgWydib3hIJywgWzk1NTJdXSwgWydib3hoZCcsIFs5NTE2XV0sIFsnYm94SGQnLCBbOTU3Ml1dLCBbJ2JveGhEJywgWzk1NzNdXSwgWydib3hIRCcsIFs5NTc0XV0sIFsnYm94aHUnLCBbOTUyNF1dLCBbJ2JveEh1JywgWzk1NzVdXSwgWydib3hoVScsIFs5NTc2XV0sIFsnYm94SFUnLCBbOTU3N11dLCBbJ2JveG1pbnVzJywgWzg4NjNdXSwgWydib3hwbHVzJywgWzg4NjJdXSwgWydib3h0aW1lcycsIFs4ODY0XV0sIFsnYm94dWwnLCBbOTQ5Nl1dLCBbJ2JveHVMJywgWzk1NjNdXSwgWydib3hVbCcsIFs5NTY0XV0sIFsnYm94VUwnLCBbOTU2NV1dLCBbJ2JveHVyJywgWzk0OTJdXSwgWydib3h1UicsIFs5NTYwXV0sIFsnYm94VXInLCBbOTU2MV1dLCBbJ2JveFVSJywgWzk1NjJdXSwgWydib3h2JywgWzk0NzRdXSwgWydib3hWJywgWzk1NTNdXSwgWydib3h2aCcsIFs5NTMyXV0sIFsnYm94dkgnLCBbOTU3OF1dLCBbJ2JveFZoJywgWzk1NzldXSwgWydib3hWSCcsIFs5NTgwXV0sIFsnYm94dmwnLCBbOTUwOF1dLCBbJ2JveHZMJywgWzk1NjldXSwgWydib3hWbCcsIFs5NTcwXV0sIFsnYm94VkwnLCBbOTU3MV1dLCBbJ2JveHZyJywgWzk1MDBdXSwgWydib3h2UicsIFs5NTY2XV0sIFsnYm94VnInLCBbOTU2N11dLCBbJ2JveFZSJywgWzk1NjhdXSwgWydicHJpbWUnLCBbODI0NV1dLCBbJ2JyZXZlJywgWzcyOF1dLCBbJ0JyZXZlJywgWzcyOF1dLCBbJ2JydmJhcicsIFsxNjZdXSwgWydic2NyJywgWzExOTk5MV1dLCBbJ0JzY3InLCBbODQ5Ml1dLCBbJ2JzZW1pJywgWzgyNzFdXSwgWydic2ltJywgWzg3NjVdXSwgWydic2ltZScsIFs4OTA5XV0sIFsnYnNvbGInLCBbMTA2OTNdXSwgWydic29sJywgWzkyXV0sIFsnYnNvbGhzdWInLCBbMTAxODRdXSwgWydidWxsJywgWzgyMjZdXSwgWydidWxsZXQnLCBbODIyNl1dLCBbJ2J1bXAnLCBbODc4Ml1dLCBbJ2J1bXBFJywgWzEwOTI2XV0sIFsnYnVtcGUnLCBbODc4M11dLCBbJ0J1bXBlcScsIFs4NzgyXV0sIFsnYnVtcGVxJywgWzg3ODNdXSwgWydDYWN1dGUnLCBbMjYyXV0sIFsnY2FjdXRlJywgWzI2M11dLCBbJ2NhcGFuZCcsIFsxMDgyMF1dLCBbJ2NhcGJyY3VwJywgWzEwODI1XV0sIFsnY2FwY2FwJywgWzEwODI3XV0sIFsnY2FwJywgWzg3NDVdXSwgWydDYXAnLCBbODkxNF1dLCBbJ2NhcGN1cCcsIFsxMDgyM11dLCBbJ2NhcGRvdCcsIFsxMDgxNl1dLCBbJ0NhcGl0YWxEaWZmZXJlbnRpYWxEJywgWzg1MTddXSwgWydjYXBzJywgWzg3NDUsIDY1MDI0XV0sIFsnY2FyZXQnLCBbODI1N11dLCBbJ2Nhcm9uJywgWzcxMV1dLCBbJ0NheWxleXMnLCBbODQ5M11dLCBbJ2NjYXBzJywgWzEwODI5XV0sIFsnQ2Nhcm9uJywgWzI2OF1dLCBbJ2NjYXJvbicsIFsyNjldXSwgWydDY2VkaWwnLCBbMTk5XV0sIFsnY2NlZGlsJywgWzIzMV1dLCBbJ0NjaXJjJywgWzI2NF1dLCBbJ2NjaXJjJywgWzI2NV1dLCBbJ0Njb25pbnQnLCBbODc1Ml1dLCBbJ2NjdXBzJywgWzEwODI4XV0sIFsnY2N1cHNzbScsIFsxMDgzMl1dLCBbJ0Nkb3QnLCBbMjY2XV0sIFsnY2RvdCcsIFsyNjddXSwgWydjZWRpbCcsIFsxODRdXSwgWydDZWRpbGxhJywgWzE4NF1dLCBbJ2NlbXB0eXYnLCBbMTA2NzRdXSwgWydjZW50JywgWzE2Ml1dLCBbJ2NlbnRlcmRvdCcsIFsxODNdXSwgWydDZW50ZXJEb3QnLCBbMTgzXV0sIFsnY2ZyJywgWzEyMDA5Nl1dLCBbJ0NmcicsIFs4NDkzXV0sIFsnQ0hjeScsIFsxMDYzXV0sIFsnY2hjeScsIFsxMDk1XV0sIFsnY2hlY2snLCBbMTAwMDNdXSwgWydjaGVja21hcmsnLCBbMTAwMDNdXSwgWydDaGknLCBbOTM1XV0sIFsnY2hpJywgWzk2N11dLCBbJ2NpcmMnLCBbNzEwXV0sIFsnY2lyY2VxJywgWzg3OTFdXSwgWydjaXJjbGVhcnJvd2xlZnQnLCBbODYzNF1dLCBbJ2NpcmNsZWFycm93cmlnaHQnLCBbODYzNV1dLCBbJ2NpcmNsZWRhc3QnLCBbODg1OV1dLCBbJ2NpcmNsZWRjaXJjJywgWzg4NThdXSwgWydjaXJjbGVkZGFzaCcsIFs4ODYxXV0sIFsnQ2lyY2xlRG90JywgWzg4NTddXSwgWydjaXJjbGVkUicsIFsxNzRdXSwgWydjaXJjbGVkUycsIFs5NDE2XV0sIFsnQ2lyY2xlTWludXMnLCBbODg1NF1dLCBbJ0NpcmNsZVBsdXMnLCBbODg1M11dLCBbJ0NpcmNsZVRpbWVzJywgWzg4NTVdXSwgWydjaXInLCBbOTY3NV1dLCBbJ2NpckUnLCBbMTA2OTFdXSwgWydjaXJlJywgWzg3OTFdXSwgWydjaXJmbmludCcsIFsxMDc2OF1dLCBbJ2Npcm1pZCcsIFsxMDk5MV1dLCBbJ2NpcnNjaXInLCBbMTA2OTBdXSwgWydDbG9ja3dpc2VDb250b3VySW50ZWdyYWwnLCBbODc1NF1dLCBbJ2NsdWJzJywgWzk4MjddXSwgWydjbHVic3VpdCcsIFs5ODI3XV0sIFsnY29sb24nLCBbNThdXSwgWydDb2xvbicsIFs4NzU5XV0sIFsnQ29sb25lJywgWzEwODY4XV0sIFsnY29sb25lJywgWzg3ODhdXSwgWydjb2xvbmVxJywgWzg3ODhdXSwgWydjb21tYScsIFs0NF1dLCBbJ2NvbW1hdCcsIFs2NF1dLCBbJ2NvbXAnLCBbODcwNV1dLCBbJ2NvbXBmbicsIFs4NzI4XV0sIFsnY29tcGxlbWVudCcsIFs4NzA1XV0sIFsnY29tcGxleGVzJywgWzg0NTBdXSwgWydjb25nJywgWzg3NzNdXSwgWydjb25nZG90JywgWzEwODYxXV0sIFsnQ29uZ3J1ZW50JywgWzg4MDFdXSwgWydjb25pbnQnLCBbODc1MF1dLCBbJ0NvbmludCcsIFs4NzUxXV0sIFsnQ29udG91ckludGVncmFsJywgWzg3NTBdXSwgWydjb3BmJywgWzEyMDE0OF1dLCBbJ0NvcGYnLCBbODQ1MF1dLCBbJ2NvcHJvZCcsIFs4NzIwXV0sIFsnQ29wcm9kdWN0JywgWzg3MjBdXSwgWydjb3B5JywgWzE2OV1dLCBbJ0NPUFknLCBbMTY5XV0sIFsnY29weXNyJywgWzg0NzFdXSwgWydDb3VudGVyQ2xvY2t3aXNlQ29udG91ckludGVncmFsJywgWzg3NTVdXSwgWydjcmFycicsIFs4NjI5XV0sIFsnY3Jvc3MnLCBbMTAwMDddXSwgWydDcm9zcycsIFsxMDc5OV1dLCBbJ0NzY3InLCBbMTE5OTY2XV0sIFsnY3NjcicsIFsxMTk5OTJdXSwgWydjc3ViJywgWzEwOTU5XV0sIFsnY3N1YmUnLCBbMTA5NjFdXSwgWydjc3VwJywgWzEwOTYwXV0sIFsnY3N1cGUnLCBbMTA5NjJdXSwgWydjdGRvdCcsIFs4OTQzXV0sIFsnY3VkYXJybCcsIFsxMDU1Ml1dLCBbJ2N1ZGFycnInLCBbMTA1NDldXSwgWydjdWVwcicsIFs4OTI2XV0sIFsnY3Vlc2MnLCBbODkyN11dLCBbJ2N1bGFycicsIFs4NjMwXV0sIFsnY3VsYXJycCcsIFsxMDU1N11dLCBbJ2N1cGJyY2FwJywgWzEwODI0XV0sIFsnY3VwY2FwJywgWzEwODIyXV0sIFsnQ3VwQ2FwJywgWzg3ODFdXSwgWydjdXAnLCBbODc0Nl1dLCBbJ0N1cCcsIFs4OTE1XV0sIFsnY3VwY3VwJywgWzEwODI2XV0sIFsnY3VwZG90JywgWzg4NDVdXSwgWydjdXBvcicsIFsxMDgyMV1dLCBbJ2N1cHMnLCBbODc0NiwgNjUwMjRdXSwgWydjdXJhcnInLCBbODYzMV1dLCBbJ2N1cmFycm0nLCBbMTA1NTZdXSwgWydjdXJseWVxcHJlYycsIFs4OTI2XV0sIFsnY3VybHllcXN1Y2MnLCBbODkyN11dLCBbJ2N1cmx5dmVlJywgWzg5MTBdXSwgWydjdXJseXdlZGdlJywgWzg5MTFdXSwgWydjdXJyZW4nLCBbMTY0XV0sIFsnY3VydmVhcnJvd2xlZnQnLCBbODYzMF1dLCBbJ2N1cnZlYXJyb3dyaWdodCcsIFs4NjMxXV0sIFsnY3V2ZWUnLCBbODkxMF1dLCBbJ2N1d2VkJywgWzg5MTFdXSwgWydjd2NvbmludCcsIFs4NzU0XV0sIFsnY3dpbnQnLCBbODc1M11dLCBbJ2N5bGN0eScsIFs5MDA1XV0sIFsnZGFnZ2VyJywgWzgyMjRdXSwgWydEYWdnZXInLCBbODIyNV1dLCBbJ2RhbGV0aCcsIFs4NTA0XV0sIFsnZGFycicsIFs4NTk1XV0sIFsnRGFycicsIFs4NjA5XV0sIFsnZEFycicsIFs4NjU5XV0sIFsnZGFzaCcsIFs4MjA4XV0sIFsnRGFzaHYnLCBbMTA5ODBdXSwgWydkYXNodicsIFs4ODY3XV0sIFsnZGJrYXJvdycsIFsxMDUxMV1dLCBbJ2RibGFjJywgWzczM11dLCBbJ0RjYXJvbicsIFsyNzBdXSwgWydkY2Fyb24nLCBbMjcxXV0sIFsnRGN5JywgWzEwNDRdXSwgWydkY3knLCBbMTA3Nl1dLCBbJ2RkYWdnZXInLCBbODIyNV1dLCBbJ2RkYXJyJywgWzg2NTBdXSwgWydERCcsIFs4NTE3XV0sIFsnZGQnLCBbODUxOF1dLCBbJ0REb3RyYWhkJywgWzEwNTEzXV0sIFsnZGRvdHNlcScsIFsxMDg3MV1dLCBbJ2RlZycsIFsxNzZdXSwgWydEZWwnLCBbODcxMV1dLCBbJ0RlbHRhJywgWzkxNl1dLCBbJ2RlbHRhJywgWzk0OF1dLCBbJ2RlbXB0eXYnLCBbMTA2NzNdXSwgWydkZmlzaHQnLCBbMTA2MjNdXSwgWydEZnInLCBbMTIwMDcxXV0sIFsnZGZyJywgWzEyMDA5N11dLCBbJ2RIYXInLCBbMTA1OTddXSwgWydkaGFybCcsIFs4NjQzXV0sIFsnZGhhcnInLCBbODY0Ml1dLCBbJ0RpYWNyaXRpY2FsQWN1dGUnLCBbMTgwXV0sIFsnRGlhY3JpdGljYWxEb3QnLCBbNzI5XV0sIFsnRGlhY3JpdGljYWxEb3VibGVBY3V0ZScsIFs3MzNdXSwgWydEaWFjcml0aWNhbEdyYXZlJywgWzk2XV0sIFsnRGlhY3JpdGljYWxUaWxkZScsIFs3MzJdXSwgWydkaWFtJywgWzg5MDBdXSwgWydkaWFtb25kJywgWzg5MDBdXSwgWydEaWFtb25kJywgWzg5MDBdXSwgWydkaWFtb25kc3VpdCcsIFs5ODMwXV0sIFsnZGlhbXMnLCBbOTgzMF1dLCBbJ2RpZScsIFsxNjhdXSwgWydEaWZmZXJlbnRpYWxEJywgWzg1MThdXSwgWydkaWdhbW1hJywgWzk4OV1dLCBbJ2Rpc2luJywgWzg5NDZdXSwgWydkaXYnLCBbMjQ3XV0sIFsnZGl2aWRlJywgWzI0N11dLCBbJ2RpdmlkZW9udGltZXMnLCBbODkwM11dLCBbJ2Rpdm9ueCcsIFs4OTAzXV0sIFsnREpjeScsIFsxMDI2XV0sIFsnZGpjeScsIFsxMTA2XV0sIFsnZGxjb3JuJywgWzg5OTBdXSwgWydkbGNyb3AnLCBbODk3M11dLCBbJ2RvbGxhcicsIFszNl1dLCBbJ0RvcGYnLCBbMTIwMTIzXV0sIFsnZG9wZicsIFsxMjAxNDldXSwgWydEb3QnLCBbMTY4XV0sIFsnZG90JywgWzcyOV1dLCBbJ0RvdERvdCcsIFs4NDEyXV0sIFsnZG90ZXEnLCBbODc4NF1dLCBbJ2RvdGVxZG90JywgWzg3ODVdXSwgWydEb3RFcXVhbCcsIFs4Nzg0XV0sIFsnZG90bWludXMnLCBbODc2MF1dLCBbJ2RvdHBsdXMnLCBbODcyNF1dLCBbJ2RvdHNxdWFyZScsIFs4ODY1XV0sIFsnZG91YmxlYmFyd2VkZ2UnLCBbODk2Nl1dLCBbJ0RvdWJsZUNvbnRvdXJJbnRlZ3JhbCcsIFs4NzUxXV0sIFsnRG91YmxlRG90JywgWzE2OF1dLCBbJ0RvdWJsZURvd25BcnJvdycsIFs4NjU5XV0sIFsnRG91YmxlTGVmdEFycm93JywgWzg2NTZdXSwgWydEb3VibGVMZWZ0UmlnaHRBcnJvdycsIFs4NjYwXV0sIFsnRG91YmxlTGVmdFRlZScsIFsxMDk4MF1dLCBbJ0RvdWJsZUxvbmdMZWZ0QXJyb3cnLCBbMTAyMzJdXSwgWydEb3VibGVMb25nTGVmdFJpZ2h0QXJyb3cnLCBbMTAyMzRdXSwgWydEb3VibGVMb25nUmlnaHRBcnJvdycsIFsxMDIzM11dLCBbJ0RvdWJsZVJpZ2h0QXJyb3cnLCBbODY1OF1dLCBbJ0RvdWJsZVJpZ2h0VGVlJywgWzg4NzJdXSwgWydEb3VibGVVcEFycm93JywgWzg2NTddXSwgWydEb3VibGVVcERvd25BcnJvdycsIFs4NjYxXV0sIFsnRG91YmxlVmVydGljYWxCYXInLCBbODc0MV1dLCBbJ0Rvd25BcnJvd0JhcicsIFsxMDUxNV1dLCBbJ2Rvd25hcnJvdycsIFs4NTk1XV0sIFsnRG93bkFycm93JywgWzg1OTVdXSwgWydEb3duYXJyb3cnLCBbODY1OV1dLCBbJ0Rvd25BcnJvd1VwQXJyb3cnLCBbODY5M11dLCBbJ0Rvd25CcmV2ZScsIFs3ODVdXSwgWydkb3duZG93bmFycm93cycsIFs4NjUwXV0sIFsnZG93bmhhcnBvb25sZWZ0JywgWzg2NDNdXSwgWydkb3duaGFycG9vbnJpZ2h0JywgWzg2NDJdXSwgWydEb3duTGVmdFJpZ2h0VmVjdG9yJywgWzEwNTc2XV0sIFsnRG93bkxlZnRUZWVWZWN0b3InLCBbMTA1OTBdXSwgWydEb3duTGVmdFZlY3RvckJhcicsIFsxMDU4Ml1dLCBbJ0Rvd25MZWZ0VmVjdG9yJywgWzg2MzddXSwgWydEb3duUmlnaHRUZWVWZWN0b3InLCBbMTA1OTFdXSwgWydEb3duUmlnaHRWZWN0b3JCYXInLCBbMTA1ODNdXSwgWydEb3duUmlnaHRWZWN0b3InLCBbODY0MV1dLCBbJ0Rvd25UZWVBcnJvdycsIFs4NjE1XV0sIFsnRG93blRlZScsIFs4ODY4XV0sIFsnZHJia2Fyb3cnLCBbMTA1MTJdXSwgWydkcmNvcm4nLCBbODk5MV1dLCBbJ2RyY3JvcCcsIFs4OTcyXV0sIFsnRHNjcicsIFsxMTk5NjddXSwgWydkc2NyJywgWzExOTk5M11dLCBbJ0RTY3knLCBbMTAyOV1dLCBbJ2RzY3knLCBbMTEwOV1dLCBbJ2Rzb2wnLCBbMTA3NDJdXSwgWydEc3Ryb2snLCBbMjcyXV0sIFsnZHN0cm9rJywgWzI3M11dLCBbJ2R0ZG90JywgWzg5NDVdXSwgWydkdHJpJywgWzk2NjNdXSwgWydkdHJpZicsIFs5NjYyXV0sIFsnZHVhcnInLCBbODY5M11dLCBbJ2R1aGFyJywgWzEwNjA3XV0sIFsnZHdhbmdsZScsIFsxMDY2Ml1dLCBbJ0RaY3knLCBbMTAzOV1dLCBbJ2R6Y3knLCBbMTExOV1dLCBbJ2R6aWdyYXJyJywgWzEwMjM5XV0sIFsnRWFjdXRlJywgWzIwMV1dLCBbJ2VhY3V0ZScsIFsyMzNdXSwgWydlYXN0ZXInLCBbMTA4NjJdXSwgWydFY2Fyb24nLCBbMjgyXV0sIFsnZWNhcm9uJywgWzI4M11dLCBbJ0VjaXJjJywgWzIwMl1dLCBbJ2VjaXJjJywgWzIzNF1dLCBbJ2VjaXInLCBbODc5MF1dLCBbJ2Vjb2xvbicsIFs4Nzg5XV0sIFsnRWN5JywgWzEwNjldXSwgWydlY3knLCBbMTEwMV1dLCBbJ2VERG90JywgWzEwODcxXV0sIFsnRWRvdCcsIFsyNzhdXSwgWydlZG90JywgWzI3OV1dLCBbJ2VEb3QnLCBbODc4NV1dLCBbJ2VlJywgWzg1MTldXSwgWydlZkRvdCcsIFs4Nzg2XV0sIFsnRWZyJywgWzEyMDA3Ml1dLCBbJ2VmcicsIFsxMjAwOThdXSwgWydlZycsIFsxMDkwNl1dLCBbJ0VncmF2ZScsIFsyMDBdXSwgWydlZ3JhdmUnLCBbMjMyXV0sIFsnZWdzJywgWzEwOTAyXV0sIFsnZWdzZG90JywgWzEwOTA0XV0sIFsnZWwnLCBbMTA5MDVdXSwgWydFbGVtZW50JywgWzg3MTJdXSwgWydlbGludGVycycsIFs5MTkxXV0sIFsnZWxsJywgWzg0NjddXSwgWydlbHMnLCBbMTA5MDFdXSwgWydlbHNkb3QnLCBbMTA5MDNdXSwgWydFbWFjcicsIFsyNzRdXSwgWydlbWFjcicsIFsyNzVdXSwgWydlbXB0eScsIFs4NzA5XV0sIFsnZW1wdHlzZXQnLCBbODcwOV1dLCBbJ0VtcHR5U21hbGxTcXVhcmUnLCBbOTcyM11dLCBbJ2VtcHR5dicsIFs4NzA5XV0sIFsnRW1wdHlWZXJ5U21hbGxTcXVhcmUnLCBbOTY0M11dLCBbJ2Vtc3AxMycsIFs4MTk2XV0sIFsnZW1zcDE0JywgWzgxOTddXSwgWydlbXNwJywgWzgxOTVdXSwgWydFTkcnLCBbMzMwXV0sIFsnZW5nJywgWzMzMV1dLCBbJ2Vuc3AnLCBbODE5NF1dLCBbJ0VvZ29uJywgWzI4MF1dLCBbJ2VvZ29uJywgWzI4MV1dLCBbJ0VvcGYnLCBbMTIwMTI0XV0sIFsnZW9wZicsIFsxMjAxNTBdXSwgWydlcGFyJywgWzg5MTddXSwgWydlcGFyc2wnLCBbMTA3MjNdXSwgWydlcGx1cycsIFsxMDg2NV1dLCBbJ2Vwc2knLCBbOTQ5XV0sIFsnRXBzaWxvbicsIFs5MTddXSwgWydlcHNpbG9uJywgWzk0OV1dLCBbJ2Vwc2l2JywgWzEwMTNdXSwgWydlcWNpcmMnLCBbODc5MF1dLCBbJ2VxY29sb24nLCBbODc4OV1dLCBbJ2Vxc2ltJywgWzg3NzBdXSwgWydlcXNsYW50Z3RyJywgWzEwOTAyXV0sIFsnZXFzbGFudGxlc3MnLCBbMTA5MDFdXSwgWydFcXVhbCcsIFsxMDg2OV1dLCBbJ2VxdWFscycsIFs2MV1dLCBbJ0VxdWFsVGlsZGUnLCBbODc3MF1dLCBbJ2VxdWVzdCcsIFs4Nzk5XV0sIFsnRXF1aWxpYnJpdW0nLCBbODY1Ml1dLCBbJ2VxdWl2JywgWzg4MDFdXSwgWydlcXVpdkREJywgWzEwODcyXV0sIFsnZXF2cGFyc2wnLCBbMTA3MjVdXSwgWydlcmFycicsIFsxMDYwOV1dLCBbJ2VyRG90JywgWzg3ODddXSwgWydlc2NyJywgWzg0OTVdXSwgWydFc2NyJywgWzg0OTZdXSwgWydlc2RvdCcsIFs4Nzg0XV0sIFsnRXNpbScsIFsxMDg2N11dLCBbJ2VzaW0nLCBbODc3MF1dLCBbJ0V0YScsIFs5MTldXSwgWydldGEnLCBbOTUxXV0sIFsnRVRIJywgWzIwOF1dLCBbJ2V0aCcsIFsyNDBdXSwgWydFdW1sJywgWzIwM11dLCBbJ2V1bWwnLCBbMjM1XV0sIFsnZXVybycsIFs4MzY0XV0sIFsnZXhjbCcsIFszM11dLCBbJ2V4aXN0JywgWzg3MDddXSwgWydFeGlzdHMnLCBbODcwN11dLCBbJ2V4cGVjdGF0aW9uJywgWzg0OTZdXSwgWydleHBvbmVudGlhbGUnLCBbODUxOV1dLCBbJ0V4cG9uZW50aWFsRScsIFs4NTE5XV0sIFsnZmFsbGluZ2RvdHNlcScsIFs4Nzg2XV0sIFsnRmN5JywgWzEwNjBdXSwgWydmY3knLCBbMTA5Ml1dLCBbJ2ZlbWFsZScsIFs5NzkyXV0sIFsnZmZpbGlnJywgWzY0MjU5XV0sIFsnZmZsaWcnLCBbNjQyNTZdXSwgWydmZmxsaWcnLCBbNjQyNjBdXSwgWydGZnInLCBbMTIwMDczXV0sIFsnZmZyJywgWzEyMDA5OV1dLCBbJ2ZpbGlnJywgWzY0MjU3XV0sIFsnRmlsbGVkU21hbGxTcXVhcmUnLCBbOTcyNF1dLCBbJ0ZpbGxlZFZlcnlTbWFsbFNxdWFyZScsIFs5NjQyXV0sIFsnZmpsaWcnLCBbMTAyLCAxMDZdXSwgWydmbGF0JywgWzk4MzddXSwgWydmbGxpZycsIFs2NDI1OF1dLCBbJ2ZsdG5zJywgWzk2NDldXSwgWydmbm9mJywgWzQwMl1dLCBbJ0ZvcGYnLCBbMTIwMTI1XV0sIFsnZm9wZicsIFsxMjAxNTFdXSwgWydmb3JhbGwnLCBbODcwNF1dLCBbJ0ZvckFsbCcsIFs4NzA0XV0sIFsnZm9yaycsIFs4OTE2XV0sIFsnZm9ya3YnLCBbMTA5NjldXSwgWydGb3VyaWVydHJmJywgWzg0OTddXSwgWydmcGFydGludCcsIFsxMDc2NV1dLCBbJ2ZyYWMxMicsIFsxODldXSwgWydmcmFjMTMnLCBbODUzMV1dLCBbJ2ZyYWMxNCcsIFsxODhdXSwgWydmcmFjMTUnLCBbODUzM11dLCBbJ2ZyYWMxNicsIFs4NTM3XV0sIFsnZnJhYzE4JywgWzg1MzldXSwgWydmcmFjMjMnLCBbODUzMl1dLCBbJ2ZyYWMyNScsIFs4NTM0XV0sIFsnZnJhYzM0JywgWzE5MF1dLCBbJ2ZyYWMzNScsIFs4NTM1XV0sIFsnZnJhYzM4JywgWzg1NDBdXSwgWydmcmFjNDUnLCBbODUzNl1dLCBbJ2ZyYWM1NicsIFs4NTM4XV0sIFsnZnJhYzU4JywgWzg1NDFdXSwgWydmcmFjNzgnLCBbODU0Ml1dLCBbJ2ZyYXNsJywgWzgyNjBdXSwgWydmcm93bicsIFs4OTk0XV0sIFsnZnNjcicsIFsxMTk5OTVdXSwgWydGc2NyJywgWzg0OTddXSwgWydnYWN1dGUnLCBbNTAxXV0sIFsnR2FtbWEnLCBbOTE1XV0sIFsnZ2FtbWEnLCBbOTQ3XV0sIFsnR2FtbWFkJywgWzk4OF1dLCBbJ2dhbW1hZCcsIFs5ODldXSwgWydnYXAnLCBbMTA4ODZdXSwgWydHYnJldmUnLCBbMjg2XV0sIFsnZ2JyZXZlJywgWzI4N11dLCBbJ0djZWRpbCcsIFsyOTBdXSwgWydHY2lyYycsIFsyODRdXSwgWydnY2lyYycsIFsyODVdXSwgWydHY3knLCBbMTA0M11dLCBbJ2djeScsIFsxMDc1XV0sIFsnR2RvdCcsIFsyODhdXSwgWydnZG90JywgWzI4OV1dLCBbJ2dlJywgWzg4MDVdXSwgWydnRScsIFs4ODA3XV0sIFsnZ0VsJywgWzEwODkyXV0sIFsnZ2VsJywgWzg5MjNdXSwgWydnZXEnLCBbODgwNV1dLCBbJ2dlcXEnLCBbODgwN11dLCBbJ2dlcXNsYW50JywgWzEwODc4XV0sIFsnZ2VzY2MnLCBbMTA5MjFdXSwgWydnZXMnLCBbMTA4NzhdXSwgWydnZXNkb3QnLCBbMTA4ODBdXSwgWydnZXNkb3RvJywgWzEwODgyXV0sIFsnZ2VzZG90b2wnLCBbMTA4ODRdXSwgWydnZXNsJywgWzg5MjMsIDY1MDI0XV0sIFsnZ2VzbGVzJywgWzEwOTAwXV0sIFsnR2ZyJywgWzEyMDA3NF1dLCBbJ2dmcicsIFsxMjAxMDBdXSwgWydnZycsIFs4ODExXV0sIFsnR2cnLCBbODkyMV1dLCBbJ2dnZycsIFs4OTIxXV0sIFsnZ2ltZWwnLCBbODUwM11dLCBbJ0dKY3knLCBbMTAyN11dLCBbJ2dqY3knLCBbMTEwN11dLCBbJ2dsYScsIFsxMDkxN11dLCBbJ2dsJywgWzg4MjNdXSwgWydnbEUnLCBbMTA4OThdXSwgWydnbGonLCBbMTA5MTZdXSwgWydnbmFwJywgWzEwODkwXV0sIFsnZ25hcHByb3gnLCBbMTA4OTBdXSwgWydnbmUnLCBbMTA4ODhdXSwgWydnbkUnLCBbODgwOV1dLCBbJ2duZXEnLCBbMTA4ODhdXSwgWydnbmVxcScsIFs4ODA5XV0sIFsnZ25zaW0nLCBbODkzNV1dLCBbJ0dvcGYnLCBbMTIwMTI2XV0sIFsnZ29wZicsIFsxMjAxNTJdXSwgWydncmF2ZScsIFs5Nl1dLCBbJ0dyZWF0ZXJFcXVhbCcsIFs4ODA1XV0sIFsnR3JlYXRlckVxdWFsTGVzcycsIFs4OTIzXV0sIFsnR3JlYXRlckZ1bGxFcXVhbCcsIFs4ODA3XV0sIFsnR3JlYXRlckdyZWF0ZXInLCBbMTA5MTRdXSwgWydHcmVhdGVyTGVzcycsIFs4ODIzXV0sIFsnR3JlYXRlclNsYW50RXF1YWwnLCBbMTA4NzhdXSwgWydHcmVhdGVyVGlsZGUnLCBbODgxOV1dLCBbJ0dzY3InLCBbMTE5OTcwXV0sIFsnZ3NjcicsIFs4NDU4XV0sIFsnZ3NpbScsIFs4ODE5XV0sIFsnZ3NpbWUnLCBbMTA4OTRdXSwgWydnc2ltbCcsIFsxMDg5Nl1dLCBbJ2d0Y2MnLCBbMTA5MTldXSwgWydndGNpcicsIFsxMDg3NF1dLCBbJ2d0JywgWzYyXV0sIFsnR1QnLCBbNjJdXSwgWydHdCcsIFs4ODExXV0sIFsnZ3Rkb3QnLCBbODkxOV1dLCBbJ2d0bFBhcicsIFsxMDY0NV1dLCBbJ2d0cXVlc3QnLCBbMTA4NzZdXSwgWydndHJhcHByb3gnLCBbMTA4ODZdXSwgWydndHJhcnInLCBbMTA2MTZdXSwgWydndHJkb3QnLCBbODkxOV1dLCBbJ2d0cmVxbGVzcycsIFs4OTIzXV0sIFsnZ3RyZXFxbGVzcycsIFsxMDg5Ml1dLCBbJ2d0cmxlc3MnLCBbODgyM11dLCBbJ2d0cnNpbScsIFs4ODE5XV0sIFsnZ3ZlcnRuZXFxJywgWzg4MDksIDY1MDI0XV0sIFsnZ3ZuRScsIFs4ODA5LCA2NTAyNF1dLCBbJ0hhY2VrJywgWzcxMV1dLCBbJ2hhaXJzcCcsIFs4MjAyXV0sIFsnaGFsZicsIFsxODldXSwgWydoYW1pbHQnLCBbODQ1OV1dLCBbJ0hBUkRjeScsIFsxMDY2XV0sIFsnaGFyZGN5JywgWzEwOThdXSwgWydoYXJyY2lyJywgWzEwNTY4XV0sIFsnaGFycicsIFs4NTk2XV0sIFsnaEFycicsIFs4NjYwXV0sIFsnaGFycncnLCBbODYyMV1dLCBbJ0hhdCcsIFs5NF1dLCBbJ2hiYXInLCBbODQ2M11dLCBbJ0hjaXJjJywgWzI5Ml1dLCBbJ2hjaXJjJywgWzI5M11dLCBbJ2hlYXJ0cycsIFs5ODI5XV0sIFsnaGVhcnRzdWl0JywgWzk4MjldXSwgWydoZWxsaXAnLCBbODIzMF1dLCBbJ2hlcmNvbicsIFs4ODg5XV0sIFsnaGZyJywgWzEyMDEwMV1dLCBbJ0hmcicsIFs4NDYwXV0sIFsnSGlsYmVydFNwYWNlJywgWzg0NTldXSwgWydoa3NlYXJvdycsIFsxMDUzM11dLCBbJ2hrc3dhcm93JywgWzEwNTM0XV0sIFsnaG9hcnInLCBbODcwM11dLCBbJ2hvbXRodCcsIFs4NzYzXV0sIFsnaG9va2xlZnRhcnJvdycsIFs4NjE3XV0sIFsnaG9va3JpZ2h0YXJyb3cnLCBbODYxOF1dLCBbJ2hvcGYnLCBbMTIwMTUzXV0sIFsnSG9wZicsIFs4NDYxXV0sIFsnaG9yYmFyJywgWzgyMTNdXSwgWydIb3Jpem9udGFsTGluZScsIFs5NDcyXV0sIFsnaHNjcicsIFsxMTk5OTddXSwgWydIc2NyJywgWzg0NTldXSwgWydoc2xhc2gnLCBbODQ2M11dLCBbJ0hzdHJvaycsIFsyOTRdXSwgWydoc3Ryb2snLCBbMjk1XV0sIFsnSHVtcERvd25IdW1wJywgWzg3ODJdXSwgWydIdW1wRXF1YWwnLCBbODc4M11dLCBbJ2h5YnVsbCcsIFs4MjU5XV0sIFsnaHlwaGVuJywgWzgyMDhdXSwgWydJYWN1dGUnLCBbMjA1XV0sIFsnaWFjdXRlJywgWzIzN11dLCBbJ2ljJywgWzgyOTFdXSwgWydJY2lyYycsIFsyMDZdXSwgWydpY2lyYycsIFsyMzhdXSwgWydJY3knLCBbMTA0OF1dLCBbJ2ljeScsIFsxMDgwXV0sIFsnSWRvdCcsIFszMDRdXSwgWydJRWN5JywgWzEwNDVdXSwgWydpZWN5JywgWzEwNzddXSwgWydpZXhjbCcsIFsxNjFdXSwgWydpZmYnLCBbODY2MF1dLCBbJ2lmcicsIFsxMjAxMDJdXSwgWydJZnInLCBbODQ2NV1dLCBbJ0lncmF2ZScsIFsyMDRdXSwgWydpZ3JhdmUnLCBbMjM2XV0sIFsnaWknLCBbODUyMF1dLCBbJ2lpaWludCcsIFsxMDc2NF1dLCBbJ2lpaW50JywgWzg3NDldXSwgWydpaW5maW4nLCBbMTA3MTZdXSwgWydpaW90YScsIFs4NDg5XV0sIFsnSUpsaWcnLCBbMzA2XV0sIFsnaWpsaWcnLCBbMzA3XV0sIFsnSW1hY3InLCBbMjk4XV0sIFsnaW1hY3InLCBbMjk5XV0sIFsnaW1hZ2UnLCBbODQ2NV1dLCBbJ0ltYWdpbmFyeUknLCBbODUyMF1dLCBbJ2ltYWdsaW5lJywgWzg0NjRdXSwgWydpbWFncGFydCcsIFs4NDY1XV0sIFsnaW1hdGgnLCBbMzA1XV0sIFsnSW0nLCBbODQ2NV1dLCBbJ2ltb2YnLCBbODg4N11dLCBbJ2ltcGVkJywgWzQzN11dLCBbJ0ltcGxpZXMnLCBbODY1OF1dLCBbJ2luY2FyZScsIFs4NDUzXV0sIFsnaW4nLCBbODcxMl1dLCBbJ2luZmluJywgWzg3MzRdXSwgWydpbmZpbnRpZScsIFsxMDcxN11dLCBbJ2lub2RvdCcsIFszMDVdXSwgWydpbnRjYWwnLCBbODg5MF1dLCBbJ2ludCcsIFs4NzQ3XV0sIFsnSW50JywgWzg3NDhdXSwgWydpbnRlZ2VycycsIFs4NDg0XV0sIFsnSW50ZWdyYWwnLCBbODc0N11dLCBbJ2ludGVyY2FsJywgWzg4OTBdXSwgWydJbnRlcnNlY3Rpb24nLCBbODg5OF1dLCBbJ2ludGxhcmhrJywgWzEwNzc1XV0sIFsnaW50cHJvZCcsIFsxMDgxMl1dLCBbJ0ludmlzaWJsZUNvbW1hJywgWzgyOTFdXSwgWydJbnZpc2libGVUaW1lcycsIFs4MjkwXV0sIFsnSU9jeScsIFsxMDI1XV0sIFsnaW9jeScsIFsxMTA1XV0sIFsnSW9nb24nLCBbMzAyXV0sIFsnaW9nb24nLCBbMzAzXV0sIFsnSW9wZicsIFsxMjAxMjhdXSwgWydpb3BmJywgWzEyMDE1NF1dLCBbJ0lvdGEnLCBbOTIxXV0sIFsnaW90YScsIFs5NTNdXSwgWydpcHJvZCcsIFsxMDgxMl1dLCBbJ2lxdWVzdCcsIFsxOTFdXSwgWydpc2NyJywgWzExOTk5OF1dLCBbJ0lzY3InLCBbODQ2NF1dLCBbJ2lzaW4nLCBbODcxMl1dLCBbJ2lzaW5kb3QnLCBbODk0OV1dLCBbJ2lzaW5FJywgWzg5NTNdXSwgWydpc2lucycsIFs4OTQ4XV0sIFsnaXNpbnN2JywgWzg5NDddXSwgWydpc2ludicsIFs4NzEyXV0sIFsnaXQnLCBbODI5MF1dLCBbJ0l0aWxkZScsIFsyOTZdXSwgWydpdGlsZGUnLCBbMjk3XV0sIFsnSXVrY3knLCBbMTAzMF1dLCBbJ2l1a2N5JywgWzExMTBdXSwgWydJdW1sJywgWzIwN11dLCBbJ2l1bWwnLCBbMjM5XV0sIFsnSmNpcmMnLCBbMzA4XV0sIFsnamNpcmMnLCBbMzA5XV0sIFsnSmN5JywgWzEwNDldXSwgWydqY3knLCBbMTA4MV1dLCBbJ0pmcicsIFsxMjAwNzddXSwgWydqZnInLCBbMTIwMTAzXV0sIFsnam1hdGgnLCBbNTY3XV0sIFsnSm9wZicsIFsxMjAxMjldXSwgWydqb3BmJywgWzEyMDE1NV1dLCBbJ0pzY3InLCBbMTE5OTczXV0sIFsnanNjcicsIFsxMTk5OTldXSwgWydKc2VyY3knLCBbMTAzMl1dLCBbJ2pzZXJjeScsIFsxMTEyXV0sIFsnSnVrY3knLCBbMTAyOF1dLCBbJ2p1a2N5JywgWzExMDhdXSwgWydLYXBwYScsIFs5MjJdXSwgWydrYXBwYScsIFs5NTRdXSwgWydrYXBwYXYnLCBbMTAwOF1dLCBbJ0tjZWRpbCcsIFszMTBdXSwgWydrY2VkaWwnLCBbMzExXV0sIFsnS2N5JywgWzEwNTBdXSwgWydrY3knLCBbMTA4Ml1dLCBbJ0tmcicsIFsxMjAwNzhdXSwgWydrZnInLCBbMTIwMTA0XV0sIFsna2dyZWVuJywgWzMxMl1dLCBbJ0tIY3knLCBbMTA2MV1dLCBbJ2toY3knLCBbMTA5M11dLCBbJ0tKY3knLCBbMTAzNl1dLCBbJ2tqY3knLCBbMTExNl1dLCBbJ0tvcGYnLCBbMTIwMTMwXV0sIFsna29wZicsIFsxMjAxNTZdXSwgWydLc2NyJywgWzExOTk3NF1dLCBbJ2tzY3InLCBbMTIwMDAwXV0sIFsnbEFhcnInLCBbODY2Nl1dLCBbJ0xhY3V0ZScsIFszMTNdXSwgWydsYWN1dGUnLCBbMzE0XV0sIFsnbGFlbXB0eXYnLCBbMTA2NzZdXSwgWydsYWdyYW4nLCBbODQ2Nl1dLCBbJ0xhbWJkYScsIFs5MjNdXSwgWydsYW1iZGEnLCBbOTU1XV0sIFsnbGFuZycsIFsxMDIxNl1dLCBbJ0xhbmcnLCBbMTAyMThdXSwgWydsYW5nZCcsIFsxMDY0MV1dLCBbJ2xhbmdsZScsIFsxMDIxNl1dLCBbJ2xhcCcsIFsxMDg4NV1dLCBbJ0xhcGxhY2V0cmYnLCBbODQ2Nl1dLCBbJ2xhcXVvJywgWzE3MV1dLCBbJ2xhcnJiJywgWzg2NzZdXSwgWydsYXJyYmZzJywgWzEwNTI3XV0sIFsnbGFycicsIFs4NTkyXV0sIFsnTGFycicsIFs4NjA2XV0sIFsnbEFycicsIFs4NjU2XV0sIFsnbGFycmZzJywgWzEwNTI1XV0sIFsnbGFycmhrJywgWzg2MTddXSwgWydsYXJybHAnLCBbODYxOV1dLCBbJ2xhcnJwbCcsIFsxMDU1M11dLCBbJ2xhcnJzaW0nLCBbMTA2MTFdXSwgWydsYXJydGwnLCBbODYxMF1dLCBbJ2xhdGFpbCcsIFsxMDUyMV1dLCBbJ2xBdGFpbCcsIFsxMDUyM11dLCBbJ2xhdCcsIFsxMDkyM11dLCBbJ2xhdGUnLCBbMTA5MjVdXSwgWydsYXRlcycsIFsxMDkyNSwgNjUwMjRdXSwgWydsYmFycicsIFsxMDUwOF1dLCBbJ2xCYXJyJywgWzEwNTEwXV0sIFsnbGJicmsnLCBbMTAwOThdXSwgWydsYnJhY2UnLCBbMTIzXV0sIFsnbGJyYWNrJywgWzkxXV0sIFsnbGJya2UnLCBbMTA2MzVdXSwgWydsYnJrc2xkJywgWzEwNjM5XV0sIFsnbGJya3NsdScsIFsxMDYzN11dLCBbJ0xjYXJvbicsIFszMTddXSwgWydsY2Fyb24nLCBbMzE4XV0sIFsnTGNlZGlsJywgWzMxNV1dLCBbJ2xjZWRpbCcsIFszMTZdXSwgWydsY2VpbCcsIFs4OTY4XV0sIFsnbGN1YicsIFsxMjNdXSwgWydMY3knLCBbMTA1MV1dLCBbJ2xjeScsIFsxMDgzXV0sIFsnbGRjYScsIFsxMDU1MF1dLCBbJ2xkcXVvJywgWzgyMjBdXSwgWydsZHF1b3InLCBbODIyMl1dLCBbJ2xkcmRoYXInLCBbMTA1OTldXSwgWydsZHJ1c2hhcicsIFsxMDU3MV1dLCBbJ2xkc2gnLCBbODYyNl1dLCBbJ2xlJywgWzg4MDRdXSwgWydsRScsIFs4ODA2XV0sIFsnTGVmdEFuZ2xlQnJhY2tldCcsIFsxMDIxNl1dLCBbJ0xlZnRBcnJvd0JhcicsIFs4Njc2XV0sIFsnbGVmdGFycm93JywgWzg1OTJdXSwgWydMZWZ0QXJyb3cnLCBbODU5Ml1dLCBbJ0xlZnRhcnJvdycsIFs4NjU2XV0sIFsnTGVmdEFycm93UmlnaHRBcnJvdycsIFs4NjQ2XV0sIFsnbGVmdGFycm93dGFpbCcsIFs4NjEwXV0sIFsnTGVmdENlaWxpbmcnLCBbODk2OF1dLCBbJ0xlZnREb3VibGVCcmFja2V0JywgWzEwMjE0XV0sIFsnTGVmdERvd25UZWVWZWN0b3InLCBbMTA1OTNdXSwgWydMZWZ0RG93blZlY3RvckJhcicsIFsxMDU4NV1dLCBbJ0xlZnREb3duVmVjdG9yJywgWzg2NDNdXSwgWydMZWZ0Rmxvb3InLCBbODk3MF1dLCBbJ2xlZnRoYXJwb29uZG93bicsIFs4NjM3XV0sIFsnbGVmdGhhcnBvb251cCcsIFs4NjM2XV0sIFsnbGVmdGxlZnRhcnJvd3MnLCBbODY0N11dLCBbJ2xlZnRyaWdodGFycm93JywgWzg1OTZdXSwgWydMZWZ0UmlnaHRBcnJvdycsIFs4NTk2XV0sIFsnTGVmdHJpZ2h0YXJyb3cnLCBbODY2MF1dLCBbJ2xlZnRyaWdodGFycm93cycsIFs4NjQ2XV0sIFsnbGVmdHJpZ2h0aGFycG9vbnMnLCBbODY1MV1dLCBbJ2xlZnRyaWdodHNxdWlnYXJyb3cnLCBbODYyMV1dLCBbJ0xlZnRSaWdodFZlY3RvcicsIFsxMDU3NF1dLCBbJ0xlZnRUZWVBcnJvdycsIFs4NjEyXV0sIFsnTGVmdFRlZScsIFs4ODY3XV0sIFsnTGVmdFRlZVZlY3RvcicsIFsxMDU4Nl1dLCBbJ2xlZnR0aHJlZXRpbWVzJywgWzg5MDddXSwgWydMZWZ0VHJpYW5nbGVCYXInLCBbMTA3MDNdXSwgWydMZWZ0VHJpYW5nbGUnLCBbODg4Ml1dLCBbJ0xlZnRUcmlhbmdsZUVxdWFsJywgWzg4ODRdXSwgWydMZWZ0VXBEb3duVmVjdG9yJywgWzEwNTc3XV0sIFsnTGVmdFVwVGVlVmVjdG9yJywgWzEwNTkyXV0sIFsnTGVmdFVwVmVjdG9yQmFyJywgWzEwNTg0XV0sIFsnTGVmdFVwVmVjdG9yJywgWzg2MzldXSwgWydMZWZ0VmVjdG9yQmFyJywgWzEwNTc4XV0sIFsnTGVmdFZlY3RvcicsIFs4NjM2XV0sIFsnbEVnJywgWzEwODkxXV0sIFsnbGVnJywgWzg5MjJdXSwgWydsZXEnLCBbODgwNF1dLCBbJ2xlcXEnLCBbODgwNl1dLCBbJ2xlcXNsYW50JywgWzEwODc3XV0sIFsnbGVzY2MnLCBbMTA5MjBdXSwgWydsZXMnLCBbMTA4NzddXSwgWydsZXNkb3QnLCBbMTA4NzldXSwgWydsZXNkb3RvJywgWzEwODgxXV0sIFsnbGVzZG90b3InLCBbMTA4ODNdXSwgWydsZXNnJywgWzg5MjIsIDY1MDI0XV0sIFsnbGVzZ2VzJywgWzEwODk5XV0sIFsnbGVzc2FwcHJveCcsIFsxMDg4NV1dLCBbJ2xlc3Nkb3QnLCBbODkxOF1dLCBbJ2xlc3NlcWd0cicsIFs4OTIyXV0sIFsnbGVzc2VxcWd0cicsIFsxMDg5MV1dLCBbJ0xlc3NFcXVhbEdyZWF0ZXInLCBbODkyMl1dLCBbJ0xlc3NGdWxsRXF1YWwnLCBbODgwNl1dLCBbJ0xlc3NHcmVhdGVyJywgWzg4MjJdXSwgWydsZXNzZ3RyJywgWzg4MjJdXSwgWydMZXNzTGVzcycsIFsxMDkxM11dLCBbJ2xlc3NzaW0nLCBbODgxOF1dLCBbJ0xlc3NTbGFudEVxdWFsJywgWzEwODc3XV0sIFsnTGVzc1RpbGRlJywgWzg4MThdXSwgWydsZmlzaHQnLCBbMTA2MjBdXSwgWydsZmxvb3InLCBbODk3MF1dLCBbJ0xmcicsIFsxMjAwNzldXSwgWydsZnInLCBbMTIwMTA1XV0sIFsnbGcnLCBbODgyMl1dLCBbJ2xnRScsIFsxMDg5N11dLCBbJ2xIYXInLCBbMTA1OTRdXSwgWydsaGFyZCcsIFs4NjM3XV0sIFsnbGhhcnUnLCBbODYzNl1dLCBbJ2xoYXJ1bCcsIFsxMDYwMl1dLCBbJ2xoYmxrJywgWzk2MDRdXSwgWydMSmN5JywgWzEwMzNdXSwgWydsamN5JywgWzExMTNdXSwgWydsbGFycicsIFs4NjQ3XV0sIFsnbGwnLCBbODgxMF1dLCBbJ0xsJywgWzg5MjBdXSwgWydsbGNvcm5lcicsIFs4OTkwXV0sIFsnTGxlZnRhcnJvdycsIFs4NjY2XV0sIFsnbGxoYXJkJywgWzEwNjAzXV0sIFsnbGx0cmknLCBbOTcyMl1dLCBbJ0xtaWRvdCcsIFszMTldXSwgWydsbWlkb3QnLCBbMzIwXV0sIFsnbG1vdXN0YWNoZScsIFs5MTM2XV0sIFsnbG1vdXN0JywgWzkxMzZdXSwgWydsbmFwJywgWzEwODg5XV0sIFsnbG5hcHByb3gnLCBbMTA4ODldXSwgWydsbmUnLCBbMTA4ODddXSwgWydsbkUnLCBbODgwOF1dLCBbJ2xuZXEnLCBbMTA4ODddXSwgWydsbmVxcScsIFs4ODA4XV0sIFsnbG5zaW0nLCBbODkzNF1dLCBbJ2xvYW5nJywgWzEwMjIwXV0sIFsnbG9hcnInLCBbODcwMV1dLCBbJ2xvYnJrJywgWzEwMjE0XV0sIFsnbG9uZ2xlZnRhcnJvdycsIFsxMDIyOV1dLCBbJ0xvbmdMZWZ0QXJyb3cnLCBbMTAyMjldXSwgWydMb25nbGVmdGFycm93JywgWzEwMjMyXV0sIFsnbG9uZ2xlZnRyaWdodGFycm93JywgWzEwMjMxXV0sIFsnTG9uZ0xlZnRSaWdodEFycm93JywgWzEwMjMxXV0sIFsnTG9uZ2xlZnRyaWdodGFycm93JywgWzEwMjM0XV0sIFsnbG9uZ21hcHN0bycsIFsxMDIzNl1dLCBbJ2xvbmdyaWdodGFycm93JywgWzEwMjMwXV0sIFsnTG9uZ1JpZ2h0QXJyb3cnLCBbMTAyMzBdXSwgWydMb25ncmlnaHRhcnJvdycsIFsxMDIzM11dLCBbJ2xvb3BhcnJvd2xlZnQnLCBbODYxOV1dLCBbJ2xvb3BhcnJvd3JpZ2h0JywgWzg2MjBdXSwgWydsb3BhcicsIFsxMDYyOV1dLCBbJ0xvcGYnLCBbMTIwMTMxXV0sIFsnbG9wZicsIFsxMjAxNTddXSwgWydsb3BsdXMnLCBbMTA3OTddXSwgWydsb3RpbWVzJywgWzEwODA0XV0sIFsnbG93YXN0JywgWzg3MjddXSwgWydsb3diYXInLCBbOTVdXSwgWydMb3dlckxlZnRBcnJvdycsIFs4NjAxXV0sIFsnTG93ZXJSaWdodEFycm93JywgWzg2MDBdXSwgWydsb3onLCBbOTY3NF1dLCBbJ2xvemVuZ2UnLCBbOTY3NF1dLCBbJ2xvemYnLCBbMTA3MzFdXSwgWydscGFyJywgWzQwXV0sIFsnbHBhcmx0JywgWzEwNjQzXV0sIFsnbHJhcnInLCBbODY0Nl1dLCBbJ2xyY29ybmVyJywgWzg5OTFdXSwgWydscmhhcicsIFs4NjUxXV0sIFsnbHJoYXJkJywgWzEwNjA1XV0sIFsnbHJtJywgWzgyMDZdXSwgWydscnRyaScsIFs4ODk1XV0sIFsnbHNhcXVvJywgWzgyNDldXSwgWydsc2NyJywgWzEyMDAwMV1dLCBbJ0xzY3InLCBbODQ2Nl1dLCBbJ2xzaCcsIFs4NjI0XV0sIFsnTHNoJywgWzg2MjRdXSwgWydsc2ltJywgWzg4MThdXSwgWydsc2ltZScsIFsxMDg5M11dLCBbJ2xzaW1nJywgWzEwODk1XV0sIFsnbHNxYicsIFs5MV1dLCBbJ2xzcXVvJywgWzgyMTZdXSwgWydsc3F1b3InLCBbODIxOF1dLCBbJ0xzdHJvaycsIFszMjFdXSwgWydsc3Ryb2snLCBbMzIyXV0sIFsnbHRjYycsIFsxMDkxOF1dLCBbJ2x0Y2lyJywgWzEwODczXV0sIFsnbHQnLCBbNjBdXSwgWydMVCcsIFs2MF1dLCBbJ0x0JywgWzg4MTBdXSwgWydsdGRvdCcsIFs4OTE4XV0sIFsnbHRocmVlJywgWzg5MDddXSwgWydsdGltZXMnLCBbODkwNV1dLCBbJ2x0bGFycicsIFsxMDYxNF1dLCBbJ2x0cXVlc3QnLCBbMTA4NzVdXSwgWydsdHJpJywgWzk2NjddXSwgWydsdHJpZScsIFs4ODg0XV0sIFsnbHRyaWYnLCBbOTY2Nl1dLCBbJ2x0clBhcicsIFsxMDY0Nl1dLCBbJ2x1cmRzaGFyJywgWzEwNTcwXV0sIFsnbHVydWhhcicsIFsxMDU5OF1dLCBbJ2x2ZXJ0bmVxcScsIFs4ODA4LCA2NTAyNF1dLCBbJ2x2bkUnLCBbODgwOCwgNjUwMjRdXSwgWydtYWNyJywgWzE3NV1dLCBbJ21hbGUnLCBbOTc5NF1dLCBbJ21hbHQnLCBbMTAwMTZdXSwgWydtYWx0ZXNlJywgWzEwMDE2XV0sIFsnTWFwJywgWzEwNTAxXV0sIFsnbWFwJywgWzg2MTRdXSwgWydtYXBzdG8nLCBbODYxNF1dLCBbJ21hcHN0b2Rvd24nLCBbODYxNV1dLCBbJ21hcHN0b2xlZnQnLCBbODYxMl1dLCBbJ21hcHN0b3VwJywgWzg2MTNdXSwgWydtYXJrZXInLCBbOTY0Nl1dLCBbJ21jb21tYScsIFsxMDc5M11dLCBbJ01jeScsIFsxMDUyXV0sIFsnbWN5JywgWzEwODRdXSwgWydtZGFzaCcsIFs4MjEyXV0sIFsnbUREb3QnLCBbODc2Ml1dLCBbJ21lYXN1cmVkYW5nbGUnLCBbODczN11dLCBbJ01lZGl1bVNwYWNlJywgWzgyODddXSwgWydNZWxsaW50cmYnLCBbODQ5OV1dLCBbJ01mcicsIFsxMjAwODBdXSwgWydtZnInLCBbMTIwMTA2XV0sIFsnbWhvJywgWzg0ODddXSwgWydtaWNybycsIFsxODFdXSwgWydtaWRhc3QnLCBbNDJdXSwgWydtaWRjaXInLCBbMTA5OTJdXSwgWydtaWQnLCBbODczOV1dLCBbJ21pZGRvdCcsIFsxODNdXSwgWydtaW51c2InLCBbODg2M11dLCBbJ21pbnVzJywgWzg3MjJdXSwgWydtaW51c2QnLCBbODc2MF1dLCBbJ21pbnVzZHUnLCBbMTA3OTRdXSwgWydNaW51c1BsdXMnLCBbODcyM11dLCBbJ21sY3AnLCBbMTA5NzFdXSwgWydtbGRyJywgWzgyMzBdXSwgWydtbnBsdXMnLCBbODcyM11dLCBbJ21vZGVscycsIFs4ODcxXV0sIFsnTW9wZicsIFsxMjAxMzJdXSwgWydtb3BmJywgWzEyMDE1OF1dLCBbJ21wJywgWzg3MjNdXSwgWydtc2NyJywgWzEyMDAwMl1dLCBbJ01zY3InLCBbODQ5OV1dLCBbJ21zdHBvcycsIFs4NzY2XV0sIFsnTXUnLCBbOTI0XV0sIFsnbXUnLCBbOTU2XV0sIFsnbXVsdGltYXAnLCBbODg4OF1dLCBbJ211bWFwJywgWzg4ODhdXSwgWyduYWJsYScsIFs4NzExXV0sIFsnTmFjdXRlJywgWzMyM11dLCBbJ25hY3V0ZScsIFszMjRdXSwgWyduYW5nJywgWzg3MzYsIDg0MDJdXSwgWyduYXAnLCBbODc3N11dLCBbJ25hcEUnLCBbMTA4NjQsIDgyNF1dLCBbJ25hcGlkJywgWzg3NzksIDgyNF1dLCBbJ25hcG9zJywgWzMyOV1dLCBbJ25hcHByb3gnLCBbODc3N11dLCBbJ25hdHVyYWwnLCBbOTgzOF1dLCBbJ25hdHVyYWxzJywgWzg0NjldXSwgWyduYXR1cicsIFs5ODM4XV0sIFsnbmJzcCcsIFsxNjBdXSwgWyduYnVtcCcsIFs4NzgyLCA4MjRdXSwgWyduYnVtcGUnLCBbODc4MywgODI0XV0sIFsnbmNhcCcsIFsxMDgxOV1dLCBbJ05jYXJvbicsIFszMjddXSwgWyduY2Fyb24nLCBbMzI4XV0sIFsnTmNlZGlsJywgWzMyNV1dLCBbJ25jZWRpbCcsIFszMjZdXSwgWyduY29uZycsIFs4Nzc1XV0sIFsnbmNvbmdkb3QnLCBbMTA4NjEsIDgyNF1dLCBbJ25jdXAnLCBbMTA4MThdXSwgWydOY3knLCBbMTA1M11dLCBbJ25jeScsIFsxMDg1XV0sIFsnbmRhc2gnLCBbODIxMV1dLCBbJ25lYXJoaycsIFsxMDUzMl1dLCBbJ25lYXJyJywgWzg1OTldXSwgWyduZUFycicsIFs4NjYzXV0sIFsnbmVhcnJvdycsIFs4NTk5XV0sIFsnbmUnLCBbODgwMF1dLCBbJ25lZG90JywgWzg3ODQsIDgyNF1dLCBbJ05lZ2F0aXZlTWVkaXVtU3BhY2UnLCBbODIwM11dLCBbJ05lZ2F0aXZlVGhpY2tTcGFjZScsIFs4MjAzXV0sIFsnTmVnYXRpdmVUaGluU3BhY2UnLCBbODIwM11dLCBbJ05lZ2F0aXZlVmVyeVRoaW5TcGFjZScsIFs4MjAzXV0sIFsnbmVxdWl2JywgWzg4MDJdXSwgWyduZXNlYXInLCBbMTA1MzZdXSwgWyduZXNpbScsIFs4NzcwLCA4MjRdXSwgWydOZXN0ZWRHcmVhdGVyR3JlYXRlcicsIFs4ODExXV0sIFsnTmVzdGVkTGVzc0xlc3MnLCBbODgxMF1dLCBbJ25leGlzdCcsIFs4NzA4XV0sIFsnbmV4aXN0cycsIFs4NzA4XV0sIFsnTmZyJywgWzEyMDA4MV1dLCBbJ25mcicsIFsxMjAxMDddXSwgWyduZ0UnLCBbODgwNywgODI0XV0sIFsnbmdlJywgWzg4MTddXSwgWyduZ2VxJywgWzg4MTddXSwgWyduZ2VxcScsIFs4ODA3LCA4MjRdXSwgWyduZ2Vxc2xhbnQnLCBbMTA4NzgsIDgyNF1dLCBbJ25nZXMnLCBbMTA4NzgsIDgyNF1dLCBbJ25HZycsIFs4OTIxLCA4MjRdXSwgWyduZ3NpbScsIFs4ODIxXV0sIFsnbkd0JywgWzg4MTEsIDg0MDJdXSwgWyduZ3QnLCBbODgxNV1dLCBbJ25ndHInLCBbODgxNV1dLCBbJ25HdHYnLCBbODgxMSwgODI0XV0sIFsnbmhhcnInLCBbODYyMl1dLCBbJ25oQXJyJywgWzg2NTRdXSwgWyduaHBhcicsIFsxMDk5NF1dLCBbJ25pJywgWzg3MTVdXSwgWyduaXMnLCBbODk1Nl1dLCBbJ25pc2QnLCBbODk1NF1dLCBbJ25pdicsIFs4NzE1XV0sIFsnTkpjeScsIFsxMDM0XV0sIFsnbmpjeScsIFsxMTE0XV0sIFsnbmxhcnInLCBbODYwMl1dLCBbJ25sQXJyJywgWzg2NTNdXSwgWydubGRyJywgWzgyMjldXSwgWydubEUnLCBbODgwNiwgODI0XV0sIFsnbmxlJywgWzg4MTZdXSwgWydubGVmdGFycm93JywgWzg2MDJdXSwgWyduTGVmdGFycm93JywgWzg2NTNdXSwgWydubGVmdHJpZ2h0YXJyb3cnLCBbODYyMl1dLCBbJ25MZWZ0cmlnaHRhcnJvdycsIFs4NjU0XV0sIFsnbmxlcScsIFs4ODE2XV0sIFsnbmxlcXEnLCBbODgwNiwgODI0XV0sIFsnbmxlcXNsYW50JywgWzEwODc3LCA4MjRdXSwgWydubGVzJywgWzEwODc3LCA4MjRdXSwgWydubGVzcycsIFs4ODE0XV0sIFsnbkxsJywgWzg5MjAsIDgyNF1dLCBbJ25sc2ltJywgWzg4MjBdXSwgWyduTHQnLCBbODgxMCwgODQwMl1dLCBbJ25sdCcsIFs4ODE0XV0sIFsnbmx0cmknLCBbODkzOF1dLCBbJ25sdHJpZScsIFs4OTQwXV0sIFsnbkx0dicsIFs4ODEwLCA4MjRdXSwgWydubWlkJywgWzg3NDBdXSwgWydOb0JyZWFrJywgWzgyODhdXSwgWydOb25CcmVha2luZ1NwYWNlJywgWzE2MF1dLCBbJ25vcGYnLCBbMTIwMTU5XV0sIFsnTm9wZicsIFs4NDY5XV0sIFsnTm90JywgWzEwOTg4XV0sIFsnbm90JywgWzE3Ml1dLCBbJ05vdENvbmdydWVudCcsIFs4ODAyXV0sIFsnTm90Q3VwQ2FwJywgWzg4MTNdXSwgWydOb3REb3VibGVWZXJ0aWNhbEJhcicsIFs4NzQyXV0sIFsnTm90RWxlbWVudCcsIFs4NzEzXV0sIFsnTm90RXF1YWwnLCBbODgwMF1dLCBbJ05vdEVxdWFsVGlsZGUnLCBbODc3MCwgODI0XV0sIFsnTm90RXhpc3RzJywgWzg3MDhdXSwgWydOb3RHcmVhdGVyJywgWzg4MTVdXSwgWydOb3RHcmVhdGVyRXF1YWwnLCBbODgxN11dLCBbJ05vdEdyZWF0ZXJGdWxsRXF1YWwnLCBbODgwNywgODI0XV0sIFsnTm90R3JlYXRlckdyZWF0ZXInLCBbODgxMSwgODI0XV0sIFsnTm90R3JlYXRlckxlc3MnLCBbODgyNV1dLCBbJ05vdEdyZWF0ZXJTbGFudEVxdWFsJywgWzEwODc4LCA4MjRdXSwgWydOb3RHcmVhdGVyVGlsZGUnLCBbODgyMV1dLCBbJ05vdEh1bXBEb3duSHVtcCcsIFs4NzgyLCA4MjRdXSwgWydOb3RIdW1wRXF1YWwnLCBbODc4MywgODI0XV0sIFsnbm90aW4nLCBbODcxM11dLCBbJ25vdGluZG90JywgWzg5NDksIDgyNF1dLCBbJ25vdGluRScsIFs4OTUzLCA4MjRdXSwgWydub3RpbnZhJywgWzg3MTNdXSwgWydub3RpbnZiJywgWzg5NTFdXSwgWydub3RpbnZjJywgWzg5NTBdXSwgWydOb3RMZWZ0VHJpYW5nbGVCYXInLCBbMTA3MDMsIDgyNF1dLCBbJ05vdExlZnRUcmlhbmdsZScsIFs4OTM4XV0sIFsnTm90TGVmdFRyaWFuZ2xlRXF1YWwnLCBbODk0MF1dLCBbJ05vdExlc3MnLCBbODgxNF1dLCBbJ05vdExlc3NFcXVhbCcsIFs4ODE2XV0sIFsnTm90TGVzc0dyZWF0ZXInLCBbODgyNF1dLCBbJ05vdExlc3NMZXNzJywgWzg4MTAsIDgyNF1dLCBbJ05vdExlc3NTbGFudEVxdWFsJywgWzEwODc3LCA4MjRdXSwgWydOb3RMZXNzVGlsZGUnLCBbODgyMF1dLCBbJ05vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyJywgWzEwOTE0LCA4MjRdXSwgWydOb3ROZXN0ZWRMZXNzTGVzcycsIFsxMDkxMywgODI0XV0sIFsnbm90bmknLCBbODcxNl1dLCBbJ25vdG5pdmEnLCBbODcxNl1dLCBbJ25vdG5pdmInLCBbODk1OF1dLCBbJ25vdG5pdmMnLCBbODk1N11dLCBbJ05vdFByZWNlZGVzJywgWzg4MzJdXSwgWydOb3RQcmVjZWRlc0VxdWFsJywgWzEwOTI3LCA4MjRdXSwgWydOb3RQcmVjZWRlc1NsYW50RXF1YWwnLCBbODkyOF1dLCBbJ05vdFJldmVyc2VFbGVtZW50JywgWzg3MTZdXSwgWydOb3RSaWdodFRyaWFuZ2xlQmFyJywgWzEwNzA0LCA4MjRdXSwgWydOb3RSaWdodFRyaWFuZ2xlJywgWzg5MzldXSwgWydOb3RSaWdodFRyaWFuZ2xlRXF1YWwnLCBbODk0MV1dLCBbJ05vdFNxdWFyZVN1YnNldCcsIFs4ODQ3LCA4MjRdXSwgWydOb3RTcXVhcmVTdWJzZXRFcXVhbCcsIFs4OTMwXV0sIFsnTm90U3F1YXJlU3VwZXJzZXQnLCBbODg0OCwgODI0XV0sIFsnTm90U3F1YXJlU3VwZXJzZXRFcXVhbCcsIFs4OTMxXV0sIFsnTm90U3Vic2V0JywgWzg4MzQsIDg0MDJdXSwgWydOb3RTdWJzZXRFcXVhbCcsIFs4ODQwXV0sIFsnTm90U3VjY2VlZHMnLCBbODgzM11dLCBbJ05vdFN1Y2NlZWRzRXF1YWwnLCBbMTA5MjgsIDgyNF1dLCBbJ05vdFN1Y2NlZWRzU2xhbnRFcXVhbCcsIFs4OTI5XV0sIFsnTm90U3VjY2VlZHNUaWxkZScsIFs4ODMxLCA4MjRdXSwgWydOb3RTdXBlcnNldCcsIFs4ODM1LCA4NDAyXV0sIFsnTm90U3VwZXJzZXRFcXVhbCcsIFs4ODQxXV0sIFsnTm90VGlsZGUnLCBbODc2OV1dLCBbJ05vdFRpbGRlRXF1YWwnLCBbODc3Ml1dLCBbJ05vdFRpbGRlRnVsbEVxdWFsJywgWzg3NzVdXSwgWydOb3RUaWxkZVRpbGRlJywgWzg3NzddXSwgWydOb3RWZXJ0aWNhbEJhcicsIFs4NzQwXV0sIFsnbnBhcmFsbGVsJywgWzg3NDJdXSwgWyducGFyJywgWzg3NDJdXSwgWyducGFyc2wnLCBbMTEwMDUsIDg0MjFdXSwgWyducGFydCcsIFs4NzA2LCA4MjRdXSwgWyducG9saW50JywgWzEwNzcyXV0sIFsnbnByJywgWzg4MzJdXSwgWyducHJjdWUnLCBbODkyOF1dLCBbJ25wcmVjJywgWzg4MzJdXSwgWyducHJlY2VxJywgWzEwOTI3LCA4MjRdXSwgWyducHJlJywgWzEwOTI3LCA4MjRdXSwgWyducmFycmMnLCBbMTA1NDcsIDgyNF1dLCBbJ25yYXJyJywgWzg2MDNdXSwgWyduckFycicsIFs4NjU1XV0sIFsnbnJhcnJ3JywgWzg2MDUsIDgyNF1dLCBbJ25yaWdodGFycm93JywgWzg2MDNdXSwgWyduUmlnaHRhcnJvdycsIFs4NjU1XV0sIFsnbnJ0cmknLCBbODkzOV1dLCBbJ25ydHJpZScsIFs4OTQxXV0sIFsnbnNjJywgWzg4MzNdXSwgWyduc2NjdWUnLCBbODkyOV1dLCBbJ25zY2UnLCBbMTA5MjgsIDgyNF1dLCBbJ05zY3InLCBbMTE5OTc3XV0sIFsnbnNjcicsIFsxMjAwMDNdXSwgWyduc2hvcnRtaWQnLCBbODc0MF1dLCBbJ25zaG9ydHBhcmFsbGVsJywgWzg3NDJdXSwgWyduc2ltJywgWzg3NjldXSwgWyduc2ltZScsIFs4NzcyXV0sIFsnbnNpbWVxJywgWzg3NzJdXSwgWyduc21pZCcsIFs4NzQwXV0sIFsnbnNwYXInLCBbODc0Ml1dLCBbJ25zcXN1YmUnLCBbODkzMF1dLCBbJ25zcXN1cGUnLCBbODkzMV1dLCBbJ25zdWInLCBbODgzNl1dLCBbJ25zdWJFJywgWzEwOTQ5LCA4MjRdXSwgWyduc3ViZScsIFs4ODQwXV0sIFsnbnN1YnNldCcsIFs4ODM0LCA4NDAyXV0sIFsnbnN1YnNldGVxJywgWzg4NDBdXSwgWyduc3Vic2V0ZXFxJywgWzEwOTQ5LCA4MjRdXSwgWyduc3VjYycsIFs4ODMzXV0sIFsnbnN1Y2NlcScsIFsxMDkyOCwgODI0XV0sIFsnbnN1cCcsIFs4ODM3XV0sIFsnbnN1cEUnLCBbMTA5NTAsIDgyNF1dLCBbJ25zdXBlJywgWzg4NDFdXSwgWyduc3Vwc2V0JywgWzg4MzUsIDg0MDJdXSwgWyduc3Vwc2V0ZXEnLCBbODg0MV1dLCBbJ25zdXBzZXRlcXEnLCBbMTA5NTAsIDgyNF1dLCBbJ250Z2wnLCBbODgyNV1dLCBbJ050aWxkZScsIFsyMDldXSwgWydudGlsZGUnLCBbMjQxXV0sIFsnbnRsZycsIFs4ODI0XV0sIFsnbnRyaWFuZ2xlbGVmdCcsIFs4OTM4XV0sIFsnbnRyaWFuZ2xlbGVmdGVxJywgWzg5NDBdXSwgWydudHJpYW5nbGVyaWdodCcsIFs4OTM5XV0sIFsnbnRyaWFuZ2xlcmlnaHRlcScsIFs4OTQxXV0sIFsnTnUnLCBbOTI1XV0sIFsnbnUnLCBbOTU3XV0sIFsnbnVtJywgWzM1XV0sIFsnbnVtZXJvJywgWzg0NzBdXSwgWydudW1zcCcsIFs4MTk5XV0sIFsnbnZhcCcsIFs4NzgxLCA4NDAyXV0sIFsnbnZkYXNoJywgWzg4NzZdXSwgWydudkRhc2gnLCBbODg3N11dLCBbJ25WZGFzaCcsIFs4ODc4XV0sIFsnblZEYXNoJywgWzg4NzldXSwgWydudmdlJywgWzg4MDUsIDg0MDJdXSwgWydudmd0JywgWzYyLCA4NDAyXV0sIFsnbnZIYXJyJywgWzEwNTAwXV0sIFsnbnZpbmZpbicsIFsxMDcxOF1dLCBbJ252bEFycicsIFsxMDQ5OF1dLCBbJ252bGUnLCBbODgwNCwgODQwMl1dLCBbJ252bHQnLCBbNjAsIDg0MDJdXSwgWydudmx0cmllJywgWzg4ODQsIDg0MDJdXSwgWydudnJBcnInLCBbMTA0OTldXSwgWydudnJ0cmllJywgWzg4ODUsIDg0MDJdXSwgWydudnNpbScsIFs4NzY0LCA4NDAyXV0sIFsnbndhcmhrJywgWzEwNTMxXV0sIFsnbndhcnInLCBbODU5OF1dLCBbJ253QXJyJywgWzg2NjJdXSwgWydud2Fycm93JywgWzg1OThdXSwgWydud25lYXInLCBbMTA1MzVdXSwgWydPYWN1dGUnLCBbMjExXV0sIFsnb2FjdXRlJywgWzI0M11dLCBbJ29hc3QnLCBbODg1OV1dLCBbJ09jaXJjJywgWzIxMl1dLCBbJ29jaXJjJywgWzI0NF1dLCBbJ29jaXInLCBbODg1OF1dLCBbJ09jeScsIFsxMDU0XV0sIFsnb2N5JywgWzEwODZdXSwgWydvZGFzaCcsIFs4ODYxXV0sIFsnT2RibGFjJywgWzMzNl1dLCBbJ29kYmxhYycsIFszMzddXSwgWydvZGl2JywgWzEwODA4XV0sIFsnb2RvdCcsIFs4ODU3XV0sIFsnb2Rzb2xkJywgWzEwNjg0XV0sIFsnT0VsaWcnLCBbMzM4XV0sIFsnb2VsaWcnLCBbMzM5XV0sIFsnb2ZjaXInLCBbMTA2ODddXSwgWydPZnInLCBbMTIwMDgyXV0sIFsnb2ZyJywgWzEyMDEwOF1dLCBbJ29nb24nLCBbNzMxXV0sIFsnT2dyYXZlJywgWzIxMF1dLCBbJ29ncmF2ZScsIFsyNDJdXSwgWydvZ3QnLCBbMTA2ODldXSwgWydvaGJhcicsIFsxMDY3N11dLCBbJ29obScsIFs5MzddXSwgWydvaW50JywgWzg3NTBdXSwgWydvbGFycicsIFs4NjM0XV0sIFsnb2xjaXInLCBbMTA2ODZdXSwgWydvbGNyb3NzJywgWzEwNjgzXV0sIFsnb2xpbmUnLCBbODI1NF1dLCBbJ29sdCcsIFsxMDY4OF1dLCBbJ09tYWNyJywgWzMzMl1dLCBbJ29tYWNyJywgWzMzM11dLCBbJ09tZWdhJywgWzkzN11dLCBbJ29tZWdhJywgWzk2OV1dLCBbJ09taWNyb24nLCBbOTI3XV0sIFsnb21pY3JvbicsIFs5NTldXSwgWydvbWlkJywgWzEwNjc4XV0sIFsnb21pbnVzJywgWzg4NTRdXSwgWydPb3BmJywgWzEyMDEzNF1dLCBbJ29vcGYnLCBbMTIwMTYwXV0sIFsnb3BhcicsIFsxMDY3OV1dLCBbJ09wZW5DdXJseURvdWJsZVF1b3RlJywgWzgyMjBdXSwgWydPcGVuQ3VybHlRdW90ZScsIFs4MjE2XV0sIFsnb3BlcnAnLCBbMTA2ODFdXSwgWydvcGx1cycsIFs4ODUzXV0sIFsnb3JhcnInLCBbODYzNV1dLCBbJ09yJywgWzEwODM2XV0sIFsnb3InLCBbODc0NF1dLCBbJ29yZCcsIFsxMDg0NV1dLCBbJ29yZGVyJywgWzg1MDBdXSwgWydvcmRlcm9mJywgWzg1MDBdXSwgWydvcmRmJywgWzE3MF1dLCBbJ29yZG0nLCBbMTg2XV0sIFsnb3JpZ29mJywgWzg4ODZdXSwgWydvcm9yJywgWzEwODM4XV0sIFsnb3JzbG9wZScsIFsxMDgzOV1dLCBbJ29ydicsIFsxMDg0M11dLCBbJ29TJywgWzk0MTZdXSwgWydPc2NyJywgWzExOTk3OF1dLCBbJ29zY3InLCBbODUwMF1dLCBbJ09zbGFzaCcsIFsyMTZdXSwgWydvc2xhc2gnLCBbMjQ4XV0sIFsnb3NvbCcsIFs4ODU2XV0sIFsnT3RpbGRlJywgWzIxM11dLCBbJ290aWxkZScsIFsyNDVdXSwgWydvdGltZXNhcycsIFsxMDgwNl1dLCBbJ090aW1lcycsIFsxMDgwN11dLCBbJ290aW1lcycsIFs4ODU1XV0sIFsnT3VtbCcsIFsyMTRdXSwgWydvdW1sJywgWzI0Nl1dLCBbJ292YmFyJywgWzkwMjFdXSwgWydPdmVyQmFyJywgWzgyNTRdXSwgWydPdmVyQnJhY2UnLCBbOTE4Ml1dLCBbJ092ZXJCcmFja2V0JywgWzkxNDBdXSwgWydPdmVyUGFyZW50aGVzaXMnLCBbOTE4MF1dLCBbJ3BhcmEnLCBbMTgyXV0sIFsncGFyYWxsZWwnLCBbODc0MV1dLCBbJ3BhcicsIFs4NzQxXV0sIFsncGFyc2ltJywgWzEwOTk1XV0sIFsncGFyc2wnLCBbMTEwMDVdXSwgWydwYXJ0JywgWzg3MDZdXSwgWydQYXJ0aWFsRCcsIFs4NzA2XV0sIFsnUGN5JywgWzEwNTVdXSwgWydwY3knLCBbMTA4N11dLCBbJ3BlcmNudCcsIFszN11dLCBbJ3BlcmlvZCcsIFs0Nl1dLCBbJ3Blcm1pbCcsIFs4MjQwXV0sIFsncGVycCcsIFs4ODY5XV0sIFsncGVydGVuaycsIFs4MjQxXV0sIFsnUGZyJywgWzEyMDA4M11dLCBbJ3BmcicsIFsxMjAxMDldXSwgWydQaGknLCBbOTM0XV0sIFsncGhpJywgWzk2Nl1dLCBbJ3BoaXYnLCBbOTgxXV0sIFsncGhtbWF0JywgWzg0OTldXSwgWydwaG9uZScsIFs5NzQyXV0sIFsnUGknLCBbOTI4XV0sIFsncGknLCBbOTYwXV0sIFsncGl0Y2hmb3JrJywgWzg5MTZdXSwgWydwaXYnLCBbOTgyXV0sIFsncGxhbmNrJywgWzg0NjNdXSwgWydwbGFuY2toJywgWzg0NjJdXSwgWydwbGFua3YnLCBbODQ2M11dLCBbJ3BsdXNhY2lyJywgWzEwNzg3XV0sIFsncGx1c2InLCBbODg2Ml1dLCBbJ3BsdXNjaXInLCBbMTA3ODZdXSwgWydwbHVzJywgWzQzXV0sIFsncGx1c2RvJywgWzg3MjRdXSwgWydwbHVzZHUnLCBbMTA3ODldXSwgWydwbHVzZScsIFsxMDg2Nl1dLCBbJ1BsdXNNaW51cycsIFsxNzddXSwgWydwbHVzbW4nLCBbMTc3XV0sIFsncGx1c3NpbScsIFsxMDc5MF1dLCBbJ3BsdXN0d28nLCBbMTA3OTFdXSwgWydwbScsIFsxNzddXSwgWydQb2luY2FyZXBsYW5lJywgWzg0NjBdXSwgWydwb2ludGludCcsIFsxMDc3M11dLCBbJ3BvcGYnLCBbMTIwMTYxXV0sIFsnUG9wZicsIFs4NDczXV0sIFsncG91bmQnLCBbMTYzXV0sIFsncHJhcCcsIFsxMDkzNV1dLCBbJ1ByJywgWzEwOTM5XV0sIFsncHInLCBbODgyNl1dLCBbJ3ByY3VlJywgWzg4MjhdXSwgWydwcmVjYXBwcm94JywgWzEwOTM1XV0sIFsncHJlYycsIFs4ODI2XV0sIFsncHJlY2N1cmx5ZXEnLCBbODgyOF1dLCBbJ1ByZWNlZGVzJywgWzg4MjZdXSwgWydQcmVjZWRlc0VxdWFsJywgWzEwOTI3XV0sIFsnUHJlY2VkZXNTbGFudEVxdWFsJywgWzg4MjhdXSwgWydQcmVjZWRlc1RpbGRlJywgWzg4MzBdXSwgWydwcmVjZXEnLCBbMTA5MjddXSwgWydwcmVjbmFwcHJveCcsIFsxMDkzN11dLCBbJ3ByZWNuZXFxJywgWzEwOTMzXV0sIFsncHJlY25zaW0nLCBbODkzNl1dLCBbJ3ByZScsIFsxMDkyN11dLCBbJ3ByRScsIFsxMDkzMV1dLCBbJ3ByZWNzaW0nLCBbODgzMF1dLCBbJ3ByaW1lJywgWzgyNDJdXSwgWydQcmltZScsIFs4MjQzXV0sIFsncHJpbWVzJywgWzg0NzNdXSwgWydwcm5hcCcsIFsxMDkzN11dLCBbJ3BybkUnLCBbMTA5MzNdXSwgWydwcm5zaW0nLCBbODkzNl1dLCBbJ3Byb2QnLCBbODcxOV1dLCBbJ1Byb2R1Y3QnLCBbODcxOV1dLCBbJ3Byb2ZhbGFyJywgWzkwMDZdXSwgWydwcm9mbGluZScsIFs4OTc4XV0sIFsncHJvZnN1cmYnLCBbODk3OV1dLCBbJ3Byb3AnLCBbODczM11dLCBbJ1Byb3BvcnRpb25hbCcsIFs4NzMzXV0sIFsnUHJvcG9ydGlvbicsIFs4NzU5XV0sIFsncHJvcHRvJywgWzg3MzNdXSwgWydwcnNpbScsIFs4ODMwXV0sIFsncHJ1cmVsJywgWzg4ODBdXSwgWydQc2NyJywgWzExOTk3OV1dLCBbJ3BzY3InLCBbMTIwMDA1XV0sIFsnUHNpJywgWzkzNl1dLCBbJ3BzaScsIFs5NjhdXSwgWydwdW5jc3AnLCBbODIwMF1dLCBbJ1FmcicsIFsxMjAwODRdXSwgWydxZnInLCBbMTIwMTEwXV0sIFsncWludCcsIFsxMDc2NF1dLCBbJ3FvcGYnLCBbMTIwMTYyXV0sIFsnUW9wZicsIFs4NDc0XV0sIFsncXByaW1lJywgWzgyNzldXSwgWydRc2NyJywgWzExOTk4MF1dLCBbJ3FzY3InLCBbMTIwMDA2XV0sIFsncXVhdGVybmlvbnMnLCBbODQ2MV1dLCBbJ3F1YXRpbnQnLCBbMTA3NzRdXSwgWydxdWVzdCcsIFs2M11dLCBbJ3F1ZXN0ZXEnLCBbODc5OV1dLCBbJ3F1b3QnLCBbMzRdXSwgWydRVU9UJywgWzM0XV0sIFsnckFhcnInLCBbODY2N11dLCBbJ3JhY2UnLCBbODc2NSwgODE3XV0sIFsnUmFjdXRlJywgWzM0MF1dLCBbJ3JhY3V0ZScsIFszNDFdXSwgWydyYWRpYycsIFs4NzMwXV0sIFsncmFlbXB0eXYnLCBbMTA2NzVdXSwgWydyYW5nJywgWzEwMjE3XV0sIFsnUmFuZycsIFsxMDIxOV1dLCBbJ3JhbmdkJywgWzEwNjQyXV0sIFsncmFuZ2UnLCBbMTA2NjFdXSwgWydyYW5nbGUnLCBbMTAyMTddXSwgWydyYXF1bycsIFsxODddXSwgWydyYXJyYXAnLCBbMTA2MTNdXSwgWydyYXJyYicsIFs4Njc3XV0sIFsncmFycmJmcycsIFsxMDUyOF1dLCBbJ3JhcnJjJywgWzEwNTQ3XV0sIFsncmFycicsIFs4NTk0XV0sIFsnUmFycicsIFs4NjA4XV0sIFsnckFycicsIFs4NjU4XV0sIFsncmFycmZzJywgWzEwNTI2XV0sIFsncmFycmhrJywgWzg2MThdXSwgWydyYXJybHAnLCBbODYyMF1dLCBbJ3JhcnJwbCcsIFsxMDU2NV1dLCBbJ3JhcnJzaW0nLCBbMTA2MTJdXSwgWydSYXJydGwnLCBbMTA1MThdXSwgWydyYXJydGwnLCBbODYxMV1dLCBbJ3JhcnJ3JywgWzg2MDVdXSwgWydyYXRhaWwnLCBbMTA1MjJdXSwgWydyQXRhaWwnLCBbMTA1MjRdXSwgWydyYXRpbycsIFs4NzU4XV0sIFsncmF0aW9uYWxzJywgWzg0NzRdXSwgWydyYmFycicsIFsxMDUwOV1dLCBbJ3JCYXJyJywgWzEwNTExXV0sIFsnUkJhcnInLCBbMTA1MTJdXSwgWydyYmJyaycsIFsxMDA5OV1dLCBbJ3JicmFjZScsIFsxMjVdXSwgWydyYnJhY2snLCBbOTNdXSwgWydyYnJrZScsIFsxMDYzNl1dLCBbJ3JicmtzbGQnLCBbMTA2MzhdXSwgWydyYnJrc2x1JywgWzEwNjQwXV0sIFsnUmNhcm9uJywgWzM0NF1dLCBbJ3JjYXJvbicsIFszNDVdXSwgWydSY2VkaWwnLCBbMzQyXV0sIFsncmNlZGlsJywgWzM0M11dLCBbJ3JjZWlsJywgWzg5NjldXSwgWydyY3ViJywgWzEyNV1dLCBbJ1JjeScsIFsxMDU2XV0sIFsncmN5JywgWzEwODhdXSwgWydyZGNhJywgWzEwNTUxXV0sIFsncmRsZGhhcicsIFsxMDYwMV1dLCBbJ3JkcXVvJywgWzgyMjFdXSwgWydyZHF1b3InLCBbODIyMV1dLCBbJ0Nsb3NlQ3VybHlEb3VibGVRdW90ZScsIFs4MjIxXV0sIFsncmRzaCcsIFs4NjI3XV0sIFsncmVhbCcsIFs4NDc2XV0sIFsncmVhbGluZScsIFs4NDc1XV0sIFsncmVhbHBhcnQnLCBbODQ3Nl1dLCBbJ3JlYWxzJywgWzg0NzddXSwgWydSZScsIFs4NDc2XV0sIFsncmVjdCcsIFs5NjQ1XV0sIFsncmVnJywgWzE3NF1dLCBbJ1JFRycsIFsxNzRdXSwgWydSZXZlcnNlRWxlbWVudCcsIFs4NzE1XV0sIFsnUmV2ZXJzZUVxdWlsaWJyaXVtJywgWzg2NTFdXSwgWydSZXZlcnNlVXBFcXVpbGlicml1bScsIFsxMDYwN11dLCBbJ3JmaXNodCcsIFsxMDYyMV1dLCBbJ3JmbG9vcicsIFs4OTcxXV0sIFsncmZyJywgWzEyMDExMV1dLCBbJ1JmcicsIFs4NDc2XV0sIFsnckhhcicsIFsxMDU5Nl1dLCBbJ3JoYXJkJywgWzg2NDFdXSwgWydyaGFydScsIFs4NjQwXV0sIFsncmhhcnVsJywgWzEwNjA0XV0sIFsnUmhvJywgWzkyOV1dLCBbJ3JobycsIFs5NjFdXSwgWydyaG92JywgWzEwMDldXSwgWydSaWdodEFuZ2xlQnJhY2tldCcsIFsxMDIxN11dLCBbJ1JpZ2h0QXJyb3dCYXInLCBbODY3N11dLCBbJ3JpZ2h0YXJyb3cnLCBbODU5NF1dLCBbJ1JpZ2h0QXJyb3cnLCBbODU5NF1dLCBbJ1JpZ2h0YXJyb3cnLCBbODY1OF1dLCBbJ1JpZ2h0QXJyb3dMZWZ0QXJyb3cnLCBbODY0NF1dLCBbJ3JpZ2h0YXJyb3d0YWlsJywgWzg2MTFdXSwgWydSaWdodENlaWxpbmcnLCBbODk2OV1dLCBbJ1JpZ2h0RG91YmxlQnJhY2tldCcsIFsxMDIxNV1dLCBbJ1JpZ2h0RG93blRlZVZlY3RvcicsIFsxMDU4OV1dLCBbJ1JpZ2h0RG93blZlY3RvckJhcicsIFsxMDU4MV1dLCBbJ1JpZ2h0RG93blZlY3RvcicsIFs4NjQyXV0sIFsnUmlnaHRGbG9vcicsIFs4OTcxXV0sIFsncmlnaHRoYXJwb29uZG93bicsIFs4NjQxXV0sIFsncmlnaHRoYXJwb29udXAnLCBbODY0MF1dLCBbJ3JpZ2h0bGVmdGFycm93cycsIFs4NjQ0XV0sIFsncmlnaHRsZWZ0aGFycG9vbnMnLCBbODY1Ml1dLCBbJ3JpZ2h0cmlnaHRhcnJvd3MnLCBbODY0OV1dLCBbJ3JpZ2h0c3F1aWdhcnJvdycsIFs4NjA1XV0sIFsnUmlnaHRUZWVBcnJvdycsIFs4NjE0XV0sIFsnUmlnaHRUZWUnLCBbODg2Nl1dLCBbJ1JpZ2h0VGVlVmVjdG9yJywgWzEwNTg3XV0sIFsncmlnaHR0aHJlZXRpbWVzJywgWzg5MDhdXSwgWydSaWdodFRyaWFuZ2xlQmFyJywgWzEwNzA0XV0sIFsnUmlnaHRUcmlhbmdsZScsIFs4ODgzXV0sIFsnUmlnaHRUcmlhbmdsZUVxdWFsJywgWzg4ODVdXSwgWydSaWdodFVwRG93blZlY3RvcicsIFsxMDU3NV1dLCBbJ1JpZ2h0VXBUZWVWZWN0b3InLCBbMTA1ODhdXSwgWydSaWdodFVwVmVjdG9yQmFyJywgWzEwNTgwXV0sIFsnUmlnaHRVcFZlY3RvcicsIFs4NjM4XV0sIFsnUmlnaHRWZWN0b3JCYXInLCBbMTA1NzldXSwgWydSaWdodFZlY3RvcicsIFs4NjQwXV0sIFsncmluZycsIFs3MzBdXSwgWydyaXNpbmdkb3RzZXEnLCBbODc4N11dLCBbJ3JsYXJyJywgWzg2NDRdXSwgWydybGhhcicsIFs4NjUyXV0sIFsncmxtJywgWzgyMDddXSwgWydybW91c3RhY2hlJywgWzkxMzddXSwgWydybW91c3QnLCBbOTEzN11dLCBbJ3JubWlkJywgWzEwOTkwXV0sIFsncm9hbmcnLCBbMTAyMjFdXSwgWydyb2FycicsIFs4NzAyXV0sIFsncm9icmsnLCBbMTAyMTVdXSwgWydyb3BhcicsIFsxMDYzMF1dLCBbJ3JvcGYnLCBbMTIwMTYzXV0sIFsnUm9wZicsIFs4NDc3XV0sIFsncm9wbHVzJywgWzEwNzk4XV0sIFsncm90aW1lcycsIFsxMDgwNV1dLCBbJ1JvdW5kSW1wbGllcycsIFsxMDYwOF1dLCBbJ3JwYXInLCBbNDFdXSwgWydycGFyZ3QnLCBbMTA2NDRdXSwgWydycHBvbGludCcsIFsxMDc3MF1dLCBbJ3JyYXJyJywgWzg2NDldXSwgWydScmlnaHRhcnJvdycsIFs4NjY3XV0sIFsncnNhcXVvJywgWzgyNTBdXSwgWydyc2NyJywgWzEyMDAwN11dLCBbJ1JzY3InLCBbODQ3NV1dLCBbJ3JzaCcsIFs4NjI1XV0sIFsnUnNoJywgWzg2MjVdXSwgWydyc3FiJywgWzkzXV0sIFsncnNxdW8nLCBbODIxN11dLCBbJ3JzcXVvcicsIFs4MjE3XV0sIFsnQ2xvc2VDdXJseVF1b3RlJywgWzgyMTddXSwgWydydGhyZWUnLCBbODkwOF1dLCBbJ3J0aW1lcycsIFs4OTA2XV0sIFsncnRyaScsIFs5NjU3XV0sIFsncnRyaWUnLCBbODg4NV1dLCBbJ3J0cmlmJywgWzk2NTZdXSwgWydydHJpbHRyaScsIFsxMDcwMl1dLCBbJ1J1bGVEZWxheWVkJywgWzEwNzQwXV0sIFsncnVsdWhhcicsIFsxMDYwMF1dLCBbJ3J4JywgWzg0NzhdXSwgWydTYWN1dGUnLCBbMzQ2XV0sIFsnc2FjdXRlJywgWzM0N11dLCBbJ3NicXVvJywgWzgyMThdXSwgWydzY2FwJywgWzEwOTM2XV0sIFsnU2Nhcm9uJywgWzM1Ml1dLCBbJ3NjYXJvbicsIFszNTNdXSwgWydTYycsIFsxMDk0MF1dLCBbJ3NjJywgWzg4MjddXSwgWydzY2N1ZScsIFs4ODI5XV0sIFsnc2NlJywgWzEwOTI4XV0sIFsnc2NFJywgWzEwOTMyXV0sIFsnU2NlZGlsJywgWzM1MF1dLCBbJ3NjZWRpbCcsIFszNTFdXSwgWydTY2lyYycsIFszNDhdXSwgWydzY2lyYycsIFszNDldXSwgWydzY25hcCcsIFsxMDkzOF1dLCBbJ3NjbkUnLCBbMTA5MzRdXSwgWydzY25zaW0nLCBbODkzN11dLCBbJ3NjcG9saW50JywgWzEwNzcxXV0sIFsnc2NzaW0nLCBbODgzMV1dLCBbJ1NjeScsIFsxMDU3XV0sIFsnc2N5JywgWzEwODldXSwgWydzZG90YicsIFs4ODY1XV0sIFsnc2RvdCcsIFs4OTAxXV0sIFsnc2RvdGUnLCBbMTA4NTRdXSwgWydzZWFyaGsnLCBbMTA1MzNdXSwgWydzZWFycicsIFs4NjAwXV0sIFsnc2VBcnInLCBbODY2NF1dLCBbJ3NlYXJyb3cnLCBbODYwMF1dLCBbJ3NlY3QnLCBbMTY3XV0sIFsnc2VtaScsIFs1OV1dLCBbJ3Nlc3dhcicsIFsxMDUzN11dLCBbJ3NldG1pbnVzJywgWzg3MjZdXSwgWydzZXRtbicsIFs4NzI2XV0sIFsnc2V4dCcsIFsxMDAzOF1dLCBbJ1NmcicsIFsxMjAwODZdXSwgWydzZnInLCBbMTIwMTEyXV0sIFsnc2Zyb3duJywgWzg5OTRdXSwgWydzaGFycCcsIFs5ODM5XV0sIFsnU0hDSGN5JywgWzEwNjVdXSwgWydzaGNoY3knLCBbMTA5N11dLCBbJ1NIY3knLCBbMTA2NF1dLCBbJ3NoY3knLCBbMTA5Nl1dLCBbJ1Nob3J0RG93bkFycm93JywgWzg1OTVdXSwgWydTaG9ydExlZnRBcnJvdycsIFs4NTkyXV0sIFsnc2hvcnRtaWQnLCBbODczOV1dLCBbJ3Nob3J0cGFyYWxsZWwnLCBbODc0MV1dLCBbJ1Nob3J0UmlnaHRBcnJvdycsIFs4NTk0XV0sIFsnU2hvcnRVcEFycm93JywgWzg1OTNdXSwgWydzaHknLCBbMTczXV0sIFsnU2lnbWEnLCBbOTMxXV0sIFsnc2lnbWEnLCBbOTYzXV0sIFsnc2lnbWFmJywgWzk2Ml1dLCBbJ3NpZ21hdicsIFs5NjJdXSwgWydzaW0nLCBbODc2NF1dLCBbJ3NpbWRvdCcsIFsxMDg1OF1dLCBbJ3NpbWUnLCBbODc3MV1dLCBbJ3NpbWVxJywgWzg3NzFdXSwgWydzaW1nJywgWzEwOTEwXV0sIFsnc2ltZ0UnLCBbMTA5MTJdXSwgWydzaW1sJywgWzEwOTA5XV0sIFsnc2ltbEUnLCBbMTA5MTFdXSwgWydzaW1uZScsIFs4Nzc0XV0sIFsnc2ltcGx1cycsIFsxMDc4OF1dLCBbJ3NpbXJhcnInLCBbMTA2MTBdXSwgWydzbGFycicsIFs4NTkyXV0sIFsnU21hbGxDaXJjbGUnLCBbODcyOF1dLCBbJ3NtYWxsc2V0bWludXMnLCBbODcyNl1dLCBbJ3NtYXNocCcsIFsxMDgwM11dLCBbJ3NtZXBhcnNsJywgWzEwNzI0XV0sIFsnc21pZCcsIFs4NzM5XV0sIFsnc21pbGUnLCBbODk5NV1dLCBbJ3NtdCcsIFsxMDkyMl1dLCBbJ3NtdGUnLCBbMTA5MjRdXSwgWydzbXRlcycsIFsxMDkyNCwgNjUwMjRdXSwgWydTT0ZUY3knLCBbMTA2OF1dLCBbJ3NvZnRjeScsIFsxMTAwXV0sIFsnc29sYmFyJywgWzkwMjNdXSwgWydzb2xiJywgWzEwNjkyXV0sIFsnc29sJywgWzQ3XV0sIFsnU29wZicsIFsxMjAxMzhdXSwgWydzb3BmJywgWzEyMDE2NF1dLCBbJ3NwYWRlcycsIFs5ODI0XV0sIFsnc3BhZGVzdWl0JywgWzk4MjRdXSwgWydzcGFyJywgWzg3NDFdXSwgWydzcWNhcCcsIFs4ODUxXV0sIFsnc3FjYXBzJywgWzg4NTEsIDY1MDI0XV0sIFsnc3FjdXAnLCBbODg1Ml1dLCBbJ3NxY3VwcycsIFs4ODUyLCA2NTAyNF1dLCBbJ1NxcnQnLCBbODczMF1dLCBbJ3Nxc3ViJywgWzg4NDddXSwgWydzcXN1YmUnLCBbODg0OV1dLCBbJ3Nxc3Vic2V0JywgWzg4NDddXSwgWydzcXN1YnNldGVxJywgWzg4NDldXSwgWydzcXN1cCcsIFs4ODQ4XV0sIFsnc3FzdXBlJywgWzg4NTBdXSwgWydzcXN1cHNldCcsIFs4ODQ4XV0sIFsnc3FzdXBzZXRlcScsIFs4ODUwXV0sIFsnc3F1YXJlJywgWzk2MzNdXSwgWydTcXVhcmUnLCBbOTYzM11dLCBbJ1NxdWFyZUludGVyc2VjdGlvbicsIFs4ODUxXV0sIFsnU3F1YXJlU3Vic2V0JywgWzg4NDddXSwgWydTcXVhcmVTdWJzZXRFcXVhbCcsIFs4ODQ5XV0sIFsnU3F1YXJlU3VwZXJzZXQnLCBbODg0OF1dLCBbJ1NxdWFyZVN1cGVyc2V0RXF1YWwnLCBbODg1MF1dLCBbJ1NxdWFyZVVuaW9uJywgWzg4NTJdXSwgWydzcXVhcmYnLCBbOTY0Ml1dLCBbJ3NxdScsIFs5NjMzXV0sIFsnc3F1ZicsIFs5NjQyXV0sIFsnc3JhcnInLCBbODU5NF1dLCBbJ1NzY3InLCBbMTE5OTgyXV0sIFsnc3NjcicsIFsxMjAwMDhdXSwgWydzc2V0bW4nLCBbODcyNl1dLCBbJ3NzbWlsZScsIFs4OTk1XV0sIFsnc3N0YXJmJywgWzg5MDJdXSwgWydTdGFyJywgWzg5MDJdXSwgWydzdGFyJywgWzk3MzRdXSwgWydzdGFyZicsIFs5NzMzXV0sIFsnc3RyYWlnaHRlcHNpbG9uJywgWzEwMTNdXSwgWydzdHJhaWdodHBoaScsIFs5ODFdXSwgWydzdHJucycsIFsxNzVdXSwgWydzdWInLCBbODgzNF1dLCBbJ1N1YicsIFs4OTEyXV0sIFsnc3ViZG90JywgWzEwOTQxXV0sIFsnc3ViRScsIFsxMDk0OV1dLCBbJ3N1YmUnLCBbODgzOF1dLCBbJ3N1YmVkb3QnLCBbMTA5NDddXSwgWydzdWJtdWx0JywgWzEwOTQ1XV0sIFsnc3VibkUnLCBbMTA5NTVdXSwgWydzdWJuZScsIFs4ODQyXV0sIFsnc3VicGx1cycsIFsxMDk0M11dLCBbJ3N1YnJhcnInLCBbMTA2MTddXSwgWydzdWJzZXQnLCBbODgzNF1dLCBbJ1N1YnNldCcsIFs4OTEyXV0sIFsnc3Vic2V0ZXEnLCBbODgzOF1dLCBbJ3N1YnNldGVxcScsIFsxMDk0OV1dLCBbJ1N1YnNldEVxdWFsJywgWzg4MzhdXSwgWydzdWJzZXRuZXEnLCBbODg0Ml1dLCBbJ3N1YnNldG5lcXEnLCBbMTA5NTVdXSwgWydzdWJzaW0nLCBbMTA5NTFdXSwgWydzdWJzdWInLCBbMTA5NjVdXSwgWydzdWJzdXAnLCBbMTA5NjNdXSwgWydzdWNjYXBwcm94JywgWzEwOTM2XV0sIFsnc3VjYycsIFs4ODI3XV0sIFsnc3VjY2N1cmx5ZXEnLCBbODgyOV1dLCBbJ1N1Y2NlZWRzJywgWzg4MjddXSwgWydTdWNjZWVkc0VxdWFsJywgWzEwOTI4XV0sIFsnU3VjY2VlZHNTbGFudEVxdWFsJywgWzg4MjldXSwgWydTdWNjZWVkc1RpbGRlJywgWzg4MzFdXSwgWydzdWNjZXEnLCBbMTA5MjhdXSwgWydzdWNjbmFwcHJveCcsIFsxMDkzOF1dLCBbJ3N1Y2NuZXFxJywgWzEwOTM0XV0sIFsnc3VjY25zaW0nLCBbODkzN11dLCBbJ3N1Y2NzaW0nLCBbODgzMV1dLCBbJ1N1Y2hUaGF0JywgWzg3MTVdXSwgWydzdW0nLCBbODcyMV1dLCBbJ1N1bScsIFs4NzIxXV0sIFsnc3VuZycsIFs5ODM0XV0sIFsnc3VwMScsIFsxODVdXSwgWydzdXAyJywgWzE3OF1dLCBbJ3N1cDMnLCBbMTc5XV0sIFsnc3VwJywgWzg4MzVdXSwgWydTdXAnLCBbODkxM11dLCBbJ3N1cGRvdCcsIFsxMDk0Ml1dLCBbJ3N1cGRzdWInLCBbMTA5NjhdXSwgWydzdXBFJywgWzEwOTUwXV0sIFsnc3VwZScsIFs4ODM5XV0sIFsnc3VwZWRvdCcsIFsxMDk0OF1dLCBbJ1N1cGVyc2V0JywgWzg4MzVdXSwgWydTdXBlcnNldEVxdWFsJywgWzg4MzldXSwgWydzdXBoc29sJywgWzEwMTg1XV0sIFsnc3VwaHN1YicsIFsxMDk2N11dLCBbJ3N1cGxhcnInLCBbMTA2MTldXSwgWydzdXBtdWx0JywgWzEwOTQ2XV0sIFsnc3VwbkUnLCBbMTA5NTZdXSwgWydzdXBuZScsIFs4ODQzXV0sIFsnc3VwcGx1cycsIFsxMDk0NF1dLCBbJ3N1cHNldCcsIFs4ODM1XV0sIFsnU3Vwc2V0JywgWzg5MTNdXSwgWydzdXBzZXRlcScsIFs4ODM5XV0sIFsnc3Vwc2V0ZXFxJywgWzEwOTUwXV0sIFsnc3Vwc2V0bmVxJywgWzg4NDNdXSwgWydzdXBzZXRuZXFxJywgWzEwOTU2XV0sIFsnc3Vwc2ltJywgWzEwOTUyXV0sIFsnc3Vwc3ViJywgWzEwOTY0XV0sIFsnc3Vwc3VwJywgWzEwOTY2XV0sIFsnc3dhcmhrJywgWzEwNTM0XV0sIFsnc3dhcnInLCBbODYwMV1dLCBbJ3N3QXJyJywgWzg2NjVdXSwgWydzd2Fycm93JywgWzg2MDFdXSwgWydzd253YXInLCBbMTA1MzhdXSwgWydzemxpZycsIFsyMjNdXSwgWydUYWInLCBbOV1dLCBbJ3RhcmdldCcsIFs4OTgyXV0sIFsnVGF1JywgWzkzMl1dLCBbJ3RhdScsIFs5NjRdXSwgWyd0YnJrJywgWzkxNDBdXSwgWydUY2Fyb24nLCBbMzU2XV0sIFsndGNhcm9uJywgWzM1N11dLCBbJ1RjZWRpbCcsIFszNTRdXSwgWyd0Y2VkaWwnLCBbMzU1XV0sIFsnVGN5JywgWzEwNThdXSwgWyd0Y3knLCBbMTA5MF1dLCBbJ3Rkb3QnLCBbODQxMV1dLCBbJ3RlbHJlYycsIFs4OTgxXV0sIFsnVGZyJywgWzEyMDA4N11dLCBbJ3RmcicsIFsxMjAxMTNdXSwgWyd0aGVyZTQnLCBbODc1Nl1dLCBbJ3RoZXJlZm9yZScsIFs4NzU2XV0sIFsnVGhlcmVmb3JlJywgWzg3NTZdXSwgWydUaGV0YScsIFs5MjBdXSwgWyd0aGV0YScsIFs5NTJdXSwgWyd0aGV0YXN5bScsIFs5NzddXSwgWyd0aGV0YXYnLCBbOTc3XV0sIFsndGhpY2thcHByb3gnLCBbODc3Nl1dLCBbJ3RoaWNrc2ltJywgWzg3NjRdXSwgWydUaGlja1NwYWNlJywgWzgyODcsIDgyMDJdXSwgWydUaGluU3BhY2UnLCBbODIwMV1dLCBbJ3RoaW5zcCcsIFs4MjAxXV0sIFsndGhrYXAnLCBbODc3Nl1dLCBbJ3Roa3NpbScsIFs4NzY0XV0sIFsnVEhPUk4nLCBbMjIyXV0sIFsndGhvcm4nLCBbMjU0XV0sIFsndGlsZGUnLCBbNzMyXV0sIFsnVGlsZGUnLCBbODc2NF1dLCBbJ1RpbGRlRXF1YWwnLCBbODc3MV1dLCBbJ1RpbGRlRnVsbEVxdWFsJywgWzg3NzNdXSwgWydUaWxkZVRpbGRlJywgWzg3NzZdXSwgWyd0aW1lc2JhcicsIFsxMDgwMV1dLCBbJ3RpbWVzYicsIFs4ODY0XV0sIFsndGltZXMnLCBbMjE1XV0sIFsndGltZXNkJywgWzEwODAwXV0sIFsndGludCcsIFs4NzQ5XV0sIFsndG9lYScsIFsxMDUzNl1dLCBbJ3RvcGJvdCcsIFs5MDE0XV0sIFsndG9wY2lyJywgWzEwOTkzXV0sIFsndG9wJywgWzg4NjhdXSwgWydUb3BmJywgWzEyMDEzOV1dLCBbJ3RvcGYnLCBbMTIwMTY1XV0sIFsndG9wZm9yaycsIFsxMDk3MF1dLCBbJ3Rvc2EnLCBbMTA1MzddXSwgWyd0cHJpbWUnLCBbODI0NF1dLCBbJ3RyYWRlJywgWzg0ODJdXSwgWydUUkFERScsIFs4NDgyXV0sIFsndHJpYW5nbGUnLCBbOTY1M11dLCBbJ3RyaWFuZ2xlZG93bicsIFs5NjYzXV0sIFsndHJpYW5nbGVsZWZ0JywgWzk2NjddXSwgWyd0cmlhbmdsZWxlZnRlcScsIFs4ODg0XV0sIFsndHJpYW5nbGVxJywgWzg3OTZdXSwgWyd0cmlhbmdsZXJpZ2h0JywgWzk2NTddXSwgWyd0cmlhbmdsZXJpZ2h0ZXEnLCBbODg4NV1dLCBbJ3RyaWRvdCcsIFs5NzA4XV0sIFsndHJpZScsIFs4Nzk2XV0sIFsndHJpbWludXMnLCBbMTA4MTBdXSwgWydUcmlwbGVEb3QnLCBbODQxMV1dLCBbJ3RyaXBsdXMnLCBbMTA4MDldXSwgWyd0cmlzYicsIFsxMDcwMV1dLCBbJ3RyaXRpbWUnLCBbMTA4MTFdXSwgWyd0cnBleml1bScsIFs5MTg2XV0sIFsnVHNjcicsIFsxMTk5ODNdXSwgWyd0c2NyJywgWzEyMDAwOV1dLCBbJ1RTY3knLCBbMTA2Ml1dLCBbJ3RzY3knLCBbMTA5NF1dLCBbJ1RTSGN5JywgWzEwMzVdXSwgWyd0c2hjeScsIFsxMTE1XV0sIFsnVHN0cm9rJywgWzM1OF1dLCBbJ3RzdHJvaycsIFszNTldXSwgWyd0d2l4dCcsIFs4ODEyXV0sIFsndHdvaGVhZGxlZnRhcnJvdycsIFs4NjA2XV0sIFsndHdvaGVhZHJpZ2h0YXJyb3cnLCBbODYwOF1dLCBbJ1VhY3V0ZScsIFsyMThdXSwgWyd1YWN1dGUnLCBbMjUwXV0sIFsndWFycicsIFs4NTkzXV0sIFsnVWFycicsIFs4NjA3XV0sIFsndUFycicsIFs4NjU3XV0sIFsnVWFycm9jaXInLCBbMTA1NjldXSwgWydVYnJjeScsIFsxMDM4XV0sIFsndWJyY3knLCBbMTExOF1dLCBbJ1VicmV2ZScsIFszNjRdXSwgWyd1YnJldmUnLCBbMzY1XV0sIFsnVWNpcmMnLCBbMjE5XV0sIFsndWNpcmMnLCBbMjUxXV0sIFsnVWN5JywgWzEwNTldXSwgWyd1Y3knLCBbMTA5MV1dLCBbJ3VkYXJyJywgWzg2NDVdXSwgWydVZGJsYWMnLCBbMzY4XV0sIFsndWRibGFjJywgWzM2OV1dLCBbJ3VkaGFyJywgWzEwNjA2XV0sIFsndWZpc2h0JywgWzEwNjIyXV0sIFsnVWZyJywgWzEyMDA4OF1dLCBbJ3VmcicsIFsxMjAxMTRdXSwgWydVZ3JhdmUnLCBbMjE3XV0sIFsndWdyYXZlJywgWzI0OV1dLCBbJ3VIYXInLCBbMTA1OTVdXSwgWyd1aGFybCcsIFs4NjM5XV0sIFsndWhhcnInLCBbODYzOF1dLCBbJ3VoYmxrJywgWzk2MDBdXSwgWyd1bGNvcm4nLCBbODk4OF1dLCBbJ3VsY29ybmVyJywgWzg5ODhdXSwgWyd1bGNyb3AnLCBbODk3NV1dLCBbJ3VsdHJpJywgWzk3MjBdXSwgWydVbWFjcicsIFszNjJdXSwgWyd1bWFjcicsIFszNjNdXSwgWyd1bWwnLCBbMTY4XV0sIFsnVW5kZXJCYXInLCBbOTVdXSwgWydVbmRlckJyYWNlJywgWzkxODNdXSwgWydVbmRlckJyYWNrZXQnLCBbOTE0MV1dLCBbJ1VuZGVyUGFyZW50aGVzaXMnLCBbOTE4MV1dLCBbJ1VuaW9uJywgWzg4OTldXSwgWydVbmlvblBsdXMnLCBbODg0Nl1dLCBbJ1VvZ29uJywgWzM3MF1dLCBbJ3VvZ29uJywgWzM3MV1dLCBbJ1VvcGYnLCBbMTIwMTQwXV0sIFsndW9wZicsIFsxMjAxNjZdXSwgWydVcEFycm93QmFyJywgWzEwNTE0XV0sIFsndXBhcnJvdycsIFs4NTkzXV0sIFsnVXBBcnJvdycsIFs4NTkzXV0sIFsnVXBhcnJvdycsIFs4NjU3XV0sIFsnVXBBcnJvd0Rvd25BcnJvdycsIFs4NjQ1XV0sIFsndXBkb3duYXJyb3cnLCBbODU5N11dLCBbJ1VwRG93bkFycm93JywgWzg1OTddXSwgWydVcGRvd25hcnJvdycsIFs4NjYxXV0sIFsnVXBFcXVpbGlicml1bScsIFsxMDYwNl1dLCBbJ3VwaGFycG9vbmxlZnQnLCBbODYzOV1dLCBbJ3VwaGFycG9vbnJpZ2h0JywgWzg2MzhdXSwgWyd1cGx1cycsIFs4ODQ2XV0sIFsnVXBwZXJMZWZ0QXJyb3cnLCBbODU5OF1dLCBbJ1VwcGVyUmlnaHRBcnJvdycsIFs4NTk5XV0sIFsndXBzaScsIFs5NjVdXSwgWydVcHNpJywgWzk3OF1dLCBbJ3Vwc2loJywgWzk3OF1dLCBbJ1Vwc2lsb24nLCBbOTMzXV0sIFsndXBzaWxvbicsIFs5NjVdXSwgWydVcFRlZUFycm93JywgWzg2MTNdXSwgWydVcFRlZScsIFs4ODY5XV0sIFsndXB1cGFycm93cycsIFs4NjQ4XV0sIFsndXJjb3JuJywgWzg5ODldXSwgWyd1cmNvcm5lcicsIFs4OTg5XV0sIFsndXJjcm9wJywgWzg5NzRdXSwgWydVcmluZycsIFszNjZdXSwgWyd1cmluZycsIFszNjddXSwgWyd1cnRyaScsIFs5NzIxXV0sIFsnVXNjcicsIFsxMTk5ODRdXSwgWyd1c2NyJywgWzEyMDAxMF1dLCBbJ3V0ZG90JywgWzg5NDRdXSwgWydVdGlsZGUnLCBbMzYwXV0sIFsndXRpbGRlJywgWzM2MV1dLCBbJ3V0cmknLCBbOTY1M11dLCBbJ3V0cmlmJywgWzk2NTJdXSwgWyd1dWFycicsIFs4NjQ4XV0sIFsnVXVtbCcsIFsyMjBdXSwgWyd1dW1sJywgWzI1Ml1dLCBbJ3V3YW5nbGUnLCBbMTA2NjNdXSwgWyd2YW5ncnQnLCBbMTA2NTJdXSwgWyd2YXJlcHNpbG9uJywgWzEwMTNdXSwgWyd2YXJrYXBwYScsIFsxMDA4XV0sIFsndmFybm90aGluZycsIFs4NzA5XV0sIFsndmFycGhpJywgWzk4MV1dLCBbJ3ZhcnBpJywgWzk4Ml1dLCBbJ3ZhcnByb3B0bycsIFs4NzMzXV0sIFsndmFycicsIFs4NTk3XV0sIFsndkFycicsIFs4NjYxXV0sIFsndmFycmhvJywgWzEwMDldXSwgWyd2YXJzaWdtYScsIFs5NjJdXSwgWyd2YXJzdWJzZXRuZXEnLCBbODg0MiwgNjUwMjRdXSwgWyd2YXJzdWJzZXRuZXFxJywgWzEwOTU1LCA2NTAyNF1dLCBbJ3ZhcnN1cHNldG5lcScsIFs4ODQzLCA2NTAyNF1dLCBbJ3ZhcnN1cHNldG5lcXEnLCBbMTA5NTYsIDY1MDI0XV0sIFsndmFydGhldGEnLCBbOTc3XV0sIFsndmFydHJpYW5nbGVsZWZ0JywgWzg4ODJdXSwgWyd2YXJ0cmlhbmdsZXJpZ2h0JywgWzg4ODNdXSwgWyd2QmFyJywgWzEwOTg0XV0sIFsnVmJhcicsIFsxMDk4N11dLCBbJ3ZCYXJ2JywgWzEwOTg1XV0sIFsnVmN5JywgWzEwNDJdXSwgWyd2Y3knLCBbMTA3NF1dLCBbJ3ZkYXNoJywgWzg4NjZdXSwgWyd2RGFzaCcsIFs4ODcyXV0sIFsnVmRhc2gnLCBbODg3M11dLCBbJ1ZEYXNoJywgWzg4NzVdXSwgWydWZGFzaGwnLCBbMTA5ODJdXSwgWyd2ZWViYXInLCBbODg5MV1dLCBbJ3ZlZScsIFs4NzQ0XV0sIFsnVmVlJywgWzg4OTddXSwgWyd2ZWVlcScsIFs4Nzk0XV0sIFsndmVsbGlwJywgWzg5NDJdXSwgWyd2ZXJiYXInLCBbMTI0XV0sIFsnVmVyYmFyJywgWzgyMTRdXSwgWyd2ZXJ0JywgWzEyNF1dLCBbJ1ZlcnQnLCBbODIxNF1dLCBbJ1ZlcnRpY2FsQmFyJywgWzg3MzldXSwgWydWZXJ0aWNhbExpbmUnLCBbMTI0XV0sIFsnVmVydGljYWxTZXBhcmF0b3InLCBbMTAwNzJdXSwgWydWZXJ0aWNhbFRpbGRlJywgWzg3NjhdXSwgWydWZXJ5VGhpblNwYWNlJywgWzgyMDJdXSwgWydWZnInLCBbMTIwMDg5XV0sIFsndmZyJywgWzEyMDExNV1dLCBbJ3ZsdHJpJywgWzg4ODJdXSwgWyd2bnN1YicsIFs4ODM0LCA4NDAyXV0sIFsndm5zdXAnLCBbODgzNSwgODQwMl1dLCBbJ1ZvcGYnLCBbMTIwMTQxXV0sIFsndm9wZicsIFsxMjAxNjddXSwgWyd2cHJvcCcsIFs4NzMzXV0sIFsndnJ0cmknLCBbODg4M11dLCBbJ1ZzY3InLCBbMTE5OTg1XV0sIFsndnNjcicsIFsxMjAwMTFdXSwgWyd2c3VibkUnLCBbMTA5NTUsIDY1MDI0XV0sIFsndnN1Ym5lJywgWzg4NDIsIDY1MDI0XV0sIFsndnN1cG5FJywgWzEwOTU2LCA2NTAyNF1dLCBbJ3ZzdXBuZScsIFs4ODQzLCA2NTAyNF1dLCBbJ1Z2ZGFzaCcsIFs4ODc0XV0sIFsndnppZ3phZycsIFsxMDY1MF1dLCBbJ1djaXJjJywgWzM3Ml1dLCBbJ3djaXJjJywgWzM3M11dLCBbJ3dlZGJhcicsIFsxMDg0N11dLCBbJ3dlZGdlJywgWzg3NDNdXSwgWydXZWRnZScsIFs4ODk2XV0sIFsnd2VkZ2VxJywgWzg3OTNdXSwgWyd3ZWllcnAnLCBbODQ3Ml1dLCBbJ1dmcicsIFsxMjAwOTBdXSwgWyd3ZnInLCBbMTIwMTE2XV0sIFsnV29wZicsIFsxMjAxNDJdXSwgWyd3b3BmJywgWzEyMDE2OF1dLCBbJ3dwJywgWzg0NzJdXSwgWyd3cicsIFs4NzY4XV0sIFsnd3JlYXRoJywgWzg3NjhdXSwgWydXc2NyJywgWzExOTk4Nl1dLCBbJ3dzY3InLCBbMTIwMDEyXV0sIFsneGNhcCcsIFs4ODk4XV0sIFsneGNpcmMnLCBbOTcxMV1dLCBbJ3hjdXAnLCBbODg5OV1dLCBbJ3hkdHJpJywgWzk2NjFdXSwgWydYZnInLCBbMTIwMDkxXV0sIFsneGZyJywgWzEyMDExN11dLCBbJ3hoYXJyJywgWzEwMjMxXV0sIFsneGhBcnInLCBbMTAyMzRdXSwgWydYaScsIFs5MjZdXSwgWyd4aScsIFs5NThdXSwgWyd4bGFycicsIFsxMDIyOV1dLCBbJ3hsQXJyJywgWzEwMjMyXV0sIFsneG1hcCcsIFsxMDIzNl1dLCBbJ3huaXMnLCBbODk1NV1dLCBbJ3hvZG90JywgWzEwNzUyXV0sIFsnWG9wZicsIFsxMjAxNDNdXSwgWyd4b3BmJywgWzEyMDE2OV1dLCBbJ3hvcGx1cycsIFsxMDc1M11dLCBbJ3hvdGltZScsIFsxMDc1NF1dLCBbJ3hyYXJyJywgWzEwMjMwXV0sIFsneHJBcnInLCBbMTAyMzNdXSwgWydYc2NyJywgWzExOTk4N11dLCBbJ3hzY3InLCBbMTIwMDEzXV0sIFsneHNxY3VwJywgWzEwNzU4XV0sIFsneHVwbHVzJywgWzEwNzU2XV0sIFsneHV0cmknLCBbOTY1MV1dLCBbJ3h2ZWUnLCBbODg5N11dLCBbJ3h3ZWRnZScsIFs4ODk2XV0sIFsnWWFjdXRlJywgWzIyMV1dLCBbJ3lhY3V0ZScsIFsyNTNdXSwgWydZQWN5JywgWzEwNzFdXSwgWyd5YWN5JywgWzExMDNdXSwgWydZY2lyYycsIFszNzRdXSwgWyd5Y2lyYycsIFszNzVdXSwgWydZY3knLCBbMTA2N11dLCBbJ3ljeScsIFsxMDk5XV0sIFsneWVuJywgWzE2NV1dLCBbJ1lmcicsIFsxMjAwOTJdXSwgWyd5ZnInLCBbMTIwMTE4XV0sIFsnWUljeScsIFsxMDMxXV0sIFsneWljeScsIFsxMTExXV0sIFsnWW9wZicsIFsxMjAxNDRdXSwgWyd5b3BmJywgWzEyMDE3MF1dLCBbJ1lzY3InLCBbMTE5OTg4XV0sIFsneXNjcicsIFsxMjAwMTRdXSwgWydZVWN5JywgWzEwNzBdXSwgWyd5dWN5JywgWzExMDJdXSwgWyd5dW1sJywgWzI1NV1dLCBbJ1l1bWwnLCBbMzc2XV0sIFsnWmFjdXRlJywgWzM3N11dLCBbJ3phY3V0ZScsIFszNzhdXSwgWydaY2Fyb24nLCBbMzgxXV0sIFsnemNhcm9uJywgWzM4Ml1dLCBbJ1pjeScsIFsxMDQ3XV0sIFsnemN5JywgWzEwNzldXSwgWydaZG90JywgWzM3OV1dLCBbJ3pkb3QnLCBbMzgwXV0sIFsnemVldHJmJywgWzg0ODhdXSwgWydaZXJvV2lkdGhTcGFjZScsIFs4MjAzXV0sIFsnWmV0YScsIFs5MThdXSwgWyd6ZXRhJywgWzk1MF1dLCBbJ3pmcicsIFsxMjAxMTldXSwgWydaZnInLCBbODQ4OF1dLCBbJ1pIY3knLCBbMTA0Nl1dLCBbJ3poY3knLCBbMTA3OF1dLCBbJ3ppZ3JhcnInLCBbODY2OV1dLCBbJ3pvcGYnLCBbMTIwMTcxXV0sIFsnWm9wZicsIFs4NDg0XV0sIFsnWnNjcicsIFsxMTk5ODldXSwgWyd6c2NyJywgWzEyMDAxNV1dLCBbJ3p3aicsIFs4MjA1XV0sIFsnenduaicsIFs4MjA0XV1dO1xudmFyIERFQ09ERV9PTkxZX0VOVElUSUVTID0gW1snTmV3TGluZScsIFsxMF1dXTtcbnZhciBhbHBoYUluZGV4ID0ge307XG52YXIgY2hhckluZGV4ID0ge307XG5jcmVhdGVJbmRleGVzKGFscGhhSW5kZXgsIGNoYXJJbmRleCk7XG52YXIgSHRtbDVFbnRpdGllcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIdG1sNUVudGl0aWVzKCkge1xuICAgIH1cbiAgICBIdG1sNUVudGl0aWVzLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mKCM/W1xcd1xcZF0rKTs/L2csIGZ1bmN0aW9uIChzLCBlbnRpdHkpIHtcbiAgICAgICAgICAgIHZhciBjaHI7XG4gICAgICAgICAgICBpZiAoZW50aXR5LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IGVudGl0eS5jaGFyQXQoMSkgPT09ICd4JyA/XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGVudGl0eS5zdWJzdHIoMikudG9Mb3dlckNhc2UoKSwgMTYpIDpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoZW50aXR5LnN1YnN0cigxKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihjb2RlKSB8fCBjb2RlID49IC0zMjc2OCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA8PSA2NTUzNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNociA9IHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaHIgPSBhbHBoYUluZGV4W2VudGl0eV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2hyIHx8IHM7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSHRtbDVFbnRpdGllcy5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbDVFbnRpdGllcygpLmRlY29kZShzdHIpO1xuICAgIH07XG4gICAgSHRtbDVFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjaGFySW5mbyA9IGNoYXJJbmRleFtzdHIuY2hhckNvZGVBdChpKV07XG4gICAgICAgICAgICBpZiAoY2hhckluZm8pIHtcbiAgICAgICAgICAgICAgICB2YXIgYWxwaGEgPSBjaGFySW5mb1tzdHIuY2hhckNvZGVBdChpICsgMSldO1xuICAgICAgICAgICAgICAgIGlmIChhbHBoYSkge1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbHBoYSA9IGNoYXJJbmZvWycnXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIiZcIiArIGFscGhhICsgXCI7XCI7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIEh0bWw1RW50aXRpZXMuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWw1RW50aXRpZXMoKS5lbmNvZGUoc3RyKTtcbiAgICB9O1xuICAgIEh0bWw1RW50aXRpZXMucHJvdG90eXBlLmVuY29kZU5vblVURiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgc3RyTGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgdmFyIGNoYXJJbmZvID0gY2hhckluZGV4W2NdO1xuICAgICAgICAgICAgaWYgKGNoYXJJbmZvKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFscGhhID0gY2hhckluZm9bc3RyLmNoYXJDb2RlQXQoaSArIDEpXTtcbiAgICAgICAgICAgICAgICBpZiAoYWxwaGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWxwaGEgPSBjaGFySW5mb1snJ107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhbHBoYSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCImXCIgKyBhbHBoYSArIFwiO1wiO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjIDwgMzIgfHwgYyA+IDEyNikge1xuICAgICAgICAgICAgICAgIGlmIChjID49IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVGcm9tICYmIGMgPD0gc3Vycm9nYXRlX3BhaXJzXzEuaGlnaFN1cnJvZ2F0ZVRvKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgc3Vycm9nYXRlX3BhaXJzXzEuZ2V0Q29kZVBvaW50KHN0ciwgaSkgKyAnOyc7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgYyArICc7JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgSHRtbDVFbnRpdGllcy5lbmNvZGVOb25VVEYgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbDVFbnRpdGllcygpLmVuY29kZU5vblVURihzdHIpO1xuICAgIH07XG4gICAgSHRtbDVFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlTm9uQVNDSUkgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHN0ckxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmIChjIDw9IDI1NSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdHJbaSsrXTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjID49IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVGcm9tICYmIGMgPD0gc3Vycm9nYXRlX3BhaXJzXzEuaGlnaFN1cnJvZ2F0ZVRvKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBzdXJyb2dhdGVfcGFpcnNfMS5nZXRDb2RlUG9pbnQoc3RyLCBpKSArICc7JztcbiAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIGMgKyAnOyc7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBIdG1sNUVudGl0aWVzLmVuY29kZU5vbkFTQ0lJID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWw1RW50aXRpZXMoKS5lbmNvZGVOb25BU0NJSShzdHIpO1xuICAgIH07XG4gICAgcmV0dXJuIEh0bWw1RW50aXRpZXM7XG59KCkpO1xuZXhwb3J0cy5IdG1sNUVudGl0aWVzID0gSHRtbDVFbnRpdGllcztcbmZ1bmN0aW9uIGNyZWF0ZUluZGV4ZXMoYWxwaGFJbmRleCwgY2hhckluZGV4KSB7XG4gICAgdmFyIGkgPSBFTlRJVElFUy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2YXIgX2EgPSBFTlRJVElFU1tpXSwgYWxwaGEgPSBfYVswXSwgX2IgPSBfYVsxXSwgY2hyID0gX2JbMF0sIGNocjIgPSBfYlsxXTtcbiAgICAgICAgdmFyIGFkZENoYXIgPSAoY2hyIDwgMzIgfHwgY2hyID4gMTI2KSB8fCBjaHIgPT09IDYyIHx8IGNociA9PT0gNjAgfHwgY2hyID09PSAzOCB8fCBjaHIgPT09IDM0IHx8IGNociA9PT0gMzk7XG4gICAgICAgIHZhciBjaGFySW5mbyA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGFkZENoYXIpIHtcbiAgICAgICAgICAgIGNoYXJJbmZvID0gY2hhckluZGV4W2Nocl0gPSBjaGFySW5kZXhbY2hyXSB8fCB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hyMikge1xuICAgICAgICAgICAgYWxwaGFJbmRleFthbHBoYV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocikgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjIpO1xuICAgICAgICAgICAgYWRkQ2hhciAmJiAoY2hhckluZm9bY2hyMl0gPSBhbHBoYSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhbHBoYUluZGV4W2FscGhhXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyKTtcbiAgICAgICAgICAgIGFkZENoYXIgJiYgKGNoYXJJbmZvWycnXSA9IGFscGhhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpID0gREVDT0RFX09OTFlfRU5USVRJRVMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdmFyIF9jID0gREVDT0RFX09OTFlfRU5USVRJRVNbaV0sIGFscGhhID0gX2NbMF0sIF9kID0gX2NbMV0sIGNociA9IF9kWzBdLCBjaHIyID0gX2RbMV07XG4gICAgICAgIGFscGhhSW5kZXhbYWxwaGFdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpICsgKGNocjIgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjIpIDogJycpO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHhtbF9lbnRpdGllc18xID0gcmVxdWlyZShcIi4veG1sLWVudGl0aWVzXCIpO1xuZXhwb3J0cy5YbWxFbnRpdGllcyA9IHhtbF9lbnRpdGllc18xLlhtbEVudGl0aWVzO1xudmFyIGh0bWw0X2VudGl0aWVzXzEgPSByZXF1aXJlKFwiLi9odG1sNC1lbnRpdGllc1wiKTtcbmV4cG9ydHMuSHRtbDRFbnRpdGllcyA9IGh0bWw0X2VudGl0aWVzXzEuSHRtbDRFbnRpdGllcztcbnZhciBodG1sNV9lbnRpdGllc18xID0gcmVxdWlyZShcIi4vaHRtbDUtZW50aXRpZXNcIik7XG5leHBvcnRzLkh0bWw1RW50aXRpZXMgPSBodG1sNV9lbnRpdGllc18xLkh0bWw1RW50aXRpZXM7XG5leHBvcnRzLkFsbEh0bWxFbnRpdGllcyA9IGh0bWw1X2VudGl0aWVzXzEuSHRtbDVFbnRpdGllcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQgfHwgZnVuY3Rpb24gKGFzdHJhbENvZGVQb2ludCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKE1hdGguZmxvb3IoKGFzdHJhbENvZGVQb2ludCAtIDB4MTAwMDApIC8gMHg0MDApICsgMHhEODAwLCAoYXN0cmFsQ29kZVBvaW50IC0gMHgxMDAwMCkgJSAweDQwMCArIDB4REMwMCk7XG59O1xuZXhwb3J0cy5nZXRDb2RlUG9pbnQgPSBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0ID9cbiAgICBmdW5jdGlvbiAoaW5wdXQsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5jb2RlUG9pbnRBdChwb3NpdGlvbik7XG4gICAgfSA6XG4gICAgZnVuY3Rpb24gKGlucHV0LCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gKGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24pIC0gMHhEODAwKSAqIDB4NDAwXG4gICAgICAgICAgICArIGlucHV0LmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSAtIDB4REMwMCArIDB4MTAwMDA7XG4gICAgfTtcbmV4cG9ydHMuaGlnaFN1cnJvZ2F0ZUZyb20gPSAweEQ4MDA7XG5leHBvcnRzLmhpZ2hTdXJyb2dhdGVUbyA9IDB4REJGRjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHN1cnJvZ2F0ZV9wYWlyc18xID0gcmVxdWlyZShcIi4vc3Vycm9nYXRlLXBhaXJzXCIpO1xudmFyIEFMUEhBX0lOREVYID0ge1xuICAgICcmbHQnOiAnPCcsXG4gICAgJyZndCc6ICc+JyxcbiAgICAnJnF1b3QnOiAnXCInLFxuICAgICcmYXBvcyc6ICdcXCcnLFxuICAgICcmYW1wJzogJyYnLFxuICAgICcmbHQ7JzogJzwnLFxuICAgICcmZ3Q7JzogJz4nLFxuICAgICcmcXVvdDsnOiAnXCInLFxuICAgICcmYXBvczsnOiAnXFwnJyxcbiAgICAnJmFtcDsnOiAnJidcbn07XG52YXIgQ0hBUl9JTkRFWCA9IHtcbiAgICA2MDogJ2x0JyxcbiAgICA2MjogJ2d0JyxcbiAgICAzNDogJ3F1b3QnLFxuICAgIDM5OiAnYXBvcycsXG4gICAgMzg6ICdhbXAnXG59O1xudmFyIENIQVJfU19JTkRFWCA9IHtcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICAnXFwnJzogJyZhcG9zOycsXG4gICAgJyYnOiAnJmFtcDsnXG59O1xudmFyIFhtbEVudGl0aWVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFhtbEVudGl0aWVzKCkge1xuICAgIH1cbiAgICBYbWxFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvWzw+XCInJl0vZywgZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIHJldHVybiBDSEFSX1NfSU5ERVhbc107XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgWG1sRW50aXRpZXMuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IFhtbEVudGl0aWVzKCkuZW5jb2RlKHN0cik7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvJiM/WzAtOWEtekEtWl0rOz8vZywgZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIGlmIChzLmNoYXJBdCgxKSA9PT0gJyMnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBzLmNoYXJBdCgyKS50b0xvd2VyQ2FzZSgpID09PSAneCcgP1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChzLnN1YnN0cigzKSwgMTYpIDpcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQocy5zdWJzdHIoMikpO1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oY29kZSkgfHwgY29kZSA+PSAtMzI3NjgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgPD0gNjU1MzUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEFMUEhBX0lOREVYW3NdIHx8IHM7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgWG1sRW50aXRpZXMuZGVjb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IFhtbEVudGl0aWVzKCkuZGVjb2RlKHN0cik7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlTm9uVVRGID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICB2YXIgYWxwaGEgPSBDSEFSX0lOREVYW2NdO1xuICAgICAgICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiJlwiICsgYWxwaGEgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA8IDMyIHx8IGMgPiAxMjYpIHtcbiAgICAgICAgICAgICAgICBpZiAoYyA+PSBzdXJyb2dhdGVfcGFpcnNfMS5oaWdoU3Vycm9nYXRlRnJvbSAmJiBjIDw9IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVUbykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIHN1cnJvZ2F0ZV9wYWlyc18xLmdldENvZGVQb2ludChzdHIsIGkpICsgJzsnO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIGMgKyAnOyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFhtbEVudGl0aWVzLmVuY29kZU5vblVURiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBYbWxFbnRpdGllcygpLmVuY29kZU5vblVURihzdHIpO1xuICAgIH07XG4gICAgWG1sRW50aXRpZXMucHJvdG90eXBlLmVuY29kZU5vbkFTQ0lJID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoYyA8PSAyNTUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc3RyW2krK107XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA+PSBzdXJyb2dhdGVfcGFpcnNfMS5oaWdoU3Vycm9nYXRlRnJvbSAmJiBjIDw9IHN1cnJvZ2F0ZV9wYWlyc18xLmhpZ2hTdXJyb2dhdGVUbykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnJiMnICsgc3Vycm9nYXRlX3BhaXJzXzEuZ2V0Q29kZVBvaW50KHN0ciwgaSkgKyAnOyc7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBjICsgJzsnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBYbWxFbnRpdGllcy5lbmNvZGVOb25BU0NJSSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBYbWxFbnRpdGllcygpLmVuY29kZU5vbkFTQ0lJKHN0cik7XG4gICAgfTtcbiAgICByZXR1cm4gWG1sRW50aXRpZXM7XG59KCkpO1xuZXhwb3J0cy5YbWxFbnRpdGllcyA9IFhtbEVudGl0aWVzO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRhVmlldztcbiIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXA7XG4iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXQ7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpLFxuICAgIHNldENhY2hlQWRkID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVBZGQnKSxcbiAgICBzZXRDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX3NldENhY2hlSGFzJyk7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxubW9kdWxlLmV4cG9ydHMgPSBTZXRDYWNoZTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBzdGFja0NsZWFyID0gcmVxdWlyZSgnLi9fc3RhY2tDbGVhcicpLFxuICAgIHN0YWNrRGVsZXRlID0gcmVxdWlyZSgnLi9fc3RhY2tEZWxldGUnKSxcbiAgICBzdGFja0dldCA9IHJlcXVpcmUoJy4vX3N0YWNrR2V0JyksXG4gICAgc3RhY2tIYXMgPSByZXF1aXJlKCcuL19zdGFja0hhcycpLFxuICAgIHN0YWNrU2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWNrO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ4QXJyYXk7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWFrTWFwO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RWFjaDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlNYXA7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVNvbWU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwidmFyIGJhc2VGb3JPd24gPSByZXF1aXJlKCcuL19iYXNlRm9yT3duJyksXG4gICAgY3JlYXRlQmFzZUVhY2ggPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRWFjaCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICovXG52YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRWFjaDtcbiIsInZhciBjcmVhdGVCYXNlRm9yID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUZvcicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xudmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZvcjtcbiIsInZhciBiYXNlRm9yID0gcmVxdWlyZSgnLi9fYmFzZUZvcicpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3JPd247XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IDAsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICB9XG4gIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0O1xuIiwidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRBbGxLZXlzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VIYXNJbjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuIiwidmFyIGJhc2VJc0VxdWFsRGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsRGVlcCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgZXF1YWxCeVRhZyA9IHJlcXVpcmUoJy4vX2VxdWFsQnlUYWcnKSxcbiAgICBlcXVhbE9iamVjdHMgPSByZXF1aXJlKCcuL19lcXVhbE9iamVjdHMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hdGNoO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hdGl2ZTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNUeXBlZEFycmF5O1xuIiwidmFyIGJhc2VNYXRjaGVzID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXMnKSxcbiAgICBiYXNlTWF0Y2hlc1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXNQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBwcm9wZXJ0eSA9IHJlcXVpcmUoJy4vcHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXRlcmF0ZWU7XG4iLCJ2YXIgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5cztcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hcDtcbiIsInZhciBiYXNlSXNNYXRjaCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hdGNoJyksXG4gICAgZ2V0TWF0Y2hEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWF0Y2hEYXRhJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlcztcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyksXG4gICAgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKSxcbiAgICBoYXNJbiA9IHJlcXVpcmUoJy4vaGFzSW4nKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzUHJvcGVydHk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eTtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHlEZWVwO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FjaGVIYXM7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdEZ1bmN0aW9uO1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgc3RyaW5nVG9QYXRoID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9QYXRoJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG5mdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFBhdGg7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuIiwidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VFYWNoO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUZvcjtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxBcnJheXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgVWludDhBcnJheSA9IHJlcXVpcmUoJy4vX1VpbnQ4QXJyYXknKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgbWFwVG9BcnJheSA9IHJlcXVpcmUoJy4vX21hcFRvQXJyYXknKSxcbiAgICBzZXRUb0FycmF5ID0gcmVxdWlyZSgnLi9fc2V0VG9BcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQnlUYWc7XG4iLCJ2YXIgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxPYmplY3RzO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsInZhciBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9scztcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1BhdGg7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXlhYmxlO1xuIiwidmFyIGNvcmVKc0RhdGEgPSByZXF1aXJlKCcuL19jb3JlSnNEYXRhJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXNrZWQ7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQcm90b3R5cGU7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N0cmljdENvbXBhcmFibGU7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgSGFzaCA9IHJlcXVpcmUoJy4vX0hhc2gnKSxcbiAgICBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlQ2xlYXI7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVEZWxldGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBUb0FycmF5O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlO1xuIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVDYXBwZWQ7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZVV0aWw7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCIvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUhhcztcbiIsIi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9BcnJheTtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrRGVsZXRlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0hhcztcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrU2V0O1xuIiwidmFyIG1lbW9pemVDYXBwZWQgPSByZXF1aXJlKCcuL19tZW1vaXplQ2FwcGVkJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdUb1BhdGg7XG4iLCJ2YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAqL1xuZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvS2V5O1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZvckVhY2gnKTtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKSxcbiAgICBjYXN0RnVuY3Rpb24gPSByZXF1aXJlKCcuL19jYXN0RnVuY3Rpb24nKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGFsaWFzIGVhY2hcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICogQHNlZSBfLmZvckVhY2hSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICpcbiAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAqICAgY29uc29sZS5sb2coa2V5KTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGNhc3RGdW5jdGlvbihpdGVyYXRlZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2g7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldDtcbiIsInZhciBiYXNlSGFzSW4gPSByZXF1aXJlKCcuL19iYXNlSGFzSW4nKSxcbiAgICBoYXNQYXRoID0gcmVxdWlyZSgnLi9faGFzUGF0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzSW47XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlkZW50aXR5O1xuIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0xlbmd0aDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXM7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VNYXAgPSByZXF1aXJlKCcuL19iYXNlTWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICpcbiAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICogYGFyeWAsIGBjaHVua2AsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCxcbiAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICogYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBhbmQgYHdvcmRzYFxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAqICAgcmV0dXJuIG4gKiBuO1xuICogfVxuICpcbiAqIF8ubWFwKFs0LCA4XSwgc3F1YXJlKTtcbiAqIC8vID0+IFsxNiwgNjRdXG4gKlxuICogXy5tYXAoeyAnYSc6IDQsICdiJzogOCB9LCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAqIF07XG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICovXG5mdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXA7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZTtcbiIsInZhciBiYXNlUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHknKSxcbiAgICBiYXNlUHJvcGVydHlEZWVwID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5RGVlcCcpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9wZXJ0eTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkFycmF5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJGYWxzZTtcbiIsInZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlVG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU3RyaW5nO1xuIiwiLypcbiogbG9nbGV2ZWwgLSBodHRwczovL2dpdGh1Yi5jb20vcGltdGVycnkvbG9nbGV2ZWxcbipcbiogQ29weXJpZ2h0IChjKSAyMDEzIFRpbSBQZXJyeVxuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4qL1xuKGZ1bmN0aW9uIChyb290LCBkZWZpbml0aW9uKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoZGVmaW5pdGlvbik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByb290LmxvZyA9IGRlZmluaXRpb24oKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vIFNsaWdodGx5IGR1YmlvdXMgdHJpY2tzIHRvIGN1dCBkb3duIG1pbmltaXplZCBmaWxlIHNpemVcbiAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307XG4gICAgdmFyIHVuZGVmaW5lZFR5cGUgPSBcInVuZGVmaW5lZFwiO1xuICAgIHZhciBpc0lFID0gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUpICYmICh0eXBlb2Ygd2luZG93Lm5hdmlnYXRvciAhPT0gdW5kZWZpbmVkVHlwZSkgJiYgKFxuICAgICAgICAvVHJpZGVudFxcL3xNU0lFIC8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICApO1xuXG4gICAgdmFyIGxvZ01ldGhvZHMgPSBbXG4gICAgICAgIFwidHJhY2VcIixcbiAgICAgICAgXCJkZWJ1Z1wiLFxuICAgICAgICBcImluZm9cIixcbiAgICAgICAgXCJ3YXJuXCIsXG4gICAgICAgIFwiZXJyb3JcIlxuICAgIF07XG5cbiAgICB2YXIgX2xvZ2dlcnNCeU5hbWUgPSB7fTtcbiAgICB2YXIgZGVmYXVsdExvZ2dlciA9IG51bGw7XG5cbiAgICAvLyBDcm9zcy1icm93c2VyIGJpbmQgZXF1aXZhbGVudCB0aGF0IHdvcmtzIGF0IGxlYXN0IGJhY2sgdG8gSUU2XG4gICAgZnVuY3Rpb24gYmluZE1ldGhvZChvYmosIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IG9ialttZXRob2ROYW1lXTtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QuYmluZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5iaW5kKG9iaik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKG1ldGhvZCwgb2JqKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBNaXNzaW5nIGJpbmQgc2hpbSBvciBJRTggKyBNb2Rlcm5penIsIGZhbGxiYWNrIHRvIHdyYXBwaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KG1ldGhvZCwgW29iaiwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRyYWNlKCkgZG9lc24ndCBwcmludCB0aGUgbWVzc2FnZSBpbiBJRSwgc28gZm9yIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIHdyYXAgaXRcbiAgICBmdW5jdGlvbiB0cmFjZUZvcklFKCkge1xuICAgICAgICBpZiAoY29uc29sZS5sb2cpIHtcbiAgICAgICAgICAgIGlmIChjb25zb2xlLmxvZy5hcHBseSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEluIG9sZCBJRSwgbmF0aXZlIGNvbnNvbGUgbWV0aG9kcyB0aGVtc2VsdmVzIGRvbid0IGhhdmUgYXBwbHkoKS5cbiAgICAgICAgICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuYXBwbHkoY29uc29sZS5sb2csIFtjb25zb2xlLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uc29sZS50cmFjZSkgY29uc29sZS50cmFjZSgpO1xuICAgIH1cblxuICAgIC8vIEJ1aWxkIHRoZSBiZXN0IGxvZ2dpbmcgbWV0aG9kIHBvc3NpYmxlIGZvciB0aGlzIGVudlxuICAgIC8vIFdoZXJldmVyIHBvc3NpYmxlIHdlIHdhbnQgdG8gYmluZCwgbm90IHdyYXAsIHRvIHByZXNlcnZlIHN0YWNrIHRyYWNlc1xuICAgIGZ1bmN0aW9uIHJlYWxNZXRob2QobWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAobWV0aG9kTmFtZSA9PT0gJ2RlYnVnJykge1xuICAgICAgICAgICAgbWV0aG9kTmFtZSA9ICdsb2cnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSB1bmRlZmluZWRUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIE5vIG1ldGhvZCBwb3NzaWJsZSwgZm9yIG5vdyAtIGZpeGVkIGxhdGVyIGJ5IGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXNcbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2ROYW1lID09PSAndHJhY2UnICYmIGlzSUUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFjZUZvcklFO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnNvbGVbbWV0aG9kTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmRNZXRob2QoY29uc29sZSwgbWV0aG9kTmFtZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uc29sZS5sb2cgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmRNZXRob2QoY29uc29sZSwgJ2xvZycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGVzZSBwcml2YXRlIGZ1bmN0aW9ucyBhbHdheXMgbmVlZCBgdGhpc2AgdG8gYmUgc2V0IHByb3Blcmx5XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlTG9nZ2luZ01ldGhvZHMoKSB7XG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICAgIHZhciBsZXZlbCA9IHRoaXMuZ2V0TGV2ZWwoKTtcblxuICAgICAgICAvLyBSZXBsYWNlIHRoZSBhY3R1YWwgbWV0aG9kcy5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2dNZXRob2RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kTmFtZSA9IGxvZ01ldGhvZHNbaV07XG4gICAgICAgICAgICB0aGlzW21ldGhvZE5hbWVdID0gKGkgPCBsZXZlbCkgP1xuICAgICAgICAgICAgICAgIG5vb3AgOlxuICAgICAgICAgICAgICAgIHRoaXMubWV0aG9kRmFjdG9yeShtZXRob2ROYW1lLCBsZXZlbCwgdGhpcy5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmluZSBsb2cubG9nIGFzIGFuIGFsaWFzIGZvciBsb2cuZGVidWdcbiAgICAgICAgdGhpcy5sb2cgPSB0aGlzLmRlYnVnO1xuXG4gICAgICAgIC8vIFJldHVybiBhbnkgaW1wb3J0YW50IHdhcm5pbmdzLlxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09IHVuZGVmaW5lZFR5cGUgJiYgbGV2ZWwgPCB0aGlzLmxldmVscy5TSUxFTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBcIk5vIGNvbnNvbGUgYXZhaWxhYmxlIGZvciBsb2dnaW5nXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbiBvbGQgSUUgdmVyc2lvbnMsIHRoZSBjb25zb2xlIGlzbid0IHByZXNlbnQgdW50aWwgeW91IGZpcnN0IG9wZW4gaXQuXG4gICAgLy8gV2UgYnVpbGQgcmVhbE1ldGhvZCgpIHJlcGxhY2VtZW50cyBoZXJlIHRoYXQgcmVnZW5lcmF0ZSBsb2dnaW5nIG1ldGhvZHNcbiAgICBmdW5jdGlvbiBlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXNbbWV0aG9kTmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCeSBkZWZhdWx0LCB3ZSB1c2UgY2xvc2VseSBib3VuZCByZWFsIG1ldGhvZHMgd2hlcmV2ZXIgcG9zc2libGUsIGFuZFxuICAgIC8vIG90aGVyd2lzZSB3ZSB3YWl0IGZvciBhIGNvbnNvbGUgdG8gYXBwZWFyLCBhbmQgdGhlbiB0cnkgYWdhaW4uXG4gICAgZnVuY3Rpb24gZGVmYXVsdE1ldGhvZEZhY3RvcnkobWV0aG9kTmFtZSwgX2xldmVsLCBfbG9nZ2VyTmFtZSkge1xuICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgICByZXR1cm4gcmVhbE1ldGhvZChtZXRob2ROYW1lKSB8fFxuICAgICAgICAgICAgICAgZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIExvZ2dlcihuYW1lLCBmYWN0b3J5KSB7XG4gICAgICAvLyBQcml2YXRlIGluc3RhbmNlIHZhcmlhYmxlcy5cbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGxldmVsIGluaGVyaXRlZCBmcm9tIGEgcGFyZW50IGxvZ2dlciAob3IgYSBnbG9iYWwgZGVmYXVsdCkuIFdlXG4gICAgICAgKiBjYWNoZSB0aGlzIGhlcmUgcmF0aGVyIHRoYW4gZGVsZWdhdGluZyB0byB0aGUgcGFyZW50IHNvIHRoYXQgaXQgc3RheXNcbiAgICAgICAqIGluIHN5bmMgd2l0aCB0aGUgYWN0dWFsIGxvZ2dpbmcgbWV0aG9kcyB0aGF0IHdlIGhhdmUgaW5zdGFsbGVkICh0aGVcbiAgICAgICAqIHBhcmVudCBjb3VsZCBjaGFuZ2UgbGV2ZWxzIGJ1dCB3ZSBtaWdodCBub3QgaGF2ZSByZWJ1aWx0IHRoZSBsb2dnZXJzXG4gICAgICAgKiBpbiB0aGlzIGNoaWxkIHlldCkuXG4gICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICovXG4gICAgICB2YXIgaW5oZXJpdGVkTGV2ZWw7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBkZWZhdWx0IGxldmVsIGZvciB0aGlzIGxvZ2dlciwgaWYgYW55LiBJZiBzZXQsIHRoaXMgb3ZlcnJpZGVzXG4gICAgICAgKiBgaW5oZXJpdGVkTGV2ZWxgLlxuICAgICAgICogQHR5cGUge251bWJlcnxudWxsfVxuICAgICAgICovXG4gICAgICB2YXIgZGVmYXVsdExldmVsO1xuICAgICAgLyoqXG4gICAgICAgKiBBIHVzZXItc3BlY2lmaWMgbGV2ZWwgZm9yIHRoaXMgbG9nZ2VyLiBJZiBzZXQsIHRoaXMgb3ZlcnJpZGVzXG4gICAgICAgKiBgZGVmYXVsdExldmVsYC5cbiAgICAgICAqIEB0eXBlIHtudW1iZXJ8bnVsbH1cbiAgICAgICAqL1xuICAgICAgdmFyIHVzZXJMZXZlbDtcblxuICAgICAgdmFyIHN0b3JhZ2VLZXkgPSBcImxvZ2xldmVsXCI7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgc3RvcmFnZUtleSArPSBcIjpcIiArIG5hbWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSB7XG4gICAgICAgIHN0b3JhZ2VLZXkgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBlcnNpc3RMZXZlbElmUG9zc2libGUobGV2ZWxOdW0pIHtcbiAgICAgICAgICB2YXIgbGV2ZWxOYW1lID0gKGxvZ01ldGhvZHNbbGV2ZWxOdW1dIHx8ICdzaWxlbnQnKS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IHVuZGVmaW5lZFR5cGUgfHwgIXN0b3JhZ2VLZXkpIHJldHVybjtcblxuICAgICAgICAgIC8vIFVzZSBsb2NhbFN0b3JhZ2UgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZVtzdG9yYWdlS2V5XSA9IGxldmVsTmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgICAgIC8vIFVzZSBzZXNzaW9uIGNvb2tpZSBhcyBmYWxsYmFja1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5jb29raWUgPVxuICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPVwiICsgbGV2ZWxOYW1lICsgXCI7XCI7XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRQZXJzaXN0ZWRMZXZlbCgpIHtcbiAgICAgICAgICB2YXIgc3RvcmVkTGV2ZWw7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gdW5kZWZpbmVkVHlwZSB8fCAhc3RvcmFnZUtleSkgcmV0dXJuO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSB3aW5kb3cubG9jYWxTdG9yYWdlW3N0b3JhZ2VLZXldO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cblxuICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIGNvb2tpZXMgaWYgbG9jYWwgc3RvcmFnZSBnaXZlcyB1cyBub3RoaW5nXG4gICAgICAgICAgaWYgKHR5cGVvZiBzdG9yZWRMZXZlbCA9PT0gdW5kZWZpbmVkVHlwZSkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZSA9IHdpbmRvdy5kb2N1bWVudC5jb29raWU7XG4gICAgICAgICAgICAgICAgICB2YXIgY29va2llTmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KTtcbiAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGNvb2tpZS5pbmRleE9mKGNvb2tpZU5hbWUgKyBcIj1cIik7XG4gICAgICAgICAgICAgICAgICBpZiAobG9jYXRpb24gIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSAvXihbXjtdKykvLmV4ZWMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZS5zbGljZShsb2NhdGlvbiArIGNvb2tpZU5hbWUubGVuZ3RoICsgMSlcbiAgICAgICAgICAgICAgICAgICAgICApWzFdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSWYgdGhlIHN0b3JlZCBsZXZlbCBpcyBub3QgdmFsaWQsIHRyZWF0IGl0IGFzIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cbiAgICAgICAgICBpZiAoc2VsZi5sZXZlbHNbc3RvcmVkTGV2ZWxdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0b3JlZExldmVsO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbGVhclBlcnNpc3RlZExldmVsKCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSB1bmRlZmluZWRUeXBlIHx8ICFzdG9yYWdlS2V5KSByZXR1cm47XG5cbiAgICAgICAgICAvLyBVc2UgbG9jYWxTdG9yYWdlIGlmIGF2YWlsYWJsZVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShzdG9yYWdlS2V5KTtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG5cbiAgICAgICAgICAvLyBVc2Ugc2Vzc2lvbiBjb29raWUgYXMgZmFsbGJhY2tcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuY29va2llID1cbiAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RvcmFnZUtleSkgKyBcIj07IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBVVENcIjtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUxldmVsKGlucHV0KSB7XG4gICAgICAgICAgdmFyIGxldmVsID0gaW5wdXQ7XG4gICAgICAgICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gXCJzdHJpbmdcIiAmJiBzZWxmLmxldmVsc1tsZXZlbC50b1VwcGVyQ2FzZSgpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGxldmVsID0gc2VsZi5sZXZlbHNbbGV2ZWwudG9VcHBlckNhc2UoKV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09IFwibnVtYmVyXCIgJiYgbGV2ZWwgPj0gMCAmJiBsZXZlbCA8PSBzZWxmLmxldmVscy5TSUxFTlQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGxldmVsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJsb2cuc2V0TGV2ZWwoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGxldmVsOiBcIiArIGlucHV0KTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICAgKlxuICAgICAgICogUHVibGljIGxvZ2dlciBBUEkgLSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BpbXRlcnJ5L2xvZ2xldmVsIGZvciBkZXRhaWxzXG4gICAgICAgKlxuICAgICAgICovXG5cbiAgICAgIHNlbGYubmFtZSA9IG5hbWU7XG5cbiAgICAgIHNlbGYubGV2ZWxzID0geyBcIlRSQUNFXCI6IDAsIFwiREVCVUdcIjogMSwgXCJJTkZPXCI6IDIsIFwiV0FSTlwiOiAzLFxuICAgICAgICAgIFwiRVJST1JcIjogNCwgXCJTSUxFTlRcIjogNX07XG5cbiAgICAgIHNlbGYubWV0aG9kRmFjdG9yeSA9IGZhY3RvcnkgfHwgZGVmYXVsdE1ldGhvZEZhY3Rvcnk7XG5cbiAgICAgIHNlbGYuZ2V0TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHVzZXJMZXZlbCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdXNlckxldmVsO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZGVmYXVsdExldmVsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0TGV2ZWw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpbmhlcml0ZWRMZXZlbDtcbiAgICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnNldExldmVsID0gZnVuY3Rpb24gKGxldmVsLCBwZXJzaXN0KSB7XG4gICAgICAgICAgdXNlckxldmVsID0gbm9ybWFsaXplTGV2ZWwobGV2ZWwpO1xuICAgICAgICAgIGlmIChwZXJzaXN0ICE9PSBmYWxzZSkgeyAgLy8gZGVmYXVsdHMgdG8gdHJ1ZVxuICAgICAgICAgICAgICBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKHVzZXJMZXZlbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTk9URTogaW4gdjIsIHRoaXMgc2hvdWxkIGNhbGwgcmVidWlsZCgpLCB3aGljaCB1cGRhdGVzIGNoaWxkcmVuLlxuICAgICAgICAgIHJldHVybiByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbChzZWxmKTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuc2V0RGVmYXVsdExldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgICAgZGVmYXVsdExldmVsID0gbm9ybWFsaXplTGV2ZWwobGV2ZWwpO1xuICAgICAgICAgIGlmICghZ2V0UGVyc2lzdGVkTGV2ZWwoKSkge1xuICAgICAgICAgICAgICBzZWxmLnNldExldmVsKGxldmVsLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5yZXNldExldmVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHVzZXJMZXZlbCA9IG51bGw7XG4gICAgICAgICAgY2xlYXJQZXJzaXN0ZWRMZXZlbCgpO1xuICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHNlbGYpO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5lbmFibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5UUkFDRSwgcGVyc2lzdCk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmRpc2FibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5TSUxFTlQsIHBlcnNpc3QpO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5yZWJ1aWxkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChkZWZhdWx0TG9nZ2VyICE9PSBzZWxmKSB7XG4gICAgICAgICAgICAgIGluaGVyaXRlZExldmVsID0gbm9ybWFsaXplTGV2ZWwoZGVmYXVsdExvZ2dlci5nZXRMZXZlbCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVwbGFjZUxvZ2dpbmdNZXRob2RzLmNhbGwoc2VsZik7XG5cbiAgICAgICAgICBpZiAoZGVmYXVsdExvZ2dlciA9PT0gc2VsZikge1xuICAgICAgICAgICAgICBmb3IgKHZhciBjaGlsZE5hbWUgaW4gX2xvZ2dlcnNCeU5hbWUpIHtcbiAgICAgICAgICAgICAgICBfbG9nZ2Vyc0J5TmFtZVtjaGlsZE5hbWVdLnJlYnVpbGQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIEluaXRpYWxpemUgYWxsIHRoZSBpbnRlcm5hbCBsZXZlbHMuXG4gICAgICBpbmhlcml0ZWRMZXZlbCA9IG5vcm1hbGl6ZUxldmVsKFxuICAgICAgICAgIGRlZmF1bHRMb2dnZXIgPyBkZWZhdWx0TG9nZ2VyLmdldExldmVsKCkgOiBcIldBUk5cIlxuICAgICAgKTtcbiAgICAgIHZhciBpbml0aWFsTGV2ZWwgPSBnZXRQZXJzaXN0ZWRMZXZlbCgpO1xuICAgICAgaWYgKGluaXRpYWxMZXZlbCAhPSBudWxsKSB7XG4gICAgICAgICAgdXNlckxldmVsID0gbm9ybWFsaXplTGV2ZWwoaW5pdGlhbExldmVsKTtcbiAgICAgIH1cbiAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHNlbGYpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICpcbiAgICAgKiBUb3AtbGV2ZWwgQVBJXG4gICAgICpcbiAgICAgKi9cblxuICAgIGRlZmF1bHRMb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbiAgICBkZWZhdWx0TG9nZ2VyLmdldExvZ2dlciA9IGZ1bmN0aW9uIGdldExvZ2dlcihuYW1lKSB7XG4gICAgICAgIGlmICgodHlwZW9mIG5hbWUgIT09IFwic3ltYm9sXCIgJiYgdHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHx8IG5hbWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJZb3UgbXVzdCBzdXBwbHkgYSBuYW1lIHdoZW4gY3JlYXRpbmcgYSBsb2dnZXIuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvZ2dlciA9IF9sb2dnZXJzQnlOYW1lW25hbWVdO1xuICAgICAgICBpZiAoIWxvZ2dlcikge1xuICAgICAgICAgICAgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV0gPSBuZXcgTG9nZ2VyKFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgZGVmYXVsdExvZ2dlci5tZXRob2RGYWN0b3J5XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dnZXI7XG4gICAgfTtcblxuICAgIC8vIEdyYWIgdGhlIGN1cnJlbnQgZ2xvYmFsIGxvZyB2YXJpYWJsZSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuICAgIHZhciBfbG9nID0gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUpID8gd2luZG93LmxvZyA6IHVuZGVmaW5lZDtcbiAgICBkZWZhdWx0TG9nZ2VyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUgJiZcbiAgICAgICAgICAgICAgIHdpbmRvdy5sb2cgPT09IGRlZmF1bHRMb2dnZXIpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2cgPSBfbG9nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRMb2dnZXI7XG4gICAgfTtcblxuICAgIGRlZmF1bHRMb2dnZXIuZ2V0TG9nZ2VycyA9IGZ1bmN0aW9uIGdldExvZ2dlcnMoKSB7XG4gICAgICAgIHJldHVybiBfbG9nZ2Vyc0J5TmFtZTtcbiAgICB9O1xuXG4gICAgLy8gRVM2IGRlZmF1bHQgZXhwb3J0LCBmb3IgY29tcGF0aWJpbGl0eVxuICAgIGRlZmF1bHRMb2dnZXJbJ2RlZmF1bHQnXSA9IGRlZmF1bHRMb2dnZXI7XG5cbiAgICByZXR1cm4gZGVmYXVsdExvZ2dlcjtcbn0pKTtcbiIsImlmICh3aW5kb3cuTm9kZUxpc3QgJiYgIU5vZGVMaXN0LnByb3RvdHlwZS5mb3JFYWNoKSB7XHJcbiAgICBOb2RlTGlzdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc0FyZykge1xyXG4gICAgICAgIHRoaXNBcmcgPSB0aGlzQXJnIHx8IHdpbmRvdztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzW2ldLCBpLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zcmMvbm9ybWFsaXplV2hlZWwuanMnKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV4ZWN1dGlvbkVudmlyb25tZW50XG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhIShcbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgd2luZG93LmRvY3VtZW50ICYmXG4gIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50XG4pO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG4gICAgY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMDQtcHJlc2VudCBGYWNlYm9vay4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgVXNlckFnZW50X0RFUFJFQ0FURURcbiAqL1xuXG4vKipcbiAqICBQcm92aWRlcyBlbnRpcmVseSBjbGllbnQtc2lkZSBVc2VyIEFnZW50IGFuZCBPUyBkZXRlY3Rpb24uIFlvdSBzaG91bGQgcHJlZmVyXG4gKiAgdGhlIG5vbi1kZXByZWNhdGVkIFVzZXJBZ2VudCBtb2R1bGUgd2hlbiBwb3NzaWJsZSwgd2hpY2ggZXhwb3NlcyBvdXJcbiAqICBhdXRob3JpdGF0aXZlIHNlcnZlci1zaWRlIFBIUC1iYXNlZCBkZXRlY3Rpb24gdG8gdGhlIGNsaWVudC5cbiAqXG4gKiAgVXNhZ2UgaXMgc3RyYWlnaHRmb3J3YXJkOlxuICpcbiAqICAgIGlmIChVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpKSB7XG4gKiAgICAgIC8vICBJRVxuICogICAgfVxuICpcbiAqICBZb3UgY2FuIGFsc28gZG8gdmVyc2lvbiBjaGVja3M6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkgPj0gNykge1xuICogICAgICAvLyAgSUU3IG9yIGJldHRlclxuICogICAgfVxuICpcbiAqICBUaGUgYnJvd3NlciBmdW5jdGlvbnMgd2lsbCByZXR1cm4gTmFOIGlmIHRoZSBicm93c2VyIGRvZXMgbm90IG1hdGNoLCBzb1xuICogIHlvdSBjYW4gYWxzbyBkbyB2ZXJzaW9uIGNvbXBhcmVzIHRoZSBvdGhlciB3YXk6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkgPCA3KSB7XG4gKiAgICAgIC8vICBJRTYgb3Igd29yc2VcbiAqICAgIH1cbiAqXG4gKiAgTm90ZSB0aGF0IHRoZSB2ZXJzaW9uIGlzIGEgZmxvYXQgYW5kIG1heSBpbmNsdWRlIGEgbWlub3IgdmVyc2lvbiBudW1iZXIsXG4gKiAgc28geW91IHNob3VsZCBhbHdheXMgdXNlIHJhbmdlIG9wZXJhdG9ycyB0byBwZXJmb3JtIGNvbXBhcmlzb25zLCBub3RcbiAqICBzdHJpY3QgZXF1YWxpdHkuXG4gKlxuICogICoqTm90ZToqKiBZb3Ugc2hvdWxkICoqc3Ryb25nbHkqKiBwcmVmZXIgY2FwYWJpbGl0eSBkZXRlY3Rpb24gdG8gYnJvd3NlclxuICogIHZlcnNpb24gZGV0ZWN0aW9uIHdoZXJlIGl0J3MgcmVhc29uYWJsZTpcbiAqXG4gKiAgICBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL3N1cHBvcnQuaHRtbFxuICpcbiAqICBGdXJ0aGVyLCB3ZSBoYXZlIGEgbGFyZ2UgbnVtYmVyIG9mIG1hdHVyZSB3cmFwcGVyIGZ1bmN0aW9ucyBhbmQgY2xhc3Nlc1xuICogIHdoaWNoIGFic3RyYWN0IGF3YXkgbWFueSBicm93c2VyIGlycmVndWxhcml0aWVzLiBDaGVjayB0aGUgZG9jdW1lbnRhdGlvbixcbiAqICBncmVwIGZvciB0aGluZ3MsIG9yIGFzayBvbiBqYXZhc2NyaXB0QGxpc3RzLmZhY2Vib29rLmNvbSBiZWZvcmUgd3JpdGluZyB5ZXRcbiAqICBhbm90aGVyIGNvcHkgb2YgXCJldmVudCB8fCB3aW5kb3cuZXZlbnRcIi5cbiAqXG4gKi9cblxudmFyIF9wb3B1bGF0ZWQgPSBmYWxzZTtcblxuLy8gQnJvd3NlcnNcbnZhciBfaWUsIF9maXJlZm94LCBfb3BlcmEsIF93ZWJraXQsIF9jaHJvbWU7XG5cbi8vIEFjdHVhbCBJRSBicm93c2VyIGZvciBjb21wYXRpYmlsaXR5IG1vZGVcbnZhciBfaWVfcmVhbF92ZXJzaW9uO1xuXG4vLyBQbGF0Zm9ybXNcbnZhciBfb3N4LCBfd2luZG93cywgX2xpbnV4LCBfYW5kcm9pZDtcblxuLy8gQXJjaGl0ZWN0dXJlc1xudmFyIF93aW42NDtcblxuLy8gRGV2aWNlc1xudmFyIF9pcGhvbmUsIF9pcGFkLCBfbmF0aXZlO1xuXG52YXIgX21vYmlsZTtcblxuZnVuY3Rpb24gX3BvcHVsYXRlKCkge1xuICBpZiAoX3BvcHVsYXRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIF9wb3B1bGF0ZWQgPSB0cnVlO1xuXG4gIC8vIFRvIHdvcmsgYXJvdW5kIGJ1Z2d5IEpTIGxpYnJhcmllcyB0aGF0IGNhbid0IGhhbmRsZSBtdWx0aS1kaWdpdFxuICAvLyB2ZXJzaW9uIG51bWJlcnMsIE9wZXJhIDEwJ3MgdXNlciBhZ2VudCBzdHJpbmcgY2xhaW1zIGl0J3MgT3BlcmFcbiAgLy8gOSwgdGhlbiBsYXRlciBpbmNsdWRlcyBhIFZlcnNpb24vWC5ZIGZpZWxkOlxuICAvL1xuICAvLyBPcGVyYS85LjgwIChmb28pIFByZXN0by8yLjIuMTUgVmVyc2lvbi8xMC4xMFxuICB2YXIgdWFzID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgdmFyIGFnZW50ID0gLyg/Ok1TSUUuKFxcZCtcXC5cXGQrKSl8KD86KD86RmlyZWZveHxHcmFuUGFyYWRpc298SWNld2Vhc2VsKS4oXFxkK1xcLlxcZCspKXwoPzpPcGVyYSg/Oi4rVmVyc2lvbi58LikoXFxkK1xcLlxcZCspKXwoPzpBcHBsZVdlYktpdC4oXFxkKyg/OlxcLlxcZCspPykpfCg/OlRyaWRlbnRcXC9cXGQrXFwuXFxkKy4qcnY6KFxcZCtcXC5cXGQrKSkvLmV4ZWModWFzKTtcbiAgdmFyIG9zICAgID0gLyhNYWMgT1MgWCl8KFdpbmRvd3MpfChMaW51eCkvLmV4ZWModWFzKTtcblxuICBfaXBob25lID0gL1xcYihpUGhvbmV8aVBbYW9dZCkvLmV4ZWModWFzKTtcbiAgX2lwYWQgPSAvXFxiKGlQW2FvXWQpLy5leGVjKHVhcyk7XG4gIF9hbmRyb2lkID0gL0FuZHJvaWQvaS5leGVjKHVhcyk7XG4gIF9uYXRpdmUgPSAvRkJBTlxcL1xcdys7L2kuZXhlYyh1YXMpO1xuICBfbW9iaWxlID0gL01vYmlsZS9pLmV4ZWModWFzKTtcblxuICAvLyBOb3RlIHRoYXQgdGhlIElFIHRlYW0gYmxvZyB3b3VsZCBoYXZlIHlvdSBiZWxpZXZlIHlvdSBzaG91bGQgYmUgY2hlY2tpbmdcbiAgLy8gZm9yICdXaW42NDsgeDY0Jy4gIEJ1dCBNU0ROIHRoZW4gcmV2ZWFscyB0aGF0IHlvdSBjYW4gYWN0dWFsbHkgYmUgY29taW5nXG4gIC8vIGZyb20gZWl0aGVyIHg2NCBvciBpYTY0OyAgc28gdWx0aW1hdGVseSwgeW91IHNob3VsZCBqdXN0IGNoZWNrIGZvciBXaW42NFxuICAvLyBhcyBpbiBpbmRpY2F0b3Igb2Ygd2hldGhlciB5b3UncmUgaW4gNjQtYml0IElFLiAgMzItYml0IElFIG9uIDY0LWJpdFxuICAvLyBXaW5kb3dzIHdpbGwgc2VuZCAnV09XNjQnIGluc3RlYWQuXG4gIF93aW42NCA9ICEhKC9XaW42NC8uZXhlYyh1YXMpKTtcblxuICBpZiAoYWdlbnQpIHtcbiAgICBfaWUgPSBhZ2VudFsxXSA/IHBhcnNlRmxvYXQoYWdlbnRbMV0pIDogKFxuICAgICAgICAgIGFnZW50WzVdID8gcGFyc2VGbG9hdChhZ2VudFs1XSkgOiBOYU4pO1xuICAgIC8vIElFIGNvbXBhdGliaWxpdHkgbW9kZVxuICAgIGlmIChfaWUgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSB7XG4gICAgICBfaWUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG4gICAgfVxuICAgIC8vIGdyYWIgdGhlIFwidHJ1ZVwiIGllIHZlcnNpb24gZnJvbSB0aGUgdHJpZGVudCB0b2tlbiBpZiBhdmFpbGFibGVcbiAgICB2YXIgdHJpZGVudCA9IC8oPzpUcmlkZW50XFwvKFxcZCsuXFxkKykpLy5leGVjKHVhcyk7XG4gICAgX2llX3JlYWxfdmVyc2lvbiA9IHRyaWRlbnQgPyBwYXJzZUZsb2F0KHRyaWRlbnRbMV0pICsgNCA6IF9pZTtcblxuICAgIF9maXJlZm94ID0gYWdlbnRbMl0gPyBwYXJzZUZsb2F0KGFnZW50WzJdKSA6IE5hTjtcbiAgICBfb3BlcmEgICA9IGFnZW50WzNdID8gcGFyc2VGbG9hdChhZ2VudFszXSkgOiBOYU47XG4gICAgX3dlYmtpdCAgPSBhZ2VudFs0XSA/IHBhcnNlRmxvYXQoYWdlbnRbNF0pIDogTmFOO1xuICAgIGlmIChfd2Via2l0KSB7XG4gICAgICAvLyBXZSBkbyBub3QgYWRkIHRoZSByZWdleHAgdG8gdGhlIGFib3ZlIHRlc3QsIGJlY2F1c2UgaXQgd2lsbCBhbHdheXNcbiAgICAgIC8vIG1hdGNoICdzYWZhcmknIG9ubHkgc2luY2UgJ0FwcGxlV2ViS2l0JyBhcHBlYXJzIGJlZm9yZSAnQ2hyb21lJyBpblxuICAgICAgLy8gdGhlIHVzZXJBZ2VudCBzdHJpbmcuXG4gICAgICBhZ2VudCA9IC8oPzpDaHJvbWVcXC8oXFxkK1xcLlxcZCspKS8uZXhlYyh1YXMpO1xuICAgICAgX2Nocm9tZSA9IGFnZW50ICYmIGFnZW50WzFdID8gcGFyc2VGbG9hdChhZ2VudFsxXSkgOiBOYU47XG4gICAgfSBlbHNlIHtcbiAgICAgIF9jaHJvbWUgPSBOYU47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIF9pZSA9IF9maXJlZm94ID0gX29wZXJhID0gX2Nocm9tZSA9IF93ZWJraXQgPSBOYU47XG4gIH1cblxuICBpZiAob3MpIHtcbiAgICBpZiAob3NbMV0pIHtcbiAgICAgIC8vIERldGVjdCBPUyBYIHZlcnNpb24uICBJZiBubyB2ZXJzaW9uIG51bWJlciBtYXRjaGVzLCBzZXQgX29zeCB0byB0cnVlLlxuICAgICAgLy8gVmVyc2lvbiBleGFtcGxlczogIDEwLCAxMF82XzEsIDEwLjdcbiAgICAgIC8vIFBhcnNlcyB2ZXJzaW9uIG51bWJlciBhcyBhIGZsb2F0LCB0YWtpbmcgb25seSBmaXJzdCB0d28gc2V0cyBvZlxuICAgICAgLy8gZGlnaXRzLiAgSWYgb25seSBvbmUgc2V0IG9mIGRpZ2l0cyBpcyBmb3VuZCwgcmV0dXJucyBqdXN0IHRoZSBtYWpvclxuICAgICAgLy8gdmVyc2lvbiBudW1iZXIuXG4gICAgICB2YXIgdmVyID0gLyg/Ok1hYyBPUyBYIChcXGQrKD86Wy5fXVxcZCspPykpLy5leGVjKHVhcyk7XG5cbiAgICAgIF9vc3ggPSB2ZXIgPyBwYXJzZUZsb2F0KHZlclsxXS5yZXBsYWNlKCdfJywgJy4nKSkgOiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBfb3N4ID0gZmFsc2U7XG4gICAgfVxuICAgIF93aW5kb3dzID0gISFvc1syXTtcbiAgICBfbGludXggICA9ICEhb3NbM107XG4gIH0gZWxzZSB7XG4gICAgX29zeCA9IF93aW5kb3dzID0gX2xpbnV4ID0gZmFsc2U7XG4gIH1cbn1cblxudmFyIFVzZXJBZ2VudF9ERVBSRUNBVEVEID0ge1xuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIEludGVybmV0IEV4cGxvcmVyLlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBpZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9pZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgd2UncmUgaW4gSW50ZXJuZXQgRXhwbG9yZXIgY29tcGF0aWJpbGl0eSBtb2RlLlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgdHJ1ZSBpZiBpbiBjb21wYXRpYmlsaXR5IG1vZGUsIGZhbHNlIGlmXG4gICAqIG5vdCBjb21wYXRpYmlsaXR5IG1vZGUgb3Igbm90IGllXG4gICAqL1xuICBpZUNvbXBhdGliaWxpdHlNb2RlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgKF9pZV9yZWFsX3ZlcnNpb24gPiBfaWUpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgNjQtYml0IElFLiAgUmVhbGx5LCB0aGlzIGlzIGtpbmQgb2Ygd2VhayBzYXVjZTsgIHdlXG4gICAqIG9ubHkgbmVlZCB0aGlzIGJlY2F1c2UgU2t5cGUgY2FuJ3QgaGFuZGxlIDY0LWJpdCBJRSB5ZXQuICBXZSBuZWVkIHRvIHJlbW92ZVxuICAgKiB0aGlzIHdoZW4gd2UgZG9uJ3QgbmVlZCBpdCAtLSB0cmFja2VkIGJ5ICM2MDE5NTcuXG4gICAqL1xuICBpZTY0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSAmJiBfd2luNjQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgRmlyZWZveC5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgZmlyZWZveDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9maXJlZm94O1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgT3BlcmEuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIG9wZXJhOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX29wZXJhO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgV2ViS2l0LlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICB3ZWJraXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfd2Via2l0O1xuICB9LFxuXG4gIC8qKlxuICAgKiAgRm9yIFB1c2hcbiAgICogIFdJTEwgQkUgUkVNT1ZFRCBWRVJZIFNPT04uIFVzZSBVc2VyQWdlbnRfREVQUkVDQVRFRC53ZWJraXRcbiAgICovXG4gIHNhZmFyaTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFVzZXJBZ2VudF9ERVBSRUNBVEVELndlYmtpdCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIGEgQ2hyb21lIGJyb3dzZXIuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIGNocm9tZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfY2hyb21lO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIFdpbmRvd3MuXG4gICAqXG4gICAqICBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyJ3MgT1MgaXMgV2luZG93cy5cbiAgICovXG4gIHdpbmRvd3M6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfd2luZG93cztcbiAgfSxcblxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBNYWMgT1MgWC5cbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8Ym9vbCAgIFJldHVybnMgYSBmbG9hdCBpZiBhIHZlcnNpb24gbnVtYmVyIGlzIGRldGVjdGVkLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJ3aXNlIHRydWUvZmFsc2UuXG4gICAqL1xuICBvc3g6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfb3N4O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIExpbnV4LlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyJ3MgT1MgaXMgc29tZSBmbGF2b3Igb2YgTGludXguXG4gICAqL1xuICBsaW51eDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9saW51eDtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBvbiBhbiBpUGhvbmUgb3IgaVBvZCBwbGF0Zm9ybS5cbiAgICpcbiAgICogQHJldHVybiBib29sIGB0cnVlJyBpZiB0aGUgdXNlciBpcyBydW5uaW5nIHNvbWUgZmxhdm9yIG9mIHRoZVxuICAgKiAgICBpUGhvbmUgT1MuXG4gICAqL1xuICBpcGhvbmU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfaXBob25lO1xuICB9LFxuXG4gIG1vYmlsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IChfaXBob25lIHx8IF9pcGFkIHx8IF9hbmRyb2lkIHx8IF9tb2JpbGUpO1xuICB9LFxuXG4gIG5hdGl2ZUFwcDogZnVuY3Rpb24oKSB7XG4gICAgLy8gd2Vidmlld3MgaW5zaWRlIG9mIHRoZSBuYXRpdmUgYXBwc1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfbmF0aXZlO1xuICB9LFxuXG4gIGFuZHJvaWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfYW5kcm9pZDtcbiAgfSxcblxuICBpcGFkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2lwYWQ7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVXNlckFnZW50X0RFUFJFQ0FURUQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNFdmVudFN1cHBvcnRlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgdXNlSGFzRmVhdHVyZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdXNlSGFzRmVhdHVyZSA9XG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiZcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmXG4gICAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAgIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBldmVudCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGVudmlyb25tZW50LlxuICpcbiAqIE5PVEU6IFRoaXMgd2lsbCBub3Qgd29yayBjb3JyZWN0bHkgZm9yIG5vbi1nZW5lcmljIGV2ZW50cyBzdWNoIGFzIGBjaGFuZ2VgLFxuICogYHJlc2V0YCwgYGxvYWRgLCBgZXJyb3JgLCBhbmQgYHNlbGVjdGAuXG4gKlxuICogQm9ycm93cyBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lU3VmZml4IEV2ZW50IG5hbWUsIGUuZy4gXCJjbGlja1wiLlxuICogQHBhcmFtIHs/Ym9vbGVhbn0gY2FwdHVyZSBDaGVjayBpZiB0aGUgY2FwdHVyZSBwaGFzZSBpcyBzdXBwb3J0ZWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQuXG4gKiBAaW50ZXJuYWxcbiAqIEBsaWNlbnNlIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuICovXG5mdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKGV2ZW50TmFtZVN1ZmZpeCwgY2FwdHVyZSkge1xuICBpZiAoIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSB8fFxuICAgICAgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoIWlzU3VwcG9ydGVkICYmIHVzZUhhc0ZlYXR1cmUgJiYgZXZlbnROYW1lU3VmZml4ID09PSAnd2hlZWwnKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBub3JtYWxpemVXaGVlbFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnRfREVQUkVDQVRFRCA9IHJlcXVpcmUoJy4vVXNlckFnZW50X0RFUFJFQ0FURUQnKTtcblxudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRTdXBwb3J0ZWQnKTtcblxuXG4vLyBSZWFzb25hYmxlIGRlZmF1bHRzXG52YXIgUElYRUxfU1RFUCAgPSAxMDtcbnZhciBMSU5FX0hFSUdIVCA9IDQwO1xudmFyIFBBR0VfSEVJR0hUID0gODAwO1xuXG4vKipcbiAqIE1vdXNlIHdoZWVsIChhbmQgMi1maW5nZXIgdHJhY2twYWQpIHN1cHBvcnQgb24gdGhlIHdlYiBzdWNrcy4gIEl0IGlzXG4gKiBjb21wbGljYXRlZCwgdGh1cyB0aGlzIGRvYyBpcyBsb25nIGFuZCAoaG9wZWZ1bGx5KSBkZXRhaWxlZCBlbm91Z2ggdG8gYW5zd2VyXG4gKiB5b3VyIHF1ZXN0aW9ucy5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byByZWFjdCB0byB0aGUgbW91c2Ugd2hlZWwgaW4gYSBwcmVkaWN0YWJsZSB3YXksIHRoaXMgY29kZSBpc1xuICogbGlrZSB5b3VyIGJlc3Rlc3QgZnJpZW5kLiAqIGh1Z3MgKlxuICpcbiAqIEFzIG9mIHRvZGF5LCB0aGVyZSBhcmUgNCBET00gZXZlbnQgdHlwZXMgeW91IGNhbiBsaXN0ZW4gdG86XG4gKlxuICogICAnd2hlZWwnICAgICAgICAgICAgICAgIC0tIENocm9tZSgzMSspLCBGRigxNyspLCBJRSg5KylcbiAqICAgJ21vdXNld2hlZWwnICAgICAgICAgICAtLSBDaHJvbWUsIElFKDYrKSwgT3BlcmEsIFNhZmFyaVxuICogICAnTW96TW91c2VQaXhlbFNjcm9sbCcgIC0tIEZGKDMuNSBvbmx5ISkgKDIwMTAtMjAxMykgLS0gZG9uJ3QgYm90aGVyIVxuICogICAnRE9NTW91c2VTY3JvbGwnICAgICAgIC0tIEZGKDAuOS43Kykgc2luY2UgMjAwM1xuICpcbiAqIFNvIHdoYXQgdG8gZG8/ICBUaGUgaXMgdGhlIGJlc3Q6XG4gKlxuICogICBub3JtYWxpemVXaGVlbC5nZXRFdmVudFR5cGUoKTtcbiAqXG4gKiBJbiB5b3VyIGV2ZW50IGNhbGxiYWNrLCB1c2UgdGhpcyBjb2RlIHRvIGdldCBzYW5lIGludGVycHJldGF0aW9uIG9mIHRoZVxuICogZGVsdGFzLiAgVGhpcyBjb2RlIHdpbGwgcmV0dXJuIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXM6XG4gKlxuICogICBzcGluWCAgIC0tIG5vcm1hbGl6ZWQgc3BpbiBzcGVlZCAodXNlIGZvciB6b29tKSAtIHggcGxhbmVcbiAqICAgc3BpblkgICAtLSBcIiAtIHkgcGxhbmVcbiAqICAgcGl4ZWxYICAtLSBub3JtYWxpemVkIGRpc3RhbmNlICh0byBwaXhlbHMpIC0geCBwbGFuZVxuICogICBwaXhlbFkgIC0tIFwiIC0geSBwbGFuZVxuICpcbiAqIFdoZWVsIHZhbHVlcyBhcmUgcHJvdmlkZWQgYnkgdGhlIGJyb3dzZXIgYXNzdW1pbmcgeW91IGFyZSB1c2luZyB0aGUgd2hlZWwgdG9cbiAqIHNjcm9sbCBhIHdlYiBwYWdlIGJ5IGEgbnVtYmVyIG9mIGxpbmVzIG9yIHBpeGVscyAob3IgcGFnZXMpLiAgVmFsdWVzIGNhbiB2YXJ5XG4gKiBzaWduaWZpY2FudGx5IG9uIGRpZmZlcmVudCBwbGF0Zm9ybXMgYW5kIGJyb3dzZXJzLCBmb3JnZXR0aW5nIHRoYXQgeW91IGNhblxuICogc2Nyb2xsIGF0IGRpZmZlcmVudCBzcGVlZHMuICBTb21lIGRldmljZXMgKGxpa2UgdHJhY2twYWRzKSBlbWl0IG1vcmUgZXZlbnRzXG4gKiBhdCBzbWFsbGVyIGluY3JlbWVudHMgd2l0aCBmaW5lIGdyYW51bGFyaXR5LCBhbmQgc29tZSBlbWl0IG1hc3NpdmUganVtcHMgd2l0aFxuICogbGluZWFyIHNwZWVkIG9yIGFjY2VsZXJhdGlvbi5cbiAqXG4gKiBUaGlzIGNvZGUgZG9lcyBpdHMgYmVzdCB0byBub3JtYWxpemUgdGhlIGRlbHRhcyBmb3IgeW91OlxuICpcbiAqICAgLSBzcGluIGlzIHRyeWluZyB0byBub3JtYWxpemUgaG93IGZhciB0aGUgd2hlZWwgd2FzIHNwdW4gKG9yIHRyYWNrcGFkXG4gKiAgICAgZHJhZ2dlZCkuICBUaGlzIGlzIHN1cGVyIHVzZWZ1bCBmb3Igem9vbSBzdXBwb3J0IHdoZXJlIHlvdSB3YW50IHRvXG4gKiAgICAgdGhyb3cgYXdheSB0aGUgY2h1bmt5IHNjcm9sbCBzdGVwcyBvbiB0aGUgUEMgYW5kIG1ha2UgdGhvc2UgZXF1YWwgdG9cbiAqICAgICB0aGUgc2xvdyBhbmQgc21vb3RoIHRpbnkgc3RlcHMgb24gdGhlIE1hYy4gS2V5IGRhdGE6IFRoaXMgY29kZSB0cmllcyB0b1xuICogICAgIHJlc29sdmUgYSBzaW5nbGUgc2xvdyBzdGVwIG9uIGEgd2hlZWwgdG8gMS5cbiAqXG4gKiAgIC0gcGl4ZWwgaXMgbm9ybWFsaXppbmcgdGhlIGRlc2lyZWQgc2Nyb2xsIGRlbHRhIGluIHBpeGVsIHVuaXRzLiAgWW91J2xsXG4gKiAgICAgZ2V0IHRoZSBjcmF6eSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGJyb3dzZXJzLCBidXQgYXQgbGVhc3QgaXQnbGwgYmUgaW5cbiAqICAgICBwaXhlbHMhXG4gKlxuICogICAtIHBvc2l0aXZlIHZhbHVlIGluZGljYXRlcyBzY3JvbGxpbmcgRE9XTi9SSUdIVCwgbmVnYXRpdmUgVVAvTEVGVC4gIFRoaXNcbiAqICAgICBzaG91bGQgdHJhbnNsYXRlIHRvIHBvc2l0aXZlIHZhbHVlIHpvb21pbmcgSU4sIG5lZ2F0aXZlIHpvb21pbmcgT1VULlxuICogICAgIFRoaXMgbWF0Y2hlcyB0aGUgbmV3ZXIgJ3doZWVsJyBldmVudC5cbiAqXG4gKiBXaHkgYXJlIHRoZXJlIHNwaW5YLCBzcGluWSAob3IgcGl4ZWxzKT9cbiAqXG4gKiAgIC0gc3BpblggaXMgYSAyLWZpbmdlciBzaWRlIGRyYWcgb24gdGhlIHRyYWNrcGFkLCBhbmQgYSBzaGlmdCArIHdoZWVsIHR1cm5cbiAqICAgICB3aXRoIGEgbW91c2UuICBJdCByZXN1bHRzIGluIHNpZGUtc2Nyb2xsaW5nIGluIHRoZSBicm93c2VyIGJ5IGRlZmF1bHQuXG4gKlxuICogICAtIHNwaW5ZIGlzIHdoYXQgeW91IGV4cGVjdCAtLSBpdCdzIHRoZSBjbGFzc2ljIGF4aXMgb2YgYSBtb3VzZSB3aGVlbC5cbiAqXG4gKiAgIC0gSSBkcm9wcGVkIHNwaW5aL3BpeGVsWi4gIEl0IGlzIHN1cHBvcnRlZCBieSB0aGUgRE9NIDMgJ3doZWVsJyBldmVudCBhbmRcbiAqICAgICBwcm9iYWJseSBpcyBieSBicm93c2VycyBpbiBjb25qdW5jdGlvbiB3aXRoIGZhbmN5IDNEIGNvbnRyb2xsZXJzIC4uIGJ1dFxuICogICAgIHlvdSBrbm93LlxuICpcbiAqIEltcGxlbWVudGF0aW9uIGluZm86XG4gKlxuICogRXhhbXBsZXMgb2YgJ3doZWVsJyBldmVudCBpZiB5b3Ugc2Nyb2xsIHNsb3dseSAoZG93bikgYnkgb25lIHN0ZXAgd2l0aCBhblxuICogYXZlcmFnZSBtb3VzZTpcbiAqXG4gKiAgIE9TIFggKyBDaHJvbWUgIChtb3VzZSkgICAgIC0gICAgNCAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICogICBPUyBYICsgU2FmYXJpICAobW91c2UpICAgICAtICBOL0EgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgIC0xMilcbiAqICAgT1MgWCArIEZpcmVmb3ggKG1vdXNlKSAgICAgLSAgICAwLjEgbGluZSAgZGVsdGEgICh3aGVlbERlbHRhICBOL0EpXG4gKiAgIFdpbjggKyBDaHJvbWUgIChtb3VzZSkgICAgIC0gIDEwMCAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICogICBXaW44ICsgRmlyZWZveCAobW91c2UpICAgICAtICAgIDMgICBsaW5lICBkZWx0YSAgKHdoZWVsRGVsdGEgLTEyMClcbiAqXG4gKiBPbiB0aGUgdHJhY2twYWQ6XG4gKlxuICogICBPUyBYICsgQ2hyb21lICAodHJhY2twYWQpICAtICAgIDIgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgICAtNilcbiAqICAgT1MgWCArIEZpcmVmb3ggKHRyYWNrcGFkKSAgLSAgICAxICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhICBOL0EpXG4gKlxuICogT24gb3RoZXIvb2xkZXIgYnJvd3NlcnMuLiBpdCdzIG1vcmUgY29tcGxpY2F0ZWQgYXMgdGhlcmUgY2FuIGJlIG11bHRpcGxlIGFuZFxuICogYWxzbyBtaXNzaW5nIGRlbHRhIHZhbHVlcy5cbiAqXG4gKiBUaGUgJ3doZWVsJyBldmVudCBpcyBtb3JlIHN0YW5kYXJkOlxuICpcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLXdoZWVsZXZlbnRzXG4gKlxuICogVGhlIGJhc2ljcyBpcyB0aGF0IGl0IGluY2x1ZGVzIGEgdW5pdCwgZGVsdGFNb2RlIChwaXhlbHMsIGxpbmVzLCBwYWdlcyksIGFuZFxuICogZGVsdGFYLCBkZWx0YVkgYW5kIGRlbHRhWi4gIFNvbWUgYnJvd3NlcnMgcHJvdmlkZSBvdGhlciB2YWx1ZXMgdG8gbWFpbnRhaW5cbiAqIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciBldmVudHMuICBUaG9zZSBvdGhlciB2YWx1ZXMgaGVscCB1c1xuICogYmV0dGVyIG5vcm1hbGl6ZSBzcGluIHNwZWVkLiAgRXhhbXBsZSBvZiB3aGF0IHRoZSBicm93c2VycyBwcm92aWRlOlxuICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB8IGV2ZW50LndoZWVsRGVsdGEgfCBldmVudC5kZXRhaWxcbiAqICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tXG4gKiAgICAgICAgICBTYWZhcmkgdjUvT1MgWCAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICAgU2FmYXJpIHY1L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgQ2hyb21lIHYxNy9PUyBYICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgIENocm9tZSB2MTcvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICAgICAgICAgSUU5L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgdW5kZWZpbmVkXG4gKiAgICAgICAgIEZpcmVmb3ggdjQvT1MgWCAgfCAgICAgdW5kZWZpbmVkICAgIHwgICAgICAgMVxuICogICAgICAgICBGaXJlZm94IHY0L1dpbjcgIHwgICAgIHVuZGVmaW5lZCAgICB8ICAgICAgIDNcbiAqXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVdoZWVsKC8qb2JqZWN0Ki8gZXZlbnQpIC8qb2JqZWN0Ki8ge1xuICB2YXIgc1ggPSAwLCBzWSA9IDAsICAgICAgIC8vIHNwaW5YLCBzcGluWVxuICAgICAgcFggPSAwLCBwWSA9IDA7ICAgICAgIC8vIHBpeGVsWCwgcGl4ZWxZXG5cbiAgLy8gTGVnYWN5XG4gIGlmICgnZGV0YWlsJyAgICAgIGluIGV2ZW50KSB7IHNZID0gZXZlbnQuZGV0YWlsOyB9XG4gIGlmICgnd2hlZWxEZWx0YScgIGluIGV2ZW50KSB7IHNZID0gLWV2ZW50LndoZWVsRGVsdGEgLyAxMjA7IH1cbiAgaWYgKCd3aGVlbERlbHRhWScgaW4gZXZlbnQpIHsgc1kgPSAtZXZlbnQud2hlZWxEZWx0YVkgLyAxMjA7IH1cbiAgaWYgKCd3aGVlbERlbHRhWCcgaW4gZXZlbnQpIHsgc1ggPSAtZXZlbnQud2hlZWxEZWx0YVggLyAxMjA7IH1cblxuICAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG4gIGlmICggJ2F4aXMnIGluIGV2ZW50ICYmIGV2ZW50LmF4aXMgPT09IGV2ZW50LkhPUklaT05UQUxfQVhJUyApIHtcbiAgICBzWCA9IHNZO1xuICAgIHNZID0gMDtcbiAgfVxuXG4gIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICBwWSA9IHNZICogUElYRUxfU1RFUDtcblxuICBpZiAoJ2RlbHRhWScgaW4gZXZlbnQpIHsgcFkgPSBldmVudC5kZWx0YVk7IH1cbiAgaWYgKCdkZWx0YVgnIGluIGV2ZW50KSB7IHBYID0gZXZlbnQuZGVsdGFYOyB9XG5cbiAgaWYgKChwWCB8fCBwWSkgJiYgZXZlbnQuZGVsdGFNb2RlKSB7XG4gICAgaWYgKGV2ZW50LmRlbHRhTW9kZSA9PSAxKSB7ICAgICAgICAgIC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgcFkgKj0gTElORV9IRUlHSFQ7XG4gICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbHRhIGluIFBBR0UgdW5pdHNcbiAgICAgIHBYICo9IFBBR0VfSEVJR0hUO1xuICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgfVxuICB9XG5cbiAgLy8gRmFsbC1iYWNrIGlmIHNwaW4gY2Fubm90IGJlIGRldGVybWluZWRcbiAgaWYgKHBYICYmICFzWCkgeyBzWCA9IChwWCA8IDEpID8gLTEgOiAxOyB9XG4gIGlmIChwWSAmJiAhc1kpIHsgc1kgPSAocFkgPCAxKSA/IC0xIDogMTsgfVxuXG4gIHJldHVybiB7IHNwaW5YICA6IHNYLFxuICAgICAgICAgICBzcGluWSAgOiBzWSxcbiAgICAgICAgICAgcGl4ZWxYIDogcFgsXG4gICAgICAgICAgIHBpeGVsWSA6IHBZIH07XG59XG5cblxuLyoqXG4gKiBUaGUgYmVzdCBjb21iaW5hdGlvbiBpZiB5b3UgcHJlZmVyIHNwaW5YICsgc3Bpblkgbm9ybWFsaXphdGlvbi4gIEl0IGZhdm9yc1xuICogdGhlIG9sZGVyIERPTU1vdXNlU2Nyb2xsIGZvciBGaXJlZm94LCBhcyBGRiBkb2VzIG5vdCBpbmNsdWRlIHdoZWVsRGVsdGEgd2l0aFxuICogJ3doZWVsJyBldmVudCwgbWFraW5nIHNwaW4gc3BlZWQgZGV0ZXJtaW5hdGlvbiBpbXBvc3NpYmxlLlxuICovXG5ub3JtYWxpemVXaGVlbC5nZXRFdmVudFR5cGUgPSBmdW5jdGlvbigpIC8qc3RyaW5nKi8ge1xuICByZXR1cm4gKFVzZXJBZ2VudF9ERVBSRUNBVEVELmZpcmVmb3goKSlcbiAgICAgICAgICAgPyAnRE9NTW91c2VTY3JvbGwnXG4gICAgICAgICAgIDogKGlzRXZlbnRTdXBwb3J0ZWQoJ3doZWVsJykpXG4gICAgICAgICAgICAgICA/ICd3aGVlbCdcbiAgICAgICAgICAgICAgIDogJ21vdXNld2hlZWwnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3JtYWxpemVXaGVlbDtcbiIsInZhciBoYXNNYXAgPSB0eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmIE1hcC5wcm90b3R5cGU7XG52YXIgbWFwU2l6ZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIGhhc01hcCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTWFwLnByb3RvdHlwZSwgJ3NpemUnKSA6IG51bGw7XG52YXIgbWFwU2l6ZSA9IGhhc01hcCAmJiBtYXBTaXplRGVzY3JpcHRvciAmJiB0eXBlb2YgbWFwU2l6ZURlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nID8gbWFwU2l6ZURlc2NyaXB0b3IuZ2V0IDogbnVsbDtcbnZhciBtYXBGb3JFYWNoID0gaGFzTWFwICYmIE1hcC5wcm90b3R5cGUuZm9yRWFjaDtcbnZhciBoYXNTZXQgPSB0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nICYmIFNldC5wcm90b3R5cGU7XG52YXIgc2V0U2l6ZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIGhhc1NldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU2V0LnByb3RvdHlwZSwgJ3NpemUnKSA6IG51bGw7XG52YXIgc2V0U2l6ZSA9IGhhc1NldCAmJiBzZXRTaXplRGVzY3JpcHRvciAmJiB0eXBlb2Ygc2V0U2l6ZURlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nID8gc2V0U2l6ZURlc2NyaXB0b3IuZ2V0IDogbnVsbDtcbnZhciBzZXRGb3JFYWNoID0gaGFzU2V0ICYmIFNldC5wcm90b3R5cGUuZm9yRWFjaDtcbnZhciBoYXNXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgV2Vha01hcC5wcm90b3R5cGU7XG52YXIgd2Vha01hcEhhcyA9IGhhc1dlYWtNYXAgPyBXZWFrTWFwLnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyIGhhc1dlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrU2V0LnByb3RvdHlwZTtcbnZhciB3ZWFrU2V0SGFzID0gaGFzV2Vha1NldCA/IFdlYWtTZXQucHJvdG90eXBlLmhhcyA6IG51bGw7XG52YXIgaGFzV2Vha1JlZiA9IHR5cGVvZiBXZWFrUmVmID09PSAnZnVuY3Rpb24nICYmIFdlYWtSZWYucHJvdG90eXBlO1xudmFyIHdlYWtSZWZEZXJlZiA9IGhhc1dlYWtSZWYgPyBXZWFrUmVmLnByb3RvdHlwZS5kZXJlZiA6IG51bGw7XG52YXIgYm9vbGVhblZhbHVlT2YgPSBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mO1xudmFyIG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyICRtYXRjaCA9IFN0cmluZy5wcm90b3R5cGUubWF0Y2g7XG52YXIgJHNsaWNlID0gU3RyaW5nLnByb3RvdHlwZS5zbGljZTtcbnZhciAkcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcbnZhciAkdG9VcHBlckNhc2UgPSBTdHJpbmcucHJvdG90eXBlLnRvVXBwZXJDYXNlO1xudmFyICR0b0xvd2VyQ2FzZSA9IFN0cmluZy5wcm90b3R5cGUudG9Mb3dlckNhc2U7XG52YXIgJHRlc3QgPSBSZWdFeHAucHJvdG90eXBlLnRlc3Q7XG52YXIgJGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgJGpvaW4gPSBBcnJheS5wcm90b3R5cGUuam9pbjtcbnZhciAkYXJyU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgJGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBiaWdJbnRWYWx1ZU9mID0gdHlwZW9mIEJpZ0ludCA9PT0gJ2Z1bmN0aW9uJyA/IEJpZ0ludC5wcm90b3R5cGUudmFsdWVPZiA6IG51bGw7XG52YXIgZ09QUyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgc3ltVG9TdHJpbmcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnID8gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyA6IG51bGw7XG52YXIgaGFzU2hhbW1lZFN5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdvYmplY3QnO1xuLy8gaWUsIGBoYXMtdG9zdHJpbmd0YWcvc2hhbXNcbnZhciB0b1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICYmICh0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSBoYXNTaGFtbWVkU3ltYm9scyA/ICdvYmplY3QnIDogJ3N5bWJvbCcpXG4gICAgPyBTeW1ib2wudG9TdHJpbmdUYWdcbiAgICA6IG51bGw7XG52YXIgaXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxudmFyIGdQTyA9ICh0eXBlb2YgUmVmbGVjdCA9PT0gJ2Z1bmN0aW9uJyA/IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YgOiBPYmplY3QuZ2V0UHJvdG90eXBlT2YpIHx8IChcbiAgICBbXS5fX3Byb3RvX18gPT09IEFycmF5LnByb3RvdHlwZSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG4gICAgICAgID8gZnVuY3Rpb24gKE8pIHtcbiAgICAgICAgICAgIHJldHVybiBPLl9fcHJvdG9fXzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b1xuICAgICAgICB9XG4gICAgICAgIDogbnVsbFxuKTtcblxuZnVuY3Rpb24gYWRkTnVtZXJpY1NlcGFyYXRvcihudW0sIHN0cikge1xuICAgIGlmIChcbiAgICAgICAgbnVtID09PSBJbmZpbml0eVxuICAgICAgICB8fCBudW0gPT09IC1JbmZpbml0eVxuICAgICAgICB8fCBudW0gIT09IG51bVxuICAgICAgICB8fCAobnVtICYmIG51bSA+IC0xMDAwICYmIG51bSA8IDEwMDApXG4gICAgICAgIHx8ICR0ZXN0LmNhbGwoL2UvLCBzdHIpXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIHZhciBzZXBSZWdleCA9IC9bMC05XSg/PSg/OlswLTldezN9KSsoPyFbMC05XSkpL2c7XG4gICAgaWYgKHR5cGVvZiBudW0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhciBpbnQgPSBudW0gPCAwID8gLSRmbG9vcigtbnVtKSA6ICRmbG9vcihudW0pOyAvLyB0cnVuYyhudW0pXG4gICAgICAgIGlmIChpbnQgIT09IG51bSkge1xuICAgICAgICAgICAgdmFyIGludFN0ciA9IFN0cmluZyhpbnQpO1xuICAgICAgICAgICAgdmFyIGRlYyA9ICRzbGljZS5jYWxsKHN0ciwgaW50U3RyLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgcmV0dXJuICRyZXBsYWNlLmNhbGwoaW50U3RyLCBzZXBSZWdleCwgJyQmXycpICsgJy4nICsgJHJlcGxhY2UuY2FsbCgkcmVwbGFjZS5jYWxsKGRlYywgLyhbMC05XXszfSkvZywgJyQmXycpLCAvXyQvLCAnJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwoc3RyLCBzZXBSZWdleCwgJyQmXycpO1xufVxuXG52YXIgdXRpbEluc3BlY3QgPSByZXF1aXJlKCcuL3V0aWwuaW5zcGVjdCcpO1xudmFyIGluc3BlY3RDdXN0b20gPSB1dGlsSW5zcGVjdC5jdXN0b207XG52YXIgaW5zcGVjdFN5bWJvbCA9IGlzU3ltYm9sKGluc3BlY3RDdXN0b20pID8gaW5zcGVjdEN1c3RvbSA6IG51bGw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5zcGVjdF8ob2JqLCBvcHRpb25zLCBkZXB0aCwgc2Vlbikge1xuICAgIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIGlmIChoYXMob3B0cywgJ3F1b3RlU3R5bGUnKSAmJiAob3B0cy5xdW90ZVN0eWxlICE9PSAnc2luZ2xlJyAmJiBvcHRzLnF1b3RlU3R5bGUgIT09ICdkb3VibGUnKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJxdW90ZVN0eWxlXCIgbXVzdCBiZSBcInNpbmdsZVwiIG9yIFwiZG91YmxlXCInKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgICBoYXMob3B0cywgJ21heFN0cmluZ0xlbmd0aCcpICYmICh0eXBlb2Ygb3B0cy5tYXhTdHJpbmdMZW5ndGggPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IG9wdHMubWF4U3RyaW5nTGVuZ3RoIDwgMCAmJiBvcHRzLm1heFN0cmluZ0xlbmd0aCAhPT0gSW5maW5pdHlcbiAgICAgICAgICAgIDogb3B0cy5tYXhTdHJpbmdMZW5ndGggIT09IG51bGxcbiAgICAgICAgKVxuICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJtYXhTdHJpbmdMZW5ndGhcIiwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyLCBJbmZpbml0eSwgb3IgYG51bGxgJyk7XG4gICAgfVxuICAgIHZhciBjdXN0b21JbnNwZWN0ID0gaGFzKG9wdHMsICdjdXN0b21JbnNwZWN0JykgPyBvcHRzLmN1c3RvbUluc3BlY3QgOiB0cnVlO1xuICAgIGlmICh0eXBlb2YgY3VzdG9tSW5zcGVjdCAhPT0gJ2Jvb2xlYW4nICYmIGN1c3RvbUluc3BlY3QgIT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcImN1c3RvbUluc3BlY3RcIiwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYHRydWVgLCBgZmFsc2VgLCBvciBgXFwnc3ltYm9sXFwnYCcpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICAgaGFzKG9wdHMsICdpbmRlbnQnKVxuICAgICAgICAmJiBvcHRzLmluZGVudCAhPT0gbnVsbFxuICAgICAgICAmJiBvcHRzLmluZGVudCAhPT0gJ1xcdCdcbiAgICAgICAgJiYgIShwYXJzZUludChvcHRzLmluZGVudCwgMTApID09PSBvcHRzLmluZGVudCAmJiBvcHRzLmluZGVudCA+IDApXG4gICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcImluZGVudFwiIG11c3QgYmUgXCJcXFxcdFwiLCBhbiBpbnRlZ2VyID4gMCwgb3IgYG51bGxgJyk7XG4gICAgfVxuICAgIGlmIChoYXMob3B0cywgJ251bWVyaWNTZXBhcmF0b3InKSAmJiB0eXBlb2Ygb3B0cy5udW1lcmljU2VwYXJhdG9yICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwibnVtZXJpY1NlcGFyYXRvclwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBgdHJ1ZWAgb3IgYGZhbHNlYCcpO1xuICAgIH1cbiAgICB2YXIgbnVtZXJpY1NlcGFyYXRvciA9IG9wdHMubnVtZXJpY1NlcGFyYXRvcjtcblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gICAgfVxuICAgIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gb2JqID8gJ3RydWUnIDogJ2ZhbHNlJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGluc3BlY3RTdHJpbmcob2JqLCBvcHRzKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChvYmogPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBJbmZpbml0eSAvIG9iaiA+IDAgPyAnMCcgOiAnLTAnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHIgPSBTdHJpbmcob2JqKTtcbiAgICAgICAgcmV0dXJuIG51bWVyaWNTZXBhcmF0b3IgPyBhZGROdW1lcmljU2VwYXJhdG9yKG9iaiwgc3RyKSA6IHN0cjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdiaWdpbnQnKSB7XG4gICAgICAgIHZhciBiaWdJbnRTdHIgPSBTdHJpbmcob2JqKSArICduJztcbiAgICAgICAgcmV0dXJuIG51bWVyaWNTZXBhcmF0b3IgPyBhZGROdW1lcmljU2VwYXJhdG9yKG9iaiwgYmlnSW50U3RyKSA6IGJpZ0ludFN0cjtcbiAgICB9XG5cbiAgICB2YXIgbWF4RGVwdGggPSB0eXBlb2Ygb3B0cy5kZXB0aCA9PT0gJ3VuZGVmaW5lZCcgPyA1IDogb3B0cy5kZXB0aDtcbiAgICBpZiAodHlwZW9mIGRlcHRoID09PSAndW5kZWZpbmVkJykgeyBkZXB0aCA9IDA7IH1cbiAgICBpZiAoZGVwdGggPj0gbWF4RGVwdGggJiYgbWF4RGVwdGggPiAwICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KG9iaikgPyAnW0FycmF5XScgOiAnW09iamVjdF0nO1xuICAgIH1cblxuICAgIHZhciBpbmRlbnQgPSBnZXRJbmRlbnQob3B0cywgZGVwdGgpO1xuXG4gICAgaWYgKHR5cGVvZiBzZWVuID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWVuID0gW107XG4gICAgfSBlbHNlIGlmIChpbmRleE9mKHNlZW4sIG9iaikgPj0gMCkge1xuICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3BlY3QodmFsdWUsIGZyb20sIG5vSW5kZW50KSB7XG4gICAgICAgIGlmIChmcm9tKSB7XG4gICAgICAgICAgICBzZWVuID0gJGFyclNsaWNlLmNhbGwoc2Vlbik7XG4gICAgICAgICAgICBzZWVuLnB1c2goZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vSW5kZW50KSB7XG4gICAgICAgICAgICB2YXIgbmV3T3B0cyA9IHtcbiAgICAgICAgICAgICAgICBkZXB0aDogb3B0cy5kZXB0aFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChoYXMob3B0cywgJ3F1b3RlU3R5bGUnKSkge1xuICAgICAgICAgICAgICAgIG5ld09wdHMucXVvdGVTdHlsZSA9IG9wdHMucXVvdGVTdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbnNwZWN0Xyh2YWx1ZSwgbmV3T3B0cywgZGVwdGggKyAxLCBzZWVuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zcGVjdF8odmFsdWUsIG9wdHMsIGRlcHRoICsgMSwgc2Vlbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicgJiYgIWlzUmVnRXhwKG9iaikpIHsgLy8gaW4gb2xkZXIgZW5naW5lcywgcmVnZXhlcyBhcmUgY2FsbGFibGVcbiAgICAgICAgdmFyIG5hbWUgPSBuYW1lT2Yob2JqKTtcbiAgICAgICAgdmFyIGtleXMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIHJldHVybiAnW0Z1bmN0aW9uJyArIChuYW1lID8gJzogJyArIG5hbWUgOiAnIChhbm9ueW1vdXMpJykgKyAnXScgKyAoa2V5cy5sZW5ndGggPiAwID8gJyB7ICcgKyAkam9pbi5jYWxsKGtleXMsICcsICcpICsgJyB9JyA6ICcnKTtcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKG9iaikpIHtcbiAgICAgICAgdmFyIHN5bVN0cmluZyA9IGhhc1NoYW1tZWRTeW1ib2xzID8gJHJlcGxhY2UuY2FsbChTdHJpbmcob2JqKSwgL14oU3ltYm9sXFwoLipcXCkpX1teKV0qJC8sICckMScpIDogc3ltVG9TdHJpbmcuY2FsbChvYmopO1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIWhhc1NoYW1tZWRTeW1ib2xzID8gbWFya0JveGVkKHN5bVN0cmluZykgOiBzeW1TdHJpbmc7XG4gICAgfVxuICAgIGlmIChpc0VsZW1lbnQob2JqKSkge1xuICAgICAgICB2YXIgcyA9ICc8JyArICR0b0xvd2VyQ2FzZS5jYWxsKFN0cmluZyhvYmoubm9kZU5hbWUpKTtcbiAgICAgICAgdmFyIGF0dHJzID0gb2JqLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHMgKz0gJyAnICsgYXR0cnNbaV0ubmFtZSArICc9JyArIHdyYXBRdW90ZXMocXVvdGUoYXR0cnNbaV0udmFsdWUpLCAnZG91YmxlJywgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgcyArPSAnPic7XG4gICAgICAgIGlmIChvYmouY2hpbGROb2RlcyAmJiBvYmouY2hpbGROb2Rlcy5sZW5ndGgpIHsgcyArPSAnLi4uJzsgfVxuICAgICAgICBzICs9ICc8LycgKyAkdG9Mb3dlckNhc2UuY2FsbChTdHJpbmcob2JqLm5vZGVOYW1lKSkgKyAnPic7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAgIGlmIChvYmoubGVuZ3RoID09PSAwKSB7IHJldHVybiAnW10nOyB9XG4gICAgICAgIHZhciB4cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgaWYgKGluZGVudCAmJiAhc2luZ2xlTGluZVZhbHVlcyh4cykpIHtcbiAgICAgICAgICAgIHJldHVybiAnWycgKyBpbmRlbnRlZEpvaW4oeHMsIGluZGVudCkgKyAnXSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdbICcgKyAkam9pbi5jYWxsKHhzLCAnLCAnKSArICcgXSc7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKG9iaikpIHtcbiAgICAgICAgdmFyIHBhcnRzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICBpZiAoISgnY2F1c2UnIGluIEVycm9yLnByb3RvdHlwZSkgJiYgJ2NhdXNlJyBpbiBvYmogJiYgIWlzRW51bWVyYWJsZS5jYWxsKG9iaiwgJ2NhdXNlJykpIHtcbiAgICAgICAgICAgIHJldHVybiAneyBbJyArIFN0cmluZyhvYmopICsgJ10gJyArICRqb2luLmNhbGwoJGNvbmNhdC5jYWxsKCdbY2F1c2VdOiAnICsgaW5zcGVjdChvYmouY2F1c2UpLCBwYXJ0cyksICcsICcpICsgJyB9JztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSAwKSB7IHJldHVybiAnWycgKyBTdHJpbmcob2JqKSArICddJzsgfVxuICAgICAgICByZXR1cm4gJ3sgWycgKyBTdHJpbmcob2JqKSArICddICcgKyAkam9pbi5jYWxsKHBhcnRzLCAnLCAnKSArICcgfSc7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBjdXN0b21JbnNwZWN0KSB7XG4gICAgICAgIGlmIChpbnNwZWN0U3ltYm9sICYmIHR5cGVvZiBvYmpbaW5zcGVjdFN5bWJvbF0gPT09ICdmdW5jdGlvbicgJiYgdXRpbEluc3BlY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB1dGlsSW5zcGVjdChvYmosIHsgZGVwdGg6IG1heERlcHRoIC0gZGVwdGggfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VzdG9tSW5zcGVjdCAhPT0gJ3N5bWJvbCcgJiYgdHlwZW9mIG9iai5pbnNwZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqLmluc3BlY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNNYXAob2JqKSkge1xuICAgICAgICB2YXIgbWFwUGFydHMgPSBbXTtcbiAgICAgICAgaWYgKG1hcEZvckVhY2gpIHtcbiAgICAgICAgICAgIG1hcEZvckVhY2guY2FsbChvYmosIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgbWFwUGFydHMucHVzaChpbnNwZWN0KGtleSwgb2JqLCB0cnVlKSArICcgPT4gJyArIGluc3BlY3QodmFsdWUsIG9iaikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25PZignTWFwJywgbWFwU2l6ZS5jYWxsKG9iaiksIG1hcFBhcnRzLCBpbmRlbnQpO1xuICAgIH1cbiAgICBpZiAoaXNTZXQob2JqKSkge1xuICAgICAgICB2YXIgc2V0UGFydHMgPSBbXTtcbiAgICAgICAgaWYgKHNldEZvckVhY2gpIHtcbiAgICAgICAgICAgIHNldEZvckVhY2guY2FsbChvYmosIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHNldFBhcnRzLnB1c2goaW5zcGVjdCh2YWx1ZSwgb2JqKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbk9mKCdTZXQnLCBzZXRTaXplLmNhbGwob2JqKSwgc2V0UGFydHMsIGluZGVudCk7XG4gICAgfVxuICAgIGlmIChpc1dlYWtNYXAob2JqKSkge1xuICAgICAgICByZXR1cm4gd2Vha0NvbGxlY3Rpb25PZignV2Vha01hcCcpO1xuICAgIH1cbiAgICBpZiAoaXNXZWFrU2V0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHdlYWtDb2xsZWN0aW9uT2YoJ1dlYWtTZXQnKTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha1JlZihvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrUmVmJyk7XG4gICAgfVxuICAgIGlmIChpc051bWJlcihvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChOdW1iZXIob2JqKSkpO1xuICAgIH1cbiAgICBpZiAoaXNCaWdJbnQob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoYmlnSW50VmFsdWVPZi5jYWxsKG9iaikpKTtcbiAgICB9XG4gICAgaWYgKGlzQm9vbGVhbihvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoYm9vbGVhblZhbHVlT2YuY2FsbChvYmopKTtcbiAgICB9XG4gICAgaWYgKGlzU3RyaW5nKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KFN0cmluZyhvYmopKSk7XG4gICAgfVxuICAgIC8vIG5vdGU6IGluIElFIDgsIHNvbWV0aW1lcyBgZ2xvYmFsICE9PSB3aW5kb3dgIGJ1dCBib3RoIGFyZSB0aGUgcHJvdG90eXBlcyBvZiBlYWNoIG90aGVyXG4gICAgLyogZXNsaW50LWVudiBicm93c2VyICovXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIG9iaiA9PT0gd2luZG93KSB7XG4gICAgICAgIHJldHVybiAneyBbb2JqZWN0IFdpbmRvd10gfSc7XG4gICAgfVxuICAgIGlmIChvYmogPT09IGdsb2JhbCkge1xuICAgICAgICByZXR1cm4gJ3sgW29iamVjdCBnbG9iYWxUaGlzXSB9JztcbiAgICB9XG4gICAgaWYgKCFpc0RhdGUob2JqKSAmJiAhaXNSZWdFeHAob2JqKSkge1xuICAgICAgICB2YXIgeXMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIHZhciBpc1BsYWluT2JqZWN0ID0gZ1BPID8gZ1BPKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGUgOiBvYmogaW5zdGFuY2VvZiBPYmplY3QgfHwgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG4gICAgICAgIHZhciBwcm90b1RhZyA9IG9iaiBpbnN0YW5jZW9mIE9iamVjdCA/ICcnIDogJ251bGwgcHJvdG90eXBlJztcbiAgICAgICAgdmFyIHN0cmluZ1RhZyA9ICFpc1BsYWluT2JqZWN0ICYmIHRvU3RyaW5nVGFnICYmIE9iamVjdChvYmopID09PSBvYmogJiYgdG9TdHJpbmdUYWcgaW4gb2JqID8gJHNsaWNlLmNhbGwodG9TdHIob2JqKSwgOCwgLTEpIDogcHJvdG9UYWcgPyAnT2JqZWN0JyA6ICcnO1xuICAgICAgICB2YXIgY29uc3RydWN0b3JUYWcgPSBpc1BsYWluT2JqZWN0IHx8IHR5cGVvZiBvYmouY29uc3RydWN0b3IgIT09ICdmdW5jdGlvbicgPyAnJyA6IG9iai5jb25zdHJ1Y3Rvci5uYW1lID8gb2JqLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgOiAnJztcbiAgICAgICAgdmFyIHRhZyA9IGNvbnN0cnVjdG9yVGFnICsgKHN0cmluZ1RhZyB8fCBwcm90b1RhZyA/ICdbJyArICRqb2luLmNhbGwoJGNvbmNhdC5jYWxsKFtdLCBzdHJpbmdUYWcgfHwgW10sIHByb3RvVGFnIHx8IFtdKSwgJzogJykgKyAnXSAnIDogJycpO1xuICAgICAgICBpZiAoeXMubGVuZ3RoID09PSAwKSB7IHJldHVybiB0YWcgKyAne30nOyB9XG4gICAgICAgIGlmIChpbmRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWcgKyAneycgKyBpbmRlbnRlZEpvaW4oeXMsIGluZGVudCkgKyAnfSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhZyArICd7ICcgKyAkam9pbi5jYWxsKHlzLCAnLCAnKSArICcgfSc7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcob2JqKTtcbn07XG5cbmZ1bmN0aW9uIHdyYXBRdW90ZXMocywgZGVmYXVsdFN0eWxlLCBvcHRzKSB7XG4gICAgdmFyIHF1b3RlQ2hhciA9IChvcHRzLnF1b3RlU3R5bGUgfHwgZGVmYXVsdFN0eWxlKSA9PT0gJ2RvdWJsZScgPyAnXCInIDogXCInXCI7XG4gICAgcmV0dXJuIHF1b3RlQ2hhciArIHMgKyBxdW90ZUNoYXI7XG59XG5cbmZ1bmN0aW9uIHF1b3RlKHMpIHtcbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChTdHJpbmcocyksIC9cIi9nLCAnJnF1b3Q7Jyk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBBcnJheV0nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNEYXRlKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgRGF0ZV0nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNSZWdFeHAob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBSZWdFeHBdJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cbmZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBFcnJvcl0nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBTdHJpbmddJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cbmZ1bmN0aW9uIGlzTnVtYmVyKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc0Jvb2xlYW4ob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBCb29sZWFuXScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5cbi8vIFN5bWJvbCBhbmQgQmlnSW50IGRvIGhhdmUgU3ltYm9sLnRvU3RyaW5nVGFnIGJ5IHNwZWMsIHNvIHRoYXQgY2FuJ3QgYmUgdXNlZCB0byBlbGltaW5hdGUgZmFsc2UgcG9zaXRpdmVzXG5mdW5jdGlvbiBpc1N5bWJvbChvYmopIHtcbiAgICBpZiAoaGFzU2hhbW1lZFN5bWJvbHMpIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogaW5zdGFuY2VvZiBTeW1ib2w7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3ltYm9sJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgIXN5bVRvU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgc3ltVG9TdHJpbmcuY2FsbChvYmopO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNCaWdJbnQob2JqKSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgIWJpZ0ludFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBiaWdJbnRWYWx1ZU9mLmNhbGwob2JqKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5IHx8IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSBpbiB0aGlzOyB9O1xuZnVuY3Rpb24gaGFzKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIGhhc093bi5jYWxsKG9iaiwga2V5KTtcbn1cblxuZnVuY3Rpb24gdG9TdHIob2JqKSB7XG4gICAgcmV0dXJuIG9iamVjdFRvU3RyaW5nLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gbmFtZU9mKGYpIHtcbiAgICBpZiAoZi5uYW1lKSB7IHJldHVybiBmLm5hbWU7IH1cbiAgICB2YXIgbSA9ICRtYXRjaC5jYWxsKGZ1bmN0aW9uVG9TdHJpbmcuY2FsbChmKSwgL15mdW5jdGlvblxccyooW1xcdyRdKykvKTtcbiAgICBpZiAobSkgeyByZXR1cm4gbVsxXTsgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gICAgaWYgKHhzLmluZGV4T2YpIHsgcmV0dXJuIHhzLmluZGV4T2YoeCk7IH1cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoeHNbaV0gPT09IHgpIHsgcmV0dXJuIGk7IH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBpc01hcCh4KSB7XG4gICAgaWYgKCFtYXBTaXplIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIG1hcFNpemUuY2FsbCh4KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNldFNpemUuY2FsbCh4KTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBNYXA7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1dlYWtNYXAoeCkge1xuICAgIGlmICghd2Vha01hcEhhcyB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB3ZWFrTWFwSGFzLmNhbGwoeCwgd2Vha01hcEhhcyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3ZWFrU2V0SGFzLmNhbGwoeCwgd2Vha1NldEhhcyk7XG4gICAgICAgIH0gY2F0Y2ggKHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgV2Vha01hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha1JlZih4KSB7XG4gICAgaWYgKCF3ZWFrUmVmRGVyZWYgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgd2Vha1JlZkRlcmVmLmNhbGwoeCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1NldCh4KSB7XG4gICAgaWYgKCFzZXRTaXplIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHNldFNpemUuY2FsbCh4KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG1hcFNpemUuY2FsbCh4KTtcbiAgICAgICAgfSBjYXRjaCAobSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBTZXQ7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1dlYWtTZXQoeCkge1xuICAgIGlmICghd2Vha1NldEhhcyB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB3ZWFrU2V0SGFzLmNhbGwoeCwgd2Vha1NldEhhcyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3ZWFrTWFwSGFzLmNhbGwoeCwgd2Vha01hcEhhcyk7XG4gICAgICAgIH0gY2F0Y2ggKHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgV2Vha1NldDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRWxlbWVudCh4KSB7XG4gICAgaWYgKCF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZiAodHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB4IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgeC5ub2RlTmFtZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHguZ2V0QXR0cmlidXRlID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpbnNwZWN0U3RyaW5nKHN0ciwgb3B0cykge1xuICAgIGlmIChzdHIubGVuZ3RoID4gb3B0cy5tYXhTdHJpbmdMZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IHN0ci5sZW5ndGggLSBvcHRzLm1heFN0cmluZ0xlbmd0aDtcbiAgICAgICAgdmFyIHRyYWlsZXIgPSAnLi4uICcgKyByZW1haW5pbmcgKyAnIG1vcmUgY2hhcmFjdGVyJyArIChyZW1haW5pbmcgPiAxID8gJ3MnIDogJycpO1xuICAgICAgICByZXR1cm4gaW5zcGVjdFN0cmluZygkc2xpY2UuY2FsbChzdHIsIDAsIG9wdHMubWF4U3RyaW5nTGVuZ3RoKSwgb3B0cykgKyB0cmFpbGVyO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuICAgIHZhciBzID0gJHJlcGxhY2UuY2FsbCgkcmVwbGFjZS5jYWxsKHN0ciwgLyhbJ1xcXFxdKS9nLCAnXFxcXCQxJyksIC9bXFx4MDAtXFx4MWZdL2csIGxvd2J5dGUpO1xuICAgIHJldHVybiB3cmFwUXVvdGVzKHMsICdzaW5nbGUnLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gbG93Ynl0ZShjKSB7XG4gICAgdmFyIG4gPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHggPSB7XG4gICAgICAgIDg6ICdiJyxcbiAgICAgICAgOTogJ3QnLFxuICAgICAgICAxMDogJ24nLFxuICAgICAgICAxMjogJ2YnLFxuICAgICAgICAxMzogJ3InXG4gICAgfVtuXTtcbiAgICBpZiAoeCkgeyByZXR1cm4gJ1xcXFwnICsgeDsgfVxuICAgIHJldHVybiAnXFxcXHgnICsgKG4gPCAweDEwID8gJzAnIDogJycpICsgJHRvVXBwZXJDYXNlLmNhbGwobi50b1N0cmluZygxNikpO1xufVxuXG5mdW5jdGlvbiBtYXJrQm94ZWQoc3RyKSB7XG4gICAgcmV0dXJuICdPYmplY3QoJyArIHN0ciArICcpJztcbn1cblxuZnVuY3Rpb24gd2Vha0NvbGxlY3Rpb25PZih0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgKyAnIHsgPyB9Jztcbn1cblxuZnVuY3Rpb24gY29sbGVjdGlvbk9mKHR5cGUsIHNpemUsIGVudHJpZXMsIGluZGVudCkge1xuICAgIHZhciBqb2luZWRFbnRyaWVzID0gaW5kZW50ID8gaW5kZW50ZWRKb2luKGVudHJpZXMsIGluZGVudCkgOiAkam9pbi5jYWxsKGVudHJpZXMsICcsICcpO1xuICAgIHJldHVybiB0eXBlICsgJyAoJyArIHNpemUgKyAnKSB7JyArIGpvaW5lZEVudHJpZXMgKyAnfSc7XG59XG5cbmZ1bmN0aW9uIHNpbmdsZUxpbmVWYWx1ZXMoeHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpbmRleE9mKHhzW2ldLCAnXFxuJykgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBnZXRJbmRlbnQob3B0cywgZGVwdGgpIHtcbiAgICB2YXIgYmFzZUluZGVudDtcbiAgICBpZiAob3B0cy5pbmRlbnQgPT09ICdcXHQnKSB7XG4gICAgICAgIGJhc2VJbmRlbnQgPSAnXFx0JztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRzLmluZGVudCA9PT0gJ251bWJlcicgJiYgb3B0cy5pbmRlbnQgPiAwKSB7XG4gICAgICAgIGJhc2VJbmRlbnQgPSAkam9pbi5jYWxsKEFycmF5KG9wdHMuaW5kZW50ICsgMSksICcgJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGJhc2U6IGJhc2VJbmRlbnQsXG4gICAgICAgIHByZXY6ICRqb2luLmNhbGwoQXJyYXkoZGVwdGggKyAxKSwgYmFzZUluZGVudClcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBpbmRlbnRlZEpvaW4oeHMsIGluZGVudCkge1xuICAgIGlmICh4cy5sZW5ndGggPT09IDApIHsgcmV0dXJuICcnOyB9XG4gICAgdmFyIGxpbmVKb2luZXIgPSAnXFxuJyArIGluZGVudC5wcmV2ICsgaW5kZW50LmJhc2U7XG4gICAgcmV0dXJuIGxpbmVKb2luZXIgKyAkam9pbi5jYWxsKHhzLCAnLCcgKyBsaW5lSm9pbmVyKSArICdcXG4nICsgaW5kZW50LnByZXY7XG59XG5cbmZ1bmN0aW9uIGFyck9iaktleXMob2JqLCBpbnNwZWN0KSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmopO1xuICAgIHZhciB4cyA9IFtdO1xuICAgIGlmIChpc0Fycikge1xuICAgICAgICB4cy5sZW5ndGggPSBvYmoubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgeHNbaV0gPSBoYXMob2JqLCBpKSA/IGluc3BlY3Qob2JqW2ldLCBvYmopIDogJyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHN5bXMgPSB0eXBlb2YgZ09QUyA9PT0gJ2Z1bmN0aW9uJyA/IGdPUFMob2JqKSA6IFtdO1xuICAgIHZhciBzeW1NYXA7XG4gICAgaWYgKGhhc1NoYW1tZWRTeW1ib2xzKSB7XG4gICAgICAgIHN5bU1hcCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHN5bXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIHN5bU1hcFsnJCcgKyBzeW1zW2tdXSA9IHN5bXNba107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKCFoYXMob2JqLCBrZXkpKSB7IGNvbnRpbnVlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWNvbnRpbnVlXG4gICAgICAgIGlmIChpc0FyciAmJiBTdHJpbmcoTnVtYmVyKGtleSkpID09PSBrZXkgJiYga2V5IDwgb2JqLmxlbmd0aCkgeyBjb250aW51ZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICBpZiAoaGFzU2hhbW1lZFN5bWJvbHMgJiYgc3ltTWFwWyckJyArIGtleV0gaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdG8gcHJldmVudCBzaGFtbWVkIFN5bWJvbHMsIHdoaWNoIGFyZSBzdG9yZWQgYXMgc3RyaW5ncywgZnJvbSBiZWluZyBpbmNsdWRlZCBpbiB0aGUgc3RyaW5nIGtleSBzZWN0aW9uXG4gICAgICAgICAgICBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmICgkdGVzdC5jYWxsKC9bXlxcdyRdLywga2V5KSkge1xuICAgICAgICAgICAgeHMucHVzaChpbnNwZWN0KGtleSwgb2JqKSArICc6ICcgKyBpbnNwZWN0KG9ialtrZXldLCBvYmopKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHhzLnB1c2goa2V5ICsgJzogJyArIGluc3BlY3Qob2JqW2tleV0sIG9iaikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZ09QUyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN5bXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChpc0VudW1lcmFibGUuY2FsbChvYmosIHN5bXNbal0pKSB7XG4gICAgICAgICAgICAgICAgeHMucHVzaCgnWycgKyBpbnNwZWN0KHN5bXNbal0pICsgJ106ICcgKyBpbnNwZWN0KG9ialtzeW1zW2pdXSwgb2JqKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHhzO1xufVxuIiwiLy8gY2hlY2sgZG9jdW1lbnQgZmlyc3Qgc28gaXQgZG9lc24ndCBlcnJvciBpbiBub2RlLmpzXG52YXIgc3R5bGUgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGVcbiAgOiB7fVxuXG52YXIgcHJlZml4ZXMgPSBbJ08nLCAnbXMnLCAnTW96JywgJ1dlYmtpdCddXG52YXIgdXBwZXIgPSAvKFtBLVpdKS9nXG52YXIgbWVtbyA9IHt9XG5cbi8qKlxuICogcHJlZml4IGBrZXlgXG4gKlxuICogICBwcmVmaXgoJ3RyYW5zZm9ybScpIC8vID0+IFdlYmtpdFRyYW5zZm9ybVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHByZWZpeChrZXkpe1xuICAvLyBDYW1lbCBjYXNlXG4gIGtleSA9IGtleS5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbihfLCBjaGFyKXtcbiAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpXG4gIH0pXG5cbiAgLy8gV2l0aG91dCBwcmVmaXhcbiAgaWYgKHN0eWxlW2tleV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIGtleVxuXG4gIC8vIFdpdGggcHJlZml4XG4gIHZhciBLZXkgPSBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSlcbiAgdmFyIGkgPSBwcmVmaXhlcy5sZW5ndGhcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBuYW1lID0gcHJlZml4ZXNbaV0gKyBLZXlcbiAgICBpZiAoc3R5bGVbbmFtZV0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIG5hbWVcbiAgfVxuXG4gIHJldHVybiBrZXlcbn1cblxuLyoqXG4gKiBNZW1vaXplZCB2ZXJzaW9uIG9mIGBwcmVmaXhgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcHJlZml4TWVtb3ppZWQoa2V5KXtcbiAgcmV0dXJuIGtleSBpbiBtZW1vXG4gICAgPyBtZW1vW2tleV1cbiAgICA6IG1lbW9ba2V5XSA9IHByZWZpeChrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGFzaGVkIHByZWZpeFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHByZWZpeERhc2hlZChrZXkpe1xuICBrZXkgPSBwcmVmaXgoa2V5KVxuICBpZiAodXBwZXIudGVzdChrZXkpKSB7XG4gICAga2V5ID0gJy0nICsga2V5LnJlcGxhY2UodXBwZXIsICctJDEnKVxuICAgIHVwcGVyLmxhc3RJbmRleCA9IDBcbiAgfVxuICByZXR1cm4ga2V5LnRvTG93ZXJDYXNlKClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcmVmaXhNZW1vemllZFxubW9kdWxlLmV4cG9ydHMuZGFzaCA9IHByZWZpeERhc2hlZFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1kYXRhLXByb3BlcnR5Jyk7XG52YXIgaGFzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdoYXMtcHJvcGVydHktZGVzY3JpcHRvcnMnKSgpO1xudmFyIGdPUEQgPSByZXF1aXJlKCdnb3BkJyk7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkZmxvb3IgPSBHZXRJbnRyaW5zaWMoJyVNYXRoLmZsb29yJScpO1xuXG4vKiogQHR5cGVkZWYgeyguLi5hcmdzOiB1bmtub3duW10pID0+IHVua25vd259IEZ1bmMgKi9cblxuLyoqIEB0eXBlIHs8VCBleHRlbmRzIEZ1bmMgPSBGdW5jPihmbjogVCwgbGVuZ3RoOiBudW1iZXIsIGxvb3NlPzogYm9vbGVhbikgPT4gVH0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0RnVuY3Rpb25MZW5ndGgoZm4sIGxlbmd0aCkge1xuXHRpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BmbmAgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0fVxuXHRpZiAodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicgfHwgbGVuZ3RoIDwgMCB8fCBsZW5ndGggPiAweEZGRkZGRkZGIHx8ICRmbG9vcihsZW5ndGgpICE9PSBsZW5ndGgpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYGxlbmd0aGAgbXVzdCBiZSBhIHBvc2l0aXZlIDMyLWJpdCBpbnRlZ2VyJyk7XG5cdH1cblxuXHR2YXIgbG9vc2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiAhIWFyZ3VtZW50c1syXTtcblxuXHR2YXIgZnVuY3Rpb25MZW5ndGhJc0NvbmZpZ3VyYWJsZSA9IHRydWU7XG5cdHZhciBmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUgPSB0cnVlO1xuXHRpZiAoJ2xlbmd0aCcgaW4gZm4gJiYgZ09QRCkge1xuXHRcdHZhciBkZXNjID0gZ09QRChmbiwgJ2xlbmd0aCcpO1xuXHRcdGlmIChkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSkge1xuXHRcdFx0ZnVuY3Rpb25MZW5ndGhJc0NvbmZpZ3VyYWJsZSA9IGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoZGVzYyAmJiAhZGVzYy53cml0YWJsZSkge1xuXHRcdFx0ZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGZ1bmN0aW9uTGVuZ3RoSXNDb25maWd1cmFibGUgfHwgZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlIHx8ICFsb29zZSkge1xuXHRcdGlmIChoYXNEZXNjcmlwdG9ycykge1xuXHRcdFx0ZGVmaW5lKC8qKiBAdHlwZSB7UGFyYW1ldGVyczxkZWZpbmU+WzBdfSAqLyAoZm4pLCAnbGVuZ3RoJywgbGVuZ3RoLCB0cnVlLCB0cnVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVmaW5lKC8qKiBAdHlwZSB7UGFyYW1ldGVyczxkZWZpbmU+WzBdfSAqLyAoZm4pLCAnbGVuZ3RoJywgbGVuZ3RoKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZuO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkV2Vha01hcCA9IEdldEludHJpbnNpYygnJVdlYWtNYXAlJywgdHJ1ZSk7XG52YXIgJE1hcCA9IEdldEludHJpbnNpYygnJU1hcCUnLCB0cnVlKTtcblxudmFyICR3ZWFrTWFwR2V0ID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5nZXQnLCB0cnVlKTtcbnZhciAkd2Vha01hcFNldCA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuc2V0JywgdHJ1ZSk7XG52YXIgJHdlYWtNYXBIYXMgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xudmFyICRtYXBHZXQgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuZ2V0JywgdHJ1ZSk7XG52YXIgJG1hcFNldCA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5zZXQnLCB0cnVlKTtcbnZhciAkbWFwSGFzID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xuXG4vKlxuKiBUaGlzIGZ1bmN0aW9uIHRyYXZlcnNlcyB0aGUgbGlzdCByZXR1cm5pbmcgdGhlIG5vZGUgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4ga2V5LlxuKlxuKiBUaGF0IG5vZGUgaXMgYWxzbyBtb3ZlZCB0byB0aGUgaGVhZCBvZiB0aGUgbGlzdCwgc28gdGhhdCBpZiBpdCdzIGFjY2Vzc2VkIGFnYWluIHdlIGRvbid0IG5lZWQgdG8gdHJhdmVyc2UgdGhlIHdob2xlIGxpc3QuIEJ5IGRvaW5nIHNvLCBhbGwgdGhlIHJlY2VudGx5IHVzZWQgbm9kZXMgY2FuIGJlIGFjY2Vzc2VkIHJlbGF0aXZlbHkgcXVpY2tseS5cbiovXG4vKiogQHR5cGUge2ltcG9ydCgnLicpLmxpc3RHZXROb2RlfSAqL1xudmFyIGxpc3RHZXROb2RlID0gZnVuY3Rpb24gKGxpc3QsIGtleSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdC8qKiBAdHlwZSB7dHlwZW9mIGxpc3QgfCBOb25OdWxsYWJsZTwodHlwZW9mIGxpc3QpWyduZXh0J10+fSAqL1xuXHR2YXIgcHJldiA9IGxpc3Q7XG5cdC8qKiBAdHlwZSB7KHR5cGVvZiBsaXN0KVsnbmV4dCddfSAqL1xuXHR2YXIgY3Vycjtcblx0Zm9yICg7IChjdXJyID0gcHJldi5uZXh0KSAhPT0gbnVsbDsgcHJldiA9IGN1cnIpIHtcblx0XHRpZiAoY3Vyci5rZXkgPT09IGtleSkge1xuXHRcdFx0cHJldi5uZXh0ID0gY3Vyci5uZXh0O1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLXBhcmVuc1xuXHRcdFx0Y3Vyci5uZXh0ID0gLyoqIEB0eXBlIHtOb25OdWxsYWJsZTx0eXBlb2YgbGlzdC5uZXh0Pn0gKi8gKGxpc3QubmV4dCk7XG5cdFx0XHRsaXN0Lm5leHQgPSBjdXJyOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0XHRyZXR1cm4gY3Vycjtcblx0XHR9XG5cdH1cbn07XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJykubGlzdEdldH0gKi9cbnZhciBsaXN0R2V0ID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSkge1xuXHR2YXIgbm9kZSA9IGxpc3RHZXROb2RlKG9iamVjdHMsIGtleSk7XG5cdHJldHVybiBub2RlICYmIG5vZGUudmFsdWU7XG59O1xuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKS5saXN0U2V0fSAqL1xudmFyIGxpc3RTZXQgPSBmdW5jdGlvbiAob2JqZWN0cywga2V5LCB2YWx1ZSkge1xuXHR2YXIgbm9kZSA9IGxpc3RHZXROb2RlKG9iamVjdHMsIGtleSk7XG5cdGlmIChub2RlKSB7XG5cdFx0bm9kZS52YWx1ZSA9IHZhbHVlO1xuXHR9IGVsc2Uge1xuXHRcdC8vIFByZXBlbmQgdGhlIG5ldyBub2RlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpc3Rcblx0XHRvYmplY3RzLm5leHQgPSAvKiogQHR5cGUge2ltcG9ydCgnLicpLkxpc3ROb2RlPHR5cGVvZiB2YWx1ZT59ICovICh7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24sIG5vLWV4dHJhLXBhcmVuc1xuXHRcdFx0a2V5OiBrZXksXG5cdFx0XHRuZXh0OiBvYmplY3RzLm5leHQsXG5cdFx0XHR2YWx1ZTogdmFsdWVcblx0XHR9KTtcblx0fVxufTtcbi8qKiBAdHlwZSB7aW1wb3J0KCcuJykubGlzdEhhc30gKi9cbnZhciBsaXN0SGFzID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSkge1xuXHRyZXR1cm4gISFsaXN0R2V0Tm9kZShvYmplY3RzLCBrZXkpO1xufTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0U2lkZUNoYW5uZWwoKSB7XG5cdC8qKiBAdHlwZSB7V2Vha01hcDxvYmplY3QsIHVua25vd24+fSAqLyB2YXIgJHdtO1xuXHQvKiogQHR5cGUge01hcDxvYmplY3QsIHVua25vd24+fSAqLyB2YXIgJG07XG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuJykuUm9vdE5vZGU8dW5rbm93bj59ICovIHZhciAkbztcblxuXHQvKiogQHR5cGUge2ltcG9ydCgnLicpLkNoYW5uZWx9ICovXG5cdHZhciBjaGFubmVsID0ge1xuXHRcdGFzc2VydDogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCFjaGFubmVsLmhhcyhrZXkpKSB7XG5cdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdTaWRlIGNoYW5uZWwgZG9lcyBub3QgY29udGFpbiAnICsgaW5zcGVjdChrZXkpKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGdldDogZnVuY3Rpb24gKGtleSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRpZiAoJHdtKSB7XG5cdFx0XHRcdFx0cmV0dXJuICR3ZWFrTWFwR2V0KCR3bSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICgkTWFwKSB7XG5cdFx0XHRcdGlmICgkbSkge1xuXHRcdFx0XHRcdHJldHVybiAkbWFwR2V0KCRtLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoJG8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb25lbHktaWZcblx0XHRcdFx0XHRyZXR1cm4gbGlzdEdldCgkbywga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aGFzOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRpZiAoJHdtKSB7XG5cdFx0XHRcdFx0cmV0dXJuICR3ZWFrTWFwSGFzKCR3bSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICgkTWFwKSB7XG5cdFx0XHRcdGlmICgkbSkge1xuXHRcdFx0XHRcdHJldHVybiAkbWFwSGFzKCRtLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoJG8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb25lbHktaWZcblx0XHRcdFx0XHRyZXR1cm4gbGlzdEhhcygkbywga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0aWYgKCRXZWFrTWFwICYmIGtleSAmJiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0aWYgKCEkd20pIHtcblx0XHRcdFx0XHQkd20gPSBuZXcgJFdlYWtNYXAoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkd2Vha01hcFNldCgkd20sIGtleSwgdmFsdWUpO1xuXHRcdFx0fSBlbHNlIGlmICgkTWFwKSB7XG5cdFx0XHRcdGlmICghJG0pIHtcblx0XHRcdFx0XHQkbSA9IG5ldyAkTWFwKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0JG1hcFNldCgkbSwga2V5LCB2YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoISRvKSB7XG5cdFx0XHRcdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgbGlua2VkIGxpc3QgYXMgYW4gZW1wdHkgbm9kZSwgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIHNwZWNpYWwtY2FzZSBoYW5kbGluZyBvZiB0aGUgZmlyc3Qgbm9kZTogd2UgY2FuIGFsd2F5cyByZWZlciB0byBpdCBhcyAocHJldmlvdXMgbm9kZSkubmV4dCwgaW5zdGVhZCBvZiBzb21ldGhpbmcgbGlrZSAobGlzdCkuaGVhZFxuXHRcdFx0XHRcdCRvID0geyBrZXk6IHt9LCBuZXh0OiBudWxsIH07XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdFNldCgkbywga2V5LCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gY2hhbm5lbDtcbn07XG4iLCIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJhbnNwb3J0TGlzdCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0LWxpc3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21haW4nKSh0cmFuc3BvcnRMaXN0KTtcblxuLy8gVE9ETyBjYW4ndCBnZXQgcmlkIG9mIHRoaXMgdW50aWwgYWxsIHNlcnZlcnMgZG9cbmlmICgnX3NvY2tqc19vbmxvYWQnIGluIGdsb2JhbCkge1xuICBzZXRUaW1lb3V0KGdsb2JhbC5fc29ja2pzX29ubG9hZCwgMSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudCA9IHJlcXVpcmUoJy4vZXZlbnQnKVxuICA7XG5cbmZ1bmN0aW9uIENsb3NlRXZlbnQoKSB7XG4gIEV2ZW50LmNhbGwodGhpcyk7XG4gIHRoaXMuaW5pdEV2ZW50KCdjbG9zZScsIGZhbHNlLCBmYWxzZSk7XG4gIHRoaXMud2FzQ2xlYW4gPSBmYWxzZTtcbiAgdGhpcy5jb2RlID0gMDtcbiAgdGhpcy5yZWFzb24gPSAnJztcbn1cblxuaW5oZXJpdHMoQ2xvc2VFdmVudCwgRXZlbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsb3NlRXZlbnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vZXZlbnR0YXJnZXQnKVxuICA7XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRUYXJnZXQuY2FsbCh0aGlzKTtcbn1cblxuaW5oZXJpdHMoRXZlbnRFbWl0dGVyLCBFdmVudFRhcmdldCk7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICBpZiAodHlwZSkge1xuICAgIGRlbGV0ZSB0aGlzLl9saXN0ZW5lcnNbdHlwZV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICAgICwgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMub24odHlwZSwgZyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHR5cGUgPSBhcmd1bWVudHNbMF07XG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV07XG4gIGlmICghbGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGVxdWl2YWxlbnQgb2YgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncyA9IG5ldyBBcnJheShsIC0gMSk7XG4gIGZvciAodmFyIGFpID0gMTsgYWkgPCBsOyBhaSsrKSB7XG4gICAgYXJnc1thaSAtIDFdID0gYXJndW1lbnRzW2FpXTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBFdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcjtcblxubW9kdWxlLmV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBFdmVudChldmVudFR5cGUpIHtcbiAgdGhpcy50eXBlID0gZXZlbnRUeXBlO1xufVxuXG5FdmVudC5wcm90b3R5cGUuaW5pdEV2ZW50ID0gZnVuY3Rpb24oZXZlbnRUeXBlLCBjYW5CdWJibGUsIGNhbmNlbGFibGUpIHtcbiAgdGhpcy50eXBlID0gZXZlbnRUeXBlO1xuICB0aGlzLmJ1YmJsZXMgPSBjYW5CdWJibGU7XG4gIHRoaXMuY2FuY2VsYWJsZSA9IGNhbmNlbGFibGU7XG4gIHRoaXMudGltZVN0YW1wID0gK25ldyBEYXRlKCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnQucHJvdG90eXBlLnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCkge307XG5FdmVudC5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHt9O1xuXG5FdmVudC5DQVBUVVJJTkdfUEhBU0UgPSAxO1xuRXZlbnQuQVRfVEFSR0VUID0gMjtcbkV2ZW50LkJVQkJMSU5HX1BIQVNFID0gMztcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogU2ltcGxpZmllZCBpbXBsZW1lbnRhdGlvbiBvZiBET00yIEV2ZW50VGFyZ2V0LlxuICogICBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1FdmVudHMvZXZlbnRzLmh0bWwjRXZlbnRzLUV2ZW50VGFyZ2V0XG4gKi9cblxuZnVuY3Rpb24gRXZlbnRUYXJnZXQoKSB7XG4gIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xufVxuXG5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50VHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCEoZXZlbnRUeXBlIGluIHRoaXMuX2xpc3RlbmVycykpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXSA9IFtdO1xuICB9XG4gIHZhciBhcnIgPSB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXTtcbiAgLy8gIzRcbiAgaWYgKGFyci5pbmRleE9mKGxpc3RlbmVyKSA9PT0gLTEpIHtcbiAgICAvLyBNYWtlIGEgY29weSBzbyBhcyBub3QgdG8gaW50ZXJmZXJlIHdpdGggYSBjdXJyZW50IGRpc3BhdGNoRXZlbnQuXG4gICAgYXJyID0gYXJyLmNvbmNhdChbbGlzdGVuZXJdKTtcbiAgfVxuICB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXSA9IGFycjtcbn07XG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xuICB2YXIgYXJyID0gdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV07XG4gIGlmICghYXJyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpZHggPSBhcnIuaW5kZXhPZihsaXN0ZW5lcik7XG4gIGlmIChpZHggIT09IC0xKSB7XG4gICAgaWYgKGFyci5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBNYWtlIGEgY29weSBzbyBhcyBub3QgdG8gaW50ZXJmZXJlIHdpdGggYSBjdXJyZW50IGRpc3BhdGNoRXZlbnQuXG4gICAgICB0aGlzLl9saXN0ZW5lcnNbZXZlbnRUeXBlXSA9IGFyci5zbGljZSgwLCBpZHgpLmNvbmNhdChhcnIuc2xpY2UoaWR4ICsgMSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV07XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxufTtcblxuRXZlbnRUYXJnZXQucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGV2ZW50ID0gYXJndW1lbnRzWzBdO1xuICB2YXIgdCA9IGV2ZW50LnR5cGU7XG4gIC8vIGVxdWl2YWxlbnQgb2YgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gW2V2ZW50XSA6IEFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIC8vIFRPRE86IFRoaXMgZG9lc24ndCBtYXRjaCB0aGUgcmVhbCBiZWhhdmlvcjsgcGVyIHNwZWMsIG9uZm9vIGdldFxuICAvLyB0aGVpciBwbGFjZSBpbiBsaW5lIGZyb20gdGhlIC9maXJzdC8gdGltZSB0aGV5J3JlIHNldCBmcm9tXG4gIC8vIG5vbi1udWxsLiBBbHRob3VnaCBXZWJLaXQgYnVtcHMgaXQgdG8gdGhlIGVuZCBldmVyeSB0aW1lIGl0J3NcbiAgLy8gc2V0LlxuICBpZiAodGhpc1snb24nICsgdF0pIHtcbiAgICB0aGlzWydvbicgKyB0XS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuICBpZiAodCBpbiB0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAvLyBHcmFiIGEgcmVmZXJlbmNlIHRvIHRoZSBsaXN0ZW5lcnMgbGlzdC4gcmVtb3ZlRXZlbnRMaXN0ZW5lciBtYXkgYWx0ZXIgdGhlIGxpc3QuXG4gICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1t0XTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFRhcmdldDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50ID0gcmVxdWlyZSgnLi9ldmVudCcpXG4gIDtcblxuZnVuY3Rpb24gVHJhbnNwb3J0TWVzc2FnZUV2ZW50KGRhdGEpIHtcbiAgRXZlbnQuY2FsbCh0aGlzKTtcbiAgdGhpcy5pbml0RXZlbnQoJ21lc3NhZ2UnLCBmYWxzZSwgZmFsc2UpO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xufVxuXG5pbmhlcml0cyhUcmFuc3BvcnRNZXNzYWdlRXZlbnQsIEV2ZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnRNZXNzYWdlRXZlbnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpZnJhbWVVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvaWZyYW1lJylcbiAgO1xuXG5mdW5jdGlvbiBGYWNhZGVKUyh0cmFuc3BvcnQpIHtcbiAgdGhpcy5fdHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICB0cmFuc3BvcnQub24oJ21lc3NhZ2UnLCB0aGlzLl90cmFuc3BvcnRNZXNzYWdlLmJpbmQodGhpcykpO1xuICB0cmFuc3BvcnQub24oJ2Nsb3NlJywgdGhpcy5fdHJhbnNwb3J0Q2xvc2UuYmluZCh0aGlzKSk7XG59XG5cbkZhY2FkZUpTLnByb3RvdHlwZS5fdHJhbnNwb3J0Q2xvc2UgPSBmdW5jdGlvbihjb2RlLCByZWFzb24pIHtcbiAgaWZyYW1lVXRpbHMucG9zdE1lc3NhZ2UoJ2MnLCBKU09OLnN0cmluZ2lmeShbY29kZSwgcmVhc29uXSkpO1xufTtcbkZhY2FkZUpTLnByb3RvdHlwZS5fdHJhbnNwb3J0TWVzc2FnZSA9IGZ1bmN0aW9uKGZyYW1lKSB7XG4gIGlmcmFtZVV0aWxzLnBvc3RNZXNzYWdlKCd0JywgZnJhbWUpO1xufTtcbkZhY2FkZUpTLnByb3RvdHlwZS5fc2VuZCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdGhpcy5fdHJhbnNwb3J0LnNlbmQoZGF0YSk7XG59O1xuRmFjYWRlSlMucHJvdG90eXBlLl9jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl90cmFuc3BvcnQuY2xvc2UoKTtcbiAgdGhpcy5fdHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGYWNhZGVKUztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHVybFV0aWxzID0gcmVxdWlyZSgnLi91dGlscy91cmwnKVxuICAsIGV2ZW50VXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL2V2ZW50JylcbiAgLCBGYWNhZGVKUyA9IHJlcXVpcmUoJy4vZmFjYWRlJylcbiAgLCBJbmZvSWZyYW1lUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2luZm8taWZyYW1lLXJlY2VpdmVyJylcbiAgLCBpZnJhbWVVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvaWZyYW1lJylcbiAgLCBsb2MgPSByZXF1aXJlKCcuL2xvY2F0aW9uJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OmlmcmFtZS1ib290c3RyYXAnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihTb2NrSlMsIGF2YWlsYWJsZVRyYW5zcG9ydHMpIHtcbiAgdmFyIHRyYW5zcG9ydE1hcCA9IHt9O1xuICBhdmFpbGFibGVUcmFuc3BvcnRzLmZvckVhY2goZnVuY3Rpb24oYXQpIHtcbiAgICBpZiAoYXQuZmFjYWRlVHJhbnNwb3J0KSB7XG4gICAgICB0cmFuc3BvcnRNYXBbYXQuZmFjYWRlVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWVdID0gYXQuZmFjYWRlVHJhbnNwb3J0O1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gaGFyZC1jb2RlZCBmb3IgdGhlIGluZm8gaWZyYW1lXG4gIC8vIFRPRE8gc2VlIGlmIHdlIGNhbiBtYWtlIHRoaXMgbW9yZSBkeW5hbWljXG4gIHRyYW5zcG9ydE1hcFtJbmZvSWZyYW1lUmVjZWl2ZXIudHJhbnNwb3J0TmFtZV0gPSBJbmZvSWZyYW1lUmVjZWl2ZXI7XG4gIHZhciBwYXJlbnRPcmlnaW47XG5cbiAgLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG4gIFNvY2tKUy5ib290c3RyYXBfaWZyYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cbiAgICB2YXIgZmFjYWRlO1xuICAgIGlmcmFtZVV0aWxzLmN1cnJlbnRXaW5kb3dJZCA9IGxvYy5oYXNoLnNsaWNlKDEpO1xuICAgIHZhciBvbk1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoZS5zb3VyY2UgIT09IHBhcmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhcmVudE9yaWdpbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcGFyZW50T3JpZ2luID0gZS5vcmlnaW47XG4gICAgICB9XG4gICAgICBpZiAoZS5vcmlnaW4gIT09IHBhcmVudE9yaWdpbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpZnJhbWVNZXNzYWdlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWZyYW1lTWVzc2FnZSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGlnbm9yZWQpIHtcbiAgICAgICAgZGVidWcoJ2JhZCBqc29uJywgZS5kYXRhKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaWZyYW1lTWVzc2FnZS53aW5kb3dJZCAhPT0gaWZyYW1lVXRpbHMuY3VycmVudFdpbmRvd0lkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoaWZyYW1lTWVzc2FnZS50eXBlKSB7XG4gICAgICBjYXNlICdzJzpcbiAgICAgICAgdmFyIHA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcCA9IEpTT04ucGFyc2UoaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoaWdub3JlZCkge1xuICAgICAgICAgIGRlYnVnKCdiYWQganNvbicsIGlmcmFtZU1lc3NhZ2UuZGF0YSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZlcnNpb24gPSBwWzBdO1xuICAgICAgICB2YXIgdHJhbnNwb3J0ID0gcFsxXTtcbiAgICAgICAgdmFyIHRyYW5zVXJsID0gcFsyXTtcbiAgICAgICAgdmFyIGJhc2VVcmwgPSBwWzNdO1xuICAgICAgICBkZWJ1Zyh2ZXJzaW9uLCB0cmFuc3BvcnQsIHRyYW5zVXJsLCBiYXNlVXJsKTtcbiAgICAgICAgLy8gY2hhbmdlIHRoaXMgdG8gc2VtdmVyIGxvZ2ljXG4gICAgICAgIGlmICh2ZXJzaW9uICE9PSBTb2NrSlMudmVyc2lvbikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb21wYXRpYmxlIFNvY2tKUyEgTWFpbiBzaXRlIHVzZXM6JyArXG4gICAgICAgICAgICAgICAgICAgICcgXCInICsgdmVyc2lvbiArICdcIiwgdGhlIGlmcmFtZTonICtcbiAgICAgICAgICAgICAgICAgICAgJyBcIicgKyBTb2NrSlMudmVyc2lvbiArICdcIi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdXJsVXRpbHMuaXNPcmlnaW5FcXVhbCh0cmFuc1VybCwgbG9jLmhyZWYpIHx8XG4gICAgICAgICAgICAhdXJsVXRpbHMuaXNPcmlnaW5FcXVhbChiYXNlVXJsLCBsb2MuaHJlZikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgY29ubmVjdCB0byBkaWZmZXJlbnQgZG9tYWluIGZyb20gd2l0aGluIGFuICcgK1xuICAgICAgICAgICAgICAgICAgICAnaWZyYW1lLiAoJyArIGxvYy5ocmVmICsgJywgJyArIHRyYW5zVXJsICsgJywgJyArIGJhc2VVcmwgKyAnKScpO1xuICAgICAgICB9XG4gICAgICAgIGZhY2FkZSA9IG5ldyBGYWNhZGVKUyhuZXcgdHJhbnNwb3J0TWFwW3RyYW5zcG9ydF0odHJhbnNVcmwsIGJhc2VVcmwpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtJzpcbiAgICAgICAgZmFjYWRlLl9zZW5kKGlmcmFtZU1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYyc6XG4gICAgICAgIGlmIChmYWNhZGUpIHtcbiAgICAgICAgICBmYWNhZGUuX2Nsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmFjYWRlID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGV2ZW50VXRpbHMuYXR0YWNoRXZlbnQoJ21lc3NhZ2UnLCBvbk1lc3NhZ2UpO1xuXG4gICAgLy8gU3RhcnRcbiAgICBpZnJhbWVVdGlscy5wb3N0TWVzc2FnZSgncycpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIG9iamVjdFV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9vYmplY3QnKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6aW5mby1hamF4Jyk7XG59XG5cbmZ1bmN0aW9uIEluZm9BamF4KHVybCwgQWpheE9iamVjdCkge1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB0MCA9ICtuZXcgRGF0ZSgpO1xuICB0aGlzLnhvID0gbmV3IEFqYXhPYmplY3QoJ0dFVCcsIHVybCk7XG5cbiAgdGhpcy54by5vbmNlKCdmaW5pc2gnLCBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHtcbiAgICB2YXIgaW5mbywgcnR0O1xuICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xuICAgICAgcnR0ID0gKCtuZXcgRGF0ZSgpKSAtIHQwO1xuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpbmZvID0gSlNPTi5wYXJzZSh0ZXh0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGRlYnVnKCdiYWQganNvbicsIHRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghb2JqZWN0VXRpbHMuaXNPYmplY3QoaW5mbykpIHtcbiAgICAgICAgaW5mbyA9IHt9O1xuICAgICAgfVxuICAgIH1cbiAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIGluZm8sIHJ0dCk7XG4gICAgc2VsZi5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgfSk7XG59XG5cbmluaGVyaXRzKEluZm9BamF4LCBFdmVudEVtaXR0ZXIpO1xuXG5JbmZvQWpheC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgdGhpcy54by5jbG9zZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbmZvQWpheDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIFhIUkxvY2FsT2JqZWN0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQvc2VuZGVyL3hoci1sb2NhbCcpXG4gICwgSW5mb0FqYXggPSByZXF1aXJlKCcuL2luZm8tYWpheCcpXG4gIDtcblxuZnVuY3Rpb24gSW5mb1JlY2VpdmVySWZyYW1lKHRyYW5zVXJsKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5pciA9IG5ldyBJbmZvQWpheCh0cmFuc1VybCwgWEhSTG9jYWxPYmplY3QpO1xuICB0aGlzLmlyLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uKGluZm8sIHJ0dCkge1xuICAgIHNlbGYuaXIgPSBudWxsO1xuICAgIHNlbGYuZW1pdCgnbWVzc2FnZScsIEpTT04uc3RyaW5naWZ5KFtpbmZvLCBydHRdKSk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhJbmZvUmVjZWl2ZXJJZnJhbWUsIEV2ZW50RW1pdHRlcik7XG5cbkluZm9SZWNlaXZlcklmcmFtZS50cmFuc3BvcnROYW1lID0gJ2lmcmFtZS1pbmZvLXJlY2VpdmVyJztcblxuSW5mb1JlY2VpdmVySWZyYW1lLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5pcikge1xuICAgIHRoaXMuaXIuY2xvc2UoKTtcbiAgICB0aGlzLmlyID0gbnVsbDtcbiAgfVxuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbmZvUmVjZWl2ZXJJZnJhbWU7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvZXZlbnQnKVxuICAsIElmcmFtZVRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0L2lmcmFtZScpXG4gICwgSW5mb1JlY2VpdmVySWZyYW1lID0gcmVxdWlyZSgnLi9pbmZvLWlmcmFtZS1yZWNlaXZlcicpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDppbmZvLWlmcmFtZScpO1xufVxuXG5mdW5jdGlvbiBJbmZvSWZyYW1lKGJhc2VVcmwsIHVybCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpZnIgPSBzZWxmLmlmciA9IG5ldyBJZnJhbWVUcmFuc3BvcnQoSW5mb1JlY2VpdmVySWZyYW1lLnRyYW5zcG9ydE5hbWUsIHVybCwgYmFzZVVybCk7XG5cbiAgICBpZnIub25jZSgnbWVzc2FnZScsIGZ1bmN0aW9uKG1zZykge1xuICAgICAgaWYgKG1zZykge1xuICAgICAgICB2YXIgZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkID0gSlNPTi5wYXJzZShtc2cpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVidWcoJ2JhZCBqc29uJywgbXNnKTtcbiAgICAgICAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcpO1xuICAgICAgICAgIHNlbGYuY2xvc2UoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5mbyA9IGRbMF0sIHJ0dCA9IGRbMV07XG4gICAgICAgIHNlbGYuZW1pdCgnZmluaXNoJywgaW5mbywgcnR0KTtcbiAgICAgIH1cbiAgICAgIHNlbGYuY2xvc2UoKTtcbiAgICB9KTtcblxuICAgIGlmci5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5lbWl0KCdmaW5pc2gnKTtcbiAgICAgIHNlbGYuY2xvc2UoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBUT0RPIHRoaXMgc2VlbXMgdGhlIHNhbWUgYXMgdGhlICduZWVkQm9keScgZnJvbSB0cmFuc3BvcnRzXG4gIGlmICghZ2xvYmFsLmRvY3VtZW50LmJvZHkpIHtcbiAgICB1dGlscy5hdHRhY2hFdmVudCgnbG9hZCcsIGdvKTtcbiAgfSBlbHNlIHtcbiAgICBnbygpO1xuICB9XG59XG5cbmluaGVyaXRzKEluZm9JZnJhbWUsIEV2ZW50RW1pdHRlcik7XG5cbkluZm9JZnJhbWUuZW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gSWZyYW1lVHJhbnNwb3J0LmVuYWJsZWQoKTtcbn07XG5cbkluZm9JZnJhbWUucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmlmcikge1xuICAgIHRoaXMuaWZyLmNsb3NlKCk7XG4gIH1cbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgdGhpcy5pZnIgPSBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbmZvSWZyYW1lO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL3VybCcpXG4gICwgWERSID0gcmVxdWlyZSgnLi90cmFuc3BvcnQvc2VuZGVyL3hkcicpXG4gICwgWEhSQ29ycyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0L3NlbmRlci94aHItY29ycycpXG4gICwgWEhSTG9jYWwgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC9zZW5kZXIveGhyLWxvY2FsJylcbiAgLCBYSFJGYWtlID0gcmVxdWlyZSgnLi90cmFuc3BvcnQvc2VuZGVyL3hoci1mYWtlJylcbiAgLCBJbmZvSWZyYW1lID0gcmVxdWlyZSgnLi9pbmZvLWlmcmFtZScpXG4gICwgSW5mb0FqYXggPSByZXF1aXJlKCcuL2luZm8tYWpheCcpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDppbmZvLXJlY2VpdmVyJyk7XG59XG5cbmZ1bmN0aW9uIEluZm9SZWNlaXZlcihiYXNlVXJsLCB1cmxJbmZvKSB7XG4gIGRlYnVnKGJhc2VVcmwpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5kb1hocihiYXNlVXJsLCB1cmxJbmZvKTtcbiAgfSwgMCk7XG59XG5cbmluaGVyaXRzKEluZm9SZWNlaXZlciwgRXZlbnRFbWl0dGVyKTtcblxuLy8gVE9ETyB0aGlzIGlzIGN1cnJlbnRseSBpZ25vcmluZyB0aGUgbGlzdCBvZiBhdmFpbGFibGUgdHJhbnNwb3J0cyBhbmQgdGhlIHdoaXRlbGlzdFxuXG5JbmZvUmVjZWl2ZXIuX2dldFJlY2VpdmVyID0gZnVuY3Rpb24oYmFzZVVybCwgdXJsLCB1cmxJbmZvKSB7XG4gIC8vIGRldGVybWluZSBtZXRob2Qgb2YgQ09SUyBzdXBwb3J0IChpZiBuZWVkZWQpXG4gIGlmICh1cmxJbmZvLnNhbWVPcmlnaW4pIHtcbiAgICByZXR1cm4gbmV3IEluZm9BamF4KHVybCwgWEhSTG9jYWwpO1xuICB9XG4gIGlmIChYSFJDb3JzLmVuYWJsZWQpIHtcbiAgICByZXR1cm4gbmV3IEluZm9BamF4KHVybCwgWEhSQ29ycyk7XG4gIH1cbiAgaWYgKFhEUi5lbmFibGVkICYmIHVybEluZm8uc2FtZVNjaGVtZSkge1xuICAgIHJldHVybiBuZXcgSW5mb0FqYXgodXJsLCBYRFIpO1xuICB9XG4gIGlmIChJbmZvSWZyYW1lLmVuYWJsZWQoKSkge1xuICAgIHJldHVybiBuZXcgSW5mb0lmcmFtZShiYXNlVXJsLCB1cmwpO1xuICB9XG4gIHJldHVybiBuZXcgSW5mb0FqYXgodXJsLCBYSFJGYWtlKTtcbn07XG5cbkluZm9SZWNlaXZlci5wcm90b3R5cGUuZG9YaHIgPSBmdW5jdGlvbihiYXNlVXJsLCB1cmxJbmZvKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICAgICwgdXJsID0gdXJsVXRpbHMuYWRkUGF0aChiYXNlVXJsLCAnL2luZm8nKVxuICAgIDtcbiAgZGVidWcoJ2RvWGhyJywgdXJsKTtcblxuICB0aGlzLnhvID0gSW5mb1JlY2VpdmVyLl9nZXRSZWNlaXZlcihiYXNlVXJsLCB1cmwsIHVybEluZm8pO1xuXG4gIHRoaXMudGltZW91dFJlZiA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ3RpbWVvdXQnKTtcbiAgICBzZWxmLl9jbGVhbnVwKGZhbHNlKTtcbiAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcpO1xuICB9LCBJbmZvUmVjZWl2ZXIudGltZW91dCk7XG5cbiAgdGhpcy54by5vbmNlKCdmaW5pc2gnLCBmdW5jdGlvbihpbmZvLCBydHQpIHtcbiAgICBkZWJ1ZygnZmluaXNoJywgaW5mbywgcnR0KTtcbiAgICBzZWxmLl9jbGVhbnVwKHRydWUpO1xuICAgIHNlbGYuZW1pdCgnZmluaXNoJywgaW5mbywgcnR0KTtcbiAgfSk7XG59O1xuXG5JbmZvUmVjZWl2ZXIucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24od2FzQ2xlYW4pIHtcbiAgZGVidWcoJ19jbGVhbnVwJyk7XG4gIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRSZWYpO1xuICB0aGlzLnRpbWVvdXRSZWYgPSBudWxsO1xuICBpZiAoIXdhc0NsZWFuICYmIHRoaXMueG8pIHtcbiAgICB0aGlzLnhvLmNsb3NlKCk7XG4gIH1cbiAgdGhpcy54byA9IG51bGw7XG59O1xuXG5JbmZvUmVjZWl2ZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdjbG9zZScpO1xuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB0aGlzLl9jbGVhbnVwKGZhbHNlKTtcbn07XG5cbkluZm9SZWNlaXZlci50aW1lb3V0ID0gODAwMDtcblxubW9kdWxlLmV4cG9ydHMgPSBJbmZvUmVjZWl2ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmxvY2F0aW9uIHx8IHtcbiAgb3JpZ2luOiAnaHR0cDovL2xvY2FsaG9zdDo4MCdcbiwgcHJvdG9jb2w6ICdodHRwOidcbiwgaG9zdDogJ2xvY2FsaG9zdCdcbiwgcG9ydDogODBcbiwgaHJlZjogJ2h0dHA6Ly9sb2NhbGhvc3QvJ1xuLCBoYXNoOiAnJ1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltcycpO1xuXG52YXIgVVJMID0gcmVxdWlyZSgndXJsLXBhcnNlJylcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCByYW5kb20gPSByZXF1aXJlKCcuL3V0aWxzL3JhbmRvbScpXG4gICwgZXNjYXBlID0gcmVxdWlyZSgnLi91dGlscy9lc2NhcGUnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi91dGlscy91cmwnKVxuICAsIGV2ZW50VXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL2V2ZW50JylcbiAgLCB0cmFuc3BvcnQgPSByZXF1aXJlKCcuL3V0aWxzL3RyYW5zcG9ydCcpXG4gICwgb2JqZWN0VXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL29iamVjdCcpXG4gICwgYnJvd3NlciA9IHJlcXVpcmUoJy4vdXRpbHMvYnJvd3NlcicpXG4gICwgbG9nID0gcmVxdWlyZSgnLi91dGlscy9sb2cnKVxuICAsIEV2ZW50ID0gcmVxdWlyZSgnLi9ldmVudC9ldmVudCcpXG4gICwgRXZlbnRUYXJnZXQgPSByZXF1aXJlKCcuL2V2ZW50L2V2ZW50dGFyZ2V0JylcbiAgLCBsb2MgPSByZXF1aXJlKCcuL2xvY2F0aW9uJylcbiAgLCBDbG9zZUV2ZW50ID0gcmVxdWlyZSgnLi9ldmVudC9jbG9zZScpXG4gICwgVHJhbnNwb3J0TWVzc2FnZUV2ZW50ID0gcmVxdWlyZSgnLi9ldmVudC90cmFucy1tZXNzYWdlJylcbiAgLCBJbmZvUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2luZm8tcmVjZWl2ZXInKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6bWFpbicpO1xufVxuXG52YXIgdHJhbnNwb3J0cztcblxuLy8gZm9sbG93IGNvbnN0cnVjdG9yIHN0ZXBzIGRlZmluZWQgYXQgaHR0cDovL2Rldi53My5vcmcvaHRtbDUvd2Vic29ja2V0cy8jdGhlLXdlYnNvY2tldC1pbnRlcmZhY2VcbmZ1bmN0aW9uIFNvY2tKUyh1cmwsIHByb3RvY29scywgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU29ja0pTKSkge1xuICAgIHJldHVybiBuZXcgU29ja0pTKHVybCwgcHJvdG9jb2xzLCBvcHRpb25zKTtcbiAgfVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnU29ja0pTOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnRcIik7XG4gIH1cbiAgRXZlbnRUYXJnZXQuY2FsbCh0aGlzKTtcblxuICB0aGlzLnJlYWR5U3RhdGUgPSBTb2NrSlMuQ09OTkVDVElORztcbiAgdGhpcy5leHRlbnNpb25zID0gJyc7XG4gIHRoaXMucHJvdG9jb2wgPSAnJztcblxuICAvLyBub24tc3RhbmRhcmQgZXh0ZW5zaW9uXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAob3B0aW9ucy5wcm90b2NvbHNfd2hpdGVsaXN0KSB7XG4gICAgbG9nLndhcm4oXCIncHJvdG9jb2xzX3doaXRlbGlzdCcgaXMgREVQUkVDQVRFRC4gVXNlICd0cmFuc3BvcnRzJyBpbnN0ZWFkLlwiKTtcbiAgfVxuICB0aGlzLl90cmFuc3BvcnRzV2hpdGVsaXN0ID0gb3B0aW9ucy50cmFuc3BvcnRzO1xuICB0aGlzLl90cmFuc3BvcnRPcHRpb25zID0gb3B0aW9ucy50cmFuc3BvcnRPcHRpb25zIHx8IHt9O1xuICB0aGlzLl90aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0IHx8IDA7XG5cbiAgdmFyIHNlc3Npb25JZCA9IG9wdGlvbnMuc2Vzc2lvbklkIHx8IDg7XG4gIGlmICh0eXBlb2Ygc2Vzc2lvbklkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZ2VuZXJhdGVTZXNzaW9uSWQgPSBzZXNzaW9uSWQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNlc3Npb25JZCA9PT0gJ251bWJlcicpIHtcbiAgICB0aGlzLl9nZW5lcmF0ZVNlc3Npb25JZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbS5zdHJpbmcoc2Vzc2lvbklkKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0lmIHNlc3Npb25JZCBpcyB1c2VkIGluIHRoZSBvcHRpb25zLCBpdCBuZWVkcyB0byBiZSBhIG51bWJlciBvciBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdGhpcy5fc2VydmVyID0gb3B0aW9ucy5zZXJ2ZXIgfHwgcmFuZG9tLm51bWJlclN0cmluZygxMDAwKTtcblxuICAvLyBTdGVwIDEgb2YgV1Mgc3BlYyAtIHBhcnNlIGFuZCB2YWxpZGF0ZSB0aGUgdXJsLiBJc3N1ZSAjOFxuICB2YXIgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICBpZiAoIXBhcnNlZFVybC5ob3N0IHx8ICFwYXJzZWRVcmwucHJvdG9jb2wpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUaGUgVVJMICdcIiArIHVybCArIFwiJyBpcyBpbnZhbGlkXCIpO1xuICB9IGVsc2UgaWYgKHBhcnNlZFVybC5oYXNoKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdUaGUgVVJMIG11c3Qgbm90IGNvbnRhaW4gYSBmcmFnbWVudCcpO1xuICB9IGVsc2UgaWYgKHBhcnNlZFVybC5wcm90b2NvbCAhPT0gJ2h0dHA6JyAmJiBwYXJzZWRVcmwucHJvdG9jb2wgIT09ICdodHRwczonKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIFVSTCdzIHNjaGVtZSBtdXN0IGJlIGVpdGhlciAnaHR0cDonIG9yICdodHRwczonLiAnXCIgKyBwYXJzZWRVcmwucHJvdG9jb2wgKyBcIicgaXMgbm90IGFsbG93ZWQuXCIpO1xuICB9XG5cbiAgdmFyIHNlY3VyZSA9IHBhcnNlZFVybC5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XG4gIC8vIFN0ZXAgMiAtIGRvbid0IGFsbG93IHNlY3VyZSBvcmlnaW4gd2l0aCBhbiBpbnNlY3VyZSBwcm90b2NvbFxuICBpZiAobG9jLnByb3RvY29sID09PSAnaHR0cHM6JyAmJiAhc2VjdXJlKSB7XG4gICAgLy8gZXhjZXB0aW9uIGlzIDEyNy4wLjAuMC84IGFuZCA6OjEgdXJsc1xuICAgIGlmICghdXJsVXRpbHMuaXNMb29wYmFja0FkZHIocGFyc2VkVXJsLmhvc3RuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWN1cml0eUVycm9yOiBBbiBpbnNlY3VyZSBTb2NrSlMgY29ubmVjdGlvbiBtYXkgbm90IGJlIGluaXRpYXRlZCBmcm9tIGEgcGFnZSBsb2FkZWQgb3ZlciBIVFRQUycpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFN0ZXAgMyAtIGNoZWNrIHBvcnQgYWNjZXNzIC0gbm8gbmVlZCBoZXJlXG4gIC8vIFN0ZXAgNCAtIHBhcnNlIHByb3RvY29scyBhcmd1bWVudFxuICBpZiAoIXByb3RvY29scykge1xuICAgIHByb3RvY29scyA9IFtdO1xuICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHByb3RvY29scykpIHtcbiAgICBwcm90b2NvbHMgPSBbcHJvdG9jb2xzXTtcbiAgfVxuXG4gIC8vIFN0ZXAgNSAtIGNoZWNrIHByb3RvY29scyBhcmd1bWVudFxuICB2YXIgc29ydGVkUHJvdG9jb2xzID0gcHJvdG9jb2xzLnNvcnQoKTtcbiAgc29ydGVkUHJvdG9jb2xzLmZvckVhY2goZnVuY3Rpb24ocHJvdG8sIGkpIHtcbiAgICBpZiAoIXByb3RvKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUaGUgcHJvdG9jb2xzIGVudHJ5ICdcIiArIHByb3RvICsgXCInIGlzIGludmFsaWQuXCIpO1xuICAgIH1cbiAgICBpZiAoaSA8IChzb3J0ZWRQcm90b2NvbHMubGVuZ3RoIC0gMSkgJiYgcHJvdG8gPT09IHNvcnRlZFByb3RvY29sc1tpICsgMV0pIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIlRoZSBwcm90b2NvbHMgZW50cnkgJ1wiICsgcHJvdG8gKyBcIicgaXMgZHVwbGljYXRlZC5cIik7XG4gICAgfVxuICB9KTtcblxuICAvLyBTdGVwIDYgLSBjb252ZXJ0IG9yaWdpblxuICB2YXIgbyA9IHVybFV0aWxzLmdldE9yaWdpbihsb2MuaHJlZik7XG4gIHRoaXMuX29yaWdpbiA9IG8gPyBvLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xuXG4gIC8vIHJlbW92ZSB0aGUgdHJhaWxpbmcgc2xhc2hcbiAgcGFyc2VkVXJsLnNldCgncGF0aG5hbWUnLCBwYXJzZWRVcmwucGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCAnJykpO1xuXG4gIC8vIHN0b3JlIHRoZSBzYW5pdGl6ZWQgdXJsXG4gIHRoaXMudXJsID0gcGFyc2VkVXJsLmhyZWY7XG4gIGRlYnVnKCd1c2luZyB1cmwnLCB0aGlzLnVybCk7XG5cbiAgLy8gU3RlcCA3IC0gc3RhcnQgY29ubmVjdGlvbiBpbiBiYWNrZ3JvdW5kXG4gIC8vIG9idGFpbiBzZXJ2ZXIgaW5mb1xuICAvLyBodHRwOi8vc29ja2pzLmdpdGh1Yi5pby9zb2NranMtcHJvdG9jb2wvc29ja2pzLXByb3RvY29sLTAuMy4zLmh0bWwjc2VjdGlvbi0yNlxuICB0aGlzLl91cmxJbmZvID0ge1xuICAgIG51bGxPcmlnaW46ICFicm93c2VyLmhhc0RvbWFpbigpXG4gICwgc2FtZU9yaWdpbjogdXJsVXRpbHMuaXNPcmlnaW5FcXVhbCh0aGlzLnVybCwgbG9jLmhyZWYpXG4gICwgc2FtZVNjaGVtZTogdXJsVXRpbHMuaXNTY2hlbWVFcXVhbCh0aGlzLnVybCwgbG9jLmhyZWYpXG4gIH07XG5cbiAgdGhpcy5faXIgPSBuZXcgSW5mb1JlY2VpdmVyKHRoaXMudXJsLCB0aGlzLl91cmxJbmZvKTtcbiAgdGhpcy5faXIub25jZSgnZmluaXNoJywgdGhpcy5fcmVjZWl2ZUluZm8uYmluZCh0aGlzKSk7XG59XG5cbmluaGVyaXRzKFNvY2tKUywgRXZlbnRUYXJnZXQpO1xuXG5mdW5jdGlvbiB1c2VyU2V0Q29kZShjb2RlKSB7XG4gIHJldHVybiBjb2RlID09PSAxMDAwIHx8IChjb2RlID49IDMwMDAgJiYgY29kZSA8PSA0OTk5KTtcbn1cblxuU29ja0pTLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKGNvZGUsIHJlYXNvbikge1xuICAvLyBTdGVwIDFcbiAgaWYgKGNvZGUgJiYgIXVzZXJTZXRDb2RlKGNvZGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkQWNjZXNzRXJyb3I6IEludmFsaWQgY29kZScpO1xuICB9XG4gIC8vIFN0ZXAgMi40IHN0YXRlcyB0aGUgbWF4IGlzIDEyMyBieXRlcywgYnV0IHdlIGFyZSBqdXN0IGNoZWNraW5nIGxlbmd0aFxuICBpZiAocmVhc29uICYmIHJlYXNvbi5sZW5ndGggPiAxMjMpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ3JlYXNvbiBhcmd1bWVudCBoYXMgYW4gaW52YWxpZCBsZW5ndGgnKTtcbiAgfVxuXG4gIC8vIFN0ZXAgMy4xXG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DTE9TSU5HIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gU29ja0pTLkNMT1NFRCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRPRE8gbG9vayBhdCBkb2NzIHRvIGRldGVybWluZSBob3cgdG8gc2V0IHRoaXNcbiAgdmFyIHdhc0NsZWFuID0gdHJ1ZTtcbiAgdGhpcy5fY2xvc2UoY29kZSB8fCAxMDAwLCByZWFzb24gfHwgJ05vcm1hbCBjbG9zdXJlJywgd2FzQ2xlYW4pO1xufTtcblxuU29ja0pTLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oZGF0YSkge1xuICAvLyAjMTMgLSBjb252ZXJ0IGFueXRoaW5nIG5vbi1zdHJpbmcgdG8gc3RyaW5nXG4gIC8vIFRPRE8gdGhpcyBjdXJyZW50bHkgdHVybnMgb2JqZWN0cyBpbnRvIFtvYmplY3QgT2JqZWN0XVxuICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgZGF0YSA9ICcnICsgZGF0YTtcbiAgfVxuICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBTb2NrSlMuQ09OTkVDVElORykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZFN0YXRlRXJyb3I6IFRoZSBjb25uZWN0aW9uIGhhcyBub3QgYmVlbiBlc3RhYmxpc2hlZCB5ZXQnKTtcbiAgfVxuICBpZiAodGhpcy5yZWFkeVN0YXRlICE9PSBTb2NrSlMuT1BFTikge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLl90cmFuc3BvcnQuc2VuZChlc2NhcGUucXVvdGUoZGF0YSkpO1xufTtcblxuU29ja0pTLnZlcnNpb24gPSByZXF1aXJlKCcuL3ZlcnNpb24nKTtcblxuU29ja0pTLkNPTk5FQ1RJTkcgPSAwO1xuU29ja0pTLk9QRU4gPSAxO1xuU29ja0pTLkNMT1NJTkcgPSAyO1xuU29ja0pTLkNMT1NFRCA9IDM7XG5cblNvY2tKUy5wcm90b3R5cGUuX3JlY2VpdmVJbmZvID0gZnVuY3Rpb24oaW5mbywgcnR0KSB7XG4gIGRlYnVnKCdfcmVjZWl2ZUluZm8nLCBydHQpO1xuICB0aGlzLl9pciA9IG51bGw7XG4gIGlmICghaW5mbykge1xuICAgIHRoaXMuX2Nsb3NlKDEwMDIsICdDYW5ub3QgY29ubmVjdCB0byBzZXJ2ZXInKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBlc3RhYmxpc2ggYSByb3VuZC10cmlwIHRpbWVvdXQgKFJUTykgYmFzZWQgb24gdGhlXG4gIC8vIHJvdW5kLXRyaXAgdGltZSAoUlRUKVxuICB0aGlzLl9ydG8gPSB0aGlzLmNvdW50UlRPKHJ0dCk7XG4gIC8vIGFsbG93IHNlcnZlciB0byBvdmVycmlkZSB1cmwgdXNlZCBmb3IgdGhlIGFjdHVhbCB0cmFuc3BvcnRcbiAgdGhpcy5fdHJhbnNVcmwgPSBpbmZvLmJhc2VfdXJsID8gaW5mby5iYXNlX3VybCA6IHRoaXMudXJsO1xuICBpbmZvID0gb2JqZWN0VXRpbHMuZXh0ZW5kKGluZm8sIHRoaXMuX3VybEluZm8pO1xuICBkZWJ1ZygnaW5mbycsIGluZm8pO1xuICAvLyBkZXRlcm1pbmUgbGlzdCBvZiBkZXNpcmVkIGFuZCBzdXBwb3J0ZWQgdHJhbnNwb3J0c1xuICB2YXIgZW5hYmxlZFRyYW5zcG9ydHMgPSB0cmFuc3BvcnRzLmZpbHRlclRvRW5hYmxlZCh0aGlzLl90cmFuc3BvcnRzV2hpdGVsaXN0LCBpbmZvKTtcbiAgdGhpcy5fdHJhbnNwb3J0cyA9IGVuYWJsZWRUcmFuc3BvcnRzLm1haW47XG4gIGRlYnVnKHRoaXMuX3RyYW5zcG9ydHMubGVuZ3RoICsgJyBlbmFibGVkIHRyYW5zcG9ydHMnKTtcblxuICB0aGlzLl9jb25uZWN0KCk7XG59O1xuXG5Tb2NrSlMucHJvdG90eXBlLl9jb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIFRyYW5zcG9ydCA9IHRoaXMuX3RyYW5zcG9ydHMuc2hpZnQoKTsgVHJhbnNwb3J0OyBUcmFuc3BvcnQgPSB0aGlzLl90cmFuc3BvcnRzLnNoaWZ0KCkpIHtcbiAgICBkZWJ1ZygnYXR0ZW1wdCcsIFRyYW5zcG9ydC50cmFuc3BvcnROYW1lKTtcbiAgICBpZiAoVHJhbnNwb3J0Lm5lZWRCb2R5KSB7XG4gICAgICBpZiAoIWdsb2JhbC5kb2N1bWVudC5ib2R5IHx8XG4gICAgICAgICAgKHR5cGVvZiBnbG9iYWwuZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGdsb2JhbC5kb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnY29tcGxldGUnICYmXG4gICAgICAgICAgICBnbG9iYWwuZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2ludGVyYWN0aXZlJykpIHtcbiAgICAgICAgZGVidWcoJ3dhaXRpbmcgZm9yIGJvZHknKTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0cy51bnNoaWZ0KFRyYW5zcG9ydCk7XG4gICAgICAgIGV2ZW50VXRpbHMuYXR0YWNoRXZlbnQoJ2xvYWQnLCB0aGlzLl9jb25uZWN0LmJpbmQodGhpcykpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gY2FsY3VsYXRlIHRpbWVvdXQgYmFzZWQgb24gUlRPIGFuZCByb3VuZCB0cmlwcy4gRGVmYXVsdCB0byA1c1xuICAgIHZhciB0aW1lb3V0TXMgPSBNYXRoLm1heCh0aGlzLl90aW1lb3V0LCAodGhpcy5fcnRvICogVHJhbnNwb3J0LnJvdW5kVHJpcHMpIHx8IDUwMDApO1xuICAgIHRoaXMuX3RyYW5zcG9ydFRpbWVvdXRJZCA9IHNldFRpbWVvdXQodGhpcy5fdHJhbnNwb3J0VGltZW91dC5iaW5kKHRoaXMpLCB0aW1lb3V0TXMpO1xuICAgIGRlYnVnKCd1c2luZyB0aW1lb3V0JywgdGltZW91dE1zKTtcblxuICAgIHZhciB0cmFuc3BvcnRVcmwgPSB1cmxVdGlscy5hZGRQYXRoKHRoaXMuX3RyYW5zVXJsLCAnLycgKyB0aGlzLl9zZXJ2ZXIgKyAnLycgKyB0aGlzLl9nZW5lcmF0ZVNlc3Npb25JZCgpKTtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuX3RyYW5zcG9ydE9wdGlvbnNbVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWVdO1xuICAgIGRlYnVnKCd0cmFuc3BvcnQgdXJsJywgdHJhbnNwb3J0VXJsKTtcbiAgICB2YXIgdHJhbnNwb3J0T2JqID0gbmV3IFRyYW5zcG9ydCh0cmFuc3BvcnRVcmwsIHRoaXMuX3RyYW5zVXJsLCBvcHRpb25zKTtcbiAgICB0cmFuc3BvcnRPYmoub24oJ21lc3NhZ2UnLCB0aGlzLl90cmFuc3BvcnRNZXNzYWdlLmJpbmQodGhpcykpO1xuICAgIHRyYW5zcG9ydE9iai5vbmNlKCdjbG9zZScsIHRoaXMuX3RyYW5zcG9ydENsb3NlLmJpbmQodGhpcykpO1xuICAgIHRyYW5zcG9ydE9iai50cmFuc3BvcnROYW1lID0gVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWU7XG4gICAgdGhpcy5fdHJhbnNwb3J0ID0gdHJhbnNwb3J0T2JqO1xuXG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuX2Nsb3NlKDIwMDAsICdBbGwgdHJhbnNwb3J0cyBmYWlsZWQnLCBmYWxzZSk7XG59O1xuXG5Tb2NrSlMucHJvdG90eXBlLl90cmFuc3BvcnRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfdHJhbnNwb3J0VGltZW91dCcpO1xuICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBTb2NrSlMuQ09OTkVDVElORykge1xuICAgIGlmICh0aGlzLl90cmFuc3BvcnQpIHtcbiAgICAgIHRoaXMuX3RyYW5zcG9ydC5jbG9zZSgpO1xuICAgIH1cblxuICAgIHRoaXMuX3RyYW5zcG9ydENsb3NlKDIwMDcsICdUcmFuc3BvcnQgdGltZWQgb3V0Jyk7XG4gIH1cbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX3RyYW5zcG9ydE1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpIHtcbiAgZGVidWcoJ190cmFuc3BvcnRNZXNzYWdlJywgbXNnKTtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gICAgLCB0eXBlID0gbXNnLnNsaWNlKDAsIDEpXG4gICAgLCBjb250ZW50ID0gbXNnLnNsaWNlKDEpXG4gICAgLCBwYXlsb2FkXG4gICAgO1xuXG4gIC8vIGZpcnN0IGNoZWNrIGZvciBtZXNzYWdlcyB0aGF0IGRvbid0IG5lZWQgYSBwYXlsb2FkXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ28nOlxuICAgICAgdGhpcy5fb3BlbigpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ2gnOlxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaGVhcnRiZWF0JykpO1xuICAgICAgZGVidWcoJ2hlYXJ0YmVhdCcsIHRoaXMudHJhbnNwb3J0KTtcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjb250ZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIHBheWxvYWQgPSBKU09OLnBhcnNlKGNvbnRlbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRlYnVnKCdiYWQganNvbicsIGNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkZWJ1ZygnZW1wdHkgcGF5bG9hZCcsIGNvbnRlbnQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2EnOlxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGF5bG9hZCkpIHtcbiAgICAgICAgcGF5bG9hZC5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICBkZWJ1ZygnbWVzc2FnZScsIHNlbGYudHJhbnNwb3J0LCBwKTtcbiAgICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQobmV3IFRyYW5zcG9ydE1lc3NhZ2VFdmVudChwKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbSc6XG4gICAgICBkZWJ1ZygnbWVzc2FnZScsIHRoaXMudHJhbnNwb3J0LCBwYXlsb2FkKTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgVHJhbnNwb3J0TWVzc2FnZUV2ZW50KHBheWxvYWQpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2MnOlxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGF5bG9hZCkgJiYgcGF5bG9hZC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdGhpcy5fY2xvc2UocGF5bG9hZFswXSwgcGF5bG9hZFsxXSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuU29ja0pTLnByb3RvdHlwZS5fdHJhbnNwb3J0Q2xvc2UgPSBmdW5jdGlvbihjb2RlLCByZWFzb24pIHtcbiAgZGVidWcoJ190cmFuc3BvcnRDbG9zZScsIHRoaXMudHJhbnNwb3J0LCBjb2RlLCByZWFzb24pO1xuICBpZiAodGhpcy5fdHJhbnNwb3J0KSB7XG4gICAgdGhpcy5fdHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIHRoaXMuX3RyYW5zcG9ydCA9IG51bGw7XG4gICAgdGhpcy50cmFuc3BvcnQgPSBudWxsO1xuICB9XG5cbiAgaWYgKCF1c2VyU2V0Q29kZShjb2RlKSAmJiBjb2RlICE9PSAyMDAwICYmIHRoaXMucmVhZHlTdGF0ZSA9PT0gU29ja0pTLkNPTk5FQ1RJTkcpIHtcbiAgICB0aGlzLl9jb25uZWN0KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5fY2xvc2UoY29kZSwgcmVhc29uKTtcbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX29wZW4gPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19vcGVuJywgdGhpcy5fdHJhbnNwb3J0ICYmIHRoaXMuX3RyYW5zcG9ydC50cmFuc3BvcnROYW1lLCB0aGlzLnJlYWR5U3RhdGUpO1xuICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBTb2NrSlMuQ09OTkVDVElORykge1xuICAgIGlmICh0aGlzLl90cmFuc3BvcnRUaW1lb3V0SWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90cmFuc3BvcnRUaW1lb3V0SWQpO1xuICAgICAgdGhpcy5fdHJhbnNwb3J0VGltZW91dElkID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU29ja0pTLk9QRU47XG4gICAgdGhpcy50cmFuc3BvcnQgPSB0aGlzLl90cmFuc3BvcnQudHJhbnNwb3J0TmFtZTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdvcGVuJykpO1xuICAgIGRlYnVnKCdjb25uZWN0ZWQnLCB0aGlzLnRyYW5zcG9ydCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIHNlcnZlciBtaWdodCBoYXZlIGJlZW4gcmVzdGFydGVkLCBhbmQgbG9zdCB0cmFjayBvZiBvdXJcbiAgICAvLyBjb25uZWN0aW9uLlxuICAgIHRoaXMuX2Nsb3NlKDEwMDYsICdTZXJ2ZXIgbG9zdCBzZXNzaW9uJyk7XG4gIH1cbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX2Nsb3NlID0gZnVuY3Rpb24oY29kZSwgcmVhc29uLCB3YXNDbGVhbikge1xuICBkZWJ1ZygnX2Nsb3NlJywgdGhpcy50cmFuc3BvcnQsIGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4sIHRoaXMucmVhZHlTdGF0ZSk7XG4gIHZhciBmb3JjZUZhaWwgPSBmYWxzZTtcblxuICBpZiAodGhpcy5faXIpIHtcbiAgICBmb3JjZUZhaWwgPSB0cnVlO1xuICAgIHRoaXMuX2lyLmNsb3NlKCk7XG4gICAgdGhpcy5faXIgPSBudWxsO1xuICB9XG4gIGlmICh0aGlzLl90cmFuc3BvcnQpIHtcbiAgICB0aGlzLl90cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB0aGlzLl90cmFuc3BvcnQgPSBudWxsO1xuICAgIHRoaXMudHJhbnNwb3J0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DTE9TRUQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yOiBTb2NrSlMgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQnKTtcbiAgfVxuXG4gIHRoaXMucmVhZHlTdGF0ZSA9IFNvY2tKUy5DTE9TSU5HO1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNvY2tKUy5DTE9TRUQ7XG5cbiAgICBpZiAoZm9yY2VGYWlsKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdlcnJvcicpKTtcbiAgICB9XG5cbiAgICB2YXIgZSA9IG5ldyBDbG9zZUV2ZW50KCdjbG9zZScpO1xuICAgIGUud2FzQ2xlYW4gPSB3YXNDbGVhbiB8fCBmYWxzZTtcbiAgICBlLmNvZGUgPSBjb2RlIHx8IDEwMDA7XG4gICAgZS5yZWFzb24gPSByZWFzb247XG5cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgdGhpcy5vbm1lc3NhZ2UgPSB0aGlzLm9uY2xvc2UgPSB0aGlzLm9uZXJyb3IgPSBudWxsO1xuICAgIGRlYnVnKCdkaXNjb25uZWN0ZWQnKTtcbiAgfS5iaW5kKHRoaXMpLCAwKTtcbn07XG5cbi8vIFNlZTogaHR0cDovL3d3dy5lcmcuYWJkbi5hYy51ay9+Z2Vycml0L2RjY3Avbm90ZXMvY2NpZDIvcnRvX2VzdGltYXRvci9cbi8vIGFuZCBSRkMgMjk4OC5cblNvY2tKUy5wcm90b3R5cGUuY291bnRSVE8gPSBmdW5jdGlvbihydHQpIHtcbiAgLy8gSW4gYSBsb2NhbCBlbnZpcm9ubWVudCwgd2hlbiB1c2luZyBJRTgvOSBhbmQgdGhlIGBqc29ucC1wb2xsaW5nYFxuICAvLyB0cmFuc3BvcnQgdGhlIHRpbWUgbmVlZGVkIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gKHRoZSB0aW1lIHRoYXQgcGFzc1xuICAvLyBmcm9tIHRoZSBvcGVuaW5nIG9mIHRoZSB0cmFuc3BvcnQgdG8gdGhlIGNhbGwgb2YgYF9kaXNwYXRjaE9wZW5gKSBpc1xuICAvLyBhcm91bmQgMjAwbXNlYyAodGhlIGxvd2VyIGJvdW5kIHVzZWQgaW4gdGhlIGFydGljbGUgYWJvdmUpIGFuZCB0aGlzXG4gIC8vIGNhdXNlcyBzcHVyaW91cyB0aW1lb3V0cy4gRm9yIHRoaXMgcmVhc29uIHdlIGNhbGN1bGF0ZSBhIHZhbHVlIHNsaWdodGx5XG4gIC8vIGxhcmdlciB0aGFuIHRoYXQgdXNlZCBpbiB0aGUgYXJ0aWNsZS5cbiAgaWYgKHJ0dCA+IDEwMCkge1xuICAgIHJldHVybiA0ICogcnR0OyAvLyBydG8gPiA0MDBtc2VjXG4gIH1cbiAgcmV0dXJuIDMwMCArIHJ0dDsgLy8gMzAwbXNlYyA8IHJ0byA8PSA0MDBtc2VjXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGF2YWlsYWJsZVRyYW5zcG9ydHMpIHtcbiAgdHJhbnNwb3J0cyA9IHRyYW5zcG9ydChhdmFpbGFibGVUcmFuc3BvcnRzKTtcbiAgcmVxdWlyZSgnLi9pZnJhbWUtYm9vdHN0cmFwJykoU29ja0pTLCBhdmFpbGFibGVUcmFuc3BvcnRzKTtcbiAgcmV0dXJuIFNvY2tKUztcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoganNjczogZGlzYWJsZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBwdWxsZWQgc3BlY2lmaWMgc2hpbXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cblxudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgU3RyaW5nUHJvdG90eXBlID0gU3RyaW5nLnByb3RvdHlwZTtcbnZhciBhcnJheV9zbGljZSA9IEFycmF5UHJvdG90eXBlLnNsaWNlO1xuXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIE9iamVjdFByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xudmFyIGlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KG9iaikge1xuICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbnZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKG9iaikge1xuICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJztcbn07XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIChmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHt9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkgeyAvKiB0aGlzIGlzIEVTMyAqL1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufSgpKTtcblxuLy8gRGVmaW5lIGNvbmZpZ3VyYWJsZSwgd3JpdGFibGUgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BzXG4vLyBpZiB0aGV5IGRvbid0IGV4aXN0LlxudmFyIGRlZmluZVByb3BlcnR5O1xuaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgaWYgKCFmb3JjZUFzc2lnbiAmJiAobmFtZSBpbiBvYmplY3QpKSB7IHJldHVybjsgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG1ldGhvZFxuICAgICAgICB9KTtcbiAgICB9O1xufSBlbHNlIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgaWYgKCFmb3JjZUFzc2lnbiAmJiAobmFtZSBpbiBvYmplY3QpKSB7IHJldHVybjsgfVxuICAgICAgICBvYmplY3RbbmFtZV0gPSBtZXRob2Q7XG4gICAgfTtcbn1cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwLCBmb3JjZUFzc2lnbikge1xuICAgIGZvciAodmFyIG5hbWUgaW4gbWFwKSB7XG4gICAgICAgIGlmIChPYmplY3RQcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtYXAsIG5hbWUpKSB7XG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCBtYXBbbmFtZV0sIGZvcmNlQXNzaWduKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciB0b09iamVjdCA9IGZ1bmN0aW9uIChvKSB7XG4gICAgaWYgKG8gPT0gbnVsbCkgeyAvLyB0aGlzIG1hdGNoZXMgYm90aCBudWxsIGFuZCB1bmRlZmluZWRcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbid0IGNvbnZlcnQgXCIgKyBvICsgJyB0byBvYmplY3QnKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdChvKTtcbn07XG5cbi8vXG4vLyBVdGlsXG4vLyA9PT09PT1cbi8vXG5cbi8vIEVTNSA5LjRcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDkuNFxuLy8gaHR0cDovL2pzcGVyZi5jb20vdG8taW50ZWdlclxuXG5mdW5jdGlvbiB0b0ludGVnZXIobnVtKSB7XG4gICAgdmFyIG4gPSArbnVtO1xuICAgIGlmIChuICE9PSBuKSB7IC8vIGlzTmFOXG4gICAgICAgIG4gPSAwO1xuICAgIH0gZWxzZSBpZiAobiAhPT0gMCAmJiBuICE9PSAoMSAvIDApICYmIG4gIT09IC0oMSAvIDApKSB7XG4gICAgICAgIG4gPSAobiA+IDAgfHwgLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSk7XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuXG5mdW5jdGlvbiBUb1VpbnQzMih4KSB7XG4gICAgcmV0dXJuIHggPj4+IDA7XG59XG5cbi8vXG4vLyBGdW5jdGlvblxuLy8gPT09PT09PT1cbi8vXG5cbi8vIEVTLTUgMTUuMy40LjVcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjMuNC41XG5cbmZ1bmN0aW9uIEVtcHR5KCkge31cblxuZGVmaW5lUHJvcGVydGllcyhGdW5jdGlvblByb3RvdHlwZSwge1xuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQodGhhdCkgeyAvLyAubGVuZ3RoIGlzIDFcbiAgICAgICAgLy8gMS4gTGV0IFRhcmdldCBiZSB0aGUgdGhpcyB2YWx1ZS5cbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgICAgIC8vIDIuIElmIElzQ2FsbGFibGUoVGFyZ2V0KSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24odGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnICsgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLiBMZXQgQSBiZSBhIG5ldyAocG9zc2libHkgZW1wdHkpIGludGVybmFsIGxpc3Qgb2YgYWxsIG9mIHRoZVxuICAgICAgICAvLyAgIGFyZ3VtZW50IHZhbHVlcyBwcm92aWRlZCBhZnRlciB0aGlzQXJnIChhcmcxLCBhcmcyIGV0YyksIGluIG9yZGVyLlxuICAgICAgICAvLyBYWFggc2xpY2VkQXJncyB3aWxsIHN0YW5kIGluIGZvciBcIkFcIiBpZiB1c2VkXG4gICAgICAgIHZhciBhcmdzID0gYXJyYXlfc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOyAvLyBmb3Igbm9ybWFsIGNhbGxcbiAgICAgICAgLy8gNC4gTGV0IEYgYmUgYSBuZXcgbmF0aXZlIEVDTUFTY3JpcHQgb2JqZWN0LlxuICAgICAgICAvLyAxMS4gU2V0IHRoZSBbW1Byb3RvdHlwZV1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgdG8gdGhlIHN0YW5kYXJkXG4gICAgICAgIC8vICAgYnVpbHQtaW4gRnVuY3Rpb24gcHJvdG90eXBlIG9iamVjdCBhcyBzcGVjaWZpZWQgaW4gMTUuMy4zLjEuXG4gICAgICAgIC8vIDEyLiBTZXQgdGhlIFtbQ2FsbF1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgIC8vICAgMTUuMy40LjUuMS5cbiAgICAgICAgLy8gMTMuIFNldCB0aGUgW1tDb25zdHJ1Y3RdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICAvLyAgIDE1LjMuNC41LjIuXG4gICAgICAgIC8vIDE0LiBTZXQgdGhlIFtbSGFzSW5zdGFuY2VdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICAvLyAgIDE1LjMuNC41LjMuXG4gICAgICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgICAgICAvLyAxNS4zLjQuNS4yIFtbQ29uc3RydWN0XV1cbiAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCBvZiBhIGZ1bmN0aW9uIG9iamVjdCxcbiAgICAgICAgICAgICAgICAvLyBGIHRoYXQgd2FzIGNyZWF0ZWQgdXNpbmcgdGhlIGJpbmQgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYVxuICAgICAgICAgICAgICAgIC8vIGxpc3Qgb2YgYXJndW1lbnRzIEV4dHJhQXJncywgdGhlIGZvbGxvd2luZyBzdGVwcyBhcmUgdGFrZW46XG4gICAgICAgICAgICAgICAgLy8gMS4gTGV0IHRhcmdldCBiZSB0aGUgdmFsdWUgb2YgRidzIFtbVGFyZ2V0RnVuY3Rpb25dXVxuICAgICAgICAgICAgICAgIC8vICAgaW50ZXJuYWwgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgLy8gMi4gSWYgdGFyZ2V0IGhhcyBubyBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCwgYVxuICAgICAgICAgICAgICAgIC8vICAgVHlwZUVycm9yIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gICAgICAgICAgICAgICAgLy8gMy4gTGV0IGJvdW5kQXJncyBiZSB0aGUgdmFsdWUgb2YgRidzIFtbQm91bmRBcmdzXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIC8vICAgdmFsdWVzIGFzIHRoZSBsaXN0IEV4dHJhQXJncyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsXG4gICAgICAgICAgICAgICAgLy8gICBtZXRob2Qgb2YgdGFyZ2V0IHByb3ZpZGluZyBhcmdzIGFzIHRoZSBhcmd1bWVudHMuXG5cbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChhcnJheV9zbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAxNS4zLjQuNS4xIFtbQ2FsbF1dXG4gICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgW1tDYWxsXV0gaW50ZXJuYWwgbWV0aG9kIG9mIGEgZnVuY3Rpb24gb2JqZWN0LCBGLFxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIHdhcyBjcmVhdGVkIHVzaW5nIHRoZSBiaW5kIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFcbiAgICAgICAgICAgICAgICAvLyB0aGlzIHZhbHVlIGFuZCBhIGxpc3Qgb2YgYXJndW1lbnRzIEV4dHJhQXJncywgdGhlIGZvbGxvd2luZ1xuICAgICAgICAgICAgICAgIC8vIHN0ZXBzIGFyZSB0YWtlbjpcbiAgICAgICAgICAgICAgICAvLyAxLiBMZXQgYm91bmRBcmdzIGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tCb3VuZEFyZ3NdXSBpbnRlcm5hbFxuICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgLy8gMi4gTGV0IGJvdW5kVGhpcyBiZSB0aGUgdmFsdWUgb2YgRidzIFtbQm91bmRUaGlzXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDMuIExldCB0YXJnZXQgYmUgdGhlIHZhbHVlIG9mIEYncyBbW1RhcmdldEZ1bmN0aW9uXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIC8vICAgdmFsdWVzIGFzIHRoZSBsaXN0IEV4dHJhQXJncyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2RcbiAgICAgICAgICAgICAgICAvLyAgIG9mIHRhcmdldCBwcm92aWRpbmcgYm91bmRUaGlzIGFzIHRoZSB0aGlzIHZhbHVlIGFuZFxuICAgICAgICAgICAgICAgIC8vICAgcHJvdmlkaW5nIGFyZ3MgYXMgdGhlIGFyZ3VtZW50cy5cblxuICAgICAgICAgICAgICAgIC8vIGVxdWl2OiB0YXJnZXQuY2FsbCh0aGlzLCAuLi5ib3VuZEFyZ3MsIC4uLmFyZ3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICAgICAgYXJncy5jb25jYXQoYXJyYXlfc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIDE1LiBJZiB0aGUgW1tDbGFzc11dIGludGVybmFsIHByb3BlcnR5IG9mIFRhcmdldCBpcyBcIkZ1bmN0aW9uXCIsIHRoZW5cbiAgICAgICAgLy8gICAgIGEuIExldCBMIGJlIHRoZSBsZW5ndGggcHJvcGVydHkgb2YgVGFyZ2V0IG1pbnVzIHRoZSBsZW5ndGggb2YgQS5cbiAgICAgICAgLy8gICAgIGIuIFNldCB0aGUgbGVuZ3RoIG93biBwcm9wZXJ0eSBvZiBGIHRvIGVpdGhlciAwIG9yIEwsIHdoaWNoZXZlciBpc1xuICAgICAgICAvLyAgICAgICBsYXJnZXIuXG4gICAgICAgIC8vIDE2LiBFbHNlIHNldCB0aGUgbGVuZ3RoIG93biBwcm9wZXJ0eSBvZiBGIHRvIDAuXG5cbiAgICAgICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcblxuICAgICAgICAvLyAxNy4gU2V0IHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBsZW5ndGggb3duIHByb3BlcnR5IG9mIEYgdG8gdGhlIHZhbHVlc1xuICAgICAgICAvLyAgIHNwZWNpZmllZCBpbiAxNS4zLjUuMS5cbiAgICAgICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWFhYIEJ1aWxkIGEgZHluYW1pYyBmdW5jdGlvbiB3aXRoIGRlc2lyZWQgYW1vdW50IG9mIGFyZ3VtZW50cyBpcyB0aGUgb25seVxuICAgICAgICAvLyB3YXkgdG8gc2V0IHRoZSBsZW5ndGggcHJvcGVydHkgb2YgYSBmdW5jdGlvbi5cbiAgICAgICAgLy8gSW4gZW52aXJvbm1lbnRzIHdoZXJlIENvbnRlbnQgU2VjdXJpdHkgUG9saWNpZXMgZW5hYmxlZCAoQ2hyb21lIGV4dGVuc2lvbnMsXG4gICAgICAgIC8vIGZvciBleC4pIGFsbCB1c2Ugb2YgZXZhbCBvciBGdW5jdGlvbiBjb3N0cnVjdG9yIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICAgIC8vIEhvd2V2ZXIgaW4gYWxsIG9mIHRoZXNlIGVudmlyb25tZW50cyBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBleGlzdHNcbiAgICAgICAgLy8gYW5kIHNvIHRoaXMgY29kZSB3aWxsIG5ldmVyIGJlIGV4ZWN1dGVkLlxuICAgICAgICB2YXIgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgICAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgZGFuZ2xpbmcgcmVmZXJlbmNlcy5cbiAgICAgICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPXG4gICAgICAgIC8vIDE4LiBTZXQgdGhlIFtbRXh0ZW5zaWJsZV1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgdG8gdHJ1ZS5cblxuICAgICAgICAvLyBUT0RPXG4gICAgICAgIC8vIDE5LiBMZXQgdGhyb3dlciBiZSB0aGUgW1tUaHJvd1R5cGVFcnJvcl1dIGZ1bmN0aW9uIE9iamVjdCAoMTMuMi4zKS5cbiAgICAgICAgLy8gMjAuIENhbGwgdGhlIFtbRGVmaW5lT3duUHJvcGVydHldXSBpbnRlcm5hbCBtZXRob2Qgb2YgRiB3aXRoXG4gICAgICAgIC8vICAgYXJndW1lbnRzIFwiY2FsbGVyXCIsIFByb3BlcnR5RGVzY3JpcHRvciB7W1tHZXRdXTogdGhyb3dlciwgW1tTZXRdXTpcbiAgICAgICAgLy8gICB0aHJvd2VyLCBbW0VudW1lcmFibGVdXTogZmFsc2UsIFtbQ29uZmlndXJhYmxlXV06IGZhbHNlfSwgYW5kXG4gICAgICAgIC8vICAgZmFsc2UuXG4gICAgICAgIC8vIDIxLiBDYWxsIHRoZSBbW0RlZmluZU93blByb3BlcnR5XV0gaW50ZXJuYWwgbWV0aG9kIG9mIEYgd2l0aFxuICAgICAgICAvLyAgIGFyZ3VtZW50cyBcImFyZ3VtZW50c1wiLCBQcm9wZXJ0eURlc2NyaXB0b3Ige1tbR2V0XV06IHRocm93ZXIsXG4gICAgICAgIC8vICAgW1tTZXRdXTogdGhyb3dlciwgW1tFbnVtZXJhYmxlXV06IGZhbHNlLCBbW0NvbmZpZ3VyYWJsZV1dOiBmYWxzZX0sXG4gICAgICAgIC8vICAgYW5kIGZhbHNlLlxuXG4gICAgICAgIC8vIFRPRE9cbiAgICAgICAgLy8gTk9URSBGdW5jdGlvbiBvYmplY3RzIGNyZWF0ZWQgdXNpbmcgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgZG8gbm90XG4gICAgICAgIC8vIGhhdmUgYSBwcm90b3R5cGUgcHJvcGVydHkgb3IgdGhlIFtbQ29kZV1dLCBbW0Zvcm1hbFBhcmFtZXRlcnNdXSwgYW5kXG4gICAgICAgIC8vIFtbU2NvcGVdXSBpbnRlcm5hbCBwcm9wZXJ0aWVzLlxuICAgICAgICAvLyBYWFggY2FuJ3QgZGVsZXRlIHByb3RvdHlwZSBpbiBwdXJlLWpzLlxuXG4gICAgICAgIC8vIDIyLiBSZXR1cm4gRi5cbiAgICAgICAgcmV0dXJuIGJvdW5kO1xuICAgIH1cbn0pO1xuXG4vL1xuLy8gQXJyYXlcbi8vID09PT09XG4vL1xuXG4vLyBFUzUgMTUuNC4zLjJcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuMy4yXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pc0FycmF5XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5LCB7IGlzQXJyYXk6IGlzQXJyYXkgfSk7XG5cblxudmFyIGJveGVkU3RyaW5nID0gT2JqZWN0KCdhJyk7XG52YXIgc3BsaXRTdHJpbmcgPSBib3hlZFN0cmluZ1swXSAhPT0gJ2EnIHx8ICEoMCBpbiBib3hlZFN0cmluZyk7XG5cbnZhciBwcm9wZXJseUJveGVzQ29udGV4dCA9IGZ1bmN0aW9uIHByb3Blcmx5Qm94ZWQobWV0aG9kKSB7XG4gICAgLy8gQ2hlY2sgbm9kZSAwLjYuMjEgYnVnIHdoZXJlIHRoaXJkIHBhcmFtZXRlciBpcyBub3QgYm94ZWRcbiAgICB2YXIgcHJvcGVybHlCb3hlc05vblN0cmljdCA9IHRydWU7XG4gICAgdmFyIHByb3Blcmx5Qm94ZXNTdHJpY3QgPSB0cnVlO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgICAgbWV0aG9kLmNhbGwoJ2ZvbycsIGZ1bmN0aW9uIChfLCBfXywgY29udGV4dCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnb2JqZWN0JykgeyBwcm9wZXJseUJveGVzTm9uU3RyaWN0ID0gZmFsc2U7IH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWV0aG9kLmNhbGwoWzFdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgICAgICBwcm9wZXJseUJveGVzU3RyaWN0ID0gdHlwZW9mIHRoaXMgPT09ICdzdHJpbmcnO1xuICAgICAgICB9LCAneCcpO1xuICAgIH1cbiAgICByZXR1cm4gISFtZXRob2QgJiYgcHJvcGVybHlCb3hlc05vblN0cmljdCAmJiBwcm9wZXJseUJveGVzU3RyaWN0O1xufTtcblxuZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZnVuIC8qLCB0aGlzcCovKSB7XG4gICAgICAgIHZhciBvYmplY3QgPSB0b09iamVjdCh0aGlzKSxcbiAgICAgICAgICAgIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHRoaXMuc3BsaXQoJycpIDogb2JqZWN0LFxuICAgICAgICAgICAgdGhpc3AgPSBhcmd1bWVudHNbMV0sXG4gICAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzZWxmLmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpOyAvLyBUT0RPIG1lc3NhZ2VcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlICgrK2kgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChpIGluIHNlbGYpIHtcbiAgICAgICAgICAgICAgICAvLyBJbnZva2UgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpdGggY2FsbCwgcGFzc2luZyBhcmd1bWVudHM6XG4gICAgICAgICAgICAgICAgLy8gY29udGV4dCwgcHJvcGVydHkgdmFsdWUsIHByb3BlcnR5IGtleSwgdGhpc0FyZyBvYmplY3RcbiAgICAgICAgICAgICAgICAvLyBjb250ZXh0XG4gICAgICAgICAgICAgICAgZnVuLmNhbGwodGhpc3AsIHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59LCAhcHJvcGVybHlCb3hlc0NvbnRleHQoQXJyYXlQcm90b3R5cGUuZm9yRWFjaCkpO1xuXG4vLyBFUzUgMTUuNC40LjE0XG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTRcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2ZcbnZhciBoYXNGaXJlZm94MkluZGV4T2ZCdWcgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiAmJiBbMCwgMV0uaW5kZXhPZigxLCAyKSAhPT0gLTE7XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzb3VnaHQgLyosIGZyb21JbmRleCAqLyApIHtcbiAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHRoaXMuc3BsaXQoJycpIDogdG9PYmplY3QodGhpcyksXG4gICAgICAgICAgICBsZW5ndGggPSBzZWxmLmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGkgPSB0b0ludGVnZXIoYXJndW1lbnRzWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhbmRsZSBuZWdhdGl2ZSBpbmRpY2VzXG4gICAgICAgIGkgPSBpID49IDAgPyBpIDogTWF0aC5tYXgoMCwgbGVuZ3RoICsgaSk7XG4gICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIGluIHNlbGYgJiYgc2VsZltpXSA9PT0gc291Z2h0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbn0sIGhhc0ZpcmVmb3gySW5kZXhPZkJ1Zyk7XG5cbi8vXG4vLyBTdHJpbmdcbi8vID09PT09PVxuLy9cblxuLy8gRVM1IDE1LjUuNC4xNFxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNS40LjE0XG5cbi8vIFtidWdmaXgsIElFIGx0IDksIGZpcmVmb3ggNCwgS29ucXVlcm9yLCBPcGVyYSwgb2JzY3VyZSBicm93c2Vyc11cbi8vIE1hbnkgYnJvd3NlcnMgZG8gbm90IHNwbGl0IHByb3Blcmx5IHdpdGggcmVndWxhciBleHByZXNzaW9ucyBvciB0aGV5XG4vLyBkbyBub3QgcGVyZm9ybSB0aGUgc3BsaXQgY29ycmVjdGx5IHVuZGVyIG9ic2N1cmUgY29uZGl0aW9ucy5cbi8vIFNlZSBodHRwOi8vYmxvZy5zdGV2ZW5sZXZpdGhhbi5jb20vYXJjaGl2ZXMvY3Jvc3MtYnJvd3Nlci1zcGxpdFxuLy8gSSd2ZSB0ZXN0ZWQgaW4gbWFueSBicm93c2VycyBhbmQgdGhpcyBzZWVtcyB0byBjb3ZlciB0aGUgZGV2aWFudCBvbmVzOlxuLy8gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pIHNob3VsZCBiZSBbXCJcIiwgXCJcIl0sIG5vdCBbXCJcIl1cbi8vICAgICcuJy5zcGxpdCgvKC4/KSguPykvKSBzaG91bGQgYmUgW1wiXCIsIFwiLlwiLCBcIlwiLCBcIlwiXSwgbm90IFtcIlwiLCBcIlwiXVxuLy8gICAgJ3Rlc3N0Jy5zcGxpdCgvKHMpKi8pIHNob3VsZCBiZSBbXCJ0XCIsIHVuZGVmaW5lZCwgXCJlXCIsIFwic1wiLCBcInRcIl0sIG5vdFxuLy8gICAgICAgW3VuZGVmaW5lZCwgXCJ0XCIsIHVuZGVmaW5lZCwgXCJlXCIsIC4uLl1cbi8vICAgICcnLnNwbGl0KC8uPy8pIHNob3VsZCBiZSBbXSwgbm90IFtcIlwiXVxuLy8gICAgJy4nLnNwbGl0KC8oKSgpLykgc2hvdWxkIGJlIFtcIi5cIl0sIG5vdCBbXCJcIiwgXCJcIiwgXCIuXCJdXG5cbnZhciBzdHJpbmdfc3BsaXQgPSBTdHJpbmdQcm90b3R5cGUuc3BsaXQ7XG5pZiAoXG4gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT09IDQgfHxcbiAgICAndGVzc3QnLnNwbGl0KC8ocykqLylbMV0gPT09ICd0JyB8fFxuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT09IDQgfHxcbiAgICAnJy5zcGxpdCgvLj8vKS5sZW5ndGggfHxcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxXG4pIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29tcGxpYW50RXhlY05wY2cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHZvaWQgMDsgLy8gTlBDRzogbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcblxuICAgICAgICBTdHJpbmdQcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgICAgICAgdmFyIHN0cmluZyA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoc2VwYXJhdG9yID09PSB2b2lkIDAgJiYgbGltaXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICAgICAgICBpZiAoX3RvU3RyaW5nLmNhbGwoc2VwYXJhdG9yKSAhPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBbXSxcbiAgICAgICAgICAgICAgICBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSAgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5leHRlbmRlZCAgID8gJ3gnIDogJycpICsgLy8gUHJvcG9zZWQgZm9yIEVTNlxuICAgICAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgICAgID8gJ3knIDogJycpLCAvLyBGaXJlZm94IDMrXG4gICAgICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IDAsXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICAgICAgICBzdHJpbmcgKz0gJyc7IC8vIFR5cGUtY29udmVydFxuICAgICAgICAgICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZykge1xuICAgICAgICAgICAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgICAgICAgICAgIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvci5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIFZhbHVlcyBmb3IgYGxpbWl0YCwgcGVyIHRoZSBzcGVjOlxuICAgICAgICAgICAgICogSWYgdW5kZWZpbmVkOiA0Mjk0OTY3Mjk1IC8vIE1hdGgucG93KDIsIDMyKSAtIDFcbiAgICAgICAgICAgICAqIElmIDAsIEluZmluaXR5LCBvciBOYU46IDBcbiAgICAgICAgICAgICAqIElmIHBvc2l0aXZlIG51bWJlcjogbGltaXQgPSBNYXRoLmZsb29yKGxpbWl0KTsgaWYgKGxpbWl0ID4gNDI5NDk2NzI5NSkgbGltaXQgLT0gNDI5NDk2NzI5NjtcbiAgICAgICAgICAgICAqIElmIG5lZ2F0aXZlIG51bWJlcjogNDI5NDk2NzI5NiAtIE1hdGguZmxvb3IoTWF0aC5hYnMobGltaXQpKVxuICAgICAgICAgICAgICogSWYgb3RoZXI6IFR5cGUtY29udmVydCwgdGhlbiB1c2UgdGhlIGFib3ZlIHJ1bGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxpbWl0ID0gbGltaXQgPT09IHZvaWQgMCA/XG4gICAgICAgICAgICAgICAgLTEgPj4+IDAgOiAvLyBNYXRoLnBvdygyLCAzMikgLSAxXG4gICAgICAgICAgICAgICAgVG9VaW50MzIobGltaXQpO1xuICAgICAgICAgICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIC8vIGBzZXBhcmF0b3IubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3JcbiAgICAgICAgICAgICAgICAgICAgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBzXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29tcGxpYW50RXhlY05wY2cgJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbaV0gPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5UHJvdG90eXBlLnB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZXBhcmF0b3IubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3IubGFzdEluZGV4Kys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3IudGVzdCgnJykpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgbGltaXQpIDogb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH0oKSk7XG5cbi8vIFtidWdmaXgsIGNocm9tZV1cbi8vIElmIHNlcGFyYXRvciBpcyB1bmRlZmluZWQsIHRoZW4gdGhlIHJlc3VsdCBhcnJheSBjb250YWlucyBqdXN0IG9uZSBTdHJpbmcsXG4vLyB3aGljaCBpcyB0aGUgdGhpcyB2YWx1ZSAoY29udmVydGVkIHRvIGEgU3RyaW5nKS4gSWYgbGltaXQgaXMgbm90IHVuZGVmaW5lZCxcbi8vIHRoZW4gdGhlIG91dHB1dCBhcnJheSBpcyB0cnVuY2F0ZWQgc28gdGhhdCBpdCBjb250YWlucyBubyBtb3JlIHRoYW4gbGltaXRcbi8vIGVsZW1lbnRzLlxuLy8gXCIwXCIuc3BsaXQodW5kZWZpbmVkLCAwKSAtPiBbXVxufSBlbHNlIGlmICgnMCcuc3BsaXQodm9pZCAwLCAwKS5sZW5ndGgpIHtcbiAgICBTdHJpbmdQcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICAgIGlmIChzZXBhcmF0b3IgPT09IHZvaWQgMCAmJiBsaW1pdCA9PT0gMCkgeyByZXR1cm4gW107IH1cbiAgICAgICAgcmV0dXJuIHN0cmluZ19zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG59XG5cbi8vIEVDTUEtMjYyLCAzcmQgQi4yLjNcbi8vIE5vdCBhbiBFQ01BU2NyaXB0IHN0YW5kYXJkLCBhbHRob3VnaCBFQ01BU2NyaXB0IDNyZCBFZGl0aW9uIGhhcyBhXG4vLyBub24tbm9ybWF0aXZlIHNlY3Rpb24gc3VnZ2VzdGluZyB1bmlmb3JtIHNlbWFudGljcyBhbmQgaXQgc2hvdWxkIGJlXG4vLyBub3JtYWxpemVkIGFjcm9zcyBhbGwgYnJvd3NlcnNcbi8vIFtidWdmaXgsIElFIGx0IDldIElFIDwgOSBzdWJzdHIoKSB3aXRoIG5lZ2F0aXZlIHZhbHVlIG5vdCB3b3JraW5nIGluIElFXG52YXIgc3RyaW5nX3N1YnN0ciA9IFN0cmluZ1Byb3RvdHlwZS5zdWJzdHI7XG52YXIgaGFzTmVnYXRpdmVTdWJzdHJCdWcgPSAnJy5zdWJzdHIgJiYgJzBiJy5zdWJzdHIoLTEpICE9PSAnYic7XG5kZWZpbmVQcm9wZXJ0aWVzKFN0cmluZ1Byb3RvdHlwZSwge1xuICAgIHN1YnN0cjogZnVuY3Rpb24gc3Vic3RyKHN0YXJ0LCBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ19zdWJzdHIuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBzdGFydCA8IDAgPyAoKHN0YXJ0ID0gdGhpcy5sZW5ndGggKyBzdGFydCkgPCAwID8gMCA6IHN0YXJ0KSA6IHN0YXJ0LFxuICAgICAgICAgICAgbGVuZ3RoXG4gICAgICAgICk7XG4gICAgfVxufSwgaGFzTmVnYXRpdmVTdWJzdHJCdWcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgLy8gc3RyZWFtaW5nIHRyYW5zcG9ydHNcbiAgcmVxdWlyZSgnLi90cmFuc3BvcnQvd2Vic29ja2V0JylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQveGhyLXN0cmVhbWluZycpXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L3hkci1zdHJlYW1pbmcnKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC9ldmVudHNvdXJjZScpXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L2xpYi9pZnJhbWUtd3JhcCcpKHJlcXVpcmUoJy4vdHJhbnNwb3J0L2V2ZW50c291cmNlJykpXG5cbiAgLy8gcG9sbGluZyB0cmFuc3BvcnRzXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L2h0bWxmaWxlJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwJykocmVxdWlyZSgnLi90cmFuc3BvcnQvaHRtbGZpbGUnKSlcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQveGhyLXBvbGxpbmcnKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC94ZHItcG9sbGluZycpXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L2xpYi9pZnJhbWUtd3JhcCcpKHJlcXVpcmUoJy4vdHJhbnNwb3J0L3hoci1wb2xsaW5nJykpXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L2pzb25wLXBvbGxpbmcnKVxuXTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZXZlbnQnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgLCBYSFIgPSBnbG9iYWwuWE1MSHR0cFJlcXVlc3RcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OmJyb3dzZXI6eGhyJyk7XG59XG5cbmZ1bmN0aW9uIEFic3RyYWN0WEhST2JqZWN0KG1ldGhvZCwgdXJsLCBwYXlsb2FkLCBvcHRzKSB7XG4gIGRlYnVnKG1ldGhvZCwgdXJsKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLl9zdGFydChtZXRob2QsIHVybCwgcGF5bG9hZCwgb3B0cyk7XG4gIH0sIDApO1xufVxuXG5pbmhlcml0cyhBYnN0cmFjdFhIUk9iamVjdCwgRXZlbnRFbWl0dGVyKTtcblxuQWJzdHJhY3RYSFJPYmplY3QucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBwYXlsb2FkLCBvcHRzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0cnkge1xuICAgIHRoaXMueGhyID0gbmV3IFhIUigpO1xuICB9IGNhdGNoICh4KSB7XG4gICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICB9XG5cbiAgaWYgKCF0aGlzLnhocikge1xuICAgIGRlYnVnKCdubyB4aHInKTtcbiAgICB0aGlzLmVtaXQoJ2ZpbmlzaCcsIDAsICdubyB4aHIgc3VwcG9ydCcpO1xuICAgIHRoaXMuX2NsZWFudXAoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBzZXZlcmFsIGJyb3dzZXJzIGNhY2hlIFBPU1RzXG4gIHVybCA9IHVybFV0aWxzLmFkZFF1ZXJ5KHVybCwgJ3Q9JyArICgrbmV3IERhdGUoKSkpO1xuXG4gIC8vIEV4cGxvcmVyIHRlbmRzIHRvIGtlZXAgY29ubmVjdGlvbiBvcGVuLCBldmVuIGFmdGVyIHRoZVxuICAvLyB0YWIgZ2V0cyBjbG9zZWQ6IGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzUyODBcbiAgdGhpcy51bmxvYWRSZWYgPSB1dGlscy51bmxvYWRBZGQoZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ3VubG9hZCBjbGVhbnVwJyk7XG4gICAgc2VsZi5fY2xlYW51cCh0cnVlKTtcbiAgfSk7XG4gIHRyeSB7XG4gICAgdGhpcy54aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgaWYgKHRoaXMudGltZW91dCAmJiAndGltZW91dCcgaW4gdGhpcy54aHIpIHtcbiAgICAgIHRoaXMueGhyLnRpbWVvdXQgPSB0aGlzLnRpbWVvdXQ7XG4gICAgICB0aGlzLnhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZGVidWcoJ3hociB0aW1lb3V0Jyk7XG4gICAgICAgIHNlbGYuZW1pdCgnZmluaXNoJywgMCwgJycpO1xuICAgICAgICBzZWxmLl9jbGVhbnVwKGZhbHNlKTtcbiAgICAgIH07XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZGVidWcoJ2V4Y2VwdGlvbicsIGUpO1xuICAgIC8vIElFIHJhaXNlcyBhbiBleGNlcHRpb24gb24gd3JvbmcgcG9ydC5cbiAgICB0aGlzLmVtaXQoJ2ZpbmlzaCcsIDAsICcnKTtcbiAgICB0aGlzLl9jbGVhbnVwKGZhbHNlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoKCFvcHRzIHx8ICFvcHRzLm5vQ3JlZGVudGlhbHMpICYmIEFic3RyYWN0WEhST2JqZWN0LnN1cHBvcnRzQ09SUykge1xuICAgIGRlYnVnKCd3aXRoQ3JlZGVudGlhbHMnKTtcbiAgICAvLyBNb3ppbGxhIGRvY3Mgc2F5cyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9YTUxIdHRwUmVxdWVzdCA6XG4gICAgLy8gXCJUaGlzIG5ldmVyIGFmZmVjdHMgc2FtZS1zaXRlIHJlcXVlc3RzLlwiXG5cbiAgICB0aGlzLnhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICB9XG4gIGlmIChvcHRzICYmIG9wdHMuaGVhZGVycykge1xuICAgIGZvciAodmFyIGtleSBpbiBvcHRzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMueGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBvcHRzLmhlYWRlcnNba2V5XSk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYueGhyKSB7XG4gICAgICB2YXIgeCA9IHNlbGYueGhyO1xuICAgICAgdmFyIHRleHQsIHN0YXR1cztcbiAgICAgIGRlYnVnKCdyZWFkeVN0YXRlJywgeC5yZWFkeVN0YXRlKTtcbiAgICAgIHN3aXRjaCAoeC5yZWFkeVN0YXRlKSB7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIC8vIElFIGRvZXNuJ3QgbGlrZSBwZWVraW5nIGludG8gcmVzcG9uc2VUZXh0IG9yIHN0YXR1c1xuICAgICAgICAvLyBvbiBNaWNyb3NvZnQuWE1MSFRUUCBhbmQgcmVhZHlzdGF0ZT0zXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc3RhdHVzID0geC5zdGF0dXM7XG4gICAgICAgICAgdGV4dCA9IHgucmVzcG9uc2VUZXh0O1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgICAgICB9XG4gICAgICAgIGRlYnVnKCdzdGF0dXMnLCBzdGF0dXMpO1xuICAgICAgICAvLyBJRSByZXR1cm5zIDEyMjMgZm9yIDIwNDogaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTQ1MFxuICAgICAgICBpZiAoc3RhdHVzID09PSAxMjIzKSB7XG4gICAgICAgICAgc3RhdHVzID0gMjA0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSUUgZG9lcyByZXR1cm4gcmVhZHlzdGF0ZSA9PSAzIGZvciA0MDQgYW5zd2Vycy5cbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gMjAwICYmIHRleHQgJiYgdGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZGVidWcoJ2NodW5rJyk7XG4gICAgICAgICAgc2VsZi5lbWl0KCdjaHVuaycsIHN0YXR1cywgdGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHN0YXR1cyA9IHguc3RhdHVzO1xuICAgICAgICBkZWJ1Zygnc3RhdHVzJywgc3RhdHVzKTtcbiAgICAgICAgLy8gSUUgcmV0dXJucyAxMjIzIGZvciAyMDQ6IGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzE0NTBcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gMTIyMykge1xuICAgICAgICAgIHN0YXR1cyA9IDIwNDtcbiAgICAgICAgfVxuICAgICAgICAvLyBJRSByZXR1cm5zIHRoaXMgZm9yIGEgYmFkIHBvcnRcbiAgICAgICAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9hYTM4Mzc3MCh2PXZzLjg1KS5hc3B4XG4gICAgICAgIGlmIChzdGF0dXMgPT09IDEyMDA1IHx8IHN0YXR1cyA9PT0gMTIwMjkpIHtcbiAgICAgICAgICBzdGF0dXMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVidWcoJ2ZpbmlzaCcsIHN0YXR1cywgeC5yZXNwb25zZVRleHQpO1xuICAgICAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIHN0YXR1cywgeC5yZXNwb25zZVRleHQpO1xuICAgICAgICBzZWxmLl9jbGVhbnVwKGZhbHNlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRyeSB7XG4gICAgc2VsZi54aHIuc2VuZChwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNlbGYuZW1pdCgnZmluaXNoJywgMCwgJycpO1xuICAgIHNlbGYuX2NsZWFudXAoZmFsc2UpO1xuICB9XG59O1xuXG5BYnN0cmFjdFhIUk9iamVjdC5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbihhYm9ydCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuICBpZiAoIXRoaXMueGhyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHV0aWxzLnVubG9hZERlbCh0aGlzLnVubG9hZFJlZik7XG5cbiAgLy8gSUUgbmVlZHMgdGhpcyBmaWVsZCB0byBiZSBhIGZ1bmN0aW9uXG4gIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge307XG4gIGlmICh0aGlzLnhoci5vbnRpbWVvdXQpIHtcbiAgICB0aGlzLnhoci5vbnRpbWVvdXQgPSBudWxsO1xuICB9XG5cbiAgaWYgKGFib3J0KSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgIH1cbiAgfVxuICB0aGlzLnVubG9hZFJlZiA9IHRoaXMueGhyID0gbnVsbDtcbn07XG5cbkFic3RyYWN0WEhST2JqZWN0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdGhpcy5fY2xlYW51cCh0cnVlKTtcbn07XG5cbkFic3RyYWN0WEhST2JqZWN0LmVuYWJsZWQgPSAhIVhIUjtcbi8vIG92ZXJyaWRlIFhNTEh0dHBSZXF1ZXN0IGZvciBJRTYvN1xuLy8gb2JmdXNjYXRlIHRvIGF2b2lkIGZpcmV3YWxsc1xudmFyIGF4byA9IFsnQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJyk7XG5pZiAoIUFic3RyYWN0WEhST2JqZWN0LmVuYWJsZWQgJiYgKGF4byBpbiBnbG9iYWwpKSB7XG4gIGRlYnVnKCdvdmVycmlkaW5nIHhtbGh0dHByZXF1ZXN0Jyk7XG4gIFhIUiA9IGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IGdsb2JhbFtheG9dKCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTtcbiAgQWJzdHJhY3RYSFJPYmplY3QuZW5hYmxlZCA9ICEhbmV3IFhIUigpO1xufVxuXG52YXIgY29ycyA9IGZhbHNlO1xudHJ5IHtcbiAgY29ycyA9ICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYSFIoKTtcbn0gY2F0Y2ggKGlnbm9yZWQpIHtcbiAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxufVxuXG5BYnN0cmFjdFhIUk9iamVjdC5zdXBwb3J0c0NPUlMgPSBjb3JzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFic3RyYWN0WEhST2JqZWN0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuRXZlbnRTb3VyY2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBEcml2ZXIgPSBnbG9iYWwuV2ViU29ja2V0IHx8IGdsb2JhbC5Nb3pXZWJTb2NrZXQ7XG5pZiAoRHJpdmVyKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gV2ViU29ja2V0QnJvd3NlckRyaXZlcih1cmwpIHtcblx0XHRyZXR1cm4gbmV3IERyaXZlcih1cmwpO1xuXHR9O1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMgPSB1bmRlZmluZWQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBBamF4QmFzZWRUcmFuc3BvcnQgPSByZXF1aXJlKCcuL2xpYi9hamF4LWJhc2VkJylcbiAgLCBFdmVudFNvdXJjZVJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci9ldmVudHNvdXJjZScpXG4gICwgWEhSQ29yc09iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1jb3JzJylcbiAgLCBFdmVudFNvdXJjZURyaXZlciA9IHJlcXVpcmUoJ2V2ZW50c291cmNlJylcbiAgO1xuXG5mdW5jdGlvbiBFdmVudFNvdXJjZVRyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIUV2ZW50U291cmNlVHJhbnNwb3J0LmVuYWJsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG5cbiAgQWpheEJhc2VkVHJhbnNwb3J0LmNhbGwodGhpcywgdHJhbnNVcmwsICcvZXZlbnRzb3VyY2UnLCBFdmVudFNvdXJjZVJlY2VpdmVyLCBYSFJDb3JzT2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoRXZlbnRTb3VyY2VUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cbkV2ZW50U291cmNlVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhRXZlbnRTb3VyY2VEcml2ZXI7XG59O1xuXG5FdmVudFNvdXJjZVRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ2V2ZW50c291cmNlJztcbkV2ZW50U291cmNlVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50U291cmNlVHJhbnNwb3J0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgSHRtbGZpbGVSZWNlaXZlciA9IHJlcXVpcmUoJy4vcmVjZWl2ZXIvaHRtbGZpbGUnKVxuICAsIFhIUkxvY2FsT2JqZWN0ID0gcmVxdWlyZSgnLi9zZW5kZXIveGhyLWxvY2FsJylcbiAgLCBBamF4QmFzZWRUcmFuc3BvcnQgPSByZXF1aXJlKCcuL2xpYi9hamF4LWJhc2VkJylcbiAgO1xuXG5mdW5jdGlvbiBIdG1sRmlsZVRyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIUh0bWxmaWxlUmVjZWl2ZXIuZW5hYmxlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIEFqYXhCYXNlZFRyYW5zcG9ydC5jYWxsKHRoaXMsIHRyYW5zVXJsLCAnL2h0bWxmaWxlJywgSHRtbGZpbGVSZWNlaXZlciwgWEhSTG9jYWxPYmplY3QpO1xufVxuXG5pbmhlcml0cyhIdG1sRmlsZVRyYW5zcG9ydCwgQWpheEJhc2VkVHJhbnNwb3J0KTtcblxuSHRtbEZpbGVUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKGluZm8pIHtcbiAgcmV0dXJuIEh0bWxmaWxlUmVjZWl2ZXIuZW5hYmxlZCAmJiBpbmZvLnNhbWVPcmlnaW47XG59O1xuXG5IdG1sRmlsZVRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ2h0bWxmaWxlJztcbkh0bWxGaWxlVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEh0bWxGaWxlVHJhbnNwb3J0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBGZXcgY29vbCB0cmFuc3BvcnRzIGRvIHdvcmsgb25seSBmb3Igc2FtZS1vcmlnaW4uIEluIG9yZGVyIHRvIG1ha2Vcbi8vIHRoZW0gd29yayBjcm9zcy1kb21haW4gd2Ugc2hhbGwgdXNlIGlmcmFtZSwgc2VydmVkIGZyb20gdGhlXG4vLyByZW1vdGUgZG9tYWluLiBOZXcgYnJvd3NlcnMgaGF2ZSBjYXBhYmlsaXRpZXMgdG8gY29tbXVuaWNhdGUgd2l0aFxuLy8gY3Jvc3MgZG9tYWluIGlmcmFtZSB1c2luZyBwb3N0TWVzc2FnZSgpLiBJbiBJRSBpdCB3YXMgaW1wbGVtZW50ZWRcbi8vIGZyb20gSUUgOCssIGJ1dCBvZiBjb3Vyc2UsIElFIGdvdCBzb21lIGRldGFpbHMgd3Jvbmc6XG4vLyAgICBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvY2MxOTcwMTUodj1WUy44NSkuYXNweFxuLy8gICAgaHR0cDovL3N0ZXZlc291ZGVycy5jb20vbWlzYy90ZXN0LXBvc3RtZXNzYWdlLnBocFxuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgdmVyc2lvbiA9IHJlcXVpcmUoJy4uL3ZlcnNpb24nKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXJsJylcbiAgLCBpZnJhbWVVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2lmcmFtZScpXG4gICwgZXZlbnRVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2V2ZW50JylcbiAgLCByYW5kb20gPSByZXF1aXJlKCcuLi91dGlscy9yYW5kb20nKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6dHJhbnNwb3J0OmlmcmFtZScpO1xufVxuXG5mdW5jdGlvbiBJZnJhbWVUcmFuc3BvcnQodHJhbnNwb3J0LCB0cmFuc1VybCwgYmFzZVVybCkge1xuICBpZiAoIUlmcmFtZVRyYW5zcG9ydC5lbmFibGVkKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMub3JpZ2luID0gdXJsVXRpbHMuZ2V0T3JpZ2luKGJhc2VVcmwpO1xuICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICB0aGlzLnRyYW5zVXJsID0gdHJhbnNVcmw7XG4gIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICB0aGlzLndpbmRvd0lkID0gcmFuZG9tLnN0cmluZyg4KTtcblxuICB2YXIgaWZyYW1lVXJsID0gdXJsVXRpbHMuYWRkUGF0aChiYXNlVXJsLCAnL2lmcmFtZS5odG1sJykgKyAnIycgKyB0aGlzLndpbmRvd0lkO1xuICBkZWJ1Zyh0cmFuc3BvcnQsIHRyYW5zVXJsLCBpZnJhbWVVcmwpO1xuXG4gIHRoaXMuaWZyYW1lT2JqID0gaWZyYW1lVXRpbHMuY3JlYXRlSWZyYW1lKGlmcmFtZVVybCwgZnVuY3Rpb24ocikge1xuICAgIGRlYnVnKCdlcnIgY2FsbGJhY2snKTtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgMTAwNiwgJ1VuYWJsZSB0byBsb2FkIGFuIGlmcmFtZSAoJyArIHIgKyAnKScpO1xuICAgIHNlbGYuY2xvc2UoKTtcbiAgfSk7XG5cbiAgdGhpcy5vbm1lc3NhZ2VDYWxsYmFjayA9IHRoaXMuX21lc3NhZ2UuYmluZCh0aGlzKTtcbiAgZXZlbnRVdGlscy5hdHRhY2hFdmVudCgnbWVzc2FnZScsIHRoaXMub25tZXNzYWdlQ2FsbGJhY2spO1xufVxuXG5pbmhlcml0cyhJZnJhbWVUcmFuc3BvcnQsIEV2ZW50RW1pdHRlcik7XG5cbklmcmFtZVRyYW5zcG9ydC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIGlmICh0aGlzLmlmcmFtZU9iaikge1xuICAgIGV2ZW50VXRpbHMuZGV0YWNoRXZlbnQoJ21lc3NhZ2UnLCB0aGlzLm9ubWVzc2FnZUNhbGxiYWNrKTtcbiAgICB0cnkge1xuICAgICAgLy8gV2hlbiB0aGUgaWZyYW1lIGlzIG5vdCBsb2FkZWQsIElFIHJhaXNlcyBhbiBleGNlcHRpb25cbiAgICAgIC8vIG9uICdjb250ZW50V2luZG93Jy5cbiAgICAgIHRoaXMucG9zdE1lc3NhZ2UoJ2MnKTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgfVxuICAgIHRoaXMuaWZyYW1lT2JqLmNsZWFudXAoKTtcbiAgICB0aGlzLmlmcmFtZU9iaiA9IG51bGw7XG4gICAgdGhpcy5vbm1lc3NhZ2VDYWxsYmFjayA9IHRoaXMuaWZyYW1lT2JqID0gbnVsbDtcbiAgfVxufTtcblxuSWZyYW1lVHJhbnNwb3J0LnByb3RvdHlwZS5fbWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcbiAgZGVidWcoJ21lc3NhZ2UnLCBlLmRhdGEpO1xuICBpZiAoIXVybFV0aWxzLmlzT3JpZ2luRXF1YWwoZS5vcmlnaW4sIHRoaXMub3JpZ2luKSkge1xuICAgIGRlYnVnKCdub3Qgc2FtZSBvcmlnaW4nLCBlLm9yaWdpbiwgdGhpcy5vcmlnaW4pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpZnJhbWVNZXNzYWdlO1xuICB0cnkge1xuICAgIGlmcmFtZU1lc3NhZ2UgPSBKU09OLnBhcnNlKGUuZGF0YSk7XG4gIH0gY2F0Y2ggKGlnbm9yZWQpIHtcbiAgICBkZWJ1ZygnYmFkIGpzb24nLCBlLmRhdGEpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpZnJhbWVNZXNzYWdlLndpbmRvd0lkICE9PSB0aGlzLndpbmRvd0lkKSB7XG4gICAgZGVidWcoJ21pc21hdGNoZWQgd2luZG93IGlkJywgaWZyYW1lTWVzc2FnZS53aW5kb3dJZCwgdGhpcy53aW5kb3dJZCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpdGNoIChpZnJhbWVNZXNzYWdlLnR5cGUpIHtcbiAgY2FzZSAncyc6XG4gICAgdGhpcy5pZnJhbWVPYmoubG9hZGVkKCk7XG4gICAgLy8gd2luZG93IGdsb2JhbCBkZXBlbmRlbmN5XG4gICAgdGhpcy5wb3N0TWVzc2FnZSgncycsIEpTT04uc3RyaW5naWZ5KFtcbiAgICAgIHZlcnNpb25cbiAgICAsIHRoaXMudHJhbnNwb3J0XG4gICAgLCB0aGlzLnRyYW5zVXJsXG4gICAgLCB0aGlzLmJhc2VVcmxcbiAgICBdKSk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3QnOlxuICAgIHRoaXMuZW1pdCgnbWVzc2FnZScsIGlmcmFtZU1lc3NhZ2UuZGF0YSk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2MnOlxuICAgIHZhciBjZGF0YTtcbiAgICB0cnkge1xuICAgICAgY2RhdGEgPSBKU09OLnBhcnNlKGlmcmFtZU1lc3NhZ2UuZGF0YSk7XG4gICAgfSBjYXRjaCAoaWdub3JlZCkge1xuICAgICAgZGVidWcoJ2JhZCBqc29uJywgaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIGNkYXRhWzBdLCBjZGF0YVsxXSk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICAgIGJyZWFrO1xuICB9XG59O1xuXG5JZnJhbWVUcmFuc3BvcnQucHJvdG90eXBlLnBvc3RNZXNzYWdlID0gZnVuY3Rpb24odHlwZSwgZGF0YSkge1xuICBkZWJ1ZygncG9zdE1lc3NhZ2UnLCB0eXBlLCBkYXRhKTtcbiAgdGhpcy5pZnJhbWVPYmoucG9zdChKU09OLnN0cmluZ2lmeSh7XG4gICAgd2luZG93SWQ6IHRoaXMud2luZG93SWRcbiAgLCB0eXBlOiB0eXBlXG4gICwgZGF0YTogZGF0YSB8fCAnJ1xuICB9KSwgdGhpcy5vcmlnaW4pO1xufTtcblxuSWZyYW1lVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICBkZWJ1Zygnc2VuZCcsIG1lc3NhZ2UpO1xuICB0aGlzLnBvc3RNZXNzYWdlKCdtJywgbWVzc2FnZSk7XG59O1xuXG5JZnJhbWVUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gaWZyYW1lVXRpbHMuaWZyYW1lRW5hYmxlZDtcbn07XG5cbklmcmFtZVRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ2lmcmFtZSc7XG5JZnJhbWVUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7XG5cbm1vZHVsZS5leHBvcnRzID0gSWZyYW1lVHJhbnNwb3J0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGUgc2ltcGxlc3QgYW5kIG1vc3Qgcm9idXN0IHRyYW5zcG9ydCwgdXNpbmcgdGhlIHdlbGwta25vdyBjcm9zc1xuLy8gZG9tYWluIGhhY2sgLSBKU09OUC4gVGhpcyB0cmFuc3BvcnQgaXMgcXVpdGUgaW5lZmZpY2llbnQgLSBvbmVcbi8vIG1lc3NhZ2UgY291bGQgdXNlIHVwIHRvIG9uZSBodHRwIHJlcXVlc3QuIEJ1dCBhdCBsZWFzdCBpdCB3b3JrcyBhbG1vc3Rcbi8vIGV2ZXJ5d2hlcmUuXG4vLyBLbm93biBsaW1pdGF0aW9uczpcbi8vICAgbyB5b3Ugd2lsbCBnZXQgYSBzcGlubmluZyBjdXJzb3Jcbi8vICAgbyBmb3IgS29ucXVlcm9yIGEgZHVtYiB0aW1lciBpcyBuZWVkZWQgdG8gZGV0ZWN0IGVycm9yc1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgU2VuZGVyUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2xpYi9zZW5kZXItcmVjZWl2ZXInKVxuICAsIEpzb25wUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL2pzb25wJylcbiAgLCBqc29ucFNlbmRlciA9IHJlcXVpcmUoJy4vc2VuZGVyL2pzb25wJylcbiAgO1xuXG5mdW5jdGlvbiBKc29uUFRyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIUpzb25QVHJhbnNwb3J0LmVuYWJsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIFNlbmRlclJlY2VpdmVyLmNhbGwodGhpcywgdHJhbnNVcmwsICcvanNvbnAnLCBqc29ucFNlbmRlciwgSnNvbnBSZWNlaXZlcik7XG59XG5cbmluaGVyaXRzKEpzb25QVHJhbnNwb3J0LCBTZW5kZXJSZWNlaXZlcik7XG5cbkpzb25QVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhZ2xvYmFsLmRvY3VtZW50O1xufTtcblxuSnNvblBUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICdqc29ucC1wb2xsaW5nJztcbkpzb25QVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAxO1xuSnNvblBUcmFuc3BvcnQubmVlZEJvZHkgPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpzb25QVHJhbnNwb3J0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy91cmwnKVxuICAsIFNlbmRlclJlY2VpdmVyID0gcmVxdWlyZSgnLi9zZW5kZXItcmVjZWl2ZXInKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6YWpheC1iYXNlZCcpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBamF4U2VuZGVyKEFqYXhPYmplY3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHVybCwgcGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICBkZWJ1ZygnY3JlYXRlIGFqYXggc2VuZGVyJywgdXJsLCBwYXlsb2FkKTtcbiAgICB2YXIgb3B0ID0ge307XG4gICAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSAnc3RyaW5nJykge1xuICAgICAgb3B0LmhlYWRlcnMgPSB7J0NvbnRlbnQtdHlwZSc6ICd0ZXh0L3BsYWluJ307XG4gICAgfVxuICAgIHZhciBhamF4VXJsID0gdXJsVXRpbHMuYWRkUGF0aCh1cmwsICcveGhyX3NlbmQnKTtcbiAgICB2YXIgeG8gPSBuZXcgQWpheE9iamVjdCgnUE9TVCcsIGFqYXhVcmwsIHBheWxvYWQsIG9wdCk7XG4gICAgeG8ub25jZSgnZmluaXNoJywgZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICBkZWJ1ZygnZmluaXNoJywgc3RhdHVzKTtcbiAgICAgIHhvID0gbnVsbDtcblxuICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwICYmIHN0YXR1cyAhPT0gMjA0KSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ2h0dHAgc3RhdHVzICcgKyBzdGF0dXMpKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoJ2Fib3J0Jyk7XG4gICAgICB4by5jbG9zZSgpO1xuICAgICAgeG8gPSBudWxsO1xuXG4gICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdBYm9ydGVkJyk7XG4gICAgICBlcnIuY29kZSA9IDEwMDA7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIEFqYXhCYXNlZFRyYW5zcG9ydCh0cmFuc1VybCwgdXJsU3VmZml4LCBSZWNlaXZlciwgQWpheE9iamVjdCkge1xuICBTZW5kZXJSZWNlaXZlci5jYWxsKHRoaXMsIHRyYW5zVXJsLCB1cmxTdWZmaXgsIGNyZWF0ZUFqYXhTZW5kZXIoQWpheE9iamVjdCksIFJlY2VpdmVyLCBBamF4T2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoQWpheEJhc2VkVHJhbnNwb3J0LCBTZW5kZXJSZWNlaXZlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gQWpheEJhc2VkVHJhbnNwb3J0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpidWZmZXJlZC1zZW5kZXInKTtcbn1cblxuZnVuY3Rpb24gQnVmZmVyZWRTZW5kZXIodXJsLCBzZW5kZXIpIHtcbiAgZGVidWcodXJsKTtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG4gIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICB0aGlzLnNlbmRlciA9IHNlbmRlcjtcbiAgdGhpcy51cmwgPSB1cmw7XG59XG5cbmluaGVyaXRzKEJ1ZmZlcmVkU2VuZGVyLCBFdmVudEVtaXR0ZXIpO1xuXG5CdWZmZXJlZFNlbmRlci5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgZGVidWcoJ3NlbmQnLCBtZXNzYWdlKTtcbiAgdGhpcy5zZW5kQnVmZmVyLnB1c2gobWVzc2FnZSk7XG4gIGlmICghdGhpcy5zZW5kU3RvcCkge1xuICAgIHRoaXMuc2VuZFNjaGVkdWxlKCk7XG4gIH1cbn07XG5cbi8vIEZvciBwb2xsaW5nIHRyYW5zcG9ydHMgaW4gYSBzaXR1YXRpb24gd2hlbiBpbiB0aGUgbWVzc2FnZSBjYWxsYmFjayxcbi8vIG5ldyBtZXNzYWdlIGlzIGJlaW5nIHNlbmQuIElmIHRoZSBzZW5kaW5nIGNvbm5lY3Rpb24gd2FzIHN0YXJ0ZWRcbi8vIGJlZm9yZSByZWNlaXZpbmcgb25lLCBpdCBpcyBwb3NzaWJsZSB0byBzYXR1cmF0ZSB0aGUgbmV0d29yayBhbmRcbi8vIHRpbWVvdXQgZHVlIHRvIHRoZSBsYWNrIG9mIHJlY2VpdmluZyBzb2NrZXQuIFRvIGF2b2lkIHRoYXQgd2UgZGVsYXlcbi8vIHNlbmRpbmcgbWVzc2FnZXMgYnkgc29tZSBzbWFsbCB0aW1lLCBpbiBvcmRlciB0byBsZXQgcmVjZWl2aW5nXG4vLyBjb25uZWN0aW9uIGJlIHN0YXJ0ZWQgYmVmb3JlaGFuZC4gVGhpcyBpcyBvbmx5IGEgaGFsZm1lYXN1cmUgYW5kXG4vLyBkb2VzIG5vdCBmaXggdGhlIGJpZyBwcm9ibGVtLCBidXQgaXQgZG9lcyBtYWtlIHRoZSB0ZXN0cyBnbyBtb3JlXG4vLyBzdGFibGUgb24gc2xvdyBuZXR3b3Jrcy5cbkJ1ZmZlcmVkU2VuZGVyLnByb3RvdHlwZS5zZW5kU2NoZWR1bGVXYWl0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdzZW5kU2NoZWR1bGVXYWl0Jyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHRyZWY7XG4gIHRoaXMuc2VuZFN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnc2VuZFN0b3AnKTtcbiAgICBzZWxmLnNlbmRTdG9wID0gbnVsbDtcbiAgICBjbGVhclRpbWVvdXQodHJlZik7XG4gIH07XG4gIHRyZWYgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCd0aW1lb3V0Jyk7XG4gICAgc2VsZi5zZW5kU3RvcCA9IG51bGw7XG4gICAgc2VsZi5zZW5kU2NoZWR1bGUoKTtcbiAgfSwgMjUpO1xufTtcblxuQnVmZmVyZWRTZW5kZXIucHJvdG90eXBlLnNlbmRTY2hlZHVsZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1Zygnc2VuZFNjaGVkdWxlJywgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHBheWxvYWQgPSAnWycgKyB0aGlzLnNlbmRCdWZmZXIuam9pbignLCcpICsgJ10nO1xuICAgIHRoaXMuc2VuZFN0b3AgPSB0aGlzLnNlbmRlcih0aGlzLnVybCwgcGF5bG9hZCwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBzZWxmLnNlbmRTdG9wID0gbnVsbDtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgc2VsZi5lbWl0KCdjbG9zZScsIGVyci5jb2RlIHx8IDEwMDYsICdTZW5kaW5nIGVycm9yOiAnICsgZXJyKTtcbiAgICAgICAgc2VsZi5jbG9zZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5zZW5kU2NoZWR1bGVXYWl0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gIH1cbn07XG5cbkJ1ZmZlcmVkU2VuZGVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnX2NsZWFudXAnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cbkJ1ZmZlcmVkU2VuZGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdGhpcy5fY2xlYW51cCgpO1xuICBpZiAodGhpcy5zZW5kU3RvcCkge1xuICAgIHRoaXMuc2VuZFN0b3AoKTtcbiAgICB0aGlzLnNlbmRTdG9wID0gbnVsbDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCdWZmZXJlZFNlbmRlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIElmcmFtZVRyYW5zcG9ydCA9IHJlcXVpcmUoJy4uL2lmcmFtZScpXG4gICwgb2JqZWN0VXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9vYmplY3QnKVxuICA7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odHJhbnNwb3J0KSB7XG5cbiAgZnVuY3Rpb24gSWZyYW1lV3JhcFRyYW5zcG9ydCh0cmFuc1VybCwgYmFzZVVybCkge1xuICAgIElmcmFtZVRyYW5zcG9ydC5jYWxsKHRoaXMsIHRyYW5zcG9ydC50cmFuc3BvcnROYW1lLCB0cmFuc1VybCwgYmFzZVVybCk7XG4gIH1cblxuICBpbmhlcml0cyhJZnJhbWVXcmFwVHJhbnNwb3J0LCBJZnJhbWVUcmFuc3BvcnQpO1xuXG4gIElmcmFtZVdyYXBUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKHVybCwgaW5mbykge1xuICAgIGlmICghZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGlmcmFtZUluZm8gPSBvYmplY3RVdGlscy5leHRlbmQoe30sIGluZm8pO1xuICAgIGlmcmFtZUluZm8uc2FtZU9yaWdpbiA9IHRydWU7XG4gICAgcmV0dXJuIHRyYW5zcG9ydC5lbmFibGVkKGlmcmFtZUluZm8pICYmIElmcmFtZVRyYW5zcG9ydC5lbmFibGVkKCk7XG4gIH07XG5cbiAgSWZyYW1lV3JhcFRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ2lmcmFtZS0nICsgdHJhbnNwb3J0LnRyYW5zcG9ydE5hbWU7XG4gIElmcmFtZVdyYXBUcmFuc3BvcnQubmVlZEJvZHkgPSB0cnVlO1xuICBJZnJhbWVXcmFwVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSBJZnJhbWVUcmFuc3BvcnQucm91bmRUcmlwcyArIHRyYW5zcG9ydC5yb3VuZFRyaXBzIC0gMTsgLy8gaHRtbCwgamF2YXNjcmlwdCAoMikgKyB0cmFuc3BvcnQgLSBubyBDT1JTICgxKVxuXG4gIElmcmFtZVdyYXBUcmFuc3BvcnQuZmFjYWRlVHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuXG4gIHJldHVybiBJZnJhbWVXcmFwVHJhbnNwb3J0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6cG9sbGluZycpO1xufVxuXG5mdW5jdGlvbiBQb2xsaW5nKFJlY2VpdmVyLCByZWNlaXZlVXJsLCBBamF4T2JqZWN0KSB7XG4gIGRlYnVnKHJlY2VpdmVVcmwpO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbiAgdGhpcy5SZWNlaXZlciA9IFJlY2VpdmVyO1xuICB0aGlzLnJlY2VpdmVVcmwgPSByZWNlaXZlVXJsO1xuICB0aGlzLkFqYXhPYmplY3QgPSBBamF4T2JqZWN0O1xuICB0aGlzLl9zY2hlZHVsZVJlY2VpdmVyKCk7XG59XG5cbmluaGVyaXRzKFBvbGxpbmcsIEV2ZW50RW1pdHRlcik7XG5cblBvbGxpbmcucHJvdG90eXBlLl9zY2hlZHVsZVJlY2VpdmVyID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfc2NoZWR1bGVSZWNlaXZlcicpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBwb2xsID0gdGhpcy5wb2xsID0gbmV3IHRoaXMuUmVjZWl2ZXIodGhpcy5yZWNlaXZlVXJsLCB0aGlzLkFqYXhPYmplY3QpO1xuXG4gIHBvbGwub24oJ21lc3NhZ2UnLCBmdW5jdGlvbihtc2cpIHtcbiAgICBkZWJ1ZygnbWVzc2FnZScsIG1zZyk7XG4gICAgc2VsZi5lbWl0KCdtZXNzYWdlJywgbXNnKTtcbiAgfSk7XG5cbiAgcG9sbC5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uKGNvZGUsIHJlYXNvbikge1xuICAgIGRlYnVnKCdjbG9zZScsIGNvZGUsIHJlYXNvbiwgc2VsZi5wb2xsSXNDbG9zaW5nKTtcbiAgICBzZWxmLnBvbGwgPSBwb2xsID0gbnVsbDtcblxuICAgIGlmICghc2VsZi5wb2xsSXNDbG9zaW5nKSB7XG4gICAgICBpZiAocmVhc29uID09PSAnbmV0d29yaycpIHtcbiAgICAgICAgc2VsZi5fc2NoZWR1bGVSZWNlaXZlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5lbWl0KCdjbG9zZScsIGNvZGUgfHwgMTAwNiwgcmVhc29uKTtcbiAgICAgICAgc2VsZi5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuUG9sbGluZy5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Fib3J0Jyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMucG9sbElzQ2xvc2luZyA9IHRydWU7XG4gIGlmICh0aGlzLnBvbGwpIHtcbiAgICB0aGlzLnBvbGwuYWJvcnQoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy91cmwnKVxuICAsIEJ1ZmZlcmVkU2VuZGVyID0gcmVxdWlyZSgnLi9idWZmZXJlZC1zZW5kZXInKVxuICAsIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6c2VuZGVyLXJlY2VpdmVyJyk7XG59XG5cbmZ1bmN0aW9uIFNlbmRlclJlY2VpdmVyKHRyYW5zVXJsLCB1cmxTdWZmaXgsIHNlbmRlckZ1bmMsIFJlY2VpdmVyLCBBamF4T2JqZWN0KSB7XG4gIHZhciBwb2xsVXJsID0gdXJsVXRpbHMuYWRkUGF0aCh0cmFuc1VybCwgdXJsU3VmZml4KTtcbiAgZGVidWcocG9sbFVybCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgQnVmZmVyZWRTZW5kZXIuY2FsbCh0aGlzLCB0cmFuc1VybCwgc2VuZGVyRnVuYyk7XG5cbiAgdGhpcy5wb2xsID0gbmV3IFBvbGxpbmcoUmVjZWl2ZXIsIHBvbGxVcmwsIEFqYXhPYmplY3QpO1xuICB0aGlzLnBvbGwub24oJ21lc3NhZ2UnLCBmdW5jdGlvbihtc2cpIHtcbiAgICBkZWJ1ZygncG9sbCBtZXNzYWdlJywgbXNnKTtcbiAgICBzZWxmLmVtaXQoJ21lc3NhZ2UnLCBtc2cpO1xuICB9KTtcbiAgdGhpcy5wb2xsLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24oY29kZSwgcmVhc29uKSB7XG4gICAgZGVidWcoJ3BvbGwgY2xvc2UnLCBjb2RlLCByZWFzb24pO1xuICAgIHNlbGYucG9sbCA9IG51bGw7XG4gICAgc2VsZi5lbWl0KCdjbG9zZScsIGNvZGUsIHJlYXNvbik7XG4gICAgc2VsZi5jbG9zZSgpO1xuICB9KTtcbn1cblxuaW5oZXJpdHMoU2VuZGVyUmVjZWl2ZXIsIEJ1ZmZlcmVkU2VuZGVyKTtcblxuU2VuZGVyUmVjZWl2ZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIEJ1ZmZlcmVkU2VuZGVyLnByb3RvdHlwZS5jbG9zZS5jYWxsKHRoaXMpO1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgaWYgKHRoaXMucG9sbCkge1xuICAgIHRoaXMucG9sbC5hYm9ydCgpO1xuICAgIHRoaXMucG9sbCA9IG51bGw7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VuZGVyUmVjZWl2ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBFdmVudFNvdXJjZURyaXZlciA9IHJlcXVpcmUoJ2V2ZW50c291cmNlJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnJlY2VpdmVyOmV2ZW50c291cmNlJyk7XG59XG5cbmZ1bmN0aW9uIEV2ZW50U291cmNlUmVjZWl2ZXIodXJsKSB7XG4gIGRlYnVnKHVybCk7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGVzID0gdGhpcy5lcyA9IG5ldyBFdmVudFNvdXJjZURyaXZlcih1cmwpO1xuICBlcy5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgZGVidWcoJ21lc3NhZ2UnLCBlLmRhdGEpO1xuICAgIHNlbGYuZW1pdCgnbWVzc2FnZScsIGRlY29kZVVSSShlLmRhdGEpKTtcbiAgfTtcbiAgZXMub25lcnJvciA9IGZ1bmN0aW9uKGUpIHtcbiAgICBkZWJ1ZygnZXJyb3InLCBlcy5yZWFkeVN0YXRlLCBlKTtcbiAgICAvLyBFUyBvbiByZWNvbm5lY3Rpb24gaGFzIHJlYWR5U3RhdGUgPSAwIG9yIDEuXG4gICAgLy8gb24gbmV0d29yayBlcnJvciBpdCdzIENMT1NFRCA9IDJcbiAgICB2YXIgcmVhc29uID0gKGVzLnJlYWR5U3RhdGUgIT09IDIgPyAnbmV0d29yaycgOiAncGVybWFuZW50Jyk7XG4gICAgc2VsZi5fY2xlYW51cCgpO1xuICAgIHNlbGYuX2Nsb3NlKHJlYXNvbik7XG4gIH07XG59XG5cbmluaGVyaXRzKEV2ZW50U291cmNlUmVjZWl2ZXIsIEV2ZW50RW1pdHRlcik7XG5cbkV2ZW50U291cmNlUmVjZWl2ZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdhYm9ydCcpO1xuICB0aGlzLl9jbGVhbnVwKCk7XG4gIHRoaXMuX2Nsb3NlKCd1c2VyJyk7XG59O1xuXG5FdmVudFNvdXJjZVJlY2VpdmVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuICB2YXIgZXMgPSB0aGlzLmVzO1xuICBpZiAoZXMpIHtcbiAgICBlcy5vbm1lc3NhZ2UgPSBlcy5vbmVycm9yID0gbnVsbDtcbiAgICBlcy5jbG9zZSgpO1xuICAgIHRoaXMuZXMgPSBudWxsO1xuICB9XG59O1xuXG5FdmVudFNvdXJjZVJlY2VpdmVyLnByb3RvdHlwZS5fY2xvc2UgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgZGVidWcoJ2Nsb3NlJywgcmVhc29uKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICAvLyBTYWZhcmkgYW5kIGNocm9tZSA8IDE1IGNyYXNoIGlmIHdlIGNsb3NlIHdpbmRvdyBiZWZvcmVcbiAgLy8gd2FpdGluZyBmb3IgRVMgY2xlYW51cC4gU2VlOlxuICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODkxNTVcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgbnVsbCwgcmVhc29uKTtcbiAgICBzZWxmLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9LCAyMDApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFNvdXJjZVJlY2VpdmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgaWZyYW1lVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9pZnJhbWUnKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCByYW5kb20gPSByZXF1aXJlKCcuLi8uLi91dGlscy9yYW5kb20nKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6cmVjZWl2ZXI6aHRtbGZpbGUnKTtcbn1cblxuZnVuY3Rpb24gSHRtbGZpbGVSZWNlaXZlcih1cmwpIHtcbiAgZGVidWcodXJsKTtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWZyYW1lVXRpbHMucG9sbHV0ZUdsb2JhbE5hbWVzcGFjZSgpO1xuXG4gIHRoaXMuaWQgPSAnYScgKyByYW5kb20uc3RyaW5nKDYpO1xuICB1cmwgPSB1cmxVdGlscy5hZGRRdWVyeSh1cmwsICdjPScgKyBkZWNvZGVVUklDb21wb25lbnQoaWZyYW1lVXRpbHMuV1ByZWZpeCArICcuJyArIHRoaXMuaWQpKTtcblxuICBkZWJ1ZygndXNpbmcgaHRtbGZpbGUnLCBIdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCk7XG4gIHZhciBjb25zdHJ1Y3RGdW5jID0gSHRtbGZpbGVSZWNlaXZlci5odG1sZmlsZUVuYWJsZWQgP1xuICAgICAgaWZyYW1lVXRpbHMuY3JlYXRlSHRtbGZpbGUgOiBpZnJhbWVVdGlscy5jcmVhdGVJZnJhbWU7XG5cbiAgZ2xvYmFsW2lmcmFtZVV0aWxzLldQcmVmaXhdW3RoaXMuaWRdID0ge1xuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdzdGFydCcpO1xuICAgICAgc2VsZi5pZnJhbWVPYmoubG9hZGVkKCk7XG4gICAgfVxuICAsIG1lc3NhZ2U6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGRlYnVnKCdtZXNzYWdlJywgZGF0YSk7XG4gICAgICBzZWxmLmVtaXQoJ21lc3NhZ2UnLCBkYXRhKTtcbiAgICB9XG4gICwgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICBkZWJ1Zygnc3RvcCcpO1xuICAgICAgc2VsZi5fY2xlYW51cCgpO1xuICAgICAgc2VsZi5fY2xvc2UoJ25ldHdvcmsnKTtcbiAgICB9XG4gIH07XG4gIHRoaXMuaWZyYW1lT2JqID0gY29uc3RydWN0RnVuYyh1cmwsIGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdjYWxsYmFjaycpO1xuICAgIHNlbGYuX2NsZWFudXAoKTtcbiAgICBzZWxmLl9jbG9zZSgncGVybWFuZW50Jyk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhIdG1sZmlsZVJlY2VpdmVyLCBFdmVudEVtaXR0ZXIpO1xuXG5IdG1sZmlsZVJlY2VpdmVyLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnYWJvcnQnKTtcbiAgdGhpcy5fY2xlYW51cCgpO1xuICB0aGlzLl9jbG9zZSgndXNlcicpO1xufTtcblxuSHRtbGZpbGVSZWNlaXZlci5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19jbGVhbnVwJyk7XG4gIGlmICh0aGlzLmlmcmFtZU9iaikge1xuICAgIHRoaXMuaWZyYW1lT2JqLmNsZWFudXAoKTtcbiAgICB0aGlzLmlmcmFtZU9iaiA9IG51bGw7XG4gIH1cbiAgZGVsZXRlIGdsb2JhbFtpZnJhbWVVdGlscy5XUHJlZml4XVt0aGlzLmlkXTtcbn07XG5cbkh0bWxmaWxlUmVjZWl2ZXIucHJvdG90eXBlLl9jbG9zZSA9IGZ1bmN0aW9uKHJlYXNvbikge1xuICBkZWJ1ZygnX2Nsb3NlJywgcmVhc29uKTtcbiAgdGhpcy5lbWl0KCdjbG9zZScsIG51bGwsIHJlYXNvbik7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5IdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCA9IGZhbHNlO1xuXG4vLyBvYmZ1c2NhdGUgdG8gYXZvaWQgZmlyZXdhbGxzXG52YXIgYXhvID0gWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKTtcbmlmIChheG8gaW4gZ2xvYmFsKSB7XG4gIHRyeSB7XG4gICAgSHRtbGZpbGVSZWNlaXZlci5odG1sZmlsZUVuYWJsZWQgPSAhIW5ldyBnbG9iYWxbYXhvXSgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgfVxufVxuXG5IdG1sZmlsZVJlY2VpdmVyLmVuYWJsZWQgPSBIdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCB8fCBpZnJhbWVVdGlscy5pZnJhbWVFbmFibGVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEh0bWxmaWxlUmVjZWl2ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2lmcmFtZScpXG4gICwgcmFuZG9tID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvcmFuZG9tJylcbiAgLCBicm93c2VyID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYnJvd3NlcicpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy91cmwnKVxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6cmVjZWl2ZXI6anNvbnAnKTtcbn1cblxuZnVuY3Rpb24gSnNvbnBSZWNlaXZlcih1cmwpIHtcbiAgZGVidWcodXJsKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB1dGlscy5wb2xsdXRlR2xvYmFsTmFtZXNwYWNlKCk7XG5cbiAgdGhpcy5pZCA9ICdhJyArIHJhbmRvbS5zdHJpbmcoNik7XG4gIHZhciB1cmxXaXRoSWQgPSB1cmxVdGlscy5hZGRRdWVyeSh1cmwsICdjPScgKyBlbmNvZGVVUklDb21wb25lbnQodXRpbHMuV1ByZWZpeCArICcuJyArIHRoaXMuaWQpKTtcblxuICBnbG9iYWxbdXRpbHMuV1ByZWZpeF1bdGhpcy5pZF0gPSB0aGlzLl9jYWxsYmFjay5iaW5kKHRoaXMpO1xuICB0aGlzLl9jcmVhdGVTY3JpcHQodXJsV2l0aElkKTtcblxuICAvLyBGYWxsYmFjayBtb3N0bHkgZm9yIEtvbnF1ZXJvciAtIHN0dXBpZCB0aW1lciwgMzUgc2Vjb25kcyBzaGFsbCBiZSBwbGVudHkuXG4gIHRoaXMudGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygndGltZW91dCcpO1xuICAgIHNlbGYuX2Fib3J0KG5ldyBFcnJvcignSlNPTlAgc2NyaXB0IGxvYWRlZCBhYm5vcm1hbGx5ICh0aW1lb3V0KScpKTtcbiAgfSwgSnNvbnBSZWNlaXZlci50aW1lb3V0KTtcbn1cblxuaW5oZXJpdHMoSnNvbnBSZWNlaXZlciwgRXZlbnRFbWl0dGVyKTtcblxuSnNvbnBSZWNlaXZlci5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Fib3J0Jyk7XG4gIGlmIChnbG9iYWxbdXRpbHMuV1ByZWZpeF1bdGhpcy5pZF0pIHtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdKU09OUCB1c2VyIGFib3J0ZWQgcmVhZCcpO1xuICAgIGVyci5jb2RlID0gMTAwMDtcbiAgICB0aGlzLl9hYm9ydChlcnIpO1xuICB9XG59O1xuXG5Kc29ucFJlY2VpdmVyLnRpbWVvdXQgPSAzNTAwMDtcbkpzb25wUmVjZWl2ZXIuc2NyaXB0RXJyb3JUaW1lb3V0ID0gMTAwMDtcblxuSnNvbnBSZWNlaXZlci5wcm90b3R5cGUuX2NhbGxiYWNrID0gZnVuY3Rpb24oZGF0YSkge1xuICBkZWJ1ZygnX2NhbGxiYWNrJywgZGF0YSk7XG4gIHRoaXMuX2NsZWFudXAoKTtcblxuICBpZiAodGhpcy5hYm9ydGluZykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChkYXRhKSB7XG4gICAgZGVidWcoJ21lc3NhZ2UnLCBkYXRhKTtcbiAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBkYXRhKTtcbiAgfVxuICB0aGlzLmVtaXQoJ2Nsb3NlJywgbnVsbCwgJ25ldHdvcmsnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cbkpzb25wUmVjZWl2ZXIucHJvdG90eXBlLl9hYm9ydCA9IGZ1bmN0aW9uKGVycikge1xuICBkZWJ1ZygnX2Fib3J0JywgZXJyKTtcbiAgdGhpcy5fY2xlYW51cCgpO1xuICB0aGlzLmFib3J0aW5nID0gdHJ1ZTtcbiAgdGhpcy5lbWl0KCdjbG9zZScsIGVyci5jb2RlLCBlcnIubWVzc2FnZSk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5Kc29ucFJlY2VpdmVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnX2NsZWFudXAnKTtcbiAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkKTtcbiAgaWYgKHRoaXMuc2NyaXB0Mikge1xuICAgIHRoaXMuc2NyaXB0Mi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0Mik7XG4gICAgdGhpcy5zY3JpcHQyID0gbnVsbDtcbiAgfVxuICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICB2YXIgc2NyaXB0ID0gdGhpcy5zY3JpcHQ7XG4gICAgLy8gVW5mb3J0dW5hdGVseSwgeW91IGNhbid0IHJlYWxseSBhYm9ydCBzY3JpcHQgbG9hZGluZyBvZlxuICAgIC8vIHRoZSBzY3JpcHQuXG4gICAgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gc2NyaXB0Lm9uZXJyb3IgPVxuICAgICAgICBzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9uY2xpY2sgPSBudWxsO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuICBkZWxldGUgZ2xvYmFsW3V0aWxzLldQcmVmaXhdW3RoaXMuaWRdO1xufTtcblxuSnNvbnBSZWNlaXZlci5wcm90b3R5cGUuX3NjcmlwdEVycm9yID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfc2NyaXB0RXJyb3InKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAodGhpcy5lcnJvclRpbWVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lcnJvclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBpZiAoIXNlbGYubG9hZGVkT2theSkge1xuICAgICAgc2VsZi5fYWJvcnQobmV3IEVycm9yKCdKU09OUCBzY3JpcHQgbG9hZGVkIGFibm9ybWFsbHkgKG9uZXJyb3IpJykpO1xuICAgIH1cbiAgfSwgSnNvbnBSZWNlaXZlci5zY3JpcHRFcnJvclRpbWVvdXQpO1xufTtcblxuSnNvbnBSZWNlaXZlci5wcm90b3R5cGUuX2NyZWF0ZVNjcmlwdCA9IGZ1bmN0aW9uKHVybCkge1xuICBkZWJ1ZygnX2NyZWF0ZVNjcmlwdCcsIHVybCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNjcmlwdCA9IHRoaXMuc2NyaXB0ID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICB2YXIgc2NyaXB0MjsgIC8vIE9wZXJhIHN5bmNocm9ub3VzIGxvYWQgdHJpY2suXG5cbiAgc2NyaXB0LmlkID0gJ2EnICsgcmFuZG9tLnN0cmluZyg4KTtcbiAgc2NyaXB0LnNyYyA9IHVybDtcbiAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgc2NyaXB0LmNoYXJzZXQgPSAnVVRGLTgnO1xuICBzY3JpcHQub25lcnJvciA9IHRoaXMuX3NjcmlwdEVycm9yLmJpbmQodGhpcyk7XG4gIHNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb25sb2FkJyk7XG4gICAgc2VsZi5fYWJvcnQobmV3IEVycm9yKCdKU09OUCBzY3JpcHQgbG9hZGVkIGFibm9ybWFsbHkgKG9ubG9hZCknKSk7XG4gIH07XG5cbiAgLy8gSUU5IGZpcmVzICdlcnJvcicgZXZlbnQgYWZ0ZXIgb25yZWFkeXN0YXRlY2hhbmdlIG9yIGJlZm9yZSwgaW4gcmFuZG9tIG9yZGVyLlxuICAvLyBVc2UgbG9hZGVkT2theSB0byBkZXRlcm1pbmUgaWYgYWN0dWFsbHkgZXJyb3JlZFxuICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ29ucmVhZHlzdGF0ZWNoYW5nZScsIHNjcmlwdC5yZWFkeVN0YXRlKTtcbiAgICBpZiAoL2xvYWRlZHxjbG9zZWQvLnRlc3Qoc2NyaXB0LnJlYWR5U3RhdGUpKSB7XG4gICAgICBpZiAoc2NyaXB0ICYmIHNjcmlwdC5odG1sRm9yICYmIHNjcmlwdC5vbmNsaWNrKSB7XG4gICAgICAgIHNlbGYubG9hZGVkT2theSA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gSW4gSUUsIGFjdHVhbGx5IGV4ZWN1dGUgdGhlIHNjcmlwdC5cbiAgICAgICAgICBzY3JpcHQub25jbGljaygpO1xuICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2NyaXB0KSB7XG4gICAgICAgIHNlbGYuX2Fib3J0KG5ldyBFcnJvcignSlNPTlAgc2NyaXB0IGxvYWRlZCBhYm5vcm1hbGx5IChvbnJlYWR5c3RhdGVjaGFuZ2UpJykpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgLy8gSUU6IGV2ZW50L2h0bWxGb3Ivb25jbGljayB0cmljay5cbiAgLy8gT25lIGNhbid0IHJlbHkgb24gcHJvcGVyIG9yZGVyIGZvciBvbnJlYWR5c3RhdGVjaGFuZ2UuIEluIG9yZGVyIHRvXG4gIC8vIG1ha2Ugc3VyZSwgc2V0IGEgJ2h0bWxGb3InIGFuZCAnZXZlbnQnIHByb3BlcnRpZXMsIHNvIHRoYXRcbiAgLy8gc2NyaXB0IGNvZGUgd2lsbCBiZSBpbnN0YWxsZWQgYXMgJ29uY2xpY2snIGhhbmRsZXIgZm9yIHRoZVxuICAvLyBzY3JpcHQgb2JqZWN0LiBMYXRlciwgb25yZWFkeXN0YXRlY2hhbmdlLCBtYW51YWxseSBleGVjdXRlIHRoaXNcbiAgLy8gY29kZS4gRkYgYW5kIENocm9tZSBkb2Vzbid0IHdvcmsgd2l0aCAnZXZlbnQnIGFuZCAnaHRtbEZvcidcbiAgLy8gc2V0LiBGb3IgcmVmZXJlbmNlIHNlZTpcbiAgLy8gICBodHRwOi8vamF1Ym91cmcubmV0LzIwMTAvMDcvbG9hZGluZy1zY3JpcHQtYXMtb25jbGljay1oYW5kbGVyLW9mLmh0bWxcbiAgLy8gQWxzbywgcmVhZCBvbiB0aGF0IGFib3V0IHNjcmlwdCBvcmRlcmluZzpcbiAgLy8gICBodHRwOi8vd2lraS53aGF0d2cub3JnL3dpa2kvRHluYW1pY19TY3JpcHRfRXhlY3V0aW9uX09yZGVyXG4gIGlmICh0eXBlb2Ygc2NyaXB0LmFzeW5jID09PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwuZG9jdW1lbnQuYXR0YWNoRXZlbnQpIHtcbiAgICAvLyBBY2NvcmRpbmcgdG8gbW96aWxsYSBkb2NzLCBpbiByZWNlbnQgYnJvd3NlcnMgc2NyaXB0LmFzeW5jIGRlZmF1bHRzXG4gICAgLy8gdG8gJ3RydWUnLCBzbyB3ZSBtYXkgdXNlIGl0IHRvIGRldGVjdCBhIGdvb2QgYnJvd3NlcjpcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9IVE1ML0VsZW1lbnQvc2NyaXB0XG4gICAgaWYgKCFicm93c2VyLmlzT3BlcmEoKSkge1xuICAgICAgLy8gTmFpdmVseSBhc3N1bWUgd2UncmUgaW4gSUVcbiAgICAgIHRyeSB7XG4gICAgICAgIHNjcmlwdC5odG1sRm9yID0gc2NyaXB0LmlkO1xuICAgICAgICBzY3JpcHQuZXZlbnQgPSAnb25jbGljayc7XG4gICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICAgIH1cbiAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9wZXJhLCBzZWNvbmQgc3luYyBzY3JpcHQgaGFja1xuICAgICAgc2NyaXB0MiA9IHRoaXMuc2NyaXB0MiA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHNjcmlwdDIudGV4dCA9IFwidHJ5e3ZhciBhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ1wiICsgc2NyaXB0LmlkICsgXCInKTsgaWYoYSlhLm9uZXJyb3IoKTt9Y2F0Y2goeCl7fTtcIjtcbiAgICAgIHNjcmlwdC5hc3luYyA9IHNjcmlwdDIuYXN5bmMgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBzY3JpcHQuYXN5bmMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBoZWFkID0gZ2xvYmFsLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gIGhlYWQuaW5zZXJ0QmVmb3JlKHNjcmlwdCwgaGVhZC5maXJzdENoaWxkKTtcbiAgaWYgKHNjcmlwdDIpIHtcbiAgICBoZWFkLmluc2VydEJlZm9yZShzY3JpcHQyLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpzb25wUmVjZWl2ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnJlY2VpdmVyOnhocicpO1xufVxuXG5mdW5jdGlvbiBYaHJSZWNlaXZlcih1cmwsIEFqYXhPYmplY3QpIHtcbiAgZGVidWcodXJsKTtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLmJ1ZmZlclBvc2l0aW9uID0gMDtcblxuICB0aGlzLnhvID0gbmV3IEFqYXhPYmplY3QoJ1BPU1QnLCB1cmwsIG51bGwpO1xuICB0aGlzLnhvLm9uKCdjaHVuaycsIHRoaXMuX2NodW5rSGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgdGhpcy54by5vbmNlKCdmaW5pc2gnLCBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHtcbiAgICBkZWJ1ZygnZmluaXNoJywgc3RhdHVzLCB0ZXh0KTtcbiAgICBzZWxmLl9jaHVua0hhbmRsZXIoc3RhdHVzLCB0ZXh0KTtcbiAgICBzZWxmLnhvID0gbnVsbDtcbiAgICB2YXIgcmVhc29uID0gc3RhdHVzID09PSAyMDAgPyAnbmV0d29yaycgOiAncGVybWFuZW50JztcbiAgICBkZWJ1ZygnY2xvc2UnLCByZWFzb24pO1xuICAgIHNlbGYuZW1pdCgnY2xvc2UnLCBudWxsLCByZWFzb24pO1xuICAgIHNlbGYuX2NsZWFudXAoKTtcbiAgfSk7XG59XG5cbmluaGVyaXRzKFhoclJlY2VpdmVyLCBFdmVudEVtaXR0ZXIpO1xuXG5YaHJSZWNlaXZlci5wcm90b3R5cGUuX2NodW5rSGFuZGxlciA9IGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuICBkZWJ1ZygnX2NodW5rSGFuZGxlcicsIHN0YXR1cyk7XG4gIGlmIChzdGF0dXMgIT09IDIwMCB8fCAhdGV4dCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAodmFyIGlkeCA9IC0xOyA7IHRoaXMuYnVmZmVyUG9zaXRpb24gKz0gaWR4ICsgMSkge1xuICAgIHZhciBidWYgPSB0ZXh0LnNsaWNlKHRoaXMuYnVmZmVyUG9zaXRpb24pO1xuICAgIGlkeCA9IGJ1Zi5pbmRleE9mKCdcXG4nKTtcbiAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBtc2cgPSBidWYuc2xpY2UoMCwgaWR4KTtcbiAgICBpZiAobXNnKSB7XG4gICAgICBkZWJ1ZygnbWVzc2FnZScsIG1zZyk7XG4gICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBtc2cpO1xuICAgIH1cbiAgfVxufTtcblxuWGhyUmVjZWl2ZXIucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfY2xlYW51cCcpO1xuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxuWGhyUmVjZWl2ZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdhYm9ydCcpO1xuICBpZiAodGhpcy54bykge1xuICAgIHRoaXMueG8uY2xvc2UoKTtcbiAgICBkZWJ1ZygnY2xvc2UnKTtcbiAgICB0aGlzLmVtaXQoJ2Nsb3NlJywgbnVsbCwgJ3VzZXInKTtcbiAgICB0aGlzLnhvID0gbnVsbDtcbiAgfVxuICB0aGlzLl9jbGVhbnVwKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhoclJlY2VpdmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmFuZG9tID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvcmFuZG9tJylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybCcpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpzZW5kZXI6anNvbnAnKTtcbn1cblxudmFyIGZvcm0sIGFyZWE7XG5cbmZ1bmN0aW9uIGNyZWF0ZUlmcmFtZShpZCkge1xuICBkZWJ1ZygnY3JlYXRlSWZyYW1lJywgaWQpO1xuICB0cnkge1xuICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9XCJcIiBzdXBwb3J0ICh0aGFua3MgQ2hyaXMgTGFtYmFjaGVyKVxuICAgIHJldHVybiBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnPGlmcmFtZSBuYW1lPVwiJyArIGlkICsgJ1wiPicpO1xuICB9IGNhdGNoICh4KSB7XG4gICAgdmFyIGlmcmFtZSA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICBpZnJhbWUubmFtZSA9IGlkO1xuICAgIHJldHVybiBpZnJhbWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRm9ybSgpIHtcbiAgZGVidWcoJ2NyZWF0ZUZvcm0nKTtcbiAgZm9ybSA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gIGZvcm0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIGZvcm0ubWV0aG9kID0gJ1BPU1QnO1xuICBmb3JtLmVuY3R5cGUgPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcbiAgZm9ybS5hY2NlcHRDaGFyc2V0ID0gJ1VURi04JztcblxuICBhcmVhID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gIGFyZWEubmFtZSA9ICdkJztcbiAgZm9ybS5hcHBlbmRDaGlsZChhcmVhKTtcblxuICBnbG9iYWwuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1cmwsIHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gIGRlYnVnKHVybCwgcGF5bG9hZCk7XG4gIGlmICghZm9ybSkge1xuICAgIGNyZWF0ZUZvcm0oKTtcbiAgfVxuICB2YXIgaWQgPSAnYScgKyByYW5kb20uc3RyaW5nKDgpO1xuICBmb3JtLnRhcmdldCA9IGlkO1xuICBmb3JtLmFjdGlvbiA9IHVybFV0aWxzLmFkZFF1ZXJ5KHVybFV0aWxzLmFkZFBhdGgodXJsLCAnL2pzb25wX3NlbmQnKSwgJ2k9JyArIGlkKTtcblxuICB2YXIgaWZyYW1lID0gY3JlYXRlSWZyYW1lKGlkKTtcbiAgaWZyYW1lLmlkID0gaWQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBmb3JtLmFwcGVuZENoaWxkKGlmcmFtZSk7XG5cbiAgdHJ5IHtcbiAgICBhcmVhLnZhbHVlID0gcGF5bG9hZDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHNlcmlvdXNseSBicm9rZW4gYnJvd3NlcnMgZ2V0IGhlcmVcbiAgfVxuICBmb3JtLnN1Ym1pdCgpO1xuXG4gIHZhciBjb21wbGV0ZWQgPSBmdW5jdGlvbihlcnIpIHtcbiAgICBkZWJ1ZygnY29tcGxldGVkJywgaWQsIGVycik7XG4gICAgaWYgKCFpZnJhbWUub25lcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZnJhbWUub25yZWFkeXN0YXRlY2hhbmdlID0gaWZyYW1lLm9uZXJyb3IgPSBpZnJhbWUub25sb2FkID0gbnVsbDtcbiAgICAvLyBPcGVyYSBtaW5pIGRvZXNuJ3QgbGlrZSBpZiB3ZSBHQyBpZnJhbWVcbiAgICAvLyBpbW1lZGlhdGVseSwgdGh1cyB0aGlzIHRpbWVvdXQuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdjbGVhbmluZyB1cCcsIGlkKTtcbiAgICAgIGlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICBpZnJhbWUgPSBudWxsO1xuICAgIH0sIDUwMCk7XG4gICAgYXJlYS52YWx1ZSA9ICcnO1xuICAgIC8vIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBkZXRlY3QgaWYgdGhlIGlmcmFtZSBzdWNjZWVkZWQgb3JcbiAgICAvLyBmYWlsZWQgdG8gc3VibWl0IG91ciBmb3JtLlxuICAgIGNhbGxiYWNrKGVycik7XG4gIH07XG4gIGlmcmFtZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBpZCk7XG4gICAgY29tcGxldGVkKCk7XG4gIH07XG4gIGlmcmFtZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb25sb2FkJywgaWQpO1xuICAgIGNvbXBsZXRlZCgpO1xuICB9O1xuICBpZnJhbWUub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgIGRlYnVnKCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCBpZCwgaWZyYW1lLnJlYWR5U3RhdGUsIGUpO1xuICAgIGlmIChpZnJhbWUucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgY29tcGxldGVkKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ2Fib3J0ZWQnLCBpZCk7XG4gICAgY29tcGxldGVkKG5ldyBFcnJvcignQWJvcnRlZCcpKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBldmVudFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZXZlbnQnKVxuICAsIGJyb3dzZXIgPSByZXF1aXJlKCcuLi8uLi91dGlscy9icm93c2VyJylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybCcpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpzZW5kZXI6eGRyJyk7XG59XG5cbi8vIFJlZmVyZW5jZXM6XG4vLyAgIGh0dHA6Ly9hamF4aWFuLmNvbS9hcmNoaXZlcy8xMDAtbGluZS1hamF4LXdyYXBwZXJcbi8vICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjMjg4MDYwKHY9VlMuODUpLmFzcHhcblxuZnVuY3Rpb24gWERST2JqZWN0KG1ldGhvZCwgdXJsLCBwYXlsb2FkKSB7XG4gIGRlYnVnKG1ldGhvZCwgdXJsKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX3N0YXJ0KG1ldGhvZCwgdXJsLCBwYXlsb2FkKTtcbiAgfSwgMCk7XG59XG5cbmluaGVyaXRzKFhEUk9iamVjdCwgRXZlbnRFbWl0dGVyKTtcblxuWERST2JqZWN0LnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbihtZXRob2QsIHVybCwgcGF5bG9hZCkge1xuICBkZWJ1ZygnX3N0YXJ0Jyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHhkciA9IG5ldyBnbG9iYWwuWERvbWFpblJlcXVlc3QoKTtcbiAgLy8gSUUgY2FjaGVzIGV2ZW4gUE9TVHNcbiAgdXJsID0gdXJsVXRpbHMuYWRkUXVlcnkodXJsLCAndD0nICsgKCtuZXcgRGF0ZSgpKSk7XG5cbiAgeGRyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicpO1xuICAgIHNlbGYuX2Vycm9yKCk7XG4gIH07XG4gIHhkci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb250aW1lb3V0Jyk7XG4gICAgc2VsZi5fZXJyb3IoKTtcbiAgfTtcbiAgeGRyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygncHJvZ3Jlc3MnLCB4ZHIucmVzcG9uc2VUZXh0KTtcbiAgICBzZWxmLmVtaXQoJ2NodW5rJywgMjAwLCB4ZHIucmVzcG9uc2VUZXh0KTtcbiAgfTtcbiAgeGRyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdsb2FkJyk7XG4gICAgc2VsZi5lbWl0KCdmaW5pc2gnLCAyMDAsIHhkci5yZXNwb25zZVRleHQpO1xuICAgIHNlbGYuX2NsZWFudXAoZmFsc2UpO1xuICB9O1xuICB0aGlzLnhkciA9IHhkcjtcbiAgdGhpcy51bmxvYWRSZWYgPSBldmVudFV0aWxzLnVubG9hZEFkZChmdW5jdGlvbigpIHtcbiAgICBzZWxmLl9jbGVhbnVwKHRydWUpO1xuICB9KTtcbiAgdHJ5IHtcbiAgICAvLyBGYWlscyB3aXRoIEFjY2Vzc0RlbmllZCBpZiBwb3J0IG51bWJlciBpcyBib2d1c1xuICAgIHRoaXMueGRyLm9wZW4obWV0aG9kLCB1cmwpO1xuICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgIHRoaXMueGRyLnRpbWVvdXQgPSB0aGlzLnRpbWVvdXQ7XG4gICAgfVxuICAgIHRoaXMueGRyLnNlbmQocGF5bG9hZCk7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICB0aGlzLl9lcnJvcigpO1xuICB9XG59O1xuXG5YRFJPYmplY3QucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVtaXQoJ2ZpbmlzaCcsIDAsICcnKTtcbiAgdGhpcy5fY2xlYW51cChmYWxzZSk7XG59O1xuXG5YRFJPYmplY3QucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oYWJvcnQpIHtcbiAgZGVidWcoJ2NsZWFudXAnLCBhYm9ydCk7XG4gIGlmICghdGhpcy54ZHIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgZXZlbnRVdGlscy51bmxvYWREZWwodGhpcy51bmxvYWRSZWYpO1xuXG4gIHRoaXMueGRyLm9udGltZW91dCA9IHRoaXMueGRyLm9uZXJyb3IgPSB0aGlzLnhkci5vbnByb2dyZXNzID0gdGhpcy54ZHIub25sb2FkID0gbnVsbDtcbiAgaWYgKGFib3J0KSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGRyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgIH1cbiAgfVxuICB0aGlzLnVubG9hZFJlZiA9IHRoaXMueGRyID0gbnVsbDtcbn07XG5cblhEUk9iamVjdC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMuX2NsZWFudXAodHJ1ZSk7XG59O1xuXG4vLyBJRSA4LzkgaWYgdGhlIHJlcXVlc3QgdGFyZ2V0IHVzZXMgdGhlIHNhbWUgc2NoZW1lIC0gIzc5XG5YRFJPYmplY3QuZW5hYmxlZCA9ICEhKGdsb2JhbC5YRG9tYWluUmVxdWVzdCAmJiBicm93c2VyLmhhc0RvbWFpbigpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBYRFJPYmplY3Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBYaHJEcml2ZXIgPSByZXF1aXJlKCcuLi9kcml2ZXIveGhyJylcbiAgO1xuXG5mdW5jdGlvbiBYSFJDb3JzT2JqZWN0KG1ldGhvZCwgdXJsLCBwYXlsb2FkLCBvcHRzKSB7XG4gIFhockRyaXZlci5jYWxsKHRoaXMsIG1ldGhvZCwgdXJsLCBwYXlsb2FkLCBvcHRzKTtcbn1cblxuaW5oZXJpdHMoWEhSQ29yc09iamVjdCwgWGhyRHJpdmVyKTtcblxuWEhSQ29yc09iamVjdC5lbmFibGVkID0gWGhyRHJpdmVyLmVuYWJsZWQgJiYgWGhyRHJpdmVyLnN1cHBvcnRzQ09SUztcblxubW9kdWxlLmV4cG9ydHMgPSBYSFJDb3JzT2JqZWN0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gIDtcblxuZnVuY3Rpb24gWEhSRmFrZSgvKiBtZXRob2QsIHVybCwgcGF5bG9hZCwgb3B0cyAqLykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHRoaXMudG8gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZW1pdCgnZmluaXNoJywgMjAwLCAne30nKTtcbiAgfSwgWEhSRmFrZS50aW1lb3V0KTtcbn1cblxuaW5oZXJpdHMoWEhSRmFrZSwgRXZlbnRFbWl0dGVyKTtcblxuWEhSRmFrZS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgY2xlYXJUaW1lb3V0KHRoaXMudG8pO1xufTtcblxuWEhSRmFrZS50aW1lb3V0ID0gMjAwMDtcblxubW9kdWxlLmV4cG9ydHMgPSBYSFJGYWtlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgWGhyRHJpdmVyID0gcmVxdWlyZSgnLi4vZHJpdmVyL3hocicpXG4gIDtcblxuZnVuY3Rpb24gWEhSTG9jYWxPYmplY3QobWV0aG9kLCB1cmwsIHBheWxvYWQgLyosIG9wdHMgKi8pIHtcbiAgWGhyRHJpdmVyLmNhbGwodGhpcywgbWV0aG9kLCB1cmwsIHBheWxvYWQsIHtcbiAgICBub0NyZWRlbnRpYWxzOiB0cnVlXG4gIH0pO1xufVxuXG5pbmhlcml0cyhYSFJMb2NhbE9iamVjdCwgWGhyRHJpdmVyKTtcblxuWEhSTG9jYWxPYmplY3QuZW5hYmxlZCA9IFhockRyaXZlci5lbmFibGVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUkxvY2FsT2JqZWN0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy9ldmVudCcpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91cmwnKVxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIFdlYnNvY2tldERyaXZlciA9IHJlcXVpcmUoJy4vZHJpdmVyL3dlYnNvY2tldCcpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDp3ZWJzb2NrZXQnKTtcbn1cblxuZnVuY3Rpb24gV2ViU29ja2V0VHJhbnNwb3J0KHRyYW5zVXJsLCBpZ25vcmUsIG9wdGlvbnMpIHtcbiAgaWYgKCFXZWJTb2NrZXRUcmFuc3BvcnQuZW5hYmxlZCgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgY3JlYXRlZCB3aGVuIGRpc2FibGVkJyk7XG4gIH1cblxuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbiAgZGVidWcoJ2NvbnN0cnVjdG9yJywgdHJhbnNVcmwpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHVybCA9IHVybFV0aWxzLmFkZFBhdGgodHJhbnNVcmwsICcvd2Vic29ja2V0Jyk7XG4gIGlmICh1cmwuc2xpY2UoMCwgNSkgPT09ICdodHRwcycpIHtcbiAgICB1cmwgPSAnd3NzJyArIHVybC5zbGljZSg1KTtcbiAgfSBlbHNlIHtcbiAgICB1cmwgPSAnd3MnICsgdXJsLnNsaWNlKDQpO1xuICB9XG4gIHRoaXMudXJsID0gdXJsO1xuXG4gIHRoaXMud3MgPSBuZXcgV2Vic29ja2V0RHJpdmVyKHRoaXMudXJsLCBbXSwgb3B0aW9ucyk7XG4gIHRoaXMud3Mub25tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xuICAgIGRlYnVnKCdtZXNzYWdlIGV2ZW50JywgZS5kYXRhKTtcbiAgICBzZWxmLmVtaXQoJ21lc3NhZ2UnLCBlLmRhdGEpO1xuICB9O1xuICAvLyBGaXJlZm94IGhhcyBhbiBpbnRlcmVzdGluZyBidWcuIElmIGEgd2Vic29ja2V0IGNvbm5lY3Rpb24gaXNcbiAgLy8gY3JlYXRlZCBhZnRlciBvbnVubG9hZCwgaXQgc3RheXMgYWxpdmUgZXZlbiB3aGVuIHVzZXJcbiAgLy8gbmF2aWdhdGVzIGF3YXkgZnJvbSB0aGUgcGFnZS4gSW4gc3VjaCBzaXR1YXRpb24gbGV0J3MgbGllIC1cbiAgLy8gbGV0J3Mgbm90IG9wZW4gdGhlIHdzIGNvbm5lY3Rpb24gYXQgYWxsLiBTZWU6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zb2NranMvc29ja2pzLWNsaWVudC9pc3N1ZXMvMjhcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk2MDg1XG4gIHRoaXMudW5sb2FkUmVmID0gdXRpbHMudW5sb2FkQWRkKGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCd1bmxvYWQnKTtcbiAgICBzZWxmLndzLmNsb3NlKCk7XG4gIH0pO1xuICB0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbihlKSB7XG4gICAgZGVidWcoJ2Nsb3NlIGV2ZW50JywgZS5jb2RlLCBlLnJlYXNvbik7XG4gICAgc2VsZi5lbWl0KCdjbG9zZScsIGUuY29kZSwgZS5yZWFzb24pO1xuICAgIHNlbGYuX2NsZWFudXAoKTtcbiAgfTtcbiAgdGhpcy53cy5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xuICAgIGRlYnVnKCdlcnJvciBldmVudCcsIGUpO1xuICAgIHNlbGYuZW1pdCgnY2xvc2UnLCAxMDA2LCAnV2ViU29ja2V0IGNvbm5lY3Rpb24gYnJva2VuJyk7XG4gICAgc2VsZi5fY2xlYW51cCgpO1xuICB9O1xufVxuXG5pbmhlcml0cyhXZWJTb2NrZXRUcmFuc3BvcnQsIEV2ZW50RW1pdHRlcik7XG5cbldlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdmFyIG1zZyA9ICdbJyArIGRhdGEgKyAnXSc7XG4gIGRlYnVnKCdzZW5kJywgbXNnKTtcbiAgdGhpcy53cy5zZW5kKG1zZyk7XG59O1xuXG5XZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdjbG9zZScpO1xuICB2YXIgd3MgPSB0aGlzLndzO1xuICB0aGlzLl9jbGVhbnVwKCk7XG4gIGlmICh3cykge1xuICAgIHdzLmNsb3NlKCk7XG4gIH1cbn07XG5cbldlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19jbGVhbnVwJyk7XG4gIHZhciB3cyA9IHRoaXMud3M7XG4gIGlmICh3cykge1xuICAgIHdzLm9ubWVzc2FnZSA9IHdzLm9uY2xvc2UgPSB3cy5vbmVycm9yID0gbnVsbDtcbiAgfVxuICB1dGlscy51bmxvYWREZWwodGhpcy51bmxvYWRSZWYpO1xuICB0aGlzLnVubG9hZFJlZiA9IHRoaXMud3MgPSBudWxsO1xuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxuV2ViU29ja2V0VHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2VuYWJsZWQnKTtcbiAgcmV0dXJuICEhV2Vic29ja2V0RHJpdmVyO1xufTtcbldlYlNvY2tldFRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ3dlYnNvY2tldCc7XG5cbi8vIEluIHRoZW9yeSwgd3Mgc2hvdWxkIHJlcXVpcmUgMSByb3VuZCB0cmlwLiBCdXQgaW4gY2hyb21lLCB0aGlzIGlzXG4vLyBub3QgdmVyeSBzdGFibGUgb3ZlciBTU0wuIE1vc3QgbGlrZWx5IGEgd3MgY29ubmVjdGlvbiByZXF1aXJlcyBhXG4vLyBzZXBhcmF0ZSBTU0wgY29ubmVjdGlvbiwgaW4gd2hpY2ggY2FzZSAyIHJvdW5kIHRyaXBzIGFyZSBhblxuLy8gYWJzb2x1dGUgbWludW11bS5cbldlYlNvY2tldFRyYW5zcG9ydC5yb3VuZFRyaXBzID0gMjtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJTb2NrZXRUcmFuc3BvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBBamF4QmFzZWRUcmFuc3BvcnQgPSByZXF1aXJlKCcuL2xpYi9hamF4LWJhc2VkJylcbiAgLCBYZHJTdHJlYW1pbmdUcmFuc3BvcnQgPSByZXF1aXJlKCcuL3hkci1zdHJlYW1pbmcnKVxuICAsIFhoclJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci94aHInKVxuICAsIFhEUk9iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hkcicpXG4gIDtcblxuZnVuY3Rpb24gWGRyUG9sbGluZ1RyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIVhEUk9iamVjdC5lbmFibGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgY3JlYXRlZCB3aGVuIGRpc2FibGVkJyk7XG4gIH1cbiAgQWpheEJhc2VkVHJhbnNwb3J0LmNhbGwodGhpcywgdHJhbnNVcmwsICcveGhyJywgWGhyUmVjZWl2ZXIsIFhEUk9iamVjdCk7XG59XG5cbmluaGVyaXRzKFhkclBvbGxpbmdUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cblhkclBvbGxpbmdUcmFuc3BvcnQuZW5hYmxlZCA9IFhkclN0cmVhbWluZ1RyYW5zcG9ydC5lbmFibGVkO1xuWGRyUG9sbGluZ1RyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ3hkci1wb2xsaW5nJztcblhkclBvbGxpbmdUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7IC8vIHByZWZsaWdodCwgYWpheFxuXG5tb2R1bGUuZXhwb3J0cyA9IFhkclBvbGxpbmdUcmFuc3BvcnQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBBamF4QmFzZWRUcmFuc3BvcnQgPSByZXF1aXJlKCcuL2xpYi9hamF4LWJhc2VkJylcbiAgLCBYaHJSZWNlaXZlciA9IHJlcXVpcmUoJy4vcmVjZWl2ZXIveGhyJylcbiAgLCBYRFJPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94ZHInKVxuICA7XG5cbi8vIEFjY29yZGluZyB0bzpcbi8vICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjQxNTA3L2RldGVjdC1icm93c2VyLXN1cHBvcnQtZm9yLWNyb3NzLWRvbWFpbi14bWxodHRwcmVxdWVzdHNcbi8vICAgaHR0cDovL2hhY2tzLm1vemlsbGEub3JnLzIwMDkvMDcvY3Jvc3Mtc2l0ZS14bWxodHRwcmVxdWVzdC13aXRoLWNvcnMvXG5cbmZ1bmN0aW9uIFhkclN0cmVhbWluZ1RyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIVhEUk9iamVjdC5lbmFibGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgY3JlYXRlZCB3aGVuIGRpc2FibGVkJyk7XG4gIH1cbiAgQWpheEJhc2VkVHJhbnNwb3J0LmNhbGwodGhpcywgdHJhbnNVcmwsICcveGhyX3N0cmVhbWluZycsIFhoclJlY2VpdmVyLCBYRFJPYmplY3QpO1xufVxuXG5pbmhlcml0cyhYZHJTdHJlYW1pbmdUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cblhkclN0cmVhbWluZ1RyYW5zcG9ydC5lbmFibGVkID0gZnVuY3Rpb24oaW5mbykge1xuICBpZiAoaW5mby5jb29raWVfbmVlZGVkIHx8IGluZm8ubnVsbE9yaWdpbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gWERST2JqZWN0LmVuYWJsZWQgJiYgaW5mby5zYW1lU2NoZW1lO1xufTtcblxuWGRyU3RyZWFtaW5nVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAneGRyLXN0cmVhbWluZyc7XG5YZHJTdHJlYW1pbmdUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7IC8vIHByZWZsaWdodCwgYWpheFxuXG5tb2R1bGUuZXhwb3J0cyA9IFhkclN0cmVhbWluZ1RyYW5zcG9ydDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEFqYXhCYXNlZFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vbGliL2FqYXgtYmFzZWQnKVxuICAsIFhoclJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci94aHInKVxuICAsIFhIUkNvcnNPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItY29ycycpXG4gICwgWEhSTG9jYWxPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItbG9jYWwnKVxuICA7XG5cbmZ1bmN0aW9uIFhoclBvbGxpbmdUcmFuc3BvcnQodHJhbnNVcmwpIHtcbiAgaWYgKCFYSFJMb2NhbE9iamVjdC5lbmFibGVkICYmICFYSFJDb3JzT2JqZWN0LmVuYWJsZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy94aHInLCBYaHJSZWNlaXZlciwgWEhSQ29yc09iamVjdCk7XG59XG5cbmluaGVyaXRzKFhoclBvbGxpbmdUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cblhoclBvbGxpbmdUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKGluZm8pIHtcbiAgaWYgKGluZm8ubnVsbE9yaWdpbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChYSFJMb2NhbE9iamVjdC5lbmFibGVkICYmIGluZm8uc2FtZU9yaWdpbikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBYSFJDb3JzT2JqZWN0LmVuYWJsZWQ7XG59O1xuXG5YaHJQb2xsaW5nVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAneGhyLXBvbGxpbmcnO1xuWGhyUG9sbGluZ1RyYW5zcG9ydC5yb3VuZFRyaXBzID0gMjsgLy8gcHJlZmxpZ2h0LCBhamF4XG5cbm1vZHVsZS5leHBvcnRzID0gWGhyUG9sbGluZ1RyYW5zcG9ydDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEFqYXhCYXNlZFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vbGliL2FqYXgtYmFzZWQnKVxuICAsIFhoclJlY2VpdmVyID0gcmVxdWlyZSgnLi9yZWNlaXZlci94aHInKVxuICAsIFhIUkNvcnNPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItY29ycycpXG4gICwgWEhSTG9jYWxPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94aHItbG9jYWwnKVxuICAsIGJyb3dzZXIgPSByZXF1aXJlKCcuLi91dGlscy9icm93c2VyJylcbiAgO1xuXG5mdW5jdGlvbiBYaHJTdHJlYW1pbmdUcmFuc3BvcnQodHJhbnNVcmwpIHtcbiAgaWYgKCFYSFJMb2NhbE9iamVjdC5lbmFibGVkICYmICFYSFJDb3JzT2JqZWN0LmVuYWJsZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy94aHJfc3RyZWFtaW5nJywgWGhyUmVjZWl2ZXIsIFhIUkNvcnNPYmplY3QpO1xufVxuXG5pbmhlcml0cyhYaHJTdHJlYW1pbmdUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cblhoclN0cmVhbWluZ1RyYW5zcG9ydC5lbmFibGVkID0gZnVuY3Rpb24oaW5mbykge1xuICBpZiAoaW5mby5udWxsT3JpZ2luKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIE9wZXJhIGRvZXNuJ3Qgc3VwcG9ydCB4aHItc3RyZWFtaW5nICM2MFxuICAvLyBCdXQgaXQgbWlnaHQgYmUgYWJsZSB0byAjOTJcbiAgaWYgKGJyb3dzZXIuaXNPcGVyYSgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIFhIUkNvcnNPYmplY3QuZW5hYmxlZDtcbn07XG5cblhoclN0cmVhbWluZ1RyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ3hoci1zdHJlYW1pbmcnO1xuWGhyU3RyZWFtaW5nVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyOyAvLyBwcmVmbGlnaHQsIGFqYXhcblxuLy8gU2FmYXJpIGdldHMgY29uZnVzZWQgd2hlbiBhIHN0cmVhbWluZyBhamF4IHJlcXVlc3QgaXMgc3RhcnRlZFxuLy8gYmVmb3JlIG9ubG9hZC4gVGhpcyBjYXVzZXMgdGhlIGxvYWQgaW5kaWNhdG9yIHRvIHNwaW4gaW5kZWZpbmV0ZWx5LlxuLy8gT25seSByZXF1aXJlIGJvZHkgd2hlbiB1c2VkIGluIGEgYnJvd3NlclxuWGhyU3RyZWFtaW5nVHJhbnNwb3J0Lm5lZWRCb2R5ID0gISFnbG9iYWwuZG9jdW1lbnQ7XG5cbm1vZHVsZS5leHBvcnRzID0gWGhyU3RyZWFtaW5nVHJhbnNwb3J0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAoZ2xvYmFsLmNyeXB0byAmJiBnbG9iYWwuY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICBtb2R1bGUuZXhwb3J0cy5yYW5kb21CeXRlcyA9IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgZ2xvYmFsLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMpO1xuICAgIHJldHVybiBieXRlcztcbiAgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzLnJhbmRvbUJ5dGVzID0gZnVuY3Rpb24obGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYnl0ZXNbaV0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpO1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZXM7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc09wZXJhOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2xvYmFsLm5hdmlnYXRvciAmJlxuICAgICAgL29wZXJhL2kudGVzdChnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIH1cblxuLCBpc0tvbnF1ZXJvcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5uYXZpZ2F0b3IgJiZcbiAgICAgIC9rb25xdWVyb3IvaS50ZXN0KGdsb2JhbC5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgfVxuXG4gIC8vICMxODcgd3JhcCBkb2N1bWVudC5kb21haW4gaW4gdHJ5L2NhdGNoIGJlY2F1c2Ugb2YgV1A4IGZyb20gZmlsZTovLy9cbiwgaGFzRG9tYWluOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gbm9uLWJyb3dzZXIgY2xpZW50IGFsd2F5cyBoYXMgYSBkb21haW5cbiAgICBpZiAoIWdsb2JhbC5kb2N1bWVudCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAhIWdsb2JhbC5kb2N1bWVudC5kb21haW47XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gU29tZSBleHRyYSBjaGFyYWN0ZXJzIHRoYXQgQ2hyb21lIGdldHMgd3JvbmcsIGFuZCBzdWJzdGl0dXRlcyB3aXRoXG4vLyBzb21ldGhpbmcgZWxzZSBvbiB0aGUgd2lyZS5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4LCBuby1taXNsZWFkaW5nLWNoYXJhY3Rlci1jbGFzc1xudmFyIGV4dHJhRXNjYXBhYmxlID0gL1tcXHgwMC1cXHgxZlxcdWQ4MDAtXFx1ZGZmZlxcdWZmZmVcXHVmZmZmXFx1MDMwMC1cXHUwMzMzXFx1MDMzZC1cXHUwMzQ2XFx1MDM0YS1cXHUwMzRjXFx1MDM1MC1cXHUwMzUyXFx1MDM1Ny1cXHUwMzU4XFx1MDM1Yy1cXHUwMzYyXFx1MDM3NFxcdTAzN2VcXHUwMzg3XFx1MDU5MS1cXHUwNWFmXFx1MDVjNFxcdTA2MTAtXFx1MDYxN1xcdTA2NTMtXFx1MDY1NFxcdTA2NTctXFx1MDY1YlxcdTA2NWQtXFx1MDY1ZVxcdTA2ZGYtXFx1MDZlMlxcdTA2ZWItXFx1MDZlY1xcdTA3MzBcXHUwNzMyLVxcdTA3MzNcXHUwNzM1LVxcdTA3MzZcXHUwNzNhXFx1MDczZFxcdTA3M2YtXFx1MDc0MVxcdTA3NDNcXHUwNzQ1XFx1MDc0N1xcdTA3ZWItXFx1MDdmMVxcdTA5NTFcXHUwOTU4LVxcdTA5NWZcXHUwOWRjLVxcdTA5ZGRcXHUwOWRmXFx1MGEzM1xcdTBhMzZcXHUwYTU5LVxcdTBhNWJcXHUwYTVlXFx1MGI1Yy1cXHUwYjVkXFx1MGUzOC1cXHUwZTM5XFx1MGY0M1xcdTBmNGRcXHUwZjUyXFx1MGY1N1xcdTBmNWNcXHUwZjY5XFx1MGY3Mi1cXHUwZjc2XFx1MGY3OFxcdTBmODAtXFx1MGY4M1xcdTBmOTNcXHUwZjlkXFx1MGZhMlxcdTBmYTdcXHUwZmFjXFx1MGZiOVxcdTE5MzktXFx1MTkzYVxcdTFhMTdcXHUxYjZiXFx1MWNkYS1cXHUxY2RiXFx1MWRjMC1cXHUxZGNmXFx1MWRmY1xcdTFkZmVcXHUxZjcxXFx1MWY3M1xcdTFmNzVcXHUxZjc3XFx1MWY3OVxcdTFmN2JcXHUxZjdkXFx1MWZiYlxcdTFmYmVcXHUxZmM5XFx1MWZjYlxcdTFmZDNcXHUxZmRiXFx1MWZlM1xcdTFmZWJcXHUxZmVlLVxcdTFmZWZcXHUxZmY5XFx1MWZmYlxcdTFmZmRcXHUyMDAwLVxcdTIwMDFcXHUyMGQwLVxcdTIwZDFcXHUyMGQ0LVxcdTIwZDdcXHUyMGU3LVxcdTIwZTlcXHUyMTI2XFx1MjEyYS1cXHUyMTJiXFx1MjMyOS1cXHUyMzJhXFx1MmFkY1xcdTMwMmItXFx1MzAyY1xcdWFhYjItXFx1YWFiM1xcdWY5MDAtXFx1ZmEwZFxcdWZhMTBcXHVmYTEyXFx1ZmExNS1cXHVmYTFlXFx1ZmEyMFxcdWZhMjJcXHVmYTI1LVxcdWZhMjZcXHVmYTJhLVxcdWZhMmRcXHVmYTMwLVxcdWZhNmRcXHVmYTcwLVxcdWZhZDlcXHVmYjFkXFx1ZmIxZlxcdWZiMmEtXFx1ZmIzNlxcdWZiMzgtXFx1ZmIzY1xcdWZiM2VcXHVmYjQwLVxcdWZiNDFcXHVmYjQzLVxcdWZiNDRcXHVmYjQ2LVxcdWZiNGVcXHVmZmYwLVxcdWZmZmZdL2dcbiAgLCBleHRyYUxvb2t1cDtcblxuLy8gVGhpcyBtYXkgYmUgcXVpdGUgc2xvdywgc28gbGV0J3MgZGVsYXkgdW50aWwgdXNlciBhY3R1YWxseSB1c2VzIGJhZFxuLy8gY2hhcmFjdGVycy5cbnZhciB1bnJvbGxMb29rdXAgPSBmdW5jdGlvbihlc2NhcGFibGUpIHtcbiAgdmFyIGk7XG4gIHZhciB1bnJvbGxlZCA9IHt9O1xuICB2YXIgYyA9IFtdO1xuICBmb3IgKGkgPSAwOyBpIDwgNjU1MzY7IGkrKykge1xuICAgIGMucHVzaCggU3RyaW5nLmZyb21DaGFyQ29kZShpKSApO1xuICB9XG4gIGVzY2FwYWJsZS5sYXN0SW5kZXggPSAwO1xuICBjLmpvaW4oJycpLnJlcGxhY2UoZXNjYXBhYmxlLCBmdW5jdGlvbihhKSB7XG4gICAgdW5yb2xsZWRbIGEgXSA9ICdcXFxcdScgKyAoJzAwMDAnICsgYS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xuICAgIHJldHVybiAnJztcbiAgfSk7XG4gIGVzY2FwYWJsZS5sYXN0SW5kZXggPSAwO1xuICByZXR1cm4gdW5yb2xsZWQ7XG59O1xuXG4vLyBRdW90ZSBzdHJpbmcsIGFsc28gdGFraW5nIGNhcmUgb2YgdW5pY29kZSBjaGFyYWN0ZXJzIHRoYXQgYnJvd3NlcnNcbi8vIG9mdGVuIGJyZWFrLiBFc3BlY2lhbGx5LCB0YWtlIGNhcmUgb2YgdW5pY29kZSBzdXJyb2dhdGVzOlxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NYXBwaW5nX29mX1VuaWNvZGVfY2hhcmFjdGVycyNTdXJyb2dhdGVzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcXVvdGU6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHZhciBxdW90ZWQgPSBKU09OLnN0cmluZ2lmeShzdHJpbmcpO1xuXG4gICAgLy8gSW4gbW9zdCBjYXNlcyB0aGlzIHNob3VsZCBiZSB2ZXJ5IGZhc3QgYW5kIGdvb2QgZW5vdWdoLlxuICAgIGV4dHJhRXNjYXBhYmxlLmxhc3RJbmRleCA9IDA7XG4gICAgaWYgKCFleHRyYUVzY2FwYWJsZS50ZXN0KHF1b3RlZCkpIHtcbiAgICAgIHJldHVybiBxdW90ZWQ7XG4gICAgfVxuXG4gICAgaWYgKCFleHRyYUxvb2t1cCkge1xuICAgICAgZXh0cmFMb29rdXAgPSB1bnJvbGxMb29rdXAoZXh0cmFFc2NhcGFibGUpO1xuICAgIH1cblxuICAgIHJldHVybiBxdW90ZWQucmVwbGFjZShleHRyYUVzY2FwYWJsZSwgZnVuY3Rpb24oYSkge1xuICAgICAgcmV0dXJuIGV4dHJhTG9va3VwW2FdO1xuICAgIH0pO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmFuZG9tID0gcmVxdWlyZSgnLi9yYW5kb20nKTtcblxudmFyIG9uVW5sb2FkID0ge31cbiAgLCBhZnRlclVubG9hZCA9IGZhbHNlXG4gICAgLy8gZGV0ZWN0IGdvb2dsZSBjaHJvbWUgcGFja2FnZWQgYXBwcyBiZWNhdXNlIHRoZXkgZG9uJ3QgYWxsb3cgdGhlICd1bmxvYWQnIGV2ZW50XG4gICwgaXNDaHJvbWVQYWNrYWdlZEFwcCA9IGdsb2JhbC5jaHJvbWUgJiYgZ2xvYmFsLmNocm9tZS5hcHAgJiYgZ2xvYmFsLmNocm9tZS5hcHAucnVudGltZVxuICA7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhdHRhY2hFdmVudDogZnVuY3Rpb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLmRvY3VtZW50ICYmIGdsb2JhbC5hdHRhY2hFdmVudCkge1xuICAgICAgLy8gSUUgcXVpcmtzLlxuICAgICAgLy8gQWNjb3JkaW5nIHRvOiBodHRwOi8vc3RldmVzb3VkZXJzLmNvbS9taXNjL3Rlc3QtcG9zdG1lc3NhZ2UucGhwXG4gICAgICAvLyB0aGUgbWVzc2FnZSBnZXRzIGRlbGl2ZXJlZCBvbmx5IHRvICdkb2N1bWVudCcsIG5vdCAnd2luZG93Jy5cbiAgICAgIGdsb2JhbC5kb2N1bWVudC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgIC8vIEkgZ2V0ICd3aW5kb3cnIGZvciBpZTguXG4gICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICB9XG5cbiwgZGV0YWNoRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBnbG9iYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5kb2N1bWVudCAmJiBnbG9iYWwuZGV0YWNoRXZlbnQpIHtcbiAgICAgIGdsb2JhbC5kb2N1bWVudC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgIGdsb2JhbC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH1cblxuLCB1bmxvYWRBZGQ6IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgaWYgKGlzQ2hyb21lUGFja2FnZWRBcHApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciByZWYgPSByYW5kb20uc3RyaW5nKDgpO1xuICAgIG9uVW5sb2FkW3JlZl0gPSBsaXN0ZW5lcjtcbiAgICBpZiAoYWZ0ZXJVbmxvYWQpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy50cmlnZ2VyVW5sb2FkQ2FsbGJhY2tzLCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZjtcbiAgfVxuXG4sIHVubG9hZERlbDogZnVuY3Rpb24ocmVmKSB7XG4gICAgaWYgKHJlZiBpbiBvblVubG9hZCkge1xuICAgICAgZGVsZXRlIG9uVW5sb2FkW3JlZl07XG4gICAgfVxuICB9XG5cbiwgdHJpZ2dlclVubG9hZENhbGxiYWNrczogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcmVmIGluIG9uVW5sb2FkKSB7XG4gICAgICBvblVubG9hZFtyZWZdKCk7XG4gICAgICBkZWxldGUgb25VbmxvYWRbcmVmXTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB1bmxvYWRUcmlnZ2VyZWQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKGFmdGVyVW5sb2FkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFmdGVyVW5sb2FkID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMudHJpZ2dlclVubG9hZENhbGxiYWNrcygpO1xufTtcblxuLy8gJ3VubG9hZCcgYWxvbmUgaXMgbm90IHJlbGlhYmxlIGluIG9wZXJhIHdpdGhpbiBhbiBpZnJhbWUsIGJ1dCB3ZVxuLy8gY2FuJ3QgdXNlIGBiZWZvcmV1bmxvYWRgIGFzIElFIGZpcmVzIGl0IG9uIGphdmFzY3JpcHQ6IGxpbmtzLlxuaWYgKCFpc0Nocm9tZVBhY2thZ2VkQXBwKSB7XG4gIG1vZHVsZS5leHBvcnRzLmF0dGFjaEV2ZW50KCd1bmxvYWQnLCB1bmxvYWRUcmlnZ2VyZWQpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZXZlbnRVdGlscyA9IHJlcXVpcmUoJy4vZXZlbnQnKVxuICAsIGJyb3dzZXIgPSByZXF1aXJlKCcuL2Jyb3dzZXInKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6dXRpbHM6aWZyYW1lJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBXUHJlZml4OiAnX2pwJ1xuLCBjdXJyZW50V2luZG93SWQ6IG51bGxcblxuLCBwb2xsdXRlR2xvYmFsTmFtZXNwYWNlOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIShtb2R1bGUuZXhwb3J0cy5XUHJlZml4IGluIGdsb2JhbCkpIHtcbiAgICAgIGdsb2JhbFttb2R1bGUuZXhwb3J0cy5XUHJlZml4XSA9IHt9O1xuICAgIH1cbiAgfVxuXG4sIHBvc3RNZXNzYWdlOiBmdW5jdGlvbih0eXBlLCBkYXRhKSB7XG4gICAgaWYgKGdsb2JhbC5wYXJlbnQgIT09IGdsb2JhbCkge1xuICAgICAgZ2xvYmFsLnBhcmVudC5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHdpbmRvd0lkOiBtb2R1bGUuZXhwb3J0cy5jdXJyZW50V2luZG93SWRcbiAgICAgICwgdHlwZTogdHlwZVxuICAgICAgLCBkYXRhOiBkYXRhIHx8ICcnXG4gICAgICB9KSwgJyonKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ0Nhbm5vdCBwb3N0TWVzc2FnZSwgbm8gcGFyZW50IHdpbmRvdy4nLCB0eXBlLCBkYXRhKTtcbiAgICB9XG4gIH1cblxuLCBjcmVhdGVJZnJhbWU6IGZ1bmN0aW9uKGlmcmFtZVVybCwgZXJyb3JDYWxsYmFjaykge1xuICAgIHZhciBpZnJhbWUgPSBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgdmFyIHRyZWYsIHVubG9hZFJlZjtcbiAgICB2YXIgdW5hdHRhY2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCd1bmF0dGFjaCcpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRyZWYpO1xuICAgICAgLy8gRXhwbG9yZXIgaGFkIHByb2JsZW1zIHdpdGggdGhhdC5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmcmFtZS5vbmxvYWQgPSBudWxsO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgICB9XG4gICAgICBpZnJhbWUub25lcnJvciA9IG51bGw7XG4gICAgfTtcbiAgICB2YXIgY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgdW5hdHRhY2goKTtcbiAgICAgICAgLy8gVGhpcyB0aW1lb3V0IG1ha2VzIGNocm9tZSBmaXJlIG9uYmVmb3JldW5sb2FkIGV2ZW50XG4gICAgICAgIC8vIHdpdGhpbiBpZnJhbWUuIFdpdGhvdXQgdGhlIHRpbWVvdXQgaXQgZ29lcyBzdHJhaWdodCB0b1xuICAgICAgICAvLyBvbnVubG9hZC5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoaWZyYW1lKSB7XG4gICAgICAgICAgICBpZnJhbWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZnJhbWUgPSBudWxsO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgZXZlbnRVdGlscy51bmxvYWREZWwodW5sb2FkUmVmKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvbmVycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gICAgICBkZWJ1Zygnb25lcnJvcicsIGVycik7XG4gICAgICBpZiAoaWZyYW1lKSB7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgZXJyb3JDYWxsYmFjayhlcnIpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHBvc3QgPSBmdW5jdGlvbihtc2csIG9yaWdpbikge1xuICAgICAgZGVidWcoJ3Bvc3QnLCBtc2csIG9yaWdpbik7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFdoZW4gdGhlIGlmcmFtZSBpcyBub3QgbG9hZGVkLCBJRSByYWlzZXMgYW4gZXhjZXB0aW9uXG4gICAgICAgICAgLy8gb24gJ2NvbnRlbnRXaW5kb3cnLlxuICAgICAgICAgIGlmIChpZnJhbWUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKG1zZywgb3JpZ2luKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgICAgIH1cbiAgICAgIH0sIDApO1xuICAgIH07XG5cbiAgICBpZnJhbWUuc3JjID0gaWZyYW1lVXJsO1xuICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGlmcmFtZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgaWZyYW1lLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIG9uZXJyb3IoJ29uZXJyb3InKTtcbiAgICB9O1xuICAgIGlmcmFtZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdvbmxvYWQnKTtcbiAgICAgIC8vIGBvbmxvYWRgIGlzIHRyaWdnZXJlZCBiZWZvcmUgc2NyaXB0cyBvbiB0aGUgaWZyYW1lIGFyZVxuICAgICAgLy8gZXhlY3V0ZWQuIEdpdmUgaXQgZmV3IHNlY29uZHMgdG8gYWN0dWFsbHkgbG9hZCBzdHVmZi5cbiAgICAgIGNsZWFyVGltZW91dCh0cmVmKTtcbiAgICAgIHRyZWYgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBvbmVycm9yKCdvbmxvYWQgdGltZW91dCcpO1xuICAgICAgfSwgMjAwMCk7XG4gICAgfTtcbiAgICBnbG9iYWwuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIHRyZWYgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgb25lcnJvcigndGltZW91dCcpO1xuICAgIH0sIDE1MDAwKTtcbiAgICB1bmxvYWRSZWYgPSBldmVudFV0aWxzLnVubG9hZEFkZChjbGVhbnVwKTtcbiAgICByZXR1cm4ge1xuICAgICAgcG9zdDogcG9zdFxuICAgICwgY2xlYW51cDogY2xlYW51cFxuICAgICwgbG9hZGVkOiB1bmF0dGFjaFxuICAgIH07XG4gIH1cblxuLyogZXNsaW50IG5vLXVuZGVmOiBcIm9mZlwiLCBuZXctY2FwOiBcIm9mZlwiICovXG4sIGNyZWF0ZUh0bWxmaWxlOiBmdW5jdGlvbihpZnJhbWVVcmwsIGVycm9yQ2FsbGJhY2spIHtcbiAgICB2YXIgYXhvID0gWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKTtcbiAgICB2YXIgZG9jID0gbmV3IGdsb2JhbFtheG9dKCdodG1sZmlsZScpO1xuICAgIHZhciB0cmVmLCB1bmxvYWRSZWY7XG4gICAgdmFyIGlmcmFtZTtcbiAgICB2YXIgdW5hdHRhY2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0cmVmKTtcbiAgICAgIGlmcmFtZS5vbmVycm9yID0gbnVsbDtcbiAgICB9O1xuICAgIHZhciBjbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoZG9jKSB7XG4gICAgICAgIHVuYXR0YWNoKCk7XG4gICAgICAgIGV2ZW50VXRpbHMudW5sb2FkRGVsKHVubG9hZFJlZik7XG4gICAgICAgIGlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICAgIGlmcmFtZSA9IGRvYyA9IG51bGw7XG4gICAgICAgIENvbGxlY3RHYXJiYWdlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgb25lcnJvciA9IGZ1bmN0aW9uKHIpIHtcbiAgICAgIGRlYnVnKCdvbmVycm9yJywgcik7XG4gICAgICBpZiAoZG9jKSB7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgZXJyb3JDYWxsYmFjayhyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBwb3N0ID0gZnVuY3Rpb24obXNnLCBvcmlnaW4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFdoZW4gdGhlIGlmcmFtZSBpcyBub3QgbG9hZGVkLCBJRSByYWlzZXMgYW4gZXhjZXB0aW9uXG4gICAgICAgIC8vIG9uICdjb250ZW50V2luZG93Jy5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoaWZyYW1lICYmIGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKG1zZywgb3JpZ2luKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRvYy5vcGVuKCk7XG4gICAgZG9jLndyaXRlKCc8aHRtbD48cycgKyAnY3JpcHQ+JyArXG4gICAgICAgICAgICAgICdkb2N1bWVudC5kb21haW49XCInICsgZ2xvYmFsLmRvY3VtZW50LmRvbWFpbiArICdcIjsnICtcbiAgICAgICAgICAgICAgJzwvcycgKyAnY3JpcHQ+PC9odG1sPicpO1xuICAgIGRvYy5jbG9zZSgpO1xuICAgIGRvYy5wYXJlbnRXaW5kb3dbbW9kdWxlLmV4cG9ydHMuV1ByZWZpeF0gPSBnbG9iYWxbbW9kdWxlLmV4cG9ydHMuV1ByZWZpeF07XG4gICAgdmFyIGMgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoYyk7XG4gICAgaWZyYW1lID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGMuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBpZnJhbWUuc3JjID0gaWZyYW1lVXJsO1xuICAgIGlmcmFtZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICBvbmVycm9yKCdvbmVycm9yJyk7XG4gICAgfTtcbiAgICB0cmVmID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIG9uZXJyb3IoJ3RpbWVvdXQnKTtcbiAgICB9LCAxNTAwMCk7XG4gICAgdW5sb2FkUmVmID0gZXZlbnRVdGlscy51bmxvYWRBZGQoY2xlYW51cCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvc3Q6IHBvc3RcbiAgICAsIGNsZWFudXA6IGNsZWFudXBcbiAgICAsIGxvYWRlZDogdW5hdHRhY2hcbiAgICB9O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5pZnJhbWVFbmFibGVkID0gZmFsc2U7XG5pZiAoZ2xvYmFsLmRvY3VtZW50KSB7XG4gIC8vIHBvc3RNZXNzYWdlIG1pc2JlaGF2ZXMgaW4ga29ucXVlcm9yIDQuNi41IC0gdGhlIG1lc3NhZ2VzIGFyZSBkZWxpdmVyZWQgd2l0aFxuICAvLyBodWdlIGRlbGF5LCBvciBub3QgYXQgYWxsLlxuICBtb2R1bGUuZXhwb3J0cy5pZnJhbWVFbmFibGVkID0gKHR5cGVvZiBnbG9iYWwucG9zdE1lc3NhZ2UgPT09ICdmdW5jdGlvbicgfHxcbiAgICB0eXBlb2YgZ2xvYmFsLnBvc3RNZXNzYWdlID09PSAnb2JqZWN0JykgJiYgKCFicm93c2VyLmlzS29ucXVlcm9yKCkpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbG9nT2JqZWN0ID0ge307XG5bJ2xvZycsICdkZWJ1ZycsICd3YXJuJ10uZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgdmFyIGxldmVsRXhpc3RzO1xuXG4gIHRyeSB7XG4gICAgbGV2ZWxFeGlzdHMgPSBnbG9iYWwuY29uc29sZSAmJiBnbG9iYWwuY29uc29sZVtsZXZlbF0gJiYgZ2xvYmFsLmNvbnNvbGVbbGV2ZWxdLmFwcGx5O1xuICB9IGNhdGNoKGUpIHtcbiAgICAvLyBkbyBub3RoaW5nXG4gIH1cblxuICBsb2dPYmplY3RbbGV2ZWxdID0gbGV2ZWxFeGlzdHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5jb25zb2xlW2xldmVsXS5hcHBseShnbG9iYWwuY29uc29sZSwgYXJndW1lbnRzKTtcbiAgfSA6IChsZXZlbCA9PT0gJ2xvZycgPyBmdW5jdGlvbiAoKSB7fSA6IGxvZ09iamVjdC5sb2cpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9nT2JqZWN0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNPYmplY3Q6IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIG9iajtcbiAgICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlID09PSAnb2JqZWN0JyAmJiAhIW9iajtcbiAgfVxuXG4sIGV4dGVuZDogZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCF0aGlzLmlzT2JqZWN0KG9iaikpIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIHZhciBzb3VyY2UsIHByb3A7XG4gICAgZm9yICh2YXIgaSA9IDEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yIChwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwgcHJvcCkpIHtcbiAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG4vLyBUaGlzIHN0cmluZyBoYXMgbGVuZ3RoIDMyLCBhIHBvd2VyIG9mIDIsIHNvIHRoZSBtb2R1bHVzIGRvZXNuJ3QgaW50cm9kdWNlIGFcbi8vIGJpYXMuXG52YXIgX3JhbmRvbVN0cmluZ0NoYXJzID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Jztcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdHJpbmc6IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgIHZhciBtYXggPSBfcmFuZG9tU3RyaW5nQ2hhcnMubGVuZ3RoO1xuICAgIHZhciBieXRlcyA9IGNyeXB0by5yYW5kb21CeXRlcyhsZW5ndGgpO1xuICAgIHZhciByZXQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXQucHVzaChfcmFuZG9tU3RyaW5nQ2hhcnMuc3Vic3RyKGJ5dGVzW2ldICUgbWF4LCAxKSk7XG4gICAgfVxuICAgIHJldHVybiByZXQuam9pbignJyk7XG4gIH1cblxuLCBudW1iZXI6IGZ1bmN0aW9uKG1heCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpO1xuICB9XG5cbiwgbnVtYmVyU3RyaW5nOiBmdW5jdGlvbihtYXgpIHtcbiAgICB2YXIgdCA9ICgnJyArIChtYXggLSAxKSkubGVuZ3RoO1xuICAgIHZhciBwID0gbmV3IEFycmF5KHQgKyAxKS5qb2luKCcwJyk7XG4gICAgcmV0dXJuIChwICsgdGhpcy5udW1iZXIobWF4KSkuc2xpY2UoLXQpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnV0aWxzOnRyYW5zcG9ydCcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGF2YWlsYWJsZVRyYW5zcG9ydHMpIHtcbiAgcmV0dXJuIHtcbiAgICBmaWx0ZXJUb0VuYWJsZWQ6IGZ1bmN0aW9uKHRyYW5zcG9ydHNXaGl0ZWxpc3QsIGluZm8pIHtcbiAgICAgIHZhciB0cmFuc3BvcnRzID0ge1xuICAgICAgICBtYWluOiBbXVxuICAgICAgLCBmYWNhZGU6IFtdXG4gICAgICB9O1xuICAgICAgaWYgKCF0cmFuc3BvcnRzV2hpdGVsaXN0KSB7XG4gICAgICAgIHRyYW5zcG9ydHNXaGl0ZWxpc3QgPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRyYW5zcG9ydHNXaGl0ZWxpc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRyYW5zcG9ydHNXaGl0ZWxpc3QgPSBbdHJhbnNwb3J0c1doaXRlbGlzdF07XG4gICAgICB9XG5cbiAgICAgIGF2YWlsYWJsZVRyYW5zcG9ydHMuZm9yRWFjaChmdW5jdGlvbih0cmFucykge1xuICAgICAgICBpZiAoIXRyYW5zKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zLnRyYW5zcG9ydE5hbWUgPT09ICd3ZWJzb2NrZXQnICYmIGluZm8ud2Vic29ja2V0ID09PSBmYWxzZSkge1xuICAgICAgICAgIGRlYnVnKCdkaXNhYmxlZCBmcm9tIHNlcnZlcicsICd3ZWJzb2NrZXQnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnNwb3J0c1doaXRlbGlzdC5sZW5ndGggJiZcbiAgICAgICAgICAgIHRyYW5zcG9ydHNXaGl0ZWxpc3QuaW5kZXhPZih0cmFucy50cmFuc3BvcnROYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICBkZWJ1Zygnbm90IGluIHdoaXRlbGlzdCcsIHRyYW5zLnRyYW5zcG9ydE5hbWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFucy5lbmFibGVkKGluZm8pKSB7XG4gICAgICAgICAgZGVidWcoJ2VuYWJsZWQnLCB0cmFucy50cmFuc3BvcnROYW1lKTtcbiAgICAgICAgICB0cmFuc3BvcnRzLm1haW4ucHVzaCh0cmFucyk7XG4gICAgICAgICAgaWYgKHRyYW5zLmZhY2FkZVRyYW5zcG9ydCkge1xuICAgICAgICAgICAgdHJhbnNwb3J0cy5mYWNhZGUucHVzaCh0cmFucy5mYWNhZGVUcmFuc3BvcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWJ1ZygnZGlzYWJsZWQnLCB0cmFucy50cmFuc3BvcnROYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJhbnNwb3J0cztcbiAgICB9XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVVJMID0gcmVxdWlyZSgndXJsLXBhcnNlJyk7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6dXRpbHM6dXJsJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRPcmlnaW46IGZ1bmN0aW9uKHVybCkge1xuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcCA9IG5ldyBVUkwodXJsKTtcbiAgICBpZiAocC5wcm90b2NvbCA9PT0gJ2ZpbGU6Jykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHBvcnQgPSBwLnBvcnQ7XG4gICAgaWYgKCFwb3J0KSB7XG4gICAgICBwb3J0ID0gKHAucHJvdG9jb2wgPT09ICdodHRwczonKSA/ICc0NDMnIDogJzgwJztcbiAgICB9XG5cbiAgICByZXR1cm4gcC5wcm90b2NvbCArICcvLycgKyBwLmhvc3RuYW1lICsgJzonICsgcG9ydDtcbiAgfVxuXG4sIGlzT3JpZ2luRXF1YWw6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgcmVzID0gdGhpcy5nZXRPcmlnaW4oYSkgPT09IHRoaXMuZ2V0T3JpZ2luKGIpO1xuICAgIGRlYnVnKCdzYW1lJywgYSwgYiwgcmVzKTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiwgaXNTY2hlbWVFcXVhbDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiAoYS5zcGxpdCgnOicpWzBdID09PSBiLnNwbGl0KCc6JylbMF0pO1xuICB9XG5cbiwgYWRkUGF0aDogZnVuY3Rpb24gKHVybCwgcGF0aCkge1xuICAgIHZhciBxcyA9IHVybC5zcGxpdCgnPycpO1xuICAgIHJldHVybiBxc1swXSArIHBhdGggKyAocXNbMV0gPyAnPycgKyBxc1sxXSA6ICcnKTtcbiAgfVxuXG4sIGFkZFF1ZXJ5OiBmdW5jdGlvbiAodXJsLCBxKSB7XG4gICAgcmV0dXJuIHVybCArICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICgnPycgKyBxKSA6ICgnJicgKyBxKSk7XG4gIH1cblxuLCBpc0xvb3BiYWNrQWRkcjogZnVuY3Rpb24gKGFkZHIpIHtcbiAgICByZXR1cm4gL14xMjdcXC4oWzAtOV17MSwzfSlcXC4oWzAtOV17MSwzfSlcXC4oWzAtOV17MSwzfSkkL2kudGVzdChhZGRyKSB8fCAvXlxcWzo6MVxcXSQvLnRlc3QoYWRkcik7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICcxLjYuMSc7XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuZXhwb3J0cy5kZXN0cm95ID0gKCgpID0+IHtcblx0bGV0IHdhcm5lZCA9IGZhbHNlO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCF3YXJuZWQpIHtcblx0XHRcdHdhcm5lZCA9IHRydWU7XG5cdFx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0XHR9XG5cdH07XG59KSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUuZGVidWcoKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKiBJZiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGF2YWlsYWJsZSwgZmFsbHMgYmFja1xuICogdG8gYGNvbnNvbGUubG9nYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzLmxvZyA9IGNvbnNvbGUuZGVidWcgfHwgY29uc29sZS5sb2cgfHwgKCgpID0+IHt9KTtcblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcblx0Y3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG5cdGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuXHRjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cdGNyZWF0ZURlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcblx0KiBAcmV0dXJuIHtOdW1iZXJ8U3RyaW5nfSBBbiBBTlNJIGNvbG9yIGNvZGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0aGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlRGVidWcuY29sb3JzW01hdGguYWJzKGhhc2gpICUgY3JlYXRlRGVidWcuY29sb3JzLmxlbmd0aF07XG5cdH1cblx0Y3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcblxuXHQvKipcblx0KiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAcmV0dXJuIHtGdW5jdGlvbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblx0XHRsZXQgcHJldlRpbWU7XG5cdFx0bGV0IGVuYWJsZU92ZXJyaWRlID0gbnVsbDtcblx0XHRsZXQgbmFtZXNwYWNlc0NhY2hlO1xuXHRcdGxldCBlbmFibGVkQ2FjaGU7XG5cblx0XHRmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG5cdFx0XHQvLyBEaXNhYmxlZD9cblx0XHRcdGlmICghZGVidWcuZW5hYmxlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlbGYgPSBkZWJ1ZztcblxuXHRcdFx0Ly8gU2V0IGBkaWZmYCB0aW1lc3RhbXBcblx0XHRcdGNvbnN0IGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG5cdFx0XHRjb25zdCBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG5cdFx0XHRzZWxmLmRpZmYgPSBtcztcblx0XHRcdHNlbGYucHJldiA9IHByZXZUaW1lO1xuXHRcdFx0c2VsZi5jdXJyID0gY3Vycjtcblx0XHRcdHByZXZUaW1lID0gY3VycjtcblxuXHRcdFx0YXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHQvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuXHRcdFx0XHRhcmdzLnVuc2hpZnQoJyVPJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cdFx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdFx0YXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIChtYXRjaCwgZm9ybWF0KSA9PiB7XG5cdFx0XHRcdC8vIElmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcblx0XHRcdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRcdFx0cmV0dXJuICclJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdGRlYnVnLmRlc3Ryb3kgPSBjcmVhdGVEZWJ1Zy5kZXN0cm95OyAvLyBYWFggVGVtcG9yYXJ5LiBXaWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZWJ1ZywgJ2VuYWJsZWQnLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRcdGdldDogKCkgPT4ge1xuXHRcdFx0XHRpZiAoZW5hYmxlT3ZlcnJpZGUgIT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gZW5hYmxlT3ZlcnJpZGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG5hbWVzcGFjZXNDYWNoZSAhPT0gY3JlYXRlRGVidWcubmFtZXNwYWNlcykge1xuXHRcdFx0XHRcdG5hbWVzcGFjZXNDYWNoZSA9IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXM7XG5cdFx0XHRcdFx0ZW5hYmxlZENhY2hlID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVuYWJsZWRDYWNoZTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IHYgPT4ge1xuXHRcdFx0XHRlbmFibGVPdmVycmlkZSA9IHY7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBFbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXHRcdGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlYnVnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cdFx0Y3JlYXRlRGVidWcubmFtZXNwYWNlcyA9IG5hbWVzcGFjZXM7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRsZXQgaTtcblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG5cdFx0Y29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoIXNwbGl0W2ldKSB7XG5cdFx0XHRcdC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuXHRcdFx0aWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG5cdCpcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBkaXNhYmxlKCkge1xuXHRcdGNvbnN0IG5hbWVzcGFjZXMgPSBbXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5uYW1lcy5tYXAodG9OYW1lc3BhY2UpLFxuXHRcdFx0Li4uY3JlYXRlRGVidWcuc2tpcHMubWFwKHRvTmFtZXNwYWNlKS5tYXAobmFtZXNwYWNlID0+ICctJyArIG5hbWVzcGFjZSlcblx0XHRdLmpvaW4oJywnKTtcblx0XHRjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuXHRcdHJldHVybiBuYW1lc3BhY2VzO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVcblx0KiBAcmV0dXJuIHtCb29sZWFufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuXHRcdGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0bGV0IGk7XG5cdFx0bGV0IGxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQqIENvbnZlcnQgcmVnZXhwIHRvIG5hbWVzcGFjZVxuXHQqXG5cdCogQHBhcmFtIHtSZWdFeHB9IHJlZ3hlcFxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHRvTmFtZXNwYWNlKHJlZ2V4cCkge1xuXHRcdHJldHVybiByZWdleHAudG9TdHJpbmcoKVxuXHRcdFx0LnN1YnN0cmluZygyLCByZWdleHAudG9TdHJpbmcoKS5sZW5ndGggLSAyKVxuXHRcdFx0LnJlcGxhY2UoL1xcLlxcKlxcPyQvLCAnKicpO1xuXHR9XG5cblx0LyoqXG5cdCogQ29lcmNlIGB2YWxgLlxuXHQqXG5cdCogQHBhcmFtIHtNaXhlZH0gdmFsXG5cdCogQHJldHVybiB7TWl4ZWR9XG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0XHRpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHQvKipcblx0KiBYWFggRE8gTk9UIFVTRS4gVGhpcyBpcyBhIHRlbXBvcmFyeSBzdHViIGZ1bmN0aW9uLlxuXHQqIFhYWCBJdCBXSUxMIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblx0Ki9cblx0ZnVuY3Rpb24gZGVzdHJveSgpIHtcblx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0fVxuXG5cdGNyZWF0ZURlYnVnLmVuYWJsZShjcmVhdGVEZWJ1Zy5sb2FkKCkpO1xuXG5cdHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCB1bmRlZjtcblxuLyoqXG4gKiBEZWNvZGUgYSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKiBAcmV0dXJucyB7U3RyaW5nfE51bGx9IFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGlucHV0LnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZW5jb2RlIGEgZ2l2ZW4gaW5wdXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgdGhhdCBuZWVkcyB0byBiZSBlbmNvZGVkLlxuICogQHJldHVybnMge1N0cmluZ3xOdWxsfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFNpbXBsZSBxdWVyeSBzdHJpbmcgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeSBUaGUgcXVlcnkgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgcGFyc2VkLlxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5KSB7XG4gIHZhciBwYXJzZXIgPSAvKFtePT8mXSspPT8oW14mXSopL2dcbiAgICAsIHJlc3VsdCA9IHt9XG4gICAgLCBwYXJ0O1xuXG4gIHdoaWxlIChwYXJ0ID0gcGFyc2VyLmV4ZWMocXVlcnkpKSB7XG4gICAgdmFyIGtleSA9IGRlY29kZShwYXJ0WzFdKVxuICAgICAgLCB2YWx1ZSA9IGRlY29kZShwYXJ0WzJdKTtcblxuICAgIC8vXG4gICAgLy8gUHJldmVudCBvdmVycmlkaW5nIG9mIGV4aXN0aW5nIHByb3BlcnRpZXMuIFRoaXMgZW5zdXJlcyB0aGF0IGJ1aWxkLWluXG4gICAgLy8gbWV0aG9kcyBsaWtlIGB0b1N0cmluZ2Agb3IgX19wcm90b19fIGFyZSBub3Qgb3ZlcnJpZGVuIGJ5IG1hbGljaW91c1xuICAgIC8vIHF1ZXJ5c3RyaW5ncy5cbiAgICAvL1xuICAgIC8vIEluIHRoZSBjYXNlIGlmIGZhaWxlZCBkZWNvZGluZywgd2Ugd2FudCB0byBvbWl0IHRoZSBrZXkvdmFsdWUgcGFpcnNcbiAgICAvLyBmcm9tIHRoZSByZXN1bHQuXG4gICAgLy9cbiAgICBpZiAoa2V5ID09PSBudWxsIHx8IHZhbHVlID09PSBudWxsIHx8IGtleSBpbiByZXN1bHQpIGNvbnRpbnVlO1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhIHF1ZXJ5IHN0cmluZyB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBPYmplY3QgdGhhdCBzaG91bGQgYmUgdHJhbnNmb3JtZWQuXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4IE9wdGlvbmFsIHByZWZpeC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBxdWVyeXN0cmluZ2lmeShvYmosIHByZWZpeCkge1xuICBwcmVmaXggPSBwcmVmaXggfHwgJyc7XG5cbiAgdmFyIHBhaXJzID0gW11cbiAgICAsIHZhbHVlXG4gICAgLCBrZXk7XG5cbiAgLy9cbiAgLy8gT3B0aW9uYWxseSBwcmVmaXggd2l0aCBhICc/JyBpZiBuZWVkZWRcbiAgLy9cbiAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgcHJlZml4KSBwcmVmaXggPSAnPyc7XG5cbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcy5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgdmFsdWUgPSBvYmpba2V5XTtcblxuICAgICAgLy9cbiAgICAgIC8vIEVkZ2UgY2FzZXMgd2hlcmUgd2UgYWN0dWFsbHkgd2FudCB0byBlbmNvZGUgdGhlIHZhbHVlIHRvIGFuIGVtcHR5XG4gICAgICAvLyBzdHJpbmcgaW5zdGVhZCBvZiB0aGUgc3RyaW5naWZpZWQgdmFsdWUuXG4gICAgICAvL1xuICAgICAgaWYgKCF2YWx1ZSAmJiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmIHx8IGlzTmFOKHZhbHVlKSkpIHtcbiAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgIH1cblxuICAgICAga2V5ID0gZW5jb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gICAgICB2YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG5cbiAgICAgIC8vXG4gICAgICAvLyBJZiB3ZSBmYWlsZWQgdG8gZW5jb2RlIHRoZSBzdHJpbmdzLCB3ZSBzaG91bGQgYmFpbCBvdXQgYXMgd2UgZG9uJ3RcbiAgICAgIC8vIHdhbnQgdG8gYWRkIGludmFsaWQgc3RyaW5ncyB0byB0aGUgcXVlcnkuXG4gICAgICAvL1xuICAgICAgaWYgKGtleSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gbnVsbCkgY29udGludWU7XG4gICAgICBwYWlycy5wdXNoKGtleSArJz0nKyB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhaXJzLmxlbmd0aCA/IHByZWZpeCArIHBhaXJzLmpvaW4oJyYnKSA6ICcnO1xufVxuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBxdWVyeXN0cmluZ2lmeTtcbmV4cG9ydHMucGFyc2UgPSBxdWVyeXN0cmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDaGVjayBpZiB3ZSdyZSByZXF1aXJlZCB0byBhZGQgYSBwb3J0IG51bWJlci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZGVmYXVsdC1wb3J0XG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHBvcnQgUG9ydCBudW1iZXIgd2UgbmVlZCB0byBjaGVja1xuICogQHBhcmFtIHtTdHJpbmd9IHByb3RvY29sIFByb3RvY29sIHdlIG5lZWQgdG8gY2hlY2sgYWdhaW5zdC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBJcyBpdCBhIGRlZmF1bHQgcG9ydCBmb3IgdGhlIGdpdmVuIHByb3RvY29sXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXF1aXJlZChwb3J0LCBwcm90b2NvbCkge1xuICBwcm90b2NvbCA9IHByb3RvY29sLnNwbGl0KCc6JylbMF07XG4gIHBvcnQgPSArcG9ydDtcblxuICBpZiAoIXBvcnQpIHJldHVybiBmYWxzZTtcblxuICBzd2l0Y2ggKHByb3RvY29sKSB7XG4gICAgY2FzZSAnaHR0cCc6XG4gICAgY2FzZSAnd3MnOlxuICAgIHJldHVybiBwb3J0ICE9PSA4MDtcblxuICAgIGNhc2UgJ2h0dHBzJzpcbiAgICBjYXNlICd3c3MnOlxuICAgIHJldHVybiBwb3J0ICE9PSA0NDM7XG5cbiAgICBjYXNlICdmdHAnOlxuICAgIHJldHVybiBwb3J0ICE9PSAyMTtcblxuICAgIGNhc2UgJ2dvcGhlcic6XG4gICAgcmV0dXJuIHBvcnQgIT09IDcwO1xuXG4gICAgY2FzZSAnZmlsZSc6XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHBvcnQgIT09IDA7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVxdWlyZWQgPSByZXF1aXJlKCdyZXF1aXJlcy1wb3J0JylcbiAgLCBxcyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5naWZ5JylcbiAgLCBjb250cm9sT3JXaGl0ZXNwYWNlID0gL15bXFx4MDAtXFx4MjBcXHUwMGEwXFx1MTY4MFxcdTIwMDAtXFx1MjAwYVxcdTIwMjhcXHUyMDI5XFx1MjAyZlxcdTIwNWZcXHUzMDAwXFx1ZmVmZl0rL1xuICAsIENSSFRMRiA9IC9bXFxuXFxyXFx0XS9nXG4gICwgc2xhc2hlcyA9IC9eW0EtWmEtel1bQS1aYS16MC05Ky0uXSo6XFwvXFwvL1xuICAsIHBvcnQgPSAvOlxcZCskL1xuICAsIHByb3RvY29scmUgPSAvXihbYS16XVthLXowLTkuKy1dKjopPyhcXC9cXC8pPyhbXFxcXC9dKyk/KFtcXFNcXHNdKikvaVxuICAsIHdpbmRvd3NEcml2ZUxldHRlciA9IC9eW2EtekEtWl06LztcblxuLyoqXG4gKiBSZW1vdmUgY29udHJvbCBjaGFyYWN0ZXJzIGFuZCB3aGl0ZXNwYWNlIGZyb20gdGhlIGJlZ2lubmluZyBvZiBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IHN0ciBTdHJpbmcgdG8gdHJpbS5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgbmV3IHN0cmluZyByZXByZXNlbnRpbmcgYHN0cmAgc3RyaXBwZWQgb2YgY29udHJvbFxuICogICAgIGNoYXJhY3RlcnMgYW5kIHdoaXRlc3BhY2UgZnJvbSBpdHMgYmVnaW5uaW5nLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB0cmltTGVmdChzdHIpIHtcbiAgcmV0dXJuIChzdHIgPyBzdHIgOiAnJykudG9TdHJpbmcoKS5yZXBsYWNlKGNvbnRyb2xPcldoaXRlc3BhY2UsICcnKTtcbn1cblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIHBhcnNlIHJ1bGVzIGZvciB0aGUgVVJMIHBhcnNlciwgaXQgaW5mb3JtcyB0aGUgcGFyc2VyXG4gKiBhYm91dDpcbiAqXG4gKiAwLiBUaGUgY2hhciBpdCBOZWVkcyB0byBwYXJzZSwgaWYgaXQncyBhIHN0cmluZyBpdCBzaG91bGQgYmUgZG9uZSB1c2luZ1xuICogICAgaW5kZXhPZiwgUmVnRXhwIHVzaW5nIGV4ZWMgYW5kIE5hTiBtZWFucyBzZXQgYXMgY3VycmVudCB2YWx1ZS5cbiAqIDEuIFRoZSBwcm9wZXJ0eSB3ZSBzaG91bGQgc2V0IHdoZW4gcGFyc2luZyB0aGlzIHZhbHVlLlxuICogMi4gSW5kaWNhdGlvbiBpZiBpdCdzIGJhY2t3YXJkcyBvciBmb3J3YXJkIHBhcnNpbmcsIHdoZW4gc2V0IGFzIG51bWJlciBpdCdzXG4gKiAgICB0aGUgdmFsdWUgb2YgZXh0cmEgY2hhcnMgdGhhdCBzaG91bGQgYmUgc3BsaXQgb2ZmLlxuICogMy4gSW5oZXJpdCBmcm9tIGxvY2F0aW9uIGlmIG5vbiBleGlzdGluZyBpbiB0aGUgcGFyc2VyLlxuICogNC4gYHRvTG93ZXJDYXNlYCB0aGUgcmVzdWx0aW5nIHZhbHVlLlxuICovXG52YXIgcnVsZXMgPSBbXG4gIFsnIycsICdoYXNoJ10sICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBbJz8nLCAncXVlcnknXSwgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgYmFjay5cbiAgZnVuY3Rpb24gc2FuaXRpemUoYWRkcmVzcywgdXJsKSB7ICAgICAvLyBTYW5pdGl6ZSB3aGF0IGlzIGxlZnQgb2YgdGhlIGFkZHJlc3NcbiAgICByZXR1cm4gaXNTcGVjaWFsKHVybC5wcm90b2NvbCkgPyBhZGRyZXNzLnJlcGxhY2UoL1xcXFwvZywgJy8nKSA6IGFkZHJlc3M7XG4gIH0sXG4gIFsnLycsICdwYXRobmFtZSddLCAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBbJ0AnLCAnYXV0aCcsIDFdLCAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgZnJvbnQuXG4gIFtOYU4sICdob3N0JywgdW5kZWZpbmVkLCAxLCAxXSwgICAgICAgLy8gU2V0IGxlZnQgb3ZlciB2YWx1ZS5cbiAgWy86KFxcZCopJC8sICdwb3J0JywgdW5kZWZpbmVkLCAxXSwgICAgLy8gUmVnRXhwIHRoZSBiYWNrLlxuICBbTmFOLCAnaG9zdG5hbWUnLCB1bmRlZmluZWQsIDEsIDFdICAgIC8vIFNldCBsZWZ0IG92ZXIuXG5dO1xuXG4vKipcbiAqIFRoZXNlIHByb3BlcnRpZXMgc2hvdWxkIG5vdCBiZSBjb3BpZWQgb3IgaW5oZXJpdGVkIGZyb20uIFRoaXMgaXMgb25seSBuZWVkZWRcbiAqIGZvciBhbGwgbm9uIGJsb2IgVVJMJ3MgYXMgYSBibG9iIFVSTCBkb2VzIG5vdCBpbmNsdWRlIGEgaGFzaCwgb25seSB0aGVcbiAqIG9yaWdpbi5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIGlnbm9yZSA9IHsgaGFzaDogMSwgcXVlcnk6IDEgfTtcblxuLyoqXG4gKiBUaGUgbG9jYXRpb24gb2JqZWN0IGRpZmZlcnMgd2hlbiB5b3VyIGNvZGUgaXMgbG9hZGVkIHRocm91Z2ggYSBub3JtYWwgcGFnZSxcbiAqIFdvcmtlciBvciB0aHJvdWdoIGEgd29ya2VyIHVzaW5nIGEgYmxvYi4gQW5kIHdpdGggdGhlIGJsb2JibGUgYmVnaW5zIHRoZVxuICogdHJvdWJsZSBhcyB0aGUgbG9jYXRpb24gb2JqZWN0IHdpbGwgY29udGFpbiB0aGUgVVJMIG9mIHRoZSBibG9iLCBub3QgdGhlXG4gKiBsb2NhdGlvbiBvZiB0aGUgcGFnZSB3aGVyZSBvdXIgY29kZSBpcyBsb2FkZWQgaW4uIFRoZSBhY3R1YWwgb3JpZ2luIGlzXG4gKiBlbmNvZGVkIGluIHRoZSBgcGF0aG5hbWVgIHNvIHdlIGNhbiB0aGFua2Z1bGx5IGdlbmVyYXRlIGEgZ29vZCBcImRlZmF1bHRcIlxuICogbG9jYXRpb24gZnJvbSBpdCBzbyB3ZSBjYW4gZ2VuZXJhdGUgcHJvcGVyIHJlbGF0aXZlIFVSTCdzIGFnYWluLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gbG9jIE9wdGlvbmFsIGRlZmF1bHQgbG9jYXRpb24gb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gbG9sY2F0aW9uIG9iamVjdC5cbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gbG9sY2F0aW9uKGxvYykge1xuICB2YXIgZ2xvYmFsVmFyO1xuXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgZ2xvYmFsVmFyID0gd2luZG93O1xuICBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgZ2xvYmFsVmFyID0gZ2xvYmFsO1xuICBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIGdsb2JhbFZhciA9IHNlbGY7XG4gIGVsc2UgZ2xvYmFsVmFyID0ge307XG5cbiAgdmFyIGxvY2F0aW9uID0gZ2xvYmFsVmFyLmxvY2F0aW9uIHx8IHt9O1xuICBsb2MgPSBsb2MgfHwgbG9jYXRpb247XG5cbiAgdmFyIGZpbmFsZGVzdGluYXRpb24gPSB7fVxuICAgICwgdHlwZSA9IHR5cGVvZiBsb2NcbiAgICAsIGtleTtcblxuICBpZiAoJ2Jsb2I6JyA9PT0gbG9jLnByb3RvY29sKSB7XG4gICAgZmluYWxkZXN0aW5hdGlvbiA9IG5ldyBVcmwodW5lc2NhcGUobG9jLnBhdGhuYW1lKSwge30pO1xuICB9IGVsc2UgaWYgKCdzdHJpbmcnID09PSB0eXBlKSB7XG4gICAgZmluYWxkZXN0aW5hdGlvbiA9IG5ldyBVcmwobG9jLCB7fSk7XG4gICAgZm9yIChrZXkgaW4gaWdub3JlKSBkZWxldGUgZmluYWxkZXN0aW5hdGlvbltrZXldO1xuICB9IGVsc2UgaWYgKCdvYmplY3QnID09PSB0eXBlKSB7XG4gICAgZm9yIChrZXkgaW4gbG9jKSB7XG4gICAgICBpZiAoa2V5IGluIGlnbm9yZSkgY29udGludWU7XG4gICAgICBmaW5hbGRlc3RpbmF0aW9uW2tleV0gPSBsb2Nba2V5XTtcbiAgICB9XG5cbiAgICBpZiAoZmluYWxkZXN0aW5hdGlvbi5zbGFzaGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZpbmFsZGVzdGluYXRpb24uc2xhc2hlcyA9IHNsYXNoZXMudGVzdChsb2MuaHJlZik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZpbmFsZGVzdGluYXRpb247XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhIHByb3RvY29sIHNjaGVtZSBpcyBzcGVjaWFsLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBUaGUgcHJvdG9jb2wgc2NoZW1lIG9mIHRoZSBVUkxcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgcHJvdG9jb2wgc2NoZW1lIGlzIHNwZWNpYWwsIGVsc2UgYGZhbHNlYFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaXNTcGVjaWFsKHNjaGVtZSkge1xuICByZXR1cm4gKFxuICAgIHNjaGVtZSA9PT0gJ2ZpbGU6JyB8fFxuICAgIHNjaGVtZSA9PT0gJ2Z0cDonIHx8XG4gICAgc2NoZW1lID09PSAnaHR0cDonIHx8XG4gICAgc2NoZW1lID09PSAnaHR0cHM6JyB8fFxuICAgIHNjaGVtZSA9PT0gJ3dzOicgfHxcbiAgICBzY2hlbWUgPT09ICd3c3M6J1xuICApO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIFByb3RvY29sRXh0cmFjdFxuICogQHR5cGUgT2JqZWN0XG4gKiBAcHJvcGVydHkge1N0cmluZ30gcHJvdG9jb2wgUHJvdG9jb2wgbWF0Y2hlZCBpbiB0aGUgVVJMLCBpbiBsb3dlcmNhc2UuXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IHNsYXNoZXMgYHRydWVgIGlmIHByb3RvY29sIGlzIGZvbGxvd2VkIGJ5IFwiLy9cIiwgZWxzZSBgZmFsc2VgLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHJlc3QgUmVzdCBvZiB0aGUgVVJMIHRoYXQgaXMgbm90IHBhcnQgb2YgdGhlIHByb3RvY29sLlxuICovXG5cbi8qKlxuICogRXh0cmFjdCBwcm90b2NvbCBpbmZvcm1hdGlvbiBmcm9tIGEgVVJMIHdpdGgvd2l0aG91dCBkb3VibGUgc2xhc2ggKFwiLy9cIikuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3MgVVJMIHdlIHdhbnQgdG8gZXh0cmFjdCBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IGxvY2F0aW9uXG4gKiBAcmV0dXJuIHtQcm90b2NvbEV4dHJhY3R9IEV4dHJhY3RlZCBpbmZvcm1hdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RQcm90b2NvbChhZGRyZXNzLCBsb2NhdGlvbikge1xuICBhZGRyZXNzID0gdHJpbUxlZnQoYWRkcmVzcyk7XG4gIGFkZHJlc3MgPSBhZGRyZXNzLnJlcGxhY2UoQ1JIVExGLCAnJyk7XG4gIGxvY2F0aW9uID0gbG9jYXRpb24gfHwge307XG5cbiAgdmFyIG1hdGNoID0gcHJvdG9jb2xyZS5leGVjKGFkZHJlc3MpO1xuICB2YXIgcHJvdG9jb2wgPSBtYXRjaFsxXSA/IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgOiAnJztcbiAgdmFyIGZvcndhcmRTbGFzaGVzID0gISFtYXRjaFsyXTtcbiAgdmFyIG90aGVyU2xhc2hlcyA9ICEhbWF0Y2hbM107XG4gIHZhciBzbGFzaGVzQ291bnQgPSAwO1xuICB2YXIgcmVzdDtcblxuICBpZiAoZm9yd2FyZFNsYXNoZXMpIHtcbiAgICBpZiAob3RoZXJTbGFzaGVzKSB7XG4gICAgICByZXN0ID0gbWF0Y2hbMl0gKyBtYXRjaFszXSArIG1hdGNoWzRdO1xuICAgICAgc2xhc2hlc0NvdW50ID0gbWF0Y2hbMl0ubGVuZ3RoICsgbWF0Y2hbM10ubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN0ID0gbWF0Y2hbMl0gKyBtYXRjaFs0XTtcbiAgICAgIHNsYXNoZXNDb3VudCA9IG1hdGNoWzJdLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKG90aGVyU2xhc2hlcykge1xuICAgICAgcmVzdCA9IG1hdGNoWzNdICsgbWF0Y2hbNF07XG4gICAgICBzbGFzaGVzQ291bnQgPSBtYXRjaFszXS5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3QgPSBtYXRjaFs0XVxuICAgIH1cbiAgfVxuXG4gIGlmIChwcm90b2NvbCA9PT0gJ2ZpbGU6Jykge1xuICAgIGlmIChzbGFzaGVzQ291bnQgPj0gMikge1xuICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoMik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzU3BlY2lhbChwcm90b2NvbCkpIHtcbiAgICByZXN0ID0gbWF0Y2hbNF07XG4gIH0gZWxzZSBpZiAocHJvdG9jb2wpIHtcbiAgICBpZiAoZm9yd2FyZFNsYXNoZXMpIHtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKDIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzbGFzaGVzQ291bnQgPj0gMiAmJiBpc1NwZWNpYWwobG9jYXRpb24ucHJvdG9jb2wpKSB7XG4gICAgcmVzdCA9IG1hdGNoWzRdO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwcm90b2NvbDogcHJvdG9jb2wsXG4gICAgc2xhc2hlczogZm9yd2FyZFNsYXNoZXMgfHwgaXNTcGVjaWFsKHByb3RvY29sKSxcbiAgICBzbGFzaGVzQ291bnQ6IHNsYXNoZXNDb3VudCxcbiAgICByZXN0OiByZXN0XG4gIH07XG59XG5cbi8qKlxuICogUmVzb2x2ZSBhIHJlbGF0aXZlIFVSTCBwYXRobmFtZSBhZ2FpbnN0IGEgYmFzZSBVUkwgcGF0aG5hbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlbGF0aXZlIFBhdGhuYW1lIG9mIHRoZSByZWxhdGl2ZSBVUkwuXG4gKiBAcGFyYW0ge1N0cmluZ30gYmFzZSBQYXRobmFtZSBvZiB0aGUgYmFzZSBVUkwuXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFJlc29sdmVkIHBhdGhuYW1lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZShyZWxhdGl2ZSwgYmFzZSkge1xuICBpZiAocmVsYXRpdmUgPT09ICcnKSByZXR1cm4gYmFzZTtcblxuICB2YXIgcGF0aCA9IChiYXNlIHx8ICcvJykuc3BsaXQoJy8nKS5zbGljZSgwLCAtMSkuY29uY2F0KHJlbGF0aXZlLnNwbGl0KCcvJykpXG4gICAgLCBpID0gcGF0aC5sZW5ndGhcbiAgICAsIGxhc3QgPSBwYXRoW2kgLSAxXVxuICAgICwgdW5zaGlmdCA9IGZhbHNlXG4gICAgLCB1cCA9IDA7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChwYXRoW2ldID09PSAnLicpIHtcbiAgICAgIHBhdGguc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAocGF0aFtpXSA9PT0gJy4uJykge1xuICAgICAgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIGlmIChpID09PSAwKSB1bnNoaWZ0ID0gdHJ1ZTtcbiAgICAgIHBhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAodW5zaGlmdCkgcGF0aC51bnNoaWZ0KCcnKTtcbiAgaWYgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSBwYXRoLnB1c2goJycpO1xuXG4gIHJldHVybiBwYXRoLmpvaW4oJy8nKTtcbn1cblxuLyoqXG4gKiBUaGUgYWN0dWFsIFVSTCBpbnN0YW5jZS4gSW5zdGVhZCBvZiByZXR1cm5pbmcgYW4gb2JqZWN0IHdlJ3ZlIG9wdGVkLWluIHRvXG4gKiBjcmVhdGUgYW4gYWN0dWFsIGNvbnN0cnVjdG9yIGFzIGl0J3MgbXVjaCBtb3JlIG1lbW9yeSBlZmZpY2llbnQgYW5kXG4gKiBmYXN0ZXIgYW5kIGl0IHBsZWFzZXMgbXkgT0NELlxuICpcbiAqIEl0IGlzIHdvcnRoIG5vdGluZyB0aGF0IHdlIHNob3VsZCBub3QgdXNlIGBVUkxgIGFzIGNsYXNzIG5hbWUgdG8gcHJldmVudFxuICogY2xhc2hlcyB3aXRoIHRoZSBnbG9iYWwgVVJMIGluc3RhbmNlIHRoYXQgZ290IGludHJvZHVjZWQgaW4gYnJvd3NlcnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyBVUkwgd2Ugd2FudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gW2xvY2F0aW9uXSBMb2NhdGlvbiBkZWZhdWx0cyBmb3IgcmVsYXRpdmUgcGF0aHMuXG4gKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IFtwYXJzZXJdIFBhcnNlciBmb3IgdGhlIHF1ZXJ5IHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIFVybChhZGRyZXNzLCBsb2NhdGlvbiwgcGFyc2VyKSB7XG4gIGFkZHJlc3MgPSB0cmltTGVmdChhZGRyZXNzKTtcbiAgYWRkcmVzcyA9IGFkZHJlc3MucmVwbGFjZShDUkhUTEYsICcnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVXJsKSkge1xuICAgIHJldHVybiBuZXcgVXJsKGFkZHJlc3MsIGxvY2F0aW9uLCBwYXJzZXIpO1xuICB9XG5cbiAgdmFyIHJlbGF0aXZlLCBleHRyYWN0ZWQsIHBhcnNlLCBpbnN0cnVjdGlvbiwgaW5kZXgsIGtleVxuICAgICwgaW5zdHJ1Y3Rpb25zID0gcnVsZXMuc2xpY2UoKVxuICAgICwgdHlwZSA9IHR5cGVvZiBsb2NhdGlvblxuICAgICwgdXJsID0gdGhpc1xuICAgICwgaSA9IDA7XG5cbiAgLy9cbiAgLy8gVGhlIGZvbGxvd2luZyBpZiBzdGF0ZW1lbnRzIGFsbG93cyB0aGlzIG1vZHVsZSB0d28gaGF2ZSBjb21wYXRpYmlsaXR5IHdpdGhcbiAgLy8gMiBkaWZmZXJlbnQgQVBJOlxuICAvL1xuICAvLyAxLiBOb2RlLmpzJ3MgYHVybC5wYXJzZWAgYXBpIHdoaWNoIGFjY2VwdHMgYSBVUkwsIGJvb2xlYW4gYXMgYXJndW1lbnRzXG4gIC8vICAgIHdoZXJlIHRoZSBib29sZWFuIGluZGljYXRlcyB0aGF0IHRoZSBxdWVyeSBzdHJpbmcgc2hvdWxkIGFsc28gYmUgcGFyc2VkLlxuICAvL1xuICAvLyAyLiBUaGUgYFVSTGAgaW50ZXJmYWNlIG9mIHRoZSBicm93c2VyIHdoaWNoIGFjY2VwdHMgYSBVUkwsIG9iamVjdCBhc1xuICAvLyAgICBhcmd1bWVudHMuIFRoZSBzdXBwbGllZCBvYmplY3Qgd2lsbCBiZSB1c2VkIGFzIGRlZmF1bHQgdmFsdWVzIC8gZmFsbC1iYWNrXG4gIC8vICAgIGZvciByZWxhdGl2ZSBwYXRocy5cbiAgLy9cbiAgaWYgKCdvYmplY3QnICE9PSB0eXBlICYmICdzdHJpbmcnICE9PSB0eXBlKSB7XG4gICAgcGFyc2VyID0gbG9jYXRpb247XG4gICAgbG9jYXRpb24gPSBudWxsO1xuICB9XG5cbiAgaWYgKHBhcnNlciAmJiAnZnVuY3Rpb24nICE9PSB0eXBlb2YgcGFyc2VyKSBwYXJzZXIgPSBxcy5wYXJzZTtcblxuICBsb2NhdGlvbiA9IGxvbGNhdGlvbihsb2NhdGlvbik7XG5cbiAgLy9cbiAgLy8gRXh0cmFjdCBwcm90b2NvbCBpbmZvcm1hdGlvbiBiZWZvcmUgcnVubmluZyB0aGUgaW5zdHJ1Y3Rpb25zLlxuICAvL1xuICBleHRyYWN0ZWQgPSBleHRyYWN0UHJvdG9jb2woYWRkcmVzcyB8fCAnJywgbG9jYXRpb24pO1xuICByZWxhdGl2ZSA9ICFleHRyYWN0ZWQucHJvdG9jb2wgJiYgIWV4dHJhY3RlZC5zbGFzaGVzO1xuICB1cmwuc2xhc2hlcyA9IGV4dHJhY3RlZC5zbGFzaGVzIHx8IHJlbGF0aXZlICYmIGxvY2F0aW9uLnNsYXNoZXM7XG4gIHVybC5wcm90b2NvbCA9IGV4dHJhY3RlZC5wcm90b2NvbCB8fCBsb2NhdGlvbi5wcm90b2NvbCB8fCAnJztcbiAgYWRkcmVzcyA9IGV4dHJhY3RlZC5yZXN0O1xuXG4gIC8vXG4gIC8vIFdoZW4gdGhlIGF1dGhvcml0eSBjb21wb25lbnQgaXMgYWJzZW50IHRoZSBVUkwgc3RhcnRzIHdpdGggYSBwYXRoXG4gIC8vIGNvbXBvbmVudC5cbiAgLy9cbiAgaWYgKFxuICAgIGV4dHJhY3RlZC5wcm90b2NvbCA9PT0gJ2ZpbGU6JyAmJiAoXG4gICAgICBleHRyYWN0ZWQuc2xhc2hlc0NvdW50ICE9PSAyIHx8IHdpbmRvd3NEcml2ZUxldHRlci50ZXN0KGFkZHJlc3MpKSB8fFxuICAgICghZXh0cmFjdGVkLnNsYXNoZXMgJiZcbiAgICAgIChleHRyYWN0ZWQucHJvdG9jb2wgfHxcbiAgICAgICAgZXh0cmFjdGVkLnNsYXNoZXNDb3VudCA8IDIgfHxcbiAgICAgICAgIWlzU3BlY2lhbCh1cmwucHJvdG9jb2wpKSlcbiAgKSB7XG4gICAgaW5zdHJ1Y3Rpb25zWzNdID0gWy8oLiopLywgJ3BhdGhuYW1lJ107XG4gIH1cblxuICBmb3IgKDsgaSA8IGluc3RydWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb25zW2ldO1xuXG4gICAgaWYgKHR5cGVvZiBpbnN0cnVjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYWRkcmVzcyA9IGluc3RydWN0aW9uKGFkZHJlc3MsIHVybCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBwYXJzZSA9IGluc3RydWN0aW9uWzBdO1xuICAgIGtleSA9IGluc3RydWN0aW9uWzFdO1xuXG4gICAgaWYgKHBhcnNlICE9PSBwYXJzZSkge1xuICAgICAgdXJsW2tleV0gPSBhZGRyZXNzO1xuICAgIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBwYXJzZSkge1xuICAgICAgaW5kZXggPSBwYXJzZSA9PT0gJ0AnXG4gICAgICAgID8gYWRkcmVzcy5sYXN0SW5kZXhPZihwYXJzZSlcbiAgICAgICAgOiBhZGRyZXNzLmluZGV4T2YocGFyc2UpO1xuXG4gICAgICBpZiAofmluZGV4KSB7XG4gICAgICAgIGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIGluc3RydWN0aW9uWzJdKSB7XG4gICAgICAgICAgdXJsW2tleV0gPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZShpbmRleCArIGluc3RydWN0aW9uWzJdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cmxba2V5XSA9IGFkZHJlc3Muc2xpY2UoaW5kZXgpO1xuICAgICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKGluZGV4ID0gcGFyc2UuZXhlYyhhZGRyZXNzKSkpIHtcbiAgICAgIHVybFtrZXldID0gaW5kZXhbMV07XG4gICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleC5pbmRleCk7XG4gICAgfVxuXG4gICAgdXJsW2tleV0gPSB1cmxba2V5XSB8fCAoXG4gICAgICByZWxhdGl2ZSAmJiBpbnN0cnVjdGlvblszXSA/IGxvY2F0aW9uW2tleV0gfHwgJycgOiAnJ1xuICAgICk7XG5cbiAgICAvL1xuICAgIC8vIEhvc3RuYW1lLCBob3N0IGFuZCBwcm90b2NvbCBzaG91bGQgYmUgbG93ZXJjYXNlZCBzbyB0aGV5IGNhbiBiZSB1c2VkIHRvXG4gICAgLy8gY3JlYXRlIGEgcHJvcGVyIGBvcmlnaW5gLlxuICAgIC8vXG4gICAgaWYgKGluc3RydWN0aW9uWzRdKSB1cmxba2V5XSA9IHVybFtrZXldLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICAvL1xuICAvLyBBbHNvIHBhcnNlIHRoZSBzdXBwbGllZCBxdWVyeSBzdHJpbmcgaW4gdG8gYW4gb2JqZWN0LiBJZiB3ZSdyZSBzdXBwbGllZFxuICAvLyB3aXRoIGEgY3VzdG9tIHBhcnNlciBhcyBmdW5jdGlvbiB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGJ1aWxkLWluXG4gIC8vIHBhcnNlci5cbiAgLy9cbiAgaWYgKHBhcnNlcikgdXJsLnF1ZXJ5ID0gcGFyc2VyKHVybC5xdWVyeSk7XG5cbiAgLy9cbiAgLy8gSWYgdGhlIFVSTCBpcyByZWxhdGl2ZSwgcmVzb2x2ZSB0aGUgcGF0aG5hbWUgYWdhaW5zdCB0aGUgYmFzZSBVUkwuXG4gIC8vXG4gIGlmIChcbiAgICAgIHJlbGF0aXZlXG4gICAgJiYgbG9jYXRpb24uc2xhc2hlc1xuICAgICYmIHVybC5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJ1xuICAgICYmICh1cmwucGF0aG5hbWUgIT09ICcnIHx8IGxvY2F0aW9uLnBhdGhuYW1lICE9PSAnJylcbiAgKSB7XG4gICAgdXJsLnBhdGhuYW1lID0gcmVzb2x2ZSh1cmwucGF0aG5hbWUsIGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfVxuXG4gIC8vXG4gIC8vIERlZmF1bHQgdG8gYSAvIGZvciBwYXRobmFtZSBpZiBub25lIGV4aXN0cy4gVGhpcyBub3JtYWxpemVzIHRoZSBVUkxcbiAgLy8gdG8gYWx3YXlzIGhhdmUgYSAvXG4gIC8vXG4gIGlmICh1cmwucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycgJiYgaXNTcGVjaWFsKHVybC5wcm90b2NvbCkpIHtcbiAgICB1cmwucGF0aG5hbWUgPSAnLycgKyB1cmwucGF0aG5hbWU7XG4gIH1cblxuICAvL1xuICAvLyBXZSBzaG91bGQgbm90IGFkZCBwb3J0IG51bWJlcnMgaWYgdGhleSBhcmUgYWxyZWFkeSB0aGUgZGVmYXVsdCBwb3J0IG51bWJlclxuICAvLyBmb3IgYSBnaXZlbiBwcm90b2NvbC4gQXMgdGhlIGhvc3QgYWxzbyBjb250YWlucyB0aGUgcG9ydCBudW1iZXIgd2UncmUgZ29pbmdcbiAgLy8gb3ZlcnJpZGUgaXQgd2l0aCB0aGUgaG9zdG5hbWUgd2hpY2ggY29udGFpbnMgbm8gcG9ydCBudW1iZXIuXG4gIC8vXG4gIGlmICghcmVxdWlyZWQodXJsLnBvcnQsIHVybC5wcm90b2NvbCkpIHtcbiAgICB1cmwuaG9zdCA9IHVybC5ob3N0bmFtZTtcbiAgICB1cmwucG9ydCA9ICcnO1xuICB9XG5cbiAgLy9cbiAgLy8gUGFyc2UgZG93biB0aGUgYGF1dGhgIGZvciB0aGUgdXNlcm5hbWUgYW5kIHBhc3N3b3JkLlxuICAvL1xuICB1cmwudXNlcm5hbWUgPSB1cmwucGFzc3dvcmQgPSAnJztcblxuICBpZiAodXJsLmF1dGgpIHtcbiAgICBpbmRleCA9IHVybC5hdXRoLmluZGV4T2YoJzonKTtcblxuICAgIGlmICh+aW5kZXgpIHtcbiAgICAgIHVybC51c2VybmFtZSA9IHVybC5hdXRoLnNsaWNlKDAsIGluZGV4KTtcbiAgICAgIHVybC51c2VybmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodXJsLnVzZXJuYW1lKSk7XG5cbiAgICAgIHVybC5wYXNzd29yZCA9IHVybC5hdXRoLnNsaWNlKGluZGV4ICsgMSk7XG4gICAgICB1cmwucGFzc3dvcmQgPSBlbmNvZGVVUklDb21wb25lbnQoZGVjb2RlVVJJQ29tcG9uZW50KHVybC5wYXNzd29yZCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHVybC51c2VybmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodXJsLmF1dGgpKTtcbiAgICB9XG5cbiAgICB1cmwuYXV0aCA9IHVybC5wYXNzd29yZCA/IHVybC51c2VybmFtZSArJzonKyB1cmwucGFzc3dvcmQgOiB1cmwudXNlcm5hbWU7XG4gIH1cblxuICB1cmwub3JpZ2luID0gdXJsLnByb3RvY29sICE9PSAnZmlsZTonICYmIGlzU3BlY2lhbCh1cmwucHJvdG9jb2wpICYmIHVybC5ob3N0XG4gICAgPyB1cmwucHJvdG9jb2wgKycvLycrIHVybC5ob3N0XG4gICAgOiAnbnVsbCc7XG5cbiAgLy9cbiAgLy8gVGhlIGhyZWYgaXMganVzdCB0aGUgY29tcGlsZWQgcmVzdWx0LlxuICAvL1xuICB1cmwuaHJlZiA9IHVybC50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgY29udmVuaWVuY2UgbWV0aG9kIGZvciBjaGFuZ2luZyBwcm9wZXJ0aWVzIGluIHRoZSBVUkwgaW5zdGFuY2UgdG9cbiAqIGluc3VyZSB0aGF0IHRoZXkgYWxsIHByb3BhZ2F0ZSBjb3JyZWN0bHkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhcnQgICAgICAgICAgUHJvcGVydHkgd2UgbmVlZCB0byBhZGp1c3QuXG4gKiBAcGFyYW0ge01peGVkfSB2YWx1ZSAgICAgICAgICBUaGUgbmV3bHkgYXNzaWduZWQgdmFsdWUuXG4gKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IGZuICBXaGVuIHNldHRpbmcgdGhlIHF1ZXJ5LCBpdCB3aWxsIGJlIHRoZSBmdW5jdGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCB0byBwYXJzZSB0aGUgcXVlcnkuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaGVuIHNldHRpbmcgdGhlIHByb3RvY29sLCBkb3VibGUgc2xhc2ggd2lsbCBiZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZCBmcm9tIHRoZSBmaW5hbCB1cmwgaWYgaXQgaXMgdHJ1ZS5cbiAqIEByZXR1cm5zIHtVUkx9IFVSTCBpbnN0YW5jZSBmb3IgY2hhaW5pbmcuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHNldChwYXJ0LCB2YWx1ZSwgZm4pIHtcbiAgdmFyIHVybCA9IHRoaXM7XG5cbiAgc3dpdGNoIChwYXJ0KSB7XG4gICAgY2FzZSAncXVlcnknOlxuICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdmFsdWUgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gKGZuIHx8IHFzLnBhcnNlKSh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwb3J0JzpcbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuXG4gICAgICBpZiAoIXJlcXVpcmVkKHZhbHVlLCB1cmwucHJvdG9jb2wpKSB7XG4gICAgICAgIHVybC5ob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgICAgICB1cmxbcGFydF0gPSAnJztcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgdXJsLmhvc3QgPSB1cmwuaG9zdG5hbWUgKyc6JysgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaG9zdG5hbWUnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICh1cmwucG9ydCkgdmFsdWUgKz0gJzonKyB1cmwucG9ydDtcbiAgICAgIHVybC5ob3N0ID0gdmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2hvc3QnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmIChwb3J0LnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoJzonKTtcbiAgICAgICAgdXJsLnBvcnQgPSB2YWx1ZS5wb3AoKTtcbiAgICAgICAgdXJsLmhvc3RuYW1lID0gdmFsdWUuam9pbignOicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsLmhvc3RuYW1lID0gdmFsdWU7XG4gICAgICAgIHVybC5wb3J0ID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncHJvdG9jb2wnOlxuICAgICAgdXJsLnByb3RvY29sID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHVybC5zbGFzaGVzID0gIWZuO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwYXRobmFtZSc6XG4gICAgY2FzZSAnaGFzaCc6XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNoYXIgPSBwYXJ0ID09PSAncGF0aG5hbWUnID8gJy8nIDogJyMnO1xuICAgICAgICB1cmxbcGFydF0gPSB2YWx1ZS5jaGFyQXQoMCkgIT09IGNoYXIgPyBjaGFyICsgdmFsdWUgOiB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd1c2VybmFtZSc6XG4gICAgY2FzZSAncGFzc3dvcmQnOlxuICAgICAgdXJsW3BhcnRdID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnYXV0aCc6XG4gICAgICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCc6Jyk7XG5cbiAgICAgIGlmICh+aW5kZXgpIHtcbiAgICAgICAgdXJsLnVzZXJuYW1lID0gdmFsdWUuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB1cmwudXNlcm5hbWUgPSBlbmNvZGVVUklDb21wb25lbnQoZGVjb2RlVVJJQ29tcG9uZW50KHVybC51c2VybmFtZSkpO1xuXG4gICAgICAgIHVybC5wYXNzd29yZCA9IHZhbHVlLnNsaWNlKGluZGV4ICsgMSk7XG4gICAgICAgIHVybC5wYXNzd29yZCA9IGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQodXJsLnBhc3N3b3JkKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmwudXNlcm5hbWUgPSBlbmNvZGVVUklDb21wb25lbnQoZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG4gICAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGlucyA9IHJ1bGVzW2ldO1xuXG4gICAgaWYgKGluc1s0XSkgdXJsW2luc1sxXV0gPSB1cmxbaW5zWzFdXS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgdXJsLmF1dGggPSB1cmwucGFzc3dvcmQgPyB1cmwudXNlcm5hbWUgKyc6JysgdXJsLnBhc3N3b3JkIDogdXJsLnVzZXJuYW1lO1xuXG4gIHVybC5vcmlnaW4gPSB1cmwucHJvdG9jb2wgIT09ICdmaWxlOicgJiYgaXNTcGVjaWFsKHVybC5wcm90b2NvbCkgJiYgdXJsLmhvc3RcbiAgICA/IHVybC5wcm90b2NvbCArJy8vJysgdXJsLmhvc3RcbiAgICA6ICdudWxsJztcblxuICB1cmwuaHJlZiA9IHVybC50b1N0cmluZygpO1xuXG4gIHJldHVybiB1cmw7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBwcm9wZXJ0aWVzIGJhY2sgaW4gdG8gYSB2YWxpZCBhbmQgZnVsbCBVUkwgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZ2lmeSBPcHRpb25hbCBxdWVyeSBzdHJpbmdpZnkgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBDb21waWxlZCB2ZXJzaW9uIG9mIHRoZSBVUkwuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHN0cmluZ2lmeSkge1xuICBpZiAoIXN0cmluZ2lmeSB8fCAnZnVuY3Rpb24nICE9PSB0eXBlb2Ygc3RyaW5naWZ5KSBzdHJpbmdpZnkgPSBxcy5zdHJpbmdpZnk7XG5cbiAgdmFyIHF1ZXJ5XG4gICAgLCB1cmwgPSB0aGlzXG4gICAgLCBob3N0ID0gdXJsLmhvc3RcbiAgICAsIHByb3RvY29sID0gdXJsLnByb3RvY29sO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5jaGFyQXQocHJvdG9jb2wubGVuZ3RoIC0gMSkgIT09ICc6JykgcHJvdG9jb2wgKz0gJzonO1xuXG4gIHZhciByZXN1bHQgPVxuICAgIHByb3RvY29sICtcbiAgICAoKHVybC5wcm90b2NvbCAmJiB1cmwuc2xhc2hlcykgfHwgaXNTcGVjaWFsKHVybC5wcm90b2NvbCkgPyAnLy8nIDogJycpO1xuXG4gIGlmICh1cmwudXNlcm5hbWUpIHtcbiAgICByZXN1bHQgKz0gdXJsLnVzZXJuYW1lO1xuICAgIGlmICh1cmwucGFzc3dvcmQpIHJlc3VsdCArPSAnOicrIHVybC5wYXNzd29yZDtcbiAgICByZXN1bHQgKz0gJ0AnO1xuICB9IGVsc2UgaWYgKHVybC5wYXNzd29yZCkge1xuICAgIHJlc3VsdCArPSAnOicrIHVybC5wYXNzd29yZDtcbiAgICByZXN1bHQgKz0gJ0AnO1xuICB9IGVsc2UgaWYgKFxuICAgIHVybC5wcm90b2NvbCAhPT0gJ2ZpbGU6JyAmJlxuICAgIGlzU3BlY2lhbCh1cmwucHJvdG9jb2wpICYmXG4gICAgIWhvc3QgJiZcbiAgICB1cmwucGF0aG5hbWUgIT09ICcvJ1xuICApIHtcbiAgICAvL1xuICAgIC8vIEFkZCBiYWNrIHRoZSBlbXB0eSB1c2VyaW5mbywgb3RoZXJ3aXNlIHRoZSBvcmlnaW5hbCBpbnZhbGlkIFVSTFxuICAgIC8vIG1pZ2h0IGJlIHRyYW5zZm9ybWVkIGludG8gYSB2YWxpZCBvbmUgd2l0aCBgdXJsLnBhdGhuYW1lYCBhcyBob3N0LlxuICAgIC8vXG4gICAgcmVzdWx0ICs9ICdAJztcbiAgfVxuXG4gIC8vXG4gIC8vIFRyYWlsaW5nIGNvbG9uIGlzIHJlbW92ZWQgZnJvbSBgdXJsLmhvc3RgIHdoZW4gaXQgaXMgcGFyc2VkLiBJZiBpdCBzdGlsbFxuICAvLyBlbmRzIHdpdGggYSBjb2xvbiwgdGhlbiBhZGQgYmFjayB0aGUgdHJhaWxpbmcgY29sb24gdGhhdCB3YXMgcmVtb3ZlZC4gVGhpc1xuICAvLyBwcmV2ZW50cyBhbiBpbnZhbGlkIFVSTCBmcm9tIGJlaW5nIHRyYW5zZm9ybWVkIGludG8gYSB2YWxpZCBvbmUuXG4gIC8vXG4gIGlmIChob3N0W2hvc3QubGVuZ3RoIC0gMV0gPT09ICc6JyB8fCAocG9ydC50ZXN0KHVybC5ob3N0bmFtZSkgJiYgIXVybC5wb3J0KSkge1xuICAgIGhvc3QgKz0gJzonO1xuICB9XG5cbiAgcmVzdWx0ICs9IGhvc3QgKyB1cmwucGF0aG5hbWU7XG5cbiAgcXVlcnkgPSAnb2JqZWN0JyA9PT0gdHlwZW9mIHVybC5xdWVyeSA/IHN0cmluZ2lmeSh1cmwucXVlcnkpIDogdXJsLnF1ZXJ5O1xuICBpZiAocXVlcnkpIHJlc3VsdCArPSAnPycgIT09IHF1ZXJ5LmNoYXJBdCgwKSA/ICc/JysgcXVlcnkgOiBxdWVyeTtcblxuICBpZiAodXJsLmhhc2gpIHJlc3VsdCArPSB1cmwuaGFzaDtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5VcmwucHJvdG90eXBlID0geyBzZXQ6IHNldCwgdG9TdHJpbmc6IHRvU3RyaW5nIH07XG5cbi8vXG4vLyBFeHBvc2UgdGhlIFVSTCBwYXJzZXIgYW5kIHNvbWUgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgYmUgdXNlZnVsIGZvclxuLy8gb3RoZXJzIG9yIHRlc3RpbmcuXG4vL1xuVXJsLmV4dHJhY3RQcm90b2NvbCA9IGV4dHJhY3RQcm90b2NvbDtcblVybC5sb2NhdGlvbiA9IGxvbGNhdGlvbjtcblVybC50cmltTGVmdCA9IHRyaW1MZWZ0O1xuVXJsLnFzID0gcXM7XG5cbm1vZHVsZS5leHBvcnRzID0gVXJsO1xuIiwiLy8gc3RhdHMuanMgLSBodHRwOi8vZ2l0aHViLmNvbS9tcmRvb2Ivc3RhdHMuanNcbihmdW5jdGlvbihmLGUpe1wib2JqZWN0XCI9PT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOmYuU3RhdHM9ZSgpfSkodGhpcyxmdW5jdGlvbigpe3ZhciBmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShhKXtjLmFwcGVuZENoaWxkKGEuZG9tKTtyZXR1cm4gYX1mdW5jdGlvbiB1KGEpe2Zvcih2YXIgZD0wO2Q8Yy5jaGlsZHJlbi5sZW5ndGg7ZCsrKWMuY2hpbGRyZW5bZF0uc3R5bGUuZGlzcGxheT1kPT09YT9cImJsb2NrXCI6XCJub25lXCI7bD1hfXZhciBsPTAsYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2Muc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOmZpeGVkO3RvcDowO2xlZnQ6MDtjdXJzb3I6cG9pbnRlcjtvcGFjaXR5OjAuOTt6LWluZGV4OjEwMDAwXCI7Yy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbihhKXthLnByZXZlbnREZWZhdWx0KCk7XG51KCsrbCVjLmNoaWxkcmVuLmxlbmd0aCl9LCExKTt2YXIgaz0ocGVyZm9ybWFuY2V8fERhdGUpLm5vdygpLGc9ayxhPTAscj1lKG5ldyBmLlBhbmVsKFwiRlBTXCIsXCIjMGZmXCIsXCIjMDAyXCIpKSxoPWUobmV3IGYuUGFuZWwoXCJNU1wiLFwiIzBmMFwiLFwiIzAyMFwiKSk7aWYoc2VsZi5wZXJmb3JtYW5jZSYmc2VsZi5wZXJmb3JtYW5jZS5tZW1vcnkpdmFyIHQ9ZShuZXcgZi5QYW5lbChcIk1CXCIsXCIjZjA4XCIsXCIjMjAxXCIpKTt1KDApO3JldHVybntSRVZJU0lPTjoxNixkb206YyxhZGRQYW5lbDplLHNob3dQYW5lbDp1LGJlZ2luOmZ1bmN0aW9uKCl7az0ocGVyZm9ybWFuY2V8fERhdGUpLm5vdygpfSxlbmQ6ZnVuY3Rpb24oKXthKys7dmFyIGM9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKTtoLnVwZGF0ZShjLWssMjAwKTtpZihjPmcrMUUzJiYoci51cGRhdGUoMUUzKmEvKGMtZyksMTAwKSxnPWMsYT0wLHQpKXt2YXIgZD1wZXJmb3JtYW5jZS5tZW1vcnk7dC51cGRhdGUoZC51c2VkSlNIZWFwU2l6ZS9cbjEwNDg1NzYsZC5qc0hlYXBTaXplTGltaXQvMTA0ODU3Nil9cmV0dXJuIGN9LHVwZGF0ZTpmdW5jdGlvbigpe2s9dGhpcy5lbmQoKX0sZG9tRWxlbWVudDpjLHNldE1vZGU6dX19O2YuUGFuZWw9ZnVuY3Rpb24oZSxmLGwpe3ZhciBjPUluZmluaXR5LGs9MCxnPU1hdGgucm91bmQsYT1nKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvfHwxKSxyPTgwKmEsaD00OCphLHQ9MyphLHY9MiphLGQ9MyphLG09MTUqYSxuPTc0KmEscD0zMCphLHE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtxLndpZHRoPXI7cS5oZWlnaHQ9aDtxLnN0eWxlLmNzc1RleHQ9XCJ3aWR0aDo4MHB4O2hlaWdodDo0OHB4XCI7dmFyIGI9cS5nZXRDb250ZXh0KFwiMmRcIik7Yi5mb250PVwiYm9sZCBcIis5KmErXCJweCBIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZlwiO2IudGV4dEJhc2VsaW5lPVwidG9wXCI7Yi5maWxsU3R5bGU9bDtiLmZpbGxSZWN0KDAsMCxyLGgpO2IuZmlsbFN0eWxlPWY7Yi5maWxsVGV4dChlLHQsdik7XG5iLmZpbGxSZWN0KGQsbSxuLHApO2IuZmlsbFN0eWxlPWw7Yi5nbG9iYWxBbHBoYT0uOTtiLmZpbGxSZWN0KGQsbSxuLHApO3JldHVybntkb206cSx1cGRhdGU6ZnVuY3Rpb24oaCx3KXtjPU1hdGgubWluKGMsaCk7az1NYXRoLm1heChrLGgpO2IuZmlsbFN0eWxlPWw7Yi5nbG9iYWxBbHBoYT0xO2IuZmlsbFJlY3QoMCwwLHIsbSk7Yi5maWxsU3R5bGU9ZjtiLmZpbGxUZXh0KGcoaCkrXCIgXCIrZStcIiAoXCIrZyhjKStcIi1cIitnKGspK1wiKVwiLHQsdik7Yi5kcmF3SW1hZ2UocSxkK2EsbSxuLWEscCxkLG0sbi1hLHApO2IuZmlsbFJlY3QoZCtuLWEsbSxhLHApO2IuZmlsbFN0eWxlPWw7Yi5nbG9iYWxBbHBoYT0uOTtiLmZpbGxSZWN0KGQrbi1hLG0sYSxnKCgxLWgvdykqcCkpfX19O3JldHVybiBmfSk7XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjQuMSBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmXG5cdFx0IWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdCFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoXG5cdFx0ZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbFxuXHQpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHB1bnljb2RlYCBvYmplY3QuXG5cdCAqIEBuYW1lIHB1bnljb2RlXG5cdCAqIEB0eXBlIE9iamVjdFxuXHQgKi9cblx0dmFyIHB1bnljb2RlLFxuXG5cdC8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cblx0bWF4SW50ID0gMjE0NzQ4MzY0NywgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG5cdC8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cblx0YmFzZSA9IDM2LFxuXHR0TWluID0gMSxcblx0dE1heCA9IDI2LFxuXHRza2V3ID0gMzgsXG5cdGRhbXAgPSA3MDAsXG5cdGluaXRpYWxCaWFzID0gNzIsXG5cdGluaXRpYWxOID0gMTI4LCAvLyAweDgwXG5cdGRlbGltaXRlciA9ICctJywgLy8gJ1xceDJEJ1xuXG5cdC8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG5cdHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLFxuXHRyZWdleE5vbkFTQ0lJID0gL1teXFx4MjAtXFx4N0VdLywgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcblx0cmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5XG5cdCAqIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRcdHJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG5cdCAqIGFkZHJlc3Nlcy5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG5cdCAqIGNoYXJhY3Rlci5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHRcdHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuXHRcdHZhciByZXN1bHQgPSAnJztcblx0XHRpZiAocGFydHMubGVuZ3RoID4gMSkge1xuXHRcdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdFx0Ly8gdGhlIGxvY2FsIHBhcnQgKGkuZS4gZXZlcnl0aGluZyB1cCB0byBgQGApIGludGFjdC5cblx0XHRcdHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuXHRcdFx0c3RyaW5nID0gcGFydHNbMV07XG5cdFx0fVxuXHRcdC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cblx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHRcdHZhciBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoJy4nKTtcblx0XHR2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG5cdFx0cmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuXHQgKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG5cdCAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG5cdCAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuXHQgKiBtYXRjaGluZyBVVEYtMTYuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuXHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZGVjb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIG5ldyBhcnJheSBvZiBjb2RlIHBvaW50cy5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBjb3VudGVyID0gMCxcblx0XHQgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcblx0XHQgICAgdmFsdWUsXG5cdFx0ICAgIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZGVjb2RlYFxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBlbmNvZGVcblx0ICogQHBhcmFtIHtBcnJheX0gY29kZVBvaW50cyBUaGUgYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG5cdCAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpblxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmXG5cdCAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkge1xuXHRcdGlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gMjI7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gNjU7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA5NyA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gOTc7XG5cdFx0fVxuXHRcdHJldHVybiBiYXNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaXMgYGRpZ2l0YCwgd2hpY2ggbmVlZHMgdG8gYmUgaW4gdGhlIHJhbmdlXG5cdCAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuXHQgKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZFxuXHQgKiBpZiBgZmxhZ2AgaXMgbm9uLXplcm8gYW5kIGBkaWdpdGAgaGFzIG5vIHVwcGVyY2FzZSBmb3JtLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7XG5cdFx0Ly8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcblx0XHQvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcblx0XHRyZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG5cdCAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcblx0XHR2YXIgayA9IDA7XG5cdFx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0XHRkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG5cdFx0Zm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcblx0XHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcblx0ICogc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdFx0Ly8gRG9uJ3QgdXNlIFVDUy0yXG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblx0XHQgICAgb3V0LFxuXHRcdCAgICBpID0gMCxcblx0XHQgICAgbiA9IGluaXRpYWxOLFxuXHRcdCAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG5cdFx0ICAgIGJhc2ljLFxuXHRcdCAgICBqLFxuXHRcdCAgICBpbmRleCxcblx0XHQgICAgb2xkaSxcblx0XHQgICAgdyxcblx0XHQgICAgayxcblx0XHQgICAgZGlnaXQsXG5cdFx0ICAgIHQsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBiYXNlTWludXNUO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdFx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0XHQvLyB0aGUgZmlyc3QgYmFzaWMgY29kZSBwb2ludHMgdG8gdGhlIG91dHB1dC5cblxuXHRcdGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0XHRpZiAoYmFzaWMgPCAwKSB7XG5cdFx0XHRiYXNpYyA9IDA7XG5cdFx0fVxuXG5cdFx0Zm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdFx0aWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuXHRcdFx0XHRlcnJvcignbm90LWJhc2ljJyk7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdFx0Ly8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuXHRcdGZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7XG5cblx0XHRcdC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cblx0XHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHRcdC8vIHdoaWNoIGdldHMgYWRkZWQgdG8gYGlgLiBUaGUgb3ZlcmZsb3cgY2hlY2tpbmcgaXMgZWFzaWVyXG5cdFx0XHQvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuXHRcdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHRcdGZvciAob2xkaSA9IGksIHcgPSAxLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblxuXHRcdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0XHRlcnJvcignaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aSArPSBkaWdpdCAqIHc7XG5cdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0aWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dyAqPSBiYXNlTWludXNUO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdFx0YmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7XG5cblx0XHRcdC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG5cdFx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdFx0aWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0biArPSBmbG9vcihpIC8gb3V0KTtcblx0XHRcdGkgJT0gb3V0O1xuXG5cdFx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0XG5cdFx0XHRvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG5cdCAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuXHRcdHZhciBuLFxuXHRcdCAgICBkZWx0YSxcblx0XHQgICAgaGFuZGxlZENQQ291bnQsXG5cdFx0ICAgIGJhc2ljTGVuZ3RoLFxuXHRcdCAgICBiaWFzLFxuXHRcdCAgICBqLFxuXHRcdCAgICBtLFxuXHRcdCAgICBxLFxuXHRcdCAgICBrLFxuXHRcdCAgICB0LFxuXHRcdCAgICBjdXJyZW50VmFsdWUsXG5cdFx0ICAgIG91dHB1dCA9IFtdLFxuXHRcdCAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuXHRcdCAgICBpbnB1dExlbmd0aCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcblx0XHQgICAgYmFzZU1pbnVzVCxcblx0XHQgICAgcU1pbnVzVDtcblxuXHRcdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIFVuaWNvZGVcblx0XHRpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG5cdFx0Ly8gQ2FjaGUgdGhlIGxlbmd0aFxuXHRcdGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcblx0XHRuID0gaW5pdGlhbE47XG5cdFx0ZGVsdGEgPSAwO1xuXHRcdGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHNcblx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7XG5cblx0XHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0XHQvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG5cblx0XHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyAtIGlmIGl0IGlzIG5vdCBlbXB0eSAtIHdpdGggYSBkZWxpbWl0ZXJcblx0XHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHRcdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHRcdC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHRcblx0XHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0XHRmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcblx0XHRcdFx0XHRtID0gY3VycmVudFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPixcblx0XHRcdC8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93XG5cdFx0XHRoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG5cdFx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRcdG4gPSBtO1xuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuXHRcdFx0XHRcdGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblx0XHRcdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXHRcdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cU1pbnVzVCA9IHEgLSB0O1xuXHRcdFx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goXG5cdFx0XHRcdFx0XHRcdHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTtcblx0XHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRcdGRlbHRhID0gMDtcblx0XHRcdFx0XHQrK2hhbmRsZWRDUENvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCsrZGVsdGE7XG5cdFx0XHQrK247XG5cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dC5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzXG5cdCAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS5cblx0ICogaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuXG5cdCAqIGNvbnZlcnRlZCB0byBVbmljb2RlLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZWQgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBjb252ZXJ0IHRvIFVuaWNvZGUuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZVxuXHQgKiBzdHJpbmcuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b1VuaWNvZGUoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSlcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIFB1bnljb2RlLiBPbmx5IHRoZSBub24tQVNDSUkgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLFxuXHQgKiBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCdzIGFscmVhZHkgaW5cblx0ICogQVNDSUkuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG8gY29udmVydCwgYXMgYVxuXHQgKiBVbmljb2RlIHN0cmluZy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFB1bnljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBkb21haW4gbmFtZSBvclxuXHQgKiBlbWFpbCBhZGRyZXNzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9BU0NJSShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gJ3huLS0nICsgZW5jb2RlKHN0cmluZylcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovXG5cdHB1bnljb2RlID0ge1xuXHRcdC8qKlxuXHRcdCAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBTdHJpbmdcblx0XHQgKi9cblx0XHQndmVyc2lvbic6ICcxLjQuMScsXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcblx0XHQgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLlxuXHRcdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIE9iamVjdFxuXHRcdCAqL1xuXHRcdCd1Y3MyJzoge1xuXHRcdFx0J2RlY29kZSc6IHVjczJkZWNvZGUsXG5cdFx0XHQnZW5jb2RlJzogdWNzMmVuY29kZVxuXHRcdH0sXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0XHQndG9Vbmljb2RlJzogdG9Vbmljb2RlXG5cdH07XG5cblx0LyoqIEV4cG9zZSBgcHVueWNvZGVgICovXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKCdwdW55Y29kZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHB1bnljb2RlO1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUpIHtcblx0XHRpZiAobW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMpIHtcblx0XHRcdC8vIGluIE5vZGUuanMsIGlvLmpzLCBvciBSaW5nb0pTIHYwLjguMCtcblx0XHRcdGZyZWVNb2R1bGUuZXhwb3J0cyA9IHB1bnljb2RlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyXG5cdFx0cm9vdC5wdW55Y29kZSA9IHB1bnljb2RlO1xuXHR9XG5cbn0odGhpcykpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcbnZhciBwZXJjZW50VHdlbnRpZXMgPSAvJTIwL2c7XG5cbnZhciBGb3JtYXQgPSB7XG4gICAgUkZDMTczODogJ1JGQzE3MzgnLFxuICAgIFJGQzM5ODY6ICdSRkMzOTg2J1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgJ2RlZmF1bHQnOiBGb3JtYXQuUkZDMzk4NixcbiAgICBmb3JtYXR0ZXJzOiB7XG4gICAgICAgIFJGQzE3Mzg6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2UuY2FsbCh2YWx1ZSwgcGVyY2VudFR3ZW50aWVzLCAnKycpO1xuICAgICAgICB9LFxuICAgICAgICBSRkMzOTg2OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBSRkMxNzM4OiBGb3JtYXQuUkZDMTczOCxcbiAgICBSRkMzOTg2OiBGb3JtYXQuUkZDMzk4NlxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5Jyk7XG52YXIgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBmb3JtYXRzOiBmb3JtYXRzLFxuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxudmFyIGRlZmF1bHRzID0ge1xuICAgIGFsbG93RG90czogZmFsc2UsXG4gICAgYWxsb3dQcm90b3R5cGVzOiBmYWxzZSxcbiAgICBhbGxvd1NwYXJzZTogZmFsc2UsXG4gICAgYXJyYXlMaW1pdDogMjAsXG4gICAgY2hhcnNldDogJ3V0Zi04JyxcbiAgICBjaGFyc2V0U2VudGluZWw6IGZhbHNlLFxuICAgIGNvbW1hOiBmYWxzZSxcbiAgICBkZWNvZGVyOiB1dGlscy5kZWNvZGUsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZGVwdGg6IDUsXG4gICAgaWdub3JlUXVlcnlQcmVmaXg6IGZhbHNlLFxuICAgIGludGVycHJldE51bWVyaWNFbnRpdGllczogZmFsc2UsXG4gICAgcGFyYW1ldGVyTGltaXQ6IDEwMDAsXG4gICAgcGFyc2VBcnJheXM6IHRydWUsXG4gICAgcGxhaW5PYmplY3RzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvJiMoXFxkKyk7L2csIGZ1bmN0aW9uICgkMCwgbnVtYmVyU3RyKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG51bWJlclN0ciwgMTApKTtcbiAgICB9KTtcbn07XG5cbnZhciBwYXJzZUFycmF5VmFsdWUgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmNvbW1hICYmIHZhbC5pbmRleE9mKCcsJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdmFsLnNwbGl0KCcsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbDtcbn07XG5cbi8vIFRoaXMgaXMgd2hhdCBicm93c2VycyB3aWxsIHN1Ym1pdCB3aGVuIHRoZSDinJMgY2hhcmFjdGVyIG9jY3VycyBpbiBhblxuLy8gYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIGJvZHkgYW5kIHRoZSBlbmNvZGluZyBvZiB0aGUgcGFnZSBjb250YWluaW5nXG4vLyB0aGUgZm9ybSBpcyBpc28tODg1OS0xLCBvciB3aGVuIHRoZSBzdWJtaXR0ZWQgZm9ybSBoYXMgYW4gYWNjZXB0LWNoYXJzZXRcbi8vIGF0dHJpYnV0ZSBvZiBpc28tODg1OS0xLiBQcmVzdW1hYmx5IGFsc28gd2l0aCBvdGhlciBjaGFyc2V0cyB0aGF0IGRvIG5vdCBjb250YWluXG4vLyB0aGUg4pyTIGNoYXJhY3Rlciwgc3VjaCBhcyB1cy1hc2NpaS5cbnZhciBpc29TZW50aW5lbCA9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJzsgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpXG5cbi8vIFRoZXNlIGFyZSB0aGUgcGVyY2VudC1lbmNvZGVkIHV0Zi04IG9jdGV0cyByZXByZXNlbnRpbmcgYSBjaGVja21hcmssIGluZGljYXRpbmcgdGhhdCB0aGUgcmVxdWVzdCBhY3R1YWxseSBpcyB1dGYtOCBlbmNvZGVkLlxudmFyIGNoYXJzZXRTZW50aW5lbCA9ICd1dGY4PSVFMiU5QyU5Myc7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJylcblxudmFyIHBhcnNlVmFsdWVzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ1ZhbHVlcyhzdHIsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0geyBfX3Byb3RvX186IG51bGwgfTtcblxuICAgIHZhciBjbGVhblN0ciA9IG9wdGlvbnMuaWdub3JlUXVlcnlQcmVmaXggPyBzdHIucmVwbGFjZSgvXlxcPy8sICcnKSA6IHN0cjtcbiAgICB2YXIgbGltaXQgPSBvcHRpb25zLnBhcmFtZXRlckxpbWl0ID09PSBJbmZpbml0eSA/IHVuZGVmaW5lZCA6IG9wdGlvbnMucGFyYW1ldGVyTGltaXQ7XG4gICAgdmFyIHBhcnRzID0gY2xlYW5TdHIuc3BsaXQob3B0aW9ucy5kZWxpbWl0ZXIsIGxpbWl0KTtcbiAgICB2YXIgc2tpcEluZGV4ID0gLTE7IC8vIEtlZXAgdHJhY2sgb2Ygd2hlcmUgdGhlIHV0Zjggc2VudGluZWwgd2FzIGZvdW5kXG4gICAgdmFyIGk7XG5cbiAgICB2YXIgY2hhcnNldCA9IG9wdGlvbnMuY2hhcnNldDtcbiAgICBpZiAob3B0aW9ucy5jaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAocGFydHNbaV0uaW5kZXhPZigndXRmOD0nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0c1tpXSA9PT0gY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSAndXRmLTgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydHNbaV0gPT09IGlzb1NlbnRpbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSAnaXNvLTg4NTktMSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNraXBJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgaSA9IHBhcnRzLmxlbmd0aDsgLy8gVGhlIGVzbGludCBzZXR0aW5ncyBkbyBub3QgYWxsb3cgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGkgPT09IHNraXBJbmRleCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcblxuICAgICAgICB2YXIgYnJhY2tldEVxdWFsc1BvcyA9IHBhcnQuaW5kZXhPZignXT0nKTtcbiAgICAgICAgdmFyIHBvcyA9IGJyYWNrZXRFcXVhbHNQb3MgPT09IC0xID8gcGFydC5pbmRleE9mKCc9JykgOiBicmFja2V0RXF1YWxzUG9zICsgMTtcblxuICAgICAgICB2YXIga2V5LCB2YWw7XG4gICAgICAgIGlmIChwb3MgPT09IC0xKSB7XG4gICAgICAgICAgICBrZXkgPSBvcHRpb25zLmRlY29kZXIocGFydCwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ2tleScpO1xuICAgICAgICAgICAgdmFsID0gb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgPyBudWxsIDogJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXkgPSBvcHRpb25zLmRlY29kZXIocGFydC5zbGljZSgwLCBwb3MpLCBkZWZhdWx0cy5kZWNvZGVyLCBjaGFyc2V0LCAna2V5Jyk7XG4gICAgICAgICAgICB2YWwgPSB1dGlscy5tYXliZU1hcChcbiAgICAgICAgICAgICAgICBwYXJzZUFycmF5VmFsdWUocGFydC5zbGljZShwb3MgKyAxKSwgb3B0aW9ucyksXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVuY29kZWRWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGVjb2RlcihlbmNvZGVkVmFsLCBkZWZhdWx0cy5kZWNvZGVyLCBjaGFyc2V0LCAndmFsdWUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCAmJiBvcHRpb25zLmludGVycHJldE51bWVyaWNFbnRpdGllcyAmJiBjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgICAgIHZhbCA9IGludGVycHJldE51bWVyaWNFbnRpdGllcyh2YWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnQuaW5kZXhPZignW109JykgPiAtMSkge1xuICAgICAgICAgICAgdmFsID0gaXNBcnJheSh2YWwpID8gW3ZhbF0gOiB2YWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzLmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHV0aWxzLmNvbWJpbmUob2JqW2tleV0sIHZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG52YXIgcGFyc2VPYmplY3QgPSBmdW5jdGlvbiAoY2hhaW4sIHZhbCwgb3B0aW9ucywgdmFsdWVzUGFyc2VkKSB7XG4gICAgdmFyIGxlYWYgPSB2YWx1ZXNQYXJzZWQgPyB2YWwgOiBwYXJzZUFycmF5VmFsdWUodmFsLCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIGkgPSBjaGFpbi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgb2JqO1xuICAgICAgICB2YXIgcm9vdCA9IGNoYWluW2ldO1xuXG4gICAgICAgIGlmIChyb290ID09PSAnW10nICYmIG9wdGlvbnMucGFyc2VBcnJheXMpIHtcbiAgICAgICAgICAgIG9iaiA9IFtdLmNvbmNhdChsZWFmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iaiA9IG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgICAgICAgdmFyIGNsZWFuUm9vdCA9IHJvb3QuY2hhckF0KDApID09PSAnWycgJiYgcm9vdC5jaGFyQXQocm9vdC5sZW5ndGggLSAxKSA9PT0gJ10nID8gcm9vdC5zbGljZSgxLCAtMSkgOiByb290O1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQoY2xlYW5Sb290LCAxMCk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMucGFyc2VBcnJheXMgJiYgY2xlYW5Sb290ID09PSAnJykge1xuICAgICAgICAgICAgICAgIG9iaiA9IHsgMDogbGVhZiB9O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAhaXNOYU4oaW5kZXgpXG4gICAgICAgICAgICAgICAgJiYgcm9vdCAhPT0gY2xlYW5Sb290XG4gICAgICAgICAgICAgICAgJiYgU3RyaW5nKGluZGV4KSA9PT0gY2xlYW5Sb290XG4gICAgICAgICAgICAgICAgJiYgaW5kZXggPj0gMFxuICAgICAgICAgICAgICAgICYmIChvcHRpb25zLnBhcnNlQXJyYXlzICYmIGluZGV4IDw9IG9wdGlvbnMuYXJyYXlMaW1pdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG9iaiA9IFtdO1xuICAgICAgICAgICAgICAgIG9ialtpbmRleF0gPSBsZWFmO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjbGVhblJvb3QgIT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgICAgICAgICAgb2JqW2NsZWFuUm9vdF0gPSBsZWFmO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGVhZiA9IG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gbGVhZjtcbn07XG5cbnZhciBwYXJzZUtleXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nS2V5cyhnaXZlbktleSwgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpIHtcbiAgICBpZiAoIWdpdmVuS2V5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUcmFuc2Zvcm0gZG90IG5vdGF0aW9uIHRvIGJyYWNrZXQgbm90YXRpb25cbiAgICB2YXIga2V5ID0gb3B0aW9ucy5hbGxvd0RvdHMgPyBnaXZlbktleS5yZXBsYWNlKC9cXC4oW14uW10rKS9nLCAnWyQxXScpIDogZ2l2ZW5LZXk7XG5cbiAgICAvLyBUaGUgcmVnZXggY2h1bmtzXG5cbiAgICB2YXIgYnJhY2tldHMgPSAvKFxcW1teW1xcXV0qXSkvO1xuICAgIHZhciBjaGlsZCA9IC8oXFxbW15bXFxdXSpdKS9nO1xuXG4gICAgLy8gR2V0IHRoZSBwYXJlbnRcblxuICAgIHZhciBzZWdtZW50ID0gb3B0aW9ucy5kZXB0aCA+IDAgJiYgYnJhY2tldHMuZXhlYyhrZXkpO1xuICAgIHZhciBwYXJlbnQgPSBzZWdtZW50ID8ga2V5LnNsaWNlKDAsIHNlZ21lbnQuaW5kZXgpIDoga2V5O1xuXG4gICAgLy8gU3Rhc2ggdGhlIHBhcmVudCBpZiBpdCBleGlzdHNcblxuICAgIHZhciBrZXlzID0gW107XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICAvLyBJZiB3ZSBhcmVuJ3QgdXNpbmcgcGxhaW4gb2JqZWN0cywgb3B0aW9uYWxseSBwcmVmaXgga2V5cyB0aGF0IHdvdWxkIG92ZXJ3cml0ZSBvYmplY3QgcHJvdG90eXBlIHByb3BlcnRpZXNcbiAgICAgICAgaWYgKCFvcHRpb25zLnBsYWluT2JqZWN0cyAmJiBoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBwYXJlbnQpKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAga2V5cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuXG4gICAgLy8gTG9vcCB0aHJvdWdoIGNoaWxkcmVuIGFwcGVuZGluZyB0byB0aGUgYXJyYXkgdW50aWwgd2UgaGl0IGRlcHRoXG5cbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKG9wdGlvbnMuZGVwdGggPiAwICYmIChzZWdtZW50ID0gY2hpbGQuZXhlYyhrZXkpKSAhPT0gbnVsbCAmJiBpIDwgb3B0aW9ucy5kZXB0aCkge1xuICAgICAgICBpICs9IDE7XG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgc2VnbWVudFsxXS5zbGljZSgxLCAtMSkpKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGtleXMucHVzaChzZWdtZW50WzFdKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSdzIGEgcmVtYWluZGVyLCBqdXN0IGFkZCB3aGF0ZXZlciBpcyBsZWZ0XG5cbiAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICBrZXlzLnB1c2goJ1snICsga2V5LnNsaWNlKHNlZ21lbnQuaW5kZXgpICsgJ10nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VPYmplY3Qoa2V5cywgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpO1xufTtcblxudmFyIG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyhvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9XG5cbiAgICBpZiAob3B0cy5kZWNvZGVyICE9PSBudWxsICYmIG9wdHMuZGVjb2RlciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRzLmRlY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRGVjb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIHZhciBjaGFyc2V0ID0gdHlwZW9mIG9wdHMuY2hhcnNldCA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5jaGFyc2V0IDogb3B0cy5jaGFyc2V0O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWxsb3dEb3RzOiB0eXBlb2Ygb3B0cy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuYWxsb3dEb3RzIDogISFvcHRzLmFsbG93RG90cyxcbiAgICAgICAgYWxsb3dQcm90b3R5cGVzOiB0eXBlb2Ygb3B0cy5hbGxvd1Byb3RvdHlwZXMgPT09ICdib29sZWFuJyA/IG9wdHMuYWxsb3dQcm90b3R5cGVzIDogZGVmYXVsdHMuYWxsb3dQcm90b3R5cGVzLFxuICAgICAgICBhbGxvd1NwYXJzZTogdHlwZW9mIG9wdHMuYWxsb3dTcGFyc2UgPT09ICdib29sZWFuJyA/IG9wdHMuYWxsb3dTcGFyc2UgOiBkZWZhdWx0cy5hbGxvd1NwYXJzZSxcbiAgICAgICAgYXJyYXlMaW1pdDogdHlwZW9mIG9wdHMuYXJyYXlMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRzLmFycmF5TGltaXQgOiBkZWZhdWx0cy5hcnJheUxpbWl0LFxuICAgICAgICBjaGFyc2V0OiBjaGFyc2V0LFxuICAgICAgICBjaGFyc2V0U2VudGluZWw6IHR5cGVvZiBvcHRzLmNoYXJzZXRTZW50aW5lbCA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jaGFyc2V0U2VudGluZWwgOiBkZWZhdWx0cy5jaGFyc2V0U2VudGluZWwsXG4gICAgICAgIGNvbW1hOiB0eXBlb2Ygb3B0cy5jb21tYSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jb21tYSA6IGRlZmF1bHRzLmNvbW1hLFxuICAgICAgICBkZWNvZGVyOiB0eXBlb2Ygb3B0cy5kZWNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5kZWNvZGVyIDogZGVmYXVsdHMuZGVjb2RlcixcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICdzdHJpbmcnIHx8IHV0aWxzLmlzUmVnRXhwKG9wdHMuZGVsaW1pdGVyKSA/IG9wdHMuZGVsaW1pdGVyIDogZGVmYXVsdHMuZGVsaW1pdGVyLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW1wbGljaXQtY29lcmNpb24sIG5vLWV4dHJhLXBhcmVuc1xuICAgICAgICBkZXB0aDogKHR5cGVvZiBvcHRzLmRlcHRoID09PSAnbnVtYmVyJyB8fCBvcHRzLmRlcHRoID09PSBmYWxzZSkgPyArb3B0cy5kZXB0aCA6IGRlZmF1bHRzLmRlcHRoLFxuICAgICAgICBpZ25vcmVRdWVyeVByZWZpeDogb3B0cy5pZ25vcmVRdWVyeVByZWZpeCA9PT0gdHJ1ZSxcbiAgICAgICAgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzOiB0eXBlb2Ygb3B0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgPT09ICdib29sZWFuJyA/IG9wdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzIDogZGVmYXVsdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzLFxuICAgICAgICBwYXJhbWV0ZXJMaW1pdDogdHlwZW9mIG9wdHMucGFyYW1ldGVyTGltaXQgPT09ICdudW1iZXInID8gb3B0cy5wYXJhbWV0ZXJMaW1pdCA6IGRlZmF1bHRzLnBhcmFtZXRlckxpbWl0LFxuICAgICAgICBwYXJzZUFycmF5czogb3B0cy5wYXJzZUFycmF5cyAhPT0gZmFsc2UsXG4gICAgICAgIHBsYWluT2JqZWN0czogdHlwZW9mIG9wdHMucGxhaW5PYmplY3RzID09PSAnYm9vbGVhbicgPyBvcHRzLnBsYWluT2JqZWN0cyA6IGRlZmF1bHRzLnBsYWluT2JqZWN0cyxcbiAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nOiB0eXBlb2Ygb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nXG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgb3B0cykge1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplUGFyc2VPcHRpb25zKG9wdHMpO1xuXG4gICAgaWYgKHN0ciA9PT0gJycgfHwgc3RyID09PSBudWxsIHx8IHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcE9iaiA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gcGFyc2VWYWx1ZXMoc3RyLCBvcHRpb25zKSA6IHN0cjtcbiAgICB2YXIgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGtleXMgYW5kIHNldHVwIHRoZSBuZXcgb2JqZWN0XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRlbXBPYmopO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIG5ld09iaiA9IHBhcnNlS2V5cyhrZXksIHRlbXBPYmpba2V5XSwgb3B0aW9ucywgdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpO1xuICAgICAgICBvYmogPSB1dGlscy5tZXJnZShvYmosIG5ld09iaiwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuYWxsb3dTcGFyc2UgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuY29tcGFjdChvYmopO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFNpZGVDaGFubmVsID0gcmVxdWlyZSgnc2lkZS1jaGFubmVsJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBhcnJheVByZWZpeEdlbmVyYXRvcnMgPSB7XG4gICAgYnJhY2tldHM6IGZ1bmN0aW9uIGJyYWNrZXRzKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1tdJztcbiAgICB9LFxuICAgIGNvbW1hOiAnY29tbWEnLFxuICAgIGluZGljZXM6IGZ1bmN0aW9uIGluZGljZXMocHJlZml4LCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbJyArIGtleSArICddJztcbiAgICB9LFxuICAgIHJlcGVhdDogZnVuY3Rpb24gcmVwZWF0KHByZWZpeCkge1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgIH1cbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBwdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG52YXIgcHVzaFRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyLCB2YWx1ZU9yQXJyYXkpIHtcbiAgICBwdXNoLmFwcGx5KGFyciwgaXNBcnJheSh2YWx1ZU9yQXJyYXkpID8gdmFsdWVPckFycmF5IDogW3ZhbHVlT3JBcnJheV0pO1xufTtcblxudmFyIHRvSVNPID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBkZWZhdWx0Rm9ybWF0ID0gZm9ybWF0c1snZGVmYXVsdCddO1xudmFyIGRlZmF1bHRzID0ge1xuICAgIGFkZFF1ZXJ5UHJlZml4OiBmYWxzZSxcbiAgICBhbGxvd0RvdHM6IGZhbHNlLFxuICAgIGNoYXJzZXQ6ICd1dGYtOCcsXG4gICAgY2hhcnNldFNlbnRpbmVsOiBmYWxzZSxcbiAgICBkZWxpbWl0ZXI6ICcmJyxcbiAgICBlbmNvZGU6IHRydWUsXG4gICAgZW5jb2RlcjogdXRpbHMuZW5jb2RlLFxuICAgIGVuY29kZVZhbHVlc09ubHk6IGZhbHNlLFxuICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdCxcbiAgICBmb3JtYXR0ZXI6IGZvcm1hdHMuZm9ybWF0dGVyc1tkZWZhdWx0Rm9ybWF0XSxcbiAgICAvLyBkZXByZWNhdGVkXG4gICAgaW5kaWNlczogZmFsc2UsXG4gICAgc2VyaWFsaXplRGF0ZTogZnVuY3Rpb24gc2VyaWFsaXplRGF0ZShkYXRlKSB7XG4gICAgICAgIHJldHVybiB0b0lTTy5jYWxsKGRhdGUpO1xuICAgIH0sXG4gICAgc2tpcE51bGxzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgaXNOb25OdWxsaXNoUHJpbWl0aXZlID0gZnVuY3Rpb24gaXNOb25OdWxsaXNoUHJpbWl0aXZlKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnbnVtYmVyJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnc3ltYm9sJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ2JpZ2ludCc7XG59O1xuXG52YXIgc2VudGluZWwgPSB7fTtcblxudmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeShcbiAgICBvYmplY3QsXG4gICAgcHJlZml4LFxuICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgY29tbWFSb3VuZFRyaXAsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgIHNraXBOdWxscyxcbiAgICBlbmNvZGVyLFxuICAgIGZpbHRlcixcbiAgICBzb3J0LFxuICAgIGFsbG93RG90cyxcbiAgICBzZXJpYWxpemVEYXRlLFxuICAgIGZvcm1hdCxcbiAgICBmb3JtYXR0ZXIsXG4gICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICBjaGFyc2V0LFxuICAgIHNpZGVDaGFubmVsXG4pIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuXG4gICAgdmFyIHRtcFNjID0gc2lkZUNoYW5uZWw7XG4gICAgdmFyIHN0ZXAgPSAwO1xuICAgIHZhciBmaW5kRmxhZyA9IGZhbHNlO1xuICAgIHdoaWxlICgodG1wU2MgPSB0bXBTYy5nZXQoc2VudGluZWwpKSAhPT0gdm9pZCB1bmRlZmluZWQgJiYgIWZpbmRGbGFnKSB7XG4gICAgICAgIC8vIFdoZXJlIG9iamVjdCBsYXN0IGFwcGVhcmVkIGluIHRoZSByZWYgdHJlZVxuICAgICAgICB2YXIgcG9zID0gdG1wU2MuZ2V0KG9iamVjdCk7XG4gICAgICAgIHN0ZXAgKz0gMTtcbiAgICAgICAgaWYgKHR5cGVvZiBwb3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAocG9zID09PSBzdGVwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0N5Y2xpYyBvYmplY3QgdmFsdWUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmluZEZsYWcgPSB0cnVlOyAvLyBCcmVhayB3aGlsZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdG1wU2MuZ2V0KHNlbnRpbmVsKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHN0ZXAgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2JqID0gZmlsdGVyKHByZWZpeCwgb2JqKTtcbiAgICB9IGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgb2JqID0gc2VyaWFsaXplRGF0ZShvYmopO1xuICAgIH0gZWxzZSBpZiAoZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBpc0FycmF5KG9iaikpIHtcbiAgICAgICAgb2JqID0gdXRpbHMubWF5YmVNYXAob2JqLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplRGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgaWYgKHN0cmljdE51bGxIYW5kbGluZykge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZXIgJiYgIWVuY29kZVZhbHVlc09ubHkgPyBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ2tleScsIGZvcm1hdCkgOiBwcmVmaXg7XG4gICAgICAgIH1cblxuICAgICAgICBvYmogPSAnJztcbiAgICB9XG5cbiAgICBpZiAoaXNOb25OdWxsaXNoUHJpbWl0aXZlKG9iaikgfHwgdXRpbHMuaXNCdWZmZXIob2JqKSkge1xuICAgICAgICBpZiAoZW5jb2Rlcikge1xuICAgICAgICAgICAgdmFyIGtleVZhbHVlID0gZW5jb2RlVmFsdWVzT25seSA/IHByZWZpeCA6IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAna2V5JywgZm9ybWF0KTtcbiAgICAgICAgICAgIHJldHVybiBbZm9ybWF0dGVyKGtleVZhbHVlKSArICc9JyArIGZvcm1hdHRlcihlbmNvZGVyKG9iaiwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ3ZhbHVlJywgZm9ybWF0KSldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbZm9ybWF0dGVyKHByZWZpeCkgKyAnPScgKyBmb3JtYXR0ZXIoU3RyaW5nKG9iaikpXTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICB2YXIgb2JqS2V5cztcbiAgICBpZiAoZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBpc0FycmF5KG9iaikpIHtcbiAgICAgICAgLy8gd2UgbmVlZCB0byBqb2luIGVsZW1lbnRzIGluXG4gICAgICAgIGlmIChlbmNvZGVWYWx1ZXNPbmx5ICYmIGVuY29kZXIpIHtcbiAgICAgICAgICAgIG9iaiA9IHV0aWxzLm1heWJlTWFwKG9iaiwgZW5jb2Rlcik7XG4gICAgICAgIH1cbiAgICAgICAgb2JqS2V5cyA9IFt7IHZhbHVlOiBvYmoubGVuZ3RoID4gMCA/IG9iai5qb2luKCcsJykgfHwgbnVsbCA6IHZvaWQgdW5kZWZpbmVkIH1dO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShmaWx0ZXIpKSB7XG4gICAgICAgIG9iaktleXMgPSBmaWx0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICBvYmpLZXlzID0gc29ydCA/IGtleXMuc29ydChzb3J0KSA6IGtleXM7XG4gICAgfVxuXG4gICAgdmFyIGFkanVzdGVkUHJlZml4ID0gY29tbWFSb3VuZFRyaXAgJiYgaXNBcnJheShvYmopICYmIG9iai5sZW5ndGggPT09IDEgPyBwcmVmaXggKyAnW10nIDogcHJlZml4O1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmpLZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpLZXlzW2pdO1xuICAgICAgICB2YXIgdmFsdWUgPSB0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Yga2V5LnZhbHVlICE9PSAndW5kZWZpbmVkJyA/IGtleS52YWx1ZSA6IG9ialtrZXldO1xuXG4gICAgICAgIGlmIChza2lwTnVsbHMgJiYgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleVByZWZpeCA9IGlzQXJyYXkob2JqKVxuICAgICAgICAgICAgPyB0eXBlb2YgZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2Z1bmN0aW9uJyA/IGdlbmVyYXRlQXJyYXlQcmVmaXgoYWRqdXN0ZWRQcmVmaXgsIGtleSkgOiBhZGp1c3RlZFByZWZpeFxuICAgICAgICAgICAgOiBhZGp1c3RlZFByZWZpeCArIChhbGxvd0RvdHMgPyAnLicgKyBrZXkgOiAnWycgKyBrZXkgKyAnXScpO1xuXG4gICAgICAgIHNpZGVDaGFubmVsLnNldChvYmplY3QsIHN0ZXApO1xuICAgICAgICB2YXIgdmFsdWVTaWRlQ2hhbm5lbCA9IGdldFNpZGVDaGFubmVsKCk7XG4gICAgICAgIHZhbHVlU2lkZUNoYW5uZWwuc2V0KHNlbnRpbmVsLCBzaWRlQ2hhbm5lbCk7XG4gICAgICAgIHB1c2hUb0FycmF5KHZhbHVlcywgc3RyaW5naWZ5KFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBrZXlQcmVmaXgsXG4gICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICAgICAgY29tbWFSb3VuZFRyaXAsXG4gICAgICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICBza2lwTnVsbHMsXG4gICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIGVuY29kZVZhbHVlc09ubHkgJiYgaXNBcnJheShvYmopID8gbnVsbCA6IGVuY29kZXIsXG4gICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICBzb3J0LFxuICAgICAgICAgICAgYWxsb3dEb3RzLFxuICAgICAgICAgICAgc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgIGZvcm1hdCxcbiAgICAgICAgICAgIGZvcm1hdHRlcixcbiAgICAgICAgICAgIGVuY29kZVZhbHVlc09ubHksXG4gICAgICAgICAgICBjaGFyc2V0LFxuICAgICAgICAgICAgdmFsdWVTaWRlQ2hhbm5lbFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xufTtcblxudmFyIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMgPSBmdW5jdGlvbiBub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zKG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmVuY29kZXIgIT09IG51bGwgJiYgdHlwZW9mIG9wdHMuZW5jb2RlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMuZW5jb2RlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFbmNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBjaGFyc2V0ID0gb3B0cy5jaGFyc2V0IHx8IGRlZmF1bHRzLmNoYXJzZXQ7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmNoYXJzZXQgIT09ICd1bmRlZmluZWQnICYmIG9wdHMuY2hhcnNldCAhPT0gJ3V0Zi04JyAmJiBvcHRzLmNoYXJzZXQgIT09ICdpc28tODg1OS0xJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2hhcnNldCBvcHRpb24gbXVzdCBiZSBlaXRoZXIgdXRmLTgsIGlzby04ODU5LTEsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXQgPSBmb3JtYXRzWydkZWZhdWx0J107XG4gICAgaWYgKHR5cGVvZiBvcHRzLmZvcm1hdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKCFoYXMuY2FsbChmb3JtYXRzLmZvcm1hdHRlcnMsIG9wdHMuZm9ybWF0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBmb3JtYXQgb3B0aW9uIHByb3ZpZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIGZvcm1hdCA9IG9wdHMuZm9ybWF0O1xuICAgIH1cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cbiAgICB2YXIgZmlsdGVyID0gZGVmYXVsdHMuZmlsdGVyO1xuICAgIGlmICh0eXBlb2Ygb3B0cy5maWx0ZXIgPT09ICdmdW5jdGlvbicgfHwgaXNBcnJheShvcHRzLmZpbHRlcikpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0cy5maWx0ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkUXVlcnlQcmVmaXg6IHR5cGVvZiBvcHRzLmFkZFF1ZXJ5UHJlZml4ID09PSAnYm9vbGVhbicgPyBvcHRzLmFkZFF1ZXJ5UHJlZml4IDogZGVmYXVsdHMuYWRkUXVlcnlQcmVmaXgsXG4gICAgICAgIGFsbG93RG90czogdHlwZW9mIG9wdHMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmFsbG93RG90cyA6ICEhb3B0cy5hbGxvd0RvdHMsXG4gICAgICAgIGNoYXJzZXQ6IGNoYXJzZXQsXG4gICAgICAgIGNoYXJzZXRTZW50aW5lbDogdHlwZW9mIG9wdHMuY2hhcnNldFNlbnRpbmVsID09PSAnYm9vbGVhbicgPyBvcHRzLmNoYXJzZXRTZW50aW5lbCA6IGRlZmF1bHRzLmNoYXJzZXRTZW50aW5lbCxcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuZGVsaW1pdGVyIDogb3B0cy5kZWxpbWl0ZXIsXG4gICAgICAgIGVuY29kZTogdHlwZW9mIG9wdHMuZW5jb2RlID09PSAnYm9vbGVhbicgPyBvcHRzLmVuY29kZSA6IGRlZmF1bHRzLmVuY29kZSxcbiAgICAgICAgZW5jb2RlcjogdHlwZW9mIG9wdHMuZW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuZW5jb2RlciA6IGRlZmF1bHRzLmVuY29kZXIsXG4gICAgICAgIGVuY29kZVZhbHVlc09ubHk6IHR5cGVvZiBvcHRzLmVuY29kZVZhbHVlc09ubHkgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlVmFsdWVzT25seSA6IGRlZmF1bHRzLmVuY29kZVZhbHVlc09ubHksXG4gICAgICAgIGZpbHRlcjogZmlsdGVyLFxuICAgICAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICAgICAgZm9ybWF0dGVyOiBmb3JtYXR0ZXIsXG4gICAgICAgIHNlcmlhbGl6ZURhdGU6IHR5cGVvZiBvcHRzLnNlcmlhbGl6ZURhdGUgPT09ICdmdW5jdGlvbicgPyBvcHRzLnNlcmlhbGl6ZURhdGUgOiBkZWZhdWx0cy5zZXJpYWxpemVEYXRlLFxuICAgICAgICBza2lwTnVsbHM6IHR5cGVvZiBvcHRzLnNraXBOdWxscyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5za2lwTnVsbHMgOiBkZWZhdWx0cy5za2lwTnVsbHMsXG4gICAgICAgIHNvcnQ6IHR5cGVvZiBvcHRzLnNvcnQgPT09ICdmdW5jdGlvbicgPyBvcHRzLnNvcnQgOiBudWxsLFxuICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IHR5cGVvZiBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgOiBkZWZhdWx0cy5zdHJpY3ROdWxsSGFuZGxpbmdcbiAgICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBvcHRzKSB7XG4gICAgdmFyIG9iaiA9IG9iamVjdDtcbiAgICB2YXIgb3B0aW9ucyA9IG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMob3B0cyk7XG5cbiAgICB2YXIgb2JqS2V5cztcbiAgICB2YXIgZmlsdGVyO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqID0gZmlsdGVyKCcnLCBvYmopO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvcHRpb25zLmZpbHRlcikpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIG9iaktleXMgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHZhciBhcnJheUZvcm1hdDtcbiAgICBpZiAob3B0cyAmJiBvcHRzLmFycmF5Rm9ybWF0IGluIGFycmF5UHJlZml4R2VuZXJhdG9ycykge1xuICAgICAgICBhcnJheUZvcm1hdCA9IG9wdHMuYXJyYXlGb3JtYXQ7XG4gICAgfSBlbHNlIGlmIChvcHRzICYmICdpbmRpY2VzJyBpbiBvcHRzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5pbmRpY2VzID8gJ2luZGljZXMnIDogJ3JlcGVhdCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSAnaW5kaWNlcyc7XG4gICAgfVxuXG4gICAgdmFyIGdlbmVyYXRlQXJyYXlQcmVmaXggPSBhcnJheVByZWZpeEdlbmVyYXRvcnNbYXJyYXlGb3JtYXRdO1xuICAgIGlmIChvcHRzICYmICdjb21tYVJvdW5kVHJpcCcgaW4gb3B0cyAmJiB0eXBlb2Ygb3B0cy5jb21tYVJvdW5kVHJpcCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Bjb21tYVJvdW5kVHJpcGAgbXVzdCBiZSBhIGJvb2xlYW4sIG9yIGFic2VudCcpO1xuICAgIH1cbiAgICB2YXIgY29tbWFSb3VuZFRyaXAgPSBnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIG9wdHMgJiYgb3B0cy5jb21tYVJvdW5kVHJpcDtcblxuICAgIGlmICghb2JqS2V5cykge1xuICAgICAgICBvYmpLZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zb3J0KSB7XG4gICAgICAgIG9iaktleXMuc29ydChvcHRpb25zLnNvcnQpO1xuICAgIH1cblxuICAgIHZhciBzaWRlQ2hhbm5lbCA9IGdldFNpZGVDaGFubmVsKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpLZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpLZXlzW2ldO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNraXBOdWxscyAmJiBvYmpba2V5XSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaFRvQXJyYXkoa2V5cywgc3RyaW5naWZ5KFxuICAgICAgICAgICAgb2JqW2tleV0sXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICAgICAgY29tbWFSb3VuZFRyaXAsXG4gICAgICAgICAgICBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgIG9wdGlvbnMuc2tpcE51bGxzLFxuICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGUgPyBvcHRpb25zLmVuY29kZXIgOiBudWxsLFxuICAgICAgICAgICAgb3B0aW9ucy5maWx0ZXIsXG4gICAgICAgICAgICBvcHRpb25zLnNvcnQsXG4gICAgICAgICAgICBvcHRpb25zLmFsbG93RG90cyxcbiAgICAgICAgICAgIG9wdGlvbnMuc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgIG9wdGlvbnMuZm9ybWF0LFxuICAgICAgICAgICAgb3B0aW9ucy5mb3JtYXR0ZXIsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZVZhbHVlc09ubHksXG4gICAgICAgICAgICBvcHRpb25zLmNoYXJzZXQsXG4gICAgICAgICAgICBzaWRlQ2hhbm5lbFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICB2YXIgam9pbmVkID0ga2V5cy5qb2luKG9wdGlvbnMuZGVsaW1pdGVyKTtcbiAgICB2YXIgcHJlZml4ID0gb3B0aW9ucy5hZGRRdWVyeVByZWZpeCA9PT0gdHJ1ZSA/ICc/JyA6ICcnO1xuXG4gICAgaWYgKG9wdGlvbnMuY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAgICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpLCB0aGUgXCJudW1lcmljIGVudGl0eVwiIHJlcHJlc2VudGF0aW9uIG9mIGEgY2hlY2ttYXJrXG4gICAgICAgICAgICBwcmVmaXggKz0gJ3V0Zjg9JTI2JTIzMTAwMDMlM0ImJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJylcbiAgICAgICAgICAgIHByZWZpeCArPSAndXRmOD0lRTIlOUMlOTMmJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqb2luZWQubGVuZ3RoID4gMCA/IHByZWZpeCArIGpvaW5lZCA6ICcnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbnZhciBoZXhUYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgICAgICBhcnJheS5wdXNoKCclJyArICgoaSA8IDE2ID8gJzAnIDogJycpICsgaS50b1N0cmluZygxNikpLnRvVXBwZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn0oKSk7XG5cbnZhciBjb21wYWN0UXVldWUgPSBmdW5jdGlvbiBjb21wYWN0UXVldWUocXVldWUpIHtcbiAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMSkge1xuICAgICAgICB2YXIgaXRlbSA9IHF1ZXVlLnBvcCgpO1xuICAgICAgICB2YXIgb2JqID0gaXRlbS5vYmpbaXRlbS5wcm9wXTtcblxuICAgICAgICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAgICAgICB2YXIgY29tcGFjdGVkID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpbal0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBhY3RlZC5wdXNoKG9ialtqXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpdGVtLm9ialtpdGVtLnByb3BdID0gY29tcGFjdGVkO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGFycmF5VG9PYmplY3QgPSBmdW5jdGlvbiBhcnJheVRvT2JqZWN0KHNvdXJjZSwgb3B0aW9ucykge1xuICAgIHZhciBvYmogPSBvcHRpb25zICYmIG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgb2JqW2ldID0gc291cmNlW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBtZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiAwICovXG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGFyZ2V0LnB1c2goc291cmNlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgJiYgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmICgob3B0aW9ucyAmJiAob3B0aW9ucy5wbGFpbk9iamVjdHMgfHwgb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpKSB8fCAhaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtzb3VyY2VdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbdGFyZ2V0LCBzb3VyY2VdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldCB8fCB0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gW3RhcmdldF0uY29uY2F0KHNvdXJjZSk7XG4gICAgfVxuXG4gICAgdmFyIG1lcmdlVGFyZ2V0ID0gdGFyZ2V0O1xuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgIWlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBtZXJnZVRhcmdldCA9IGFycmF5VG9PYmplY3QodGFyZ2V0LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoaXNBcnJheSh0YXJnZXQpICYmIGlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgICAgaWYgKGhhcy5jYWxsKHRhcmdldCwgaSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0SXRlbSA9IHRhcmdldFtpXTtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0SXRlbSAmJiB0eXBlb2YgdGFyZ2V0SXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gbWVyZ2UodGFyZ2V0SXRlbSwgaXRlbSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbaV0gPSBpdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc291cmNlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtrZXldO1xuXG4gICAgICAgIGlmIChoYXMuY2FsbChhY2MsIGtleSkpIHtcbiAgICAgICAgICAgIGFjY1trZXldID0gbWVyZ2UoYWNjW2tleV0sIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjY1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBtZXJnZVRhcmdldCk7XG59O1xuXG52YXIgYXNzaWduID0gZnVuY3Rpb24gYXNzaWduU2luZ2xlU291cmNlKHRhcmdldCwgc291cmNlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICBhY2Nba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHRhcmdldCk7XG59O1xuXG52YXIgZGVjb2RlID0gZnVuY3Rpb24gKHN0ciwgZGVjb2RlciwgY2hhcnNldCkge1xuICAgIHZhciBzdHJXaXRob3V0UGx1cyA9IHN0ci5yZXBsYWNlKC9cXCsvZywgJyAnKTtcbiAgICBpZiAoY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIC8vIHVuZXNjYXBlIG5ldmVyIHRocm93cywgbm8gdHJ5Li4uY2F0Y2ggbmVlZGVkOlxuICAgICAgICByZXR1cm4gc3RyV2l0aG91dFBsdXMucmVwbGFjZSgvJVswLTlhLWZdezJ9L2dpLCB1bmVzY2FwZSk7XG4gICAgfVxuICAgIC8vIHV0Zi04XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHJXaXRob3V0UGx1cyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gc3RyV2l0aG91dFBsdXM7XG4gICAgfVxufTtcblxudmFyIGVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShzdHIsIGRlZmF1bHRFbmNvZGVyLCBjaGFyc2V0LCBraW5kLCBmb3JtYXQpIHtcbiAgICAvLyBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgd3JpdHRlbiBieSBCcmlhbiBXaGl0ZSAobXNjZGV4KSBmb3IgdGhlIGlvLmpzIGNvcmUgcXVlcnlzdHJpbmcgbGlicmFyeS5cbiAgICAvLyBJdCBoYXMgYmVlbiBhZGFwdGVkIGhlcmUgZm9yIHN0cmljdGVyIGFkaGVyZW5jZSB0byBSRkMgMzk4NlxuICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgdmFyIHN0cmluZyA9IHN0cjtcbiAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgc3RyaW5nID0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN0cik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICBzdHJpbmcgPSBTdHJpbmcoc3RyKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGUoc3RyaW5nKS5yZXBsYWNlKC8ldVswLTlhLWZdezR9L2dpLCBmdW5jdGlvbiAoJDApIHtcbiAgICAgICAgICAgIHJldHVybiAnJTI2JTIzJyArIHBhcnNlSW50KCQwLnNsaWNlKDIpLCAxNikgKyAnJTNCJztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG91dCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBjID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgYyA9PT0gMHgyRCAvLyAtXG4gICAgICAgICAgICB8fCBjID09PSAweDJFIC8vIC5cbiAgICAgICAgICAgIHx8IGMgPT09IDB4NUYgLy8gX1xuICAgICAgICAgICAgfHwgYyA9PT0gMHg3RSAvLyB+XG4gICAgICAgICAgICB8fCAoYyA+PSAweDMwICYmIGMgPD0gMHgzOSkgLy8gMC05XG4gICAgICAgICAgICB8fCAoYyA+PSAweDQxICYmIGMgPD0gMHg1QSkgLy8gYS16XG4gICAgICAgICAgICB8fCAoYyA+PSAweDYxICYmIGMgPD0gMHg3QSkgLy8gQS1aXG4gICAgICAgICAgICB8fCAoZm9ybWF0ID09PSBmb3JtYXRzLlJGQzE3MzggJiYgKGMgPT09IDB4MjggfHwgYyA9PT0gMHgyOSkpIC8vICggKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIG91dCArPSBzdHJpbmcuY2hhckF0KGkpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIGhleFRhYmxlW2NdO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICAgICAgICBvdXQgPSBvdXQgKyAoaGV4VGFibGVbMHhDMCB8IChjID4+IDYpXSArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHhEODAwIHx8IGMgPj0gMHhFMDAwKSB7XG4gICAgICAgICAgICBvdXQgPSBvdXQgKyAoaGV4VGFibGVbMHhFMCB8IChjID4+IDEyKV0gKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDYpICYgMHgzRildICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgICBjID0gMHgxMDAwMCArICgoKGMgJiAweDNGRikgPDwgMTApIHwgKHN0cmluZy5jaGFyQ29kZUF0KGkpICYgMHgzRkYpKTtcbiAgICAgICAgLyogZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogWzIsIFwiYmVmb3JlXCJdICovXG4gICAgICAgIG91dCArPSBoZXhUYWJsZVsweEYwIHwgKGMgPj4gMTgpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDEyKSAmIDB4M0YpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDYpICYgMHgzRildXG4gICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufTtcblxudmFyIGNvbXBhY3QgPSBmdW5jdGlvbiBjb21wYWN0KHZhbHVlKSB7XG4gICAgdmFyIHF1ZXVlID0gW3sgb2JqOiB7IG86IHZhbHVlIH0sIHByb3A6ICdvJyB9XTtcbiAgICB2YXIgcmVmcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgaXRlbSA9IHF1ZXVlW2ldO1xuICAgICAgICB2YXIgb2JqID0gaXRlbS5vYmpbaXRlbS5wcm9wXTtcblxuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga2V5cy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbal07XG4gICAgICAgICAgICB2YXIgdmFsID0gb2JqW2tleV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsICYmIHJlZnMuaW5kZXhPZih2YWwpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goeyBvYmo6IG9iaiwgcHJvcDoga2V5IH0pO1xuICAgICAgICAgICAgICAgIHJlZnMucHVzaCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcGFjdFF1ZXVlKHF1ZXVlKTtcblxuICAgIHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBpc1JlZ0V4cCA9IGZ1bmN0aW9uIGlzUmVnRXhwKG9iaikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59O1xuXG52YXIgaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlcihvYmopIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iaikpO1xufTtcblxudmFyIGNvbWJpbmUgPSBmdW5jdGlvbiBjb21iaW5lKGEsIGIpIHtcbiAgICByZXR1cm4gW10uY29uY2F0KGEsIGIpO1xufTtcblxudmFyIG1heWJlTWFwID0gZnVuY3Rpb24gbWF5YmVNYXAodmFsLCBmbikge1xuICAgIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgICAgdmFyIG1hcHBlZCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgbWFwcGVkLnB1c2goZm4odmFsW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcHBlZDtcbiAgICB9XG4gICAgcmV0dXJuIGZuKHZhbCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBhcnJheVRvT2JqZWN0OiBhcnJheVRvT2JqZWN0LFxuICAgIGFzc2lnbjogYXNzaWduLFxuICAgIGNvbWJpbmU6IGNvbWJpbmUsXG4gICAgY29tcGFjdDogY29tcGFjdCxcbiAgICBkZWNvZGU6IGRlY29kZSxcbiAgICBlbmNvZGU6IGVuY29kZSxcbiAgICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gICAgaXNSZWdFeHA6IGlzUmVnRXhwLFxuICAgIG1heWJlTWFwOiBtYXliZU1hcCxcbiAgICBtZXJnZTogbWVyZ2Vcbn07XG4iLCIvKlxuICogQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbiAqIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbiAqIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuICogd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuICogZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuICogcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4gKiBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuICogaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuICogTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4gKiBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1JcbiAqIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbiAqIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHVueWNvZGUgPSByZXF1aXJlKCdwdW55Y29kZScpO1xuXG5mdW5jdGlvbiBVcmwoKSB7XG4gIHRoaXMucHJvdG9jb2wgPSBudWxsO1xuICB0aGlzLnNsYXNoZXMgPSBudWxsO1xuICB0aGlzLmF1dGggPSBudWxsO1xuICB0aGlzLmhvc3QgPSBudWxsO1xuICB0aGlzLnBvcnQgPSBudWxsO1xuICB0aGlzLmhvc3RuYW1lID0gbnVsbDtcbiAgdGhpcy5oYXNoID0gbnVsbDtcbiAgdGhpcy5zZWFyY2ggPSBudWxsO1xuICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgdGhpcy5wYXRobmFtZSA9IG51bGw7XG4gIHRoaXMucGF0aCA9IG51bGw7XG4gIHRoaXMuaHJlZiA9IG51bGw7XG59XG5cbi8vIFJlZmVyZW5jZTogUkZDIDM5ODYsIFJGQyAxODA4LCBSRkMgMjM5NlxuXG4vKlxuICogZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmVcbiAqIGNvbXBpbGVkIG9uY2Ugb24gdGhlIGZpcnN0IG1vZHVsZSBsb2FkLlxuICovXG52YXIgcHJvdG9jb2xQYXR0ZXJuID0gL14oW2EtejAtOS4rLV0rOikvaSxcbiAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gIC8vIFNwZWNpYWwgY2FzZSBmb3IgYSBzaW1wbGUgcGF0aCBVUkxcbiAgc2ltcGxlUGF0aFBhdHRlcm4gPSAvXihcXC9cXC8/KD8hXFwvKVteP1xcc10qKShcXD9bXlxcc10qKT8kLyxcblxuICAvKlxuICAgKiBSRkMgMjM5NjogY2hhcmFjdGVycyByZXNlcnZlZCBmb3IgZGVsaW1pdGluZyBVUkxzLlxuICAgKiBXZSBhY3R1YWxseSBqdXN0IGF1dG8tZXNjYXBlIHRoZXNlLlxuICAgKi9cbiAgZGVsaW1zID0gW1xuICAgICc8JywgJz4nLCAnXCInLCAnYCcsICcgJywgJ1xccicsICdcXG4nLCAnXFx0J1xuICBdLFxuXG4gIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuXG4gIHVud2lzZSA9IFtcbiAgICAneycsICd9JywgJ3wnLCAnXFxcXCcsICdeJywgJ2AnXG4gIF0uY29uY2F0KGRlbGltcyksXG5cbiAgLy8gQWxsb3dlZCBieSBSRkNzLCBidXQgY2F1c2Ugb2YgWFNTIGF0dGFja3MuICBBbHdheXMgZXNjYXBlIHRoZXNlLlxuICBhdXRvRXNjYXBlID0gWydcXCcnXS5jb25jYXQodW53aXNlKSxcbiAgLypcbiAgICogQ2hhcmFjdGVycyB0aGF0IGFyZSBuZXZlciBldmVyIGFsbG93ZWQgaW4gYSBob3N0bmFtZS5cbiAgICogTm90ZSB0aGF0IGFueSBpbnZhbGlkIGNoYXJzIGFyZSBhbHNvIGhhbmRsZWQsIGJ1dCB0aGVzZVxuICAgKiBhcmUgdGhlIG9uZXMgdGhhdCBhcmUgKmV4cGVjdGVkKiB0byBiZSBzZWVuLCBzbyB3ZSBmYXN0LXBhdGhcbiAgICogdGhlbS5cbiAgICovXG4gIG5vbkhvc3RDaGFycyA9IFtcbiAgICAnJScsICcvJywgJz8nLCAnOycsICcjJ1xuICBdLmNvbmNhdChhdXRvRXNjYXBlKSxcbiAgaG9zdEVuZGluZ0NoYXJzID0gW1xuICAgICcvJywgJz8nLCAnIydcbiAgXSxcbiAgaG9zdG5hbWVNYXhMZW4gPSAyNTUsXG4gIGhvc3RuYW1lUGFydFBhdHRlcm4gPSAvXlsrYS16MC05QS1aXy1dezAsNjN9JC8sXG4gIGhvc3RuYW1lUGFydFN0YXJ0ID0gL14oWythLXowLTlBLVpfLV17MCw2M30pKC4qKSQvLFxuICAvLyBwcm90b2NvbHMgdGhhdCBjYW4gYWxsb3cgXCJ1bnNhZmVcIiBhbmQgXCJ1bndpc2VcIiBjaGFycy5cbiAgdW5zYWZlUHJvdG9jb2wgPSB7XG4gICAgamF2YXNjcmlwdDogdHJ1ZSxcbiAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gIH0sXG4gIC8vIHByb3RvY29scyB0aGF0IG5ldmVyIGhhdmUgYSBob3N0bmFtZS5cbiAgaG9zdGxlc3NQcm90b2NvbCA9IHtcbiAgICBqYXZhc2NyaXB0OiB0cnVlLFxuICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgfSxcbiAgLy8gcHJvdG9jb2xzIHRoYXQgYWx3YXlzIGNvbnRhaW4gYSAvLyBiaXQuXG4gIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICBodHRwOiB0cnVlLFxuICAgIGh0dHBzOiB0cnVlLFxuICAgIGZ0cDogdHJ1ZSxcbiAgICBnb3BoZXI6IHRydWUsXG4gICAgZmlsZTogdHJ1ZSxcbiAgICAnaHR0cDonOiB0cnVlLFxuICAgICdodHRwczonOiB0cnVlLFxuICAgICdmdHA6JzogdHJ1ZSxcbiAgICAnZ29waGVyOic6IHRydWUsXG4gICAgJ2ZpbGU6JzogdHJ1ZVxuICB9LFxuICBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3FzJyk7XG5cbmZ1bmN0aW9uIHVybFBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKHVybCAmJiB0eXBlb2YgdXJsID09PSAnb2JqZWN0JyAmJiB1cmwgaW5zdGFuY2VvZiBVcmwpIHsgcmV0dXJuIHVybDsgfVxuXG4gIHZhciB1ID0gbmV3IFVybCgpO1xuICB1LnBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpO1xuICByZXR1cm4gdTtcbn1cblxuVXJsLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uICh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiICsgdHlwZW9mIHVybCk7XG4gIH1cblxuICAvKlxuICAgKiBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cbiAgICogQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzXG4gICAqIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2XG4gICAqL1xuICB2YXIgcXVlcnlJbmRleCA9IHVybC5pbmRleE9mKCc/JyksXG4gICAgc3BsaXR0ZXIgPSBxdWVyeUluZGV4ICE9PSAtMSAmJiBxdWVyeUluZGV4IDwgdXJsLmluZGV4T2YoJyMnKSA/ICc/JyA6ICcjJyxcbiAgICB1U3BsaXQgPSB1cmwuc3BsaXQoc3BsaXR0ZXIpLFxuICAgIHNsYXNoUmVnZXggPSAvXFxcXC9nO1xuICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpO1xuICB1cmwgPSB1U3BsaXQuam9pbihzcGxpdHRlcik7XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLypcbiAgICogdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgICogVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICAgKi9cbiAgcmVzdCA9IHJlc3QudHJpbSgpO1xuXG4gIGlmICghc2xhc2hlc0Rlbm90ZUhvc3QgJiYgdXJsLnNwbGl0KCcjJykubGVuZ3RoID09PSAxKSB7XG4gICAgLy8gVHJ5IGZhc3QgcGF0aCByZWdleHBcbiAgICB2YXIgc2ltcGxlUGF0aCA9IHNpbXBsZVBhdGhQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gICAgaWYgKHNpbXBsZVBhdGgpIHtcbiAgICAgIHRoaXMucGF0aCA9IHJlc3Q7XG4gICAgICB0aGlzLmhyZWYgPSByZXN0O1xuICAgICAgdGhpcy5wYXRobmFtZSA9IHNpbXBsZVBhdGhbMV07XG4gICAgICBpZiAoc2ltcGxlUGF0aFsyXSkge1xuICAgICAgICB0aGlzLnNlYXJjaCA9IHNpbXBsZVBhdGhbMl07XG4gICAgICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMuc2VhcmNoLnN1YnN0cigxKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5xdWVyeSA9IHRoaXMuc2VhcmNoLnN1YnN0cigxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgICAgIHRoaXMucXVlcnkgPSB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm90byA9IHByb3RvY29sUGF0dGVybi5leGVjKHJlc3QpO1xuICBpZiAocHJvdG8pIHtcbiAgICBwcm90byA9IHByb3RvWzBdO1xuICAgIHZhciBsb3dlclByb3RvID0gcHJvdG8udG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLnByb3RvY29sID0gbG93ZXJQcm90bztcbiAgICByZXN0ID0gcmVzdC5zdWJzdHIocHJvdG8ubGVuZ3RoKTtcbiAgfVxuXG4gIC8qXG4gICAqIGZpZ3VyZSBvdXQgaWYgaXQncyBnb3QgYSBob3N0XG4gICAqIHVzZXJAc2VydmVyIGlzICphbHdheXMqIGludGVycHJldGVkIGFzIGEgaG9zdG5hbWUsIGFuZCB1cmxcbiAgICogcmVzb2x1dGlvbiB3aWxsIHRyZWF0IC8vZm9vL2JhciBhcyBob3N0PWZvbyxwYXRoPWJhciBiZWNhdXNlIHRoYXQnc1xuICAgKiBob3cgdGhlIGJyb3dzZXIgcmVzb2x2ZXMgcmVsYXRpdmUgVVJMcy5cbiAgICovXG4gIGlmIChzbGFzaGVzRGVub3RlSG9zdCB8fCBwcm90byB8fCByZXN0Lm1hdGNoKC9eXFwvXFwvW15AL10rQFteQC9dKy8pKSB7XG4gICAgdmFyIHNsYXNoZXMgPSByZXN0LnN1YnN0cigwLCAyKSA9PT0gJy8vJztcbiAgICBpZiAoc2xhc2hlcyAmJiAhKHByb3RvICYmIGhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dKSkge1xuICAgICAgcmVzdCA9IHJlc3Quc3Vic3RyKDIpO1xuICAgICAgdGhpcy5zbGFzaGVzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dICYmIChzbGFzaGVzIHx8IChwcm90byAmJiAhc2xhc2hlZFByb3RvY29sW3Byb3RvXSkpKSB7XG5cbiAgICAvKlxuICAgICAqIHRoZXJlJ3MgYSBob3N0bmFtZS5cbiAgICAgKiB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgLywgPywgOywgb3IgIyBlbmRzIHRoZSBob3N0LlxuICAgICAqXG4gICAgICogSWYgdGhlcmUgaXMgYW4gQCBpbiB0aGUgaG9zdG5hbWUsIHRoZW4gbm9uLWhvc3QgY2hhcnMgKmFyZSogYWxsb3dlZFxuICAgICAqIHRvIHRoZSBsZWZ0IG9mIHRoZSBsYXN0IEAgc2lnbiwgdW5sZXNzIHNvbWUgaG9zdC1lbmRpbmcgY2hhcmFjdGVyXG4gICAgICogY29tZXMgKmJlZm9yZSogdGhlIEAtc2lnbi5cbiAgICAgKiBVUkxzIGFyZSBvYm5veGlvdXMuXG4gICAgICpcbiAgICAgKiBleDpcbiAgICAgKiBodHRwOi8vYUBiQGMvID0+IHVzZXI6YUBiIGhvc3Q6Y1xuICAgICAqIGh0dHA6Ly9hQGI/QGMgPT4gdXNlcjphIGhvc3Q6YyBwYXRoOi8/QGNcbiAgICAgKi9cblxuICAgIC8qXG4gICAgICogdjAuMTIgVE9ETyhpc2FhY3MpOiBUaGlzIGlzIG5vdCBxdWl0ZSBob3cgQ2hyb21lIGRvZXMgdGhpbmdzLlxuICAgICAqIFJldmlldyBvdXIgdGVzdCBjYXNlIGFnYWluc3QgYnJvd3NlcnMgbW9yZSBjb21wcmVoZW5zaXZlbHkuXG4gICAgICovXG5cbiAgICAvLyBmaW5kIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBhbnkgaG9zdEVuZGluZ0NoYXJzXG4gICAgdmFyIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvc3RFbmRpbmdDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihob3N0RW5kaW5nQ2hhcnNbaV0pO1xuICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKSB7IGhvc3RFbmQgPSBoZWM7IH1cbiAgICB9XG5cbiAgICAvKlxuICAgICAqIGF0IHRoaXMgcG9pbnQsIGVpdGhlciB3ZSBoYXZlIGFuIGV4cGxpY2l0IHBvaW50IHdoZXJlIHRoZVxuICAgICAqIGF1dGggcG9ydGlvbiBjYW5ub3QgZ28gcGFzdCwgb3IgdGhlIGxhc3QgQCBjaGFyIGlzIHRoZSBkZWNpZGVyLlxuICAgICAqL1xuICAgIHZhciBhdXRoLCBhdFNpZ247XG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7XG4gICAgICAvLyBhdFNpZ24gY2FuIGJlIGFueXdoZXJlLlxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKlxuICAgICAgICogYXRTaWduIG11c3QgYmUgaW4gYXV0aCBwb3J0aW9uLlxuICAgICAgICogaHR0cDovL2FAYi9jQGQgPT4gaG9zdDpiIGF1dGg6YSBwYXRoOi9jQGRcbiAgICAgICAqL1xuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcsIGhvc3RFbmQpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgICogUHVsbCB0aGF0IG9mZi5cbiAgICAgKi9cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSkgeyBob3N0RW5kID0gaGVjOyB9XG4gICAgfVxuICAgIC8vIGlmIHdlIHN0aWxsIGhhdmUgbm90IGhpdCBpdCwgdGhlbiB0aGUgZW50aXJlIHRoaW5nIGlzIGEgaG9zdC5cbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHsgaG9zdEVuZCA9IHJlc3QubGVuZ3RoOyB9XG5cbiAgICB0aGlzLmhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKGhvc3RFbmQpO1xuXG4gICAgLy8gcHVsbCBvdXQgcG9ydC5cbiAgICB0aGlzLnBhcnNlSG9zdCgpO1xuXG4gICAgLypcbiAgICAgKiB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgICAqIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgICovXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvKlxuICAgICAqIGlmIGhvc3RuYW1lIGJlZ2lucyB3aXRoIFsgYW5kIGVuZHMgd2l0aCBdXG4gICAgICogYXNzdW1lIHRoYXQgaXQncyBhbiBJUHY2IGFkZHJlc3MuXG4gICAgICovXG4gICAgdmFyIGlwdjZIb3N0bmFtZSA9IHRoaXMuaG9zdG5hbWVbMF0gPT09ICdbJyAmJiB0aGlzLmhvc3RuYW1lW3RoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMV0gPT09ICddJztcblxuICAgIC8vIHZhbGlkYXRlIGEgbGl0dGxlLlxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB2YXIgaG9zdHBhcnRzID0gdGhpcy5ob3N0bmFtZS5zcGxpdCgvXFwuLyk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGhvc3RwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcnQgPSBob3N0cGFydHNbaV07XG4gICAgICAgIGlmICghcGFydCkgeyBjb250aW51ZTsgfVxuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICogd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgICAqIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgICogYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgbmV3cGFydCArPSAneCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9IHBhcnRbal07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdlIHRlc3QgYWdhaW4gd2l0aCBBU0NJSSBjaGFyIG9ubHlcbiAgICAgICAgICBpZiAoIW5ld3BhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICAgIHZhciB2YWxpZFBhcnRzID0gaG9zdHBhcnRzLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgdmFyIG5vdEhvc3QgPSBob3N0cGFydHMuc2xpY2UoaSArIDEpO1xuICAgICAgICAgICAgdmFyIGJpdCA9IHBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0U3RhcnQpO1xuICAgICAgICAgICAgaWYgKGJpdCkge1xuICAgICAgICAgICAgICB2YWxpZFBhcnRzLnB1c2goYml0WzFdKTtcbiAgICAgICAgICAgICAgbm90SG9zdC51bnNoaWZ0KGJpdFsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm90SG9zdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmVzdCA9ICcvJyArIG5vdEhvc3Quam9pbignLicpICsgcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaG9zdG5hbWUgPSB2YWxpZFBhcnRzLmpvaW4oJy4nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmhvc3RuYW1lLmxlbmd0aCA+IGhvc3RuYW1lTWF4TGVuKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhvc3RuYW1lcyBhcmUgYWx3YXlzIGxvd2VyIGNhc2UuXG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICAvKlxuICAgICAgICogSUROQSBTdXBwb3J0OiBSZXR1cm5zIGEgcHVueWNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIFwiZG9tYWluXCIuXG4gICAgICAgKiBJdCBvbmx5IGNvbnZlcnRzIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB0aGF0XG4gICAgICAgKiBoYXZlIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmXG4gICAgICAgKiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQgYWxyZWFkeSBpcyBBU0NJSS1vbmx5LlxuICAgICAgICovXG4gICAgICB0aGlzLmhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSSh0aGlzLmhvc3RuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgcCA9IHRoaXMucG9ydCA/ICc6JyArIHRoaXMucG9ydCA6ICcnO1xuICAgIHZhciBoID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcbiAgICB0aGlzLmhvc3QgPSBoICsgcDtcbiAgICB0aGlzLmhyZWYgKz0gdGhpcy5ob3N0O1xuXG4gICAgLypcbiAgICAgKiBzdHJpcCBbIGFuZCBdIGZyb20gdGhlIGhvc3RuYW1lXG4gICAgICogdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2hcbiAgICAgKi9cbiAgICBpZiAoaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHtcbiAgICAgICAgcmVzdCA9ICcvJyArIHJlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuXG4gICAqIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy5cbiAgICovXG4gIGlmICghdW5zYWZlUHJvdG9jb2xbbG93ZXJQcm90b10pIHtcblxuICAgIC8qXG4gICAgICogRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55IFwiYXV0b0VzY2FwZVwiIGNoYXJzIGdldFxuICAgICAqIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleVxuICAgICAqIG5lZWQgdG8gYmUuXG4gICAgICovXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIGlmIChyZXN0LmluZGV4T2YoYWUpID09PSAtMSkgeyBjb250aW51ZTsgfVxuICAgICAgdmFyIGVzYyA9IGVuY29kZVVSSUNvbXBvbmVudChhZSk7XG4gICAgICBpZiAoZXNjID09PSBhZSkge1xuICAgICAgICBlc2MgPSBlc2NhcGUoYWUpO1xuICAgICAgfVxuICAgICAgcmVzdCA9IHJlc3Quc3BsaXQoYWUpLmpvaW4oZXNjKTtcbiAgICB9XG4gIH1cblxuICAvLyBjaG9wIG9mZiBmcm9tIHRoZSB0YWlsIGZpcnN0LlxuICB2YXIgaGFzaCA9IHJlc3QuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaCAhPT0gLTEpIHtcbiAgICAvLyBnb3QgYSBmcmFnbWVudCBzdHJpbmcuXG4gICAgdGhpcy5oYXNoID0gcmVzdC5zdWJzdHIoaGFzaCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgaGFzaCk7XG4gIH1cbiAgdmFyIHFtID0gcmVzdC5pbmRleE9mKCc/Jyk7XG4gIGlmIChxbSAhPT0gLTEpIHtcbiAgICB0aGlzLnNlYXJjaCA9IHJlc3Quc3Vic3RyKHFtKTtcbiAgICB0aGlzLnF1ZXJ5ID0gcmVzdC5zdWJzdHIocW0gKyAxKTtcbiAgICBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMucXVlcnkpO1xuICAgIH1cbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBxbSk7XG4gIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgIC8vIG5vIHF1ZXJ5IHN0cmluZywgYnV0IHBhcnNlUXVlcnlTdHJpbmcgc3RpbGwgcmVxdWVzdGVkXG4gICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICB0aGlzLnF1ZXJ5ID0ge307XG4gIH1cbiAgaWYgKHJlc3QpIHsgdGhpcy5wYXRobmFtZSA9IHJlc3Q7IH1cbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJiB0aGlzLmhvc3RuYW1lICYmICF0aGlzLnBhdGhuYW1lKSB7XG4gICAgdGhpcy5wYXRobmFtZSA9ICcvJztcbiAgfVxuXG4gIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gIGlmICh0aGlzLnBhdGhuYW1lIHx8IHRoaXMuc2VhcmNoKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gdGhpcy5zZWFyY2ggfHwgJyc7XG4gICAgdGhpcy5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBmb3JtYXQgYSBwYXJzZWQgb2JqZWN0IGludG8gYSB1cmwgc3RyaW5nXG5mdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7XG4gIC8qXG4gICAqIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuXG4gICAqIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuXG4gICAqIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3NcbiAgICogdG8gY2xlYW4gdXAgcG90ZW50aWFsbHkgd29ua3kgdXJscy5cbiAgICovXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgeyBvYmogPSB1cmxQYXJzZShvYmopOyB9XG4gIGlmICghKG9iaiBpbnN0YW5jZW9mIFVybCkpIHsgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTsgfVxuICByZXR1cm4gb2JqLmZvcm1hdCgpO1xufVxuXG5VcmwucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGF1dGggPSB0aGlzLmF1dGggfHwgJyc7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgJzonKTtcbiAgICBhdXRoICs9ICdAJztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsXG4gICAgcGF0aG5hbWUgPSB0aGlzLnBhdGhuYW1lIHx8ICcnLFxuICAgIGhhc2ggPSB0aGlzLmhhc2ggfHwgJycsXG4gICAgaG9zdCA9IGZhbHNlLFxuICAgIHF1ZXJ5ID0gJyc7XG5cbiAgaWYgKHRoaXMuaG9zdCkge1xuICAgIGhvc3QgPSBhdXRoICsgdGhpcy5ob3N0O1xuICB9IGVsc2UgaWYgKHRoaXMuaG9zdG5hbWUpIHtcbiAgICBob3N0ID0gYXV0aCArICh0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSA9PT0gLTEgPyB0aGlzLmhvc3RuYW1lIDogJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyk7XG4gICAgaWYgKHRoaXMucG9ydCkge1xuICAgICAgaG9zdCArPSAnOicgKyB0aGlzLnBvcnQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMucXVlcnkgJiYgdHlwZW9mIHRoaXMucXVlcnkgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHRoaXMucXVlcnkpLmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHRoaXMucXVlcnksIHtcbiAgICAgIGFycmF5Rm9ybWF0OiAncmVwZWF0JyxcbiAgICAgIGFkZFF1ZXJ5UHJlZml4OiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHRoaXMuc2VhcmNoIHx8IChxdWVyeSAmJiAoJz8nICsgcXVlcnkpKSB8fCAnJztcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gJzonKSB7IHByb3RvY29sICs9ICc6JzsgfVxuXG4gIC8qXG4gICAqIG9ubHkgdGhlIHNsYXNoZWRQcm90b2NvbHMgZ2V0IHRoZSAvLy4gIE5vdCBtYWlsdG86LCB4bXBwOiwgZXRjLlxuICAgKiB1bmxlc3MgdGhleSBoYWQgdGhlbSB0byBiZWdpbiB3aXRoLlxuICAgKi9cbiAgaWYgKHRoaXMuc2xhc2hlcyB8fCAoIXByb3RvY29sIHx8IHNsYXNoZWRQcm90b2NvbFtwcm90b2NvbF0pICYmIGhvc3QgIT09IGZhbHNlKSB7XG4gICAgaG9zdCA9ICcvLycgKyAoaG9zdCB8fCAnJyk7XG4gICAgaWYgKHBhdGhuYW1lICYmIHBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7IHBhdGhuYW1lID0gJy8nICsgcGF0aG5hbWU7IH1cbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSAnJztcbiAgfVxuXG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIHsgaGFzaCA9ICcjJyArIGhhc2g7IH1cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSAnPycpIHsgc2VhcmNoID0gJz8nICsgc2VhcmNoOyB9XG5cbiAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoJyMnLCAnJTIzJyk7XG5cbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmUoc291cmNlLCByZWxhdGl2ZSkge1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIChyZWxhdGl2ZSkge1xuICByZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KHVybFBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSkpLmZvcm1hdCgpO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZU9iamVjdChzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIGlmICghc291cmNlKSB7IHJldHVybiByZWxhdGl2ZTsgfVxuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZU9iamVjdChyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZU9iamVjdCA9IGZ1bmN0aW9uIChyZWxhdGl2ZSkge1xuICBpZiAodHlwZW9mIHJlbGF0aXZlID09PSAnc3RyaW5nJykge1xuICAgIHZhciByZWwgPSBuZXcgVXJsKCk7XG4gICAgcmVsLnBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgcmVsYXRpdmUgPSByZWw7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gbmV3IFVybCgpO1xuICB2YXIgdGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgZm9yICh2YXIgdGsgPSAwOyB0ayA8IHRrZXlzLmxlbmd0aDsgdGsrKykge1xuICAgIHZhciB0a2V5ID0gdGtleXNbdGtdO1xuICAgIHJlc3VsdFt0a2V5XSA9IHRoaXNbdGtleV07XG4gIH1cblxuICAvKlxuICAgKiBoYXNoIGlzIGFsd2F5cyBvdmVycmlkZGVuLCBubyBtYXR0ZXIgd2hhdC5cbiAgICogZXZlbiBocmVmPVwiXCIgd2lsbCByZW1vdmUgaXQuXG4gICAqL1xuICByZXN1bHQuaGFzaCA9IHJlbGF0aXZlLmhhc2g7XG5cbiAgLy8gaWYgdGhlIHJlbGF0aXZlIHVybCBpcyBlbXB0eSwgdGhlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBkbyBoZXJlLlxuICBpZiAocmVsYXRpdmUuaHJlZiA9PT0gJycpIHtcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuXG4gIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmVcbiAgICB2YXIgcmtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgZm9yICh2YXIgcmsgPSAwOyByayA8IHJrZXlzLmxlbmd0aDsgcmsrKykge1xuICAgICAgdmFyIHJrZXkgPSBya2V5c1tya107XG4gICAgICBpZiAocmtleSAhPT0gJ3Byb3RvY29sJykgeyByZXN1bHRbcmtleV0gPSByZWxhdGl2ZVtya2V5XTsgfVxuICAgIH1cblxuICAgIC8vIHVybFBhcnNlIGFwcGVuZHMgdHJhaWxpbmcgLyB0byB1cmxzIGxpa2UgaHR0cDovL3d3dy5leGFtcGxlLmNvbVxuICAgIGlmIChzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXSAmJiByZXN1bHQuaG9zdG5hbWUgJiYgIXJlc3VsdC5wYXRobmFtZSkge1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gJy8nO1xuICAgICAgcmVzdWx0LnBhdGggPSByZXN1bHQucGF0aG5hbWU7XG4gICAgfVxuXG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChyZWxhdGl2ZS5wcm90b2NvbCAmJiByZWxhdGl2ZS5wcm90b2NvbCAhPT0gcmVzdWx0LnByb3RvY29sKSB7XG4gICAgLypcbiAgICAgKiBpZiBpdCdzIGEga25vd24gdXJsIHByb3RvY29sLCB0aGVuIGNoYW5naW5nXG4gICAgICogdGhlIHByb3RvY29sIGRvZXMgd2VpcmQgdGhpbmdzXG4gICAgICogZmlyc3QsIGlmIGl0J3Mgbm90IGZpbGU6LCB0aGVuIHdlIE1VU1QgaGF2ZSBhIGhvc3QsXG4gICAgICogYW5kIGlmIHRoZXJlIHdhcyBhIHBhdGhcbiAgICAgKiB0byBiZWdpbiB3aXRoLCB0aGVuIHdlIE1VU1QgaGF2ZSBhIHBhdGguXG4gICAgICogaWYgaXQgaXMgZmlsZTosIHRoZW4gdGhlIGhvc3QgaXMgZHJvcHBlZCxcbiAgICAgKiBiZWNhdXNlIHRoYXQncyBrbm93biB0byBiZSBob3N0bGVzcy5cbiAgICAgKiBhbnl0aGluZyBlbHNlIGlzIGFzc3VtZWQgdG8gYmUgYWJzb2x1dGUuXG4gICAgICovXG4gICAgaWYgKCFzbGFzaGVkUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICAgIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgICAgICB2YXIgayA9IGtleXNbdl07XG4gICAgICAgIHJlc3VsdFtrXSA9IHJlbGF0aXZlW2tdO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJlc3VsdC5wcm90b2NvbCA9IHJlbGF0aXZlLnByb3RvY29sO1xuICAgIGlmICghcmVsYXRpdmUuaG9zdCAmJiAhaG9zdGxlc3NQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciByZWxQYXRoID0gKHJlbGF0aXZlLnBhdGhuYW1lIHx8ICcnKS5zcGxpdCgnLycpO1xuICAgICAgd2hpbGUgKHJlbFBhdGgubGVuZ3RoICYmICEocmVsYXRpdmUuaG9zdCA9IHJlbFBhdGguc2hpZnQoKSkpIHsgfVxuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0KSB7IHJlbGF0aXZlLmhvc3QgPSAnJzsgfVxuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0bmFtZSkgeyByZWxhdGl2ZS5ob3N0bmFtZSA9ICcnOyB9XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHsgcmVsUGF0aC51bnNoaWZ0KCcnKTsgfVxuICAgICAgaWYgKHJlbFBhdGgubGVuZ3RoIDwgMikgeyByZWxQYXRoLnVuc2hpZnQoJycpOyB9XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxQYXRoLmpvaW4oJy8nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsYXRpdmUucGF0aG5hbWU7XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgcmVzdWx0Lmhvc3QgPSByZWxhdGl2ZS5ob3N0IHx8ICcnO1xuICAgIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0O1xuICAgIHJlc3VsdC5wb3J0ID0gcmVsYXRpdmUucG9ydDtcbiAgICAvLyB0byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQucGF0aG5hbWUgfHwgcmVzdWx0LnNlYXJjaCkge1xuICAgICAgdmFyIHAgPSByZXN1bHQucGF0aG5hbWUgfHwgJyc7XG4gICAgICB2YXIgcyA9IHJlc3VsdC5zZWFyY2ggfHwgJyc7XG4gICAgICByZXN1bHQucGF0aCA9IHAgKyBzO1xuICAgIH1cbiAgICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHZhciBpc1NvdXJjZUFicyA9IHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycsXG4gICAgaXNSZWxBYnMgPSByZWxhdGl2ZS5ob3N0IHx8IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLFxuICAgIG11c3RFbmRBYnMgPSBpc1JlbEFicyB8fCBpc1NvdXJjZUFicyB8fCAocmVzdWx0Lmhvc3QgJiYgcmVsYXRpdmUucGF0aG5hbWUpLFxuICAgIHJlbW92ZUFsbERvdHMgPSBtdXN0RW5kQWJzLFxuICAgIHNyY1BhdGggPSByZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgcHN5Y2hvdGljID0gcmVzdWx0LnByb3RvY29sICYmICFzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXTtcblxuICAvKlxuICAgKiBpZiB0aGUgdXJsIGlzIGEgbm9uLXNsYXNoZWQgdXJsLCB0aGVuIHJlbGF0aXZlXG4gICAqIGxpbmtzIGxpa2UgLi4vLi4gc2hvdWxkIGJlIGFibGVcbiAgICogdG8gY3Jhd2wgdXAgdG8gdGhlIGhvc3RuYW1lLCBhcyB3ZWxsLiAgVGhpcyBpcyBzdHJhbmdlLlxuICAgKiByZXN1bHQucHJvdG9jb2wgaGFzIGFscmVhZHkgYmVlbiBzZXQgYnkgbm93LlxuICAgKiBMYXRlciBvbiwgcHV0IHRoZSBmaXJzdCBwYXRoIHBhcnQgaW50byB0aGUgaG9zdCBmaWVsZC5cbiAgICovXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAnJztcbiAgICByZXN1bHQucG9ydCA9IG51bGw7XG4gICAgaWYgKHJlc3VsdC5ob3N0KSB7XG4gICAgICBpZiAoc3JjUGF0aFswXSA9PT0gJycpIHsgc3JjUGF0aFswXSA9IHJlc3VsdC5ob3N0OyB9IGVsc2UgeyBzcmNQYXRoLnVuc2hpZnQocmVzdWx0Lmhvc3QpOyB9XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgeyByZWxQYXRoWzBdID0gcmVsYXRpdmUuaG9zdDsgfSBlbHNlIHsgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpOyB9XG4gICAgICB9XG4gICAgICByZWxhdGl2ZS5ob3N0ID0gbnVsbDtcbiAgICB9XG4gICAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgJiYgKHJlbFBhdGhbMF0gPT09ICcnIHx8IHNyY1BhdGhbMF0gPT09ICcnKTtcbiAgfVxuXG4gIGlmIChpc1JlbEFicykge1xuICAgIC8vIGl0J3MgYWJzb2x1dGUuXG4gICAgcmVzdWx0Lmhvc3QgPSByZWxhdGl2ZS5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgPT09ICcnID8gcmVsYXRpdmUuaG9zdCA6IHJlc3VsdC5ob3N0O1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3RuYW1lID09PSAnJyA/IHJlbGF0aXZlLmhvc3RuYW1lIDogcmVzdWx0Lmhvc3RuYW1lO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgc3JjUGF0aCA9IHJlbFBhdGg7XG4gICAgLy8gZmFsbCB0aHJvdWdoIHRvIHRoZSBkb3QtaGFuZGxpbmcgYmVsb3cuXG4gIH0gZWxzZSBpZiAocmVsUGF0aC5sZW5ndGgpIHtcbiAgICAvKlxuICAgICAqIGl0J3MgcmVsYXRpdmVcbiAgICAgKiB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICAgKi9cbiAgICBpZiAoIXNyY1BhdGgpIHsgc3JjUGF0aCA9IFtdOyB9XG4gICAgc3JjUGF0aC5wb3AoKTtcbiAgICBzcmNQYXRoID0gc3JjUGF0aC5jb25jYXQocmVsUGF0aCk7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgfSBlbHNlIGlmIChyZWxhdGl2ZS5zZWFyY2ggIT0gbnVsbCkge1xuICAgIC8qXG4gICAgICoganVzdCBwdWxsIG91dCB0aGUgc2VhcmNoLlxuICAgICAqIGxpa2UgaHJlZj0nP2ZvbycuXG4gICAgICogUHV0IHRoaXMgYWZ0ZXIgdGhlIG90aGVyIHR3byBjYXNlcyBiZWNhdXNlIGl0IHNpbXBsaWZpZXMgdGhlIGJvb2xlYW5zXG4gICAgICovXG4gICAgaWYgKHBzeWNob3RpYykge1xuICAgICAgcmVzdWx0Lmhvc3QgPSBzcmNQYXRoLnNoaWZ0KCk7XG4gICAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdDtcbiAgICAgIC8qXG4gICAgICAgKiBvY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgICAgICogdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgICogdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgICAgKi9cbiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/IHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5wYXRobmFtZSAhPT0gbnVsbCB8fCByZXN1bHQuc2VhcmNoICE9PSBudWxsKSB7XG4gICAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgKyAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgLypcbiAgICAgKiBubyBwYXRoIGF0IGFsbC4gIGVhc3kuXG4gICAgICogd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBvdGhlciBzdHVmZiBhYm92ZS5cbiAgICAgKi9cbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gJy8nICsgcmVzdWx0LnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLypcbiAgICogaWYgYSB1cmwgRU5EcyBpbiAuIG9yIC4uLCB0aGVuIGl0IG11c3QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gICAqIGhvd2V2ZXIsIGlmIGl0IGVuZHMgaW4gYW55dGhpbmcgZWxzZSBub24tc2xhc2h5LFxuICAgKiB0aGVuIGl0IG11c3QgTk9UIGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAgKi9cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCB8fCBzcmNQYXRoLmxlbmd0aCA+IDEpICYmIChsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJykgfHwgbGFzdCA9PT0gJyc7XG5cbiAgLypcbiAgICogc3RyaXAgc2luZ2xlIGRvdHMsIHJlc29sdmUgZG91YmxlIGRvdHMgdG8gcGFyZW50IGRpclxuICAgKiBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICAgKi9cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHNyY1BhdGgubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIGxhc3QgPSBzcmNQYXRoW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmICghbXVzdEVuZEFicyAmJiAhcmVtb3ZlQWxsRG90cykge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgc3JjUGF0aC51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtdXN0RW5kQWJzICYmIHNyY1BhdGhbMF0gIT09ICcnICYmICghc3JjUGF0aFswXSB8fCBzcmNQYXRoWzBdLmNoYXJBdCgwKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiAoc3JjUGF0aC5qb2luKCcvJykuc3Vic3RyKC0xKSAhPT0gJy8nKSkge1xuICAgIHNyY1BhdGgucHVzaCgnJyk7XG4gIH1cblxuICB2YXIgaXNBYnNvbHV0ZSA9IHNyY1BhdGhbMF0gPT09ICcnIHx8IChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSBpc0Fic29sdXRlID8gJycgOiBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lO1xuICAgIC8qXG4gICAgICogb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAgKiB0aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgICogdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgICovXG4gICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID8gcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlO1xuICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lO1xuICAgIH1cbiAgfVxuXG4gIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzIHx8IChyZXN1bHQuaG9zdCAmJiBzcmNQYXRoLmxlbmd0aCk7XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBzcmNQYXRoLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgaWYgKHNyY1BhdGgubGVuZ3RoID4gMCkge1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IHNyY1BhdGguam9pbignLycpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICB9XG5cbiAgLy8gdG8gc3VwcG9ydCByZXF1ZXN0Lmh0dHBcbiAgaWYgKHJlc3VsdC5wYXRobmFtZSAhPT0gbnVsbCB8fCByZXN1bHQuc2VhcmNoICE9PSBudWxsKSB7XG4gICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICsgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICB9XG4gIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aCB8fCByZXN1bHQuYXV0aDtcbiAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblVybC5wcm90b3R5cGUucGFyc2VIb3N0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaG9zdCA9IHRoaXMuaG9zdDtcbiAgdmFyIHBvcnQgPSBwb3J0UGF0dGVybi5leGVjKGhvc3QpO1xuICBpZiAocG9ydCkge1xuICAgIHBvcnQgPSBwb3J0WzBdO1xuICAgIGlmIChwb3J0ICE9PSAnOicpIHtcbiAgICAgIHRoaXMucG9ydCA9IHBvcnQuc3Vic3RyKDEpO1xuICAgIH1cbiAgICBob3N0ID0gaG9zdC5zdWJzdHIoMCwgaG9zdC5sZW5ndGggLSBwb3J0Lmxlbmd0aCk7XG4gIH1cbiAgaWYgKGhvc3QpIHsgdGhpcy5ob3N0bmFtZSA9IGhvc3Q7IH1cbn07XG5cbmV4cG9ydHMucGFyc2UgPSB1cmxQYXJzZTtcbmV4cG9ydHMucmVzb2x2ZSA9IHVybFJlc29sdmU7XG5leHBvcnRzLnJlc29sdmVPYmplY3QgPSB1cmxSZXNvbHZlT2JqZWN0O1xuZXhwb3J0cy5mb3JtYXQgPSB1cmxGb3JtYXQ7XG5cbmV4cG9ydHMuVXJsID0gVXJsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGVcbiAgbm8tdW51c2VkLXZhcnNcbiovXG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxubW9kdWxlLmV4cG9ydHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYXNlQ2xpZW50KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlQ2xpZW50KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCYXNlQ2xpZW50LCBudWxsLCBbe1xuICAgIGtleTogXCJnZXRDbGllbnRQYXRoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENsaWVudFBhdGgob3B0aW9ucykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDbGllbnQgbmVlZHMgaW1wbGVtZW50YXRpb24nKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmFzZUNsaWVudDtcbn0oKTsiLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZVxuICBuby11bnVzZWQtdmFyc1xuKi9cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG52YXIgU29ja0pTID0gcmVxdWlyZSgnc29ja2pzLWNsaWVudC9kaXN0L3NvY2tqcycpO1xuXG52YXIgQmFzZUNsaWVudCA9IHJlcXVpcmUoJy4vQmFzZUNsaWVudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VDbGllbnQpIHtcbiAgX2luaGVyaXRzKFNvY2tKU0NsaWVudCwgX0Jhc2VDbGllbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU29ja0pTQ2xpZW50KTtcblxuICBmdW5jdGlvbiBTb2NrSlNDbGllbnQodXJsKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNvY2tKU0NsaWVudCk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgIF90aGlzLnNvY2sgPSBuZXcgU29ja0pTKHVybCk7XG5cbiAgICBfdGhpcy5zb2NrLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7Ly8gVE9ETzogdXNlIGxvZ2dlciB0byBsb2cgdGhlIGVycm9yIGV2ZW50IG9uY2UgY2xpZW50IGFuZCBjbGllbnQtc3JjXG4gICAgICAvLyBhcmUgcmVvcmdhbml6ZWQgdG8gaGF2ZSB0aGUgc2FtZSBkaXJlY3Rvcnkgc3RydWN0dXJlXG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTb2NrSlNDbGllbnQsIFt7XG4gICAga2V5OiBcIm9uT3BlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9wZW4oZikge1xuICAgICAgdGhpcy5zb2NrLm9ub3BlbiA9IGY7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uQ2xvc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DbG9zZShmKSB7XG4gICAgICB0aGlzLnNvY2sub25jbG9zZSA9IGY7XG4gICAgfSAvLyBjYWxsIGYgd2l0aCB0aGUgbWVzc2FnZSBzdHJpbmcgYXMgdGhlIGZpcnN0IGFyZ3VtZW50XG5cbiAgfSwge1xuICAgIGtleTogXCJvbk1lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25NZXNzYWdlKGYpIHtcbiAgICAgIHRoaXMuc29jay5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBmKGUuZGF0YSk7XG4gICAgICB9O1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldENsaWVudFBhdGhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2xpZW50UGF0aChvcHRpb25zKSB7XG4gICAgICByZXR1cm4gcmVxdWlyZS5yZXNvbHZlKCcuL1NvY2tKU0NsaWVudCcpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTb2NrSlNDbGllbnQ7XG59KEJhc2VDbGllbnQpOyIsIid1c2Ugc3RyaWN0JzsgLy8gVGhlIGVycm9yIG92ZXJsYXkgaXMgaW5zcGlyZWQgKGFuZCBtb3N0bHkgY29waWVkKSBmcm9tIENyZWF0ZSBSZWFjdCBBcHAgKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9va2luY3ViYXRvci9jcmVhdGUtcmVhY3QtYXBwKVxuLy8gVGhleSwgaW4gdHVybiwgZ290IGluc3BpcmVkIGJ5IHdlYnBhY2staG90LW1pZGRsZXdhcmUgKGh0dHBzOi8vZ2l0aHViLmNvbS9nbGVuamFtaW4vd2VicGFjay1ob3QtbWlkZGxld2FyZSkuXG5cbnZhciBhbnNpSFRNTCA9IHJlcXVpcmUoJ2Fuc2ktaHRtbC1jb21tdW5pdHknKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnaHRtbC1lbnRpdGllcycpLFxuICAgIEFsbEh0bWxFbnRpdGllcyA9IF9yZXF1aXJlLkFsbEh0bWxFbnRpdGllcztcblxudmFyIGVudGl0aWVzID0gbmV3IEFsbEh0bWxFbnRpdGllcygpO1xudmFyIGNvbG9ycyA9IHtcbiAgcmVzZXQ6IFsndHJhbnNwYXJlbnQnLCAndHJhbnNwYXJlbnQnXSxcbiAgYmxhY2s6ICcxODE4MTgnLFxuICByZWQ6ICdFMzYwNDknLFxuICBncmVlbjogJ0IzQ0I3NCcsXG4gIHllbGxvdzogJ0ZGRDA4MCcsXG4gIGJsdWU6ICc3Q0FGQzInLFxuICBtYWdlbnRhOiAnN0ZBQ0NBJyxcbiAgY3lhbjogJ0MzQzJFRicsXG4gIGxpZ2h0Z3JleTogJ0VCRTdFMycsXG4gIGRhcmtncmV5OiAnNkQ3ODkxJ1xufTtcbnZhciBvdmVybGF5SWZyYW1lID0gbnVsbDtcbnZhciBvdmVybGF5RGl2ID0gbnVsbDtcbnZhciBsYXN0T25PdmVybGF5RGl2UmVhZHkgPSBudWxsO1xuYW5zaUhUTUwuc2V0Q29sb3JzKGNvbG9ycyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXlJZnJhbWUob25JZnJhbWVMb2FkKSB7XG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgaWZyYW1lLmlkID0gJ3dlYnBhY2stZGV2LXNlcnZlci1jbGllbnQtb3ZlcmxheSc7XG4gIGlmcmFtZS5zcmMgPSAnYWJvdXQ6YmxhbmsnO1xuICBpZnJhbWUuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICBpZnJhbWUuc3R5bGUubGVmdCA9IDA7XG4gIGlmcmFtZS5zdHlsZS50b3AgPSAwO1xuICBpZnJhbWUuc3R5bGUucmlnaHQgPSAwO1xuICBpZnJhbWUuc3R5bGUuYm90dG9tID0gMDtcbiAgaWZyYW1lLnN0eWxlLndpZHRoID0gJzEwMHZ3JztcbiAgaWZyYW1lLnN0eWxlLmhlaWdodCA9ICcxMDB2aCc7XG4gIGlmcmFtZS5zdHlsZS5ib3JkZXIgPSAnbm9uZSc7XG4gIGlmcmFtZS5zdHlsZS56SW5kZXggPSA5OTk5OTk5OTk5O1xuICBpZnJhbWUub25sb2FkID0gb25JZnJhbWVMb2FkO1xuICByZXR1cm4gaWZyYW1lO1xufVxuXG5mdW5jdGlvbiBhZGRPdmVybGF5RGl2VG8oaWZyYW1lKSB7XG4gIHZhciBkaXYgPSBpZnJhbWUuY29udGVudERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaWQgPSAnd2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5LWRpdic7XG4gIGRpdi5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIGRpdi5zdHlsZS5ib3hTaXppbmcgPSAnYm9yZGVyLWJveCc7XG4gIGRpdi5zdHlsZS5sZWZ0ID0gMDtcbiAgZGl2LnN0eWxlLnRvcCA9IDA7XG4gIGRpdi5zdHlsZS5yaWdodCA9IDA7XG4gIGRpdi5zdHlsZS5ib3R0b20gPSAwO1xuICBkaXYuc3R5bGUud2lkdGggPSAnMTAwdncnO1xuICBkaXYuc3R5bGUuaGVpZ2h0ID0gJzEwMHZoJztcbiAgZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDAsIDAsIDAsIDAuODUpJztcbiAgZGl2LnN0eWxlLmNvbG9yID0gJyNFOEU4RTgnO1xuICBkaXYuc3R5bGUuZm9udEZhbWlseSA9ICdNZW5sbywgQ29uc29sYXMsIG1vbm9zcGFjZSc7XG4gIGRpdi5zdHlsZS5mb250U2l6ZSA9ICdsYXJnZSc7XG4gIGRpdi5zdHlsZS5wYWRkaW5nID0gJzJyZW0nO1xuICBkaXYuc3R5bGUubGluZUhlaWdodCA9ICcxLjInO1xuICBkaXYuc3R5bGUud2hpdGVTcGFjZSA9ICdwcmUtd3JhcCc7XG4gIGRpdi5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcbiAgaWZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gIHJldHVybiBkaXY7XG59XG5cbmZ1bmN0aW9uIGVuc3VyZU92ZXJsYXlEaXZFeGlzdHMob25PdmVybGF5RGl2UmVhZHkpIHtcbiAgaWYgKG92ZXJsYXlEaXYpIHtcbiAgICAvLyBFdmVyeXRoaW5nIGlzIHJlYWR5LCBjYWxsIHRoZSBjYWxsYmFjayByaWdodCBhd2F5LlxuICAgIG9uT3ZlcmxheURpdlJlYWR5KG92ZXJsYXlEaXYpO1xuICAgIHJldHVybjtcbiAgfSAvLyBDcmVhdGluZyBhbiBpZnJhbWUgbWF5IGJlIGFzeW5jaHJvbm91cyBzbyB3ZSdsbCBzY2hlZHVsZSB0aGUgY2FsbGJhY2suXG4gIC8vIEluIGNhc2Ugb2YgbXVsdGlwbGUgY2FsbHMsIGxhc3QgY2FsbGJhY2sgd2lucy5cblxuXG4gIGxhc3RPbk92ZXJsYXlEaXZSZWFkeSA9IG9uT3ZlcmxheURpdlJlYWR5O1xuXG4gIGlmIChvdmVybGF5SWZyYW1lKSB7XG4gICAgLy8gV2UndmUgYWxyZWFkeSBjcmVhdGVkIGl0LlxuICAgIHJldHVybjtcbiAgfSAvLyBDcmVhdGUgaWZyYW1lIGFuZCwgd2hlbiBpdCBpcyByZWFkeSwgYSBkaXYgaW5zaWRlIGl0LlxuXG5cbiAgb3ZlcmxheUlmcmFtZSA9IGNyZWF0ZU92ZXJsYXlJZnJhbWUoZnVuY3Rpb24gKCkge1xuICAgIG92ZXJsYXlEaXYgPSBhZGRPdmVybGF5RGl2VG8ob3ZlcmxheUlmcmFtZSk7IC8vIE5vdyB3ZSBjYW4gdGFsayFcblxuICAgIGxhc3RPbk92ZXJsYXlEaXZSZWFkeShvdmVybGF5RGl2KTtcbiAgfSk7IC8vIFphbGdvIGFsZXJ0OiBvbklmcmFtZUxvYWQoKSB3aWxsIGJlIGNhbGxlZCBlaXRoZXIgc3luY2hyb25vdXNseVxuICAvLyBvciBhc3luY2hyb25vdXNseSBkZXBlbmRpbmcgb24gdGhlIGJyb3dzZXIuXG4gIC8vIFdlIGRlbGF5IGFkZGluZyBpdCBzbyBgb3ZlcmxheUlmcmFtZWAgaXMgc2V0IHdoZW4gYG9uSWZyYW1lTG9hZGAgZmlyZXMuXG5cbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvdmVybGF5SWZyYW1lKTtcbn0gLy8gU3VjY2Vzc2Z1bCBjb21waWxhdGlvbi5cblxuXG5mdW5jdGlvbiBjbGVhcigpIHtcbiAgaWYgKCFvdmVybGF5RGl2KSB7XG4gICAgLy8gSXQgaXMgbm90IHRoZXJlIGluIHRoZSBmaXJzdCBwbGFjZS5cbiAgICByZXR1cm47XG4gIH0gLy8gQ2xlYW4gdXAgYW5kIHJlc2V0IGludGVybmFsIHN0YXRlLlxuXG5cbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvdmVybGF5SWZyYW1lKTtcbiAgb3ZlcmxheURpdiA9IG51bGw7XG4gIG92ZXJsYXlJZnJhbWUgPSBudWxsO1xuICBsYXN0T25PdmVybGF5RGl2UmVhZHkgPSBudWxsO1xufSAvLyBDb21waWxhdGlvbiB3aXRoIGVycm9ycyAoZS5nLiBzeW50YXggZXJyb3Igb3IgbWlzc2luZyBtb2R1bGVzKS5cblxuXG5mdW5jdGlvbiBzaG93TWVzc2FnZShtZXNzYWdlcykge1xuICBlbnN1cmVPdmVybGF5RGl2RXhpc3RzKGZ1bmN0aW9uIChkaXYpIHtcbiAgICAvLyBNYWtlIGl0IGxvb2sgc2ltaWxhciB0byBvdXIgdGVybWluYWwuXG4gICAgZGl2LmlubmVySFRNTCA9IFwiPHNwYW4gc3R5bGU9XFxcImNvbG9yOiAjXCIuY29uY2F0KGNvbG9ycy5yZWQsIFwiXFxcIj5GYWlsZWQgdG8gY29tcGlsZS48L3NwYW4+PGJyPjxicj5cIikuY29uY2F0KGFuc2lIVE1MKGVudGl0aWVzLmVuY29kZShtZXNzYWdlc1swXSkpKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjbGVhcjogY2xlYXIsXG4gIHNob3dNZXNzYWdlOiBzaG93TWVzc2FnZVxufTsiLCIndXNlIHN0cmljdCc7XG4vKiBnbG9iYWwgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gKi9cblxuLyogZXNsaW50LWRpc2FibGVcbiAgY2FtZWxjYXNlXG4qL1xuLy8gdGhpcyBTb2NrSlNDbGllbnQgaXMgaGVyZSBhcyBhIGRlZmF1bHQgZmFsbGJhY2ssIGluIGNhc2UgaW5saW5lIG1vZGVcbi8vIGlzIG9mZiBvciB0aGUgY2xpZW50IGlzIG5vdCBpbmplY3RlZC4gVGhpcyB3aWxsIGJlIHN3aXRjaGVkIHRvXG4vLyBXZWJzb2NrZXRDbGllbnQgd2hlbiBpdCBiZWNvbWVzIHRoZSBkZWZhdWx0XG4vLyBpbXBvcnRhbnQ6IHRoZSBwYXRoIHRvIFNvY2tKU0NsaWVudCBoZXJlIGlzIG1hZGUgdG8gd29yayBpbiB0aGUgJ2NsaWVudCdcbi8vIGRpcmVjdG9yeSwgYnV0IGlzIHVwZGF0ZWQgdmlhIHRoZSB3ZWJwYWNrIGNvbXBpbGF0aW9uIHdoZW4gY29tcGlsZWQgZnJvbVxuLy8gdGhlICdjbGllbnQtc3JjJyBkaXJlY3RvcnlcblxudmFyIENsaWVudCA9IHR5cGVvZiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyA6IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW5yZXNvbHZlZFxucmVxdWlyZSgnLi9jbGllbnRzL1NvY2tKU0NsaWVudCcpO1xudmFyIHJldHJpZXMgPSAwO1xudmFyIGNsaWVudCA9IG51bGw7XG5cbnZhciBzb2NrZXQgPSBmdW5jdGlvbiBpbml0U29ja2V0KHVybCwgaGFuZGxlcnMpIHtcbiAgY2xpZW50ID0gbmV3IENsaWVudCh1cmwpO1xuICBjbGllbnQub25PcGVuKGZ1bmN0aW9uICgpIHtcbiAgICByZXRyaWVzID0gMDtcbiAgfSk7XG4gIGNsaWVudC5vbkNsb3NlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmV0cmllcyA9PT0gMCkge1xuICAgICAgaGFuZGxlcnMuY2xvc2UoKTtcbiAgICB9IC8vIFRyeSB0byByZWNvbm5lY3QuXG5cblxuICAgIGNsaWVudCA9IG51bGw7IC8vIEFmdGVyIDEwIHJldHJpZXMgc3RvcCB0cnlpbmcsIHRvIHByZXZlbnQgbG9nc3BhbS5cblxuICAgIGlmIChyZXRyaWVzIDw9IDEwKSB7XG4gICAgICAvLyBFeHBvbmVudGlhbGx5IGluY3JlYXNlIHRpbWVvdXQgdG8gcmVjb25uZWN0LlxuICAgICAgLy8gUmVzcGVjdGZ1bGx5IGNvcGllZCBmcm9tIHRoZSBwYWNrYWdlIGBnb3RgLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW1peGVkLW9wZXJhdG9ycywgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG4gICAgICB2YXIgcmV0cnlJbk1zID0gMTAwMCAqIE1hdGgucG93KDIsIHJldHJpZXMpICsgTWF0aC5yYW5kb20oKSAqIDEwMDtcbiAgICAgIHJldHJpZXMgKz0gMTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzb2NrZXQodXJsLCBoYW5kbGVycyk7XG4gICAgICB9LCByZXRyeUluTXMpO1xuICAgIH1cbiAgfSk7XG4gIGNsaWVudC5vbk1lc3NhZ2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgbXNnID0gSlNPTi5wYXJzZShkYXRhKTtcblxuICAgIGlmIChoYW5kbGVyc1ttc2cudHlwZV0pIHtcbiAgICAgIGhhbmRsZXJzW21zZy50eXBlXShtc2cuZGF0YSk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc29ja2V0OyIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbCBzZWxmICovXG5cbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKTtcblxudmFyIGdldEN1cnJlbnRTY3JpcHRTb3VyY2UgPSByZXF1aXJlKCcuL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UnKTtcblxuZnVuY3Rpb24gY3JlYXRlU29ja2V0VXJsKHJlc291cmNlUXVlcnksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgdXJsUGFydHM7XG5cbiAgaWYgKHR5cGVvZiByZXNvdXJjZVF1ZXJ5ID09PSAnc3RyaW5nJyAmJiByZXNvdXJjZVF1ZXJ5ICE9PSAnJykge1xuICAgIC8vIElmIHRoaXMgYnVuZGxlIGlzIGlubGluZWQsIHVzZSB0aGUgcmVzb3VyY2UgcXVlcnkgdG8gZ2V0IHRoZSBjb3JyZWN0IHVybC5cbiAgICAvLyBmb3JtYXQgaXMgbGlrZSBgP2h0dHA6Ly8wLjAuMC4wOjgwOTYmc29ja1BvcnQ9ODA5NyZzb2NrSG9zdD1sb2NhbGhvc3RgXG4gICAgdXJsUGFydHMgPSB1cmwucGFyc2UocmVzb3VyY2VRdWVyeSAvLyBzdHJpcCBsZWFkaW5nIGA/YCBmcm9tIHF1ZXJ5IHN0cmluZyB0byBnZXQgYSB2YWxpZCBVUkxcbiAgICAuc3Vic3RyKDEpIC8vIHJlcGxhY2UgZmlyc3QgYCZgIHdpdGggYD9gIHRvIGhhdmUgYSB2YWxpZCBxdWVyeSBzdHJpbmdcbiAgICAucmVwbGFjZSgnJicsICc/JyksIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIC8vIEVsc2UsIGdldCB0aGUgdXJsIGZyb20gdGhlIDxzY3JpcHQ+IHRoaXMgZmlsZSB3YXMgY2FsbGVkIHdpdGguXG4gICAgdmFyIHNjcmlwdEhvc3QgPSBnZXRDdXJyZW50U2NyaXB0U291cmNlKCk7XG4gICAgdXJsUGFydHMgPSB1cmwucGFyc2Uoc2NyaXB0SG9zdCB8fCAnLycsIHRydWUsIHRydWUpO1xuICB9IC8vIFVzZSBwYXJhbWV0ZXIgdG8gYWxsb3cgcGFzc2luZyBsb2NhdGlvbiBpbiB1bml0IHRlc3RzXG5cblxuICBpZiAodHlwZW9mIGN1cnJlbnRMb2NhdGlvbiA9PT0gJ3N0cmluZycgJiYgY3VycmVudExvY2F0aW9uICE9PSAnJykge1xuICAgIGN1cnJlbnRMb2NhdGlvbiA9IHVybC5wYXJzZShjdXJyZW50TG9jYXRpb24pO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRMb2NhdGlvbiA9IHNlbGYubG9jYXRpb247XG4gIH1cblxuICByZXR1cm4gZ2V0U29ja2V0VXJsKHVybFBhcnRzLCBjdXJyZW50TG9jYXRpb24pO1xufVxuLypcbiAqIEdldHMgc29ja2V0IFVSTCBiYXNlZCBvbiBTY3JpcHQgU291cmNlL0xvY2F0aW9uXG4gKiAoc2NyaXB0U3JjOiBVUkwsIGxvY2F0aW9uOiBVUkwpIC0+IFVSTFxuICovXG5cblxuZnVuY3Rpb24gZ2V0U29ja2V0VXJsKHVybFBhcnRzLCBsb2MpIHtcbiAgdmFyIGF1dGggPSB1cmxQYXJ0cy5hdXRoLFxuICAgICAgcXVlcnkgPSB1cmxQYXJ0cy5xdWVyeTtcbiAgdmFyIGhvc3RuYW1lID0gdXJsUGFydHMuaG9zdG5hbWUsXG4gICAgICBwcm90b2NvbCA9IHVybFBhcnRzLnByb3RvY29sLFxuICAgICAgcG9ydCA9IHVybFBhcnRzLnBvcnQ7XG5cbiAgaWYgKCFwb3J0IHx8IHBvcnQgPT09ICcwJykge1xuICAgIHBvcnQgPSBsb2MucG9ydDtcbiAgfSAvLyBjaGVjayBpcHY0IGFuZCBpcHY2IGBhbGwgaG9zdG5hbWVgXG4gIC8vIHdoeSBkbyB3ZSBuZWVkIHRoaXMgY2hlY2s/XG4gIC8vIGhvc3RuYW1lIG4vYSBmb3IgZmlsZSBwcm90b2NvbCAoZXhhbXBsZSwgd2hlbiB1c2luZyBlbGVjdHJvbiwgaW9uaWMpXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay1kZXYtc2VydmVyL3B1bGwvMzg0XG5cblxuICBpZiAoKGhvc3RuYW1lID09PSAnMC4wLjAuMCcgfHwgaG9zdG5hbWUgPT09ICc6OicpICYmIGxvYy5ob3N0bmFtZSAmJiBsb2MucHJvdG9jb2wuaW5kZXhPZignaHR0cCcpID09PSAwKSB7XG4gICAgaG9zdG5hbWUgPSBsb2MuaG9zdG5hbWU7XG4gIH0gLy8gYGhvc3RuYW1lYCBjYW4gYmUgZW1wdHkgd2hlbiB0aGUgc2NyaXB0IHBhdGggaXMgcmVsYXRpdmUuIEluIHRoYXQgY2FzZSwgc3BlY2lmeWluZ1xuICAvLyBhIHByb3RvY29sIHdvdWxkIHJlc3VsdCBpbiBhbiBpbnZhbGlkIFVSTC5cbiAgLy8gV2hlbiBodHRwcyBpcyB1c2VkIGluIHRoZSBhcHAsIHNlY3VyZSB3ZWJzb2NrZXRzIGFyZSBhbHdheXMgbmVjZXNzYXJ5XG4gIC8vIGJlY2F1c2UgdGhlIGJyb3dzZXIgZG9lc24ndCBhY2NlcHQgbm9uLXNlY3VyZSB3ZWJzb2NrZXRzLlxuXG5cbiAgaWYgKGhvc3RuYW1lICYmIGhvc3RuYW1lICE9PSAnMTI3LjAuMC4xJyAmJiAobG9jLnByb3RvY29sID09PSAnaHR0cHM6JyB8fCB1cmxQYXJ0cy5ob3N0bmFtZSA9PT0gJzAuMC4wLjAnKSkge1xuICAgIHByb3RvY29sID0gbG9jLnByb3RvY29sO1xuICB9IC8vIGFsbCBvZiB0aGVzZSBzb2NrIHVybCBwYXJhbXMgYXJlIG9wdGlvbmFsbHkgcGFzc2VkIGluIHRocm91Z2hcbiAgLy8gcmVzb3VyY2VRdWVyeSwgc28gd2UgbmVlZCB0byBmYWxsIGJhY2sgdG8gdGhlIGRlZmF1bHQgaWZcbiAgLy8gdGhleSBhcmUgbm90IHByb3ZpZGVkXG5cblxuICB2YXIgc29ja0hvc3QgPSBxdWVyeS5zb2NrSG9zdCB8fCBob3N0bmFtZTtcbiAgdmFyIHNvY2tQYXRoID0gcXVlcnkuc29ja1BhdGggfHwgJy9zb2NranMtbm9kZSc7XG4gIHZhciBzb2NrUG9ydCA9IHF1ZXJ5LnNvY2tQb3J0IHx8IHBvcnQ7XG5cbiAgaWYgKHNvY2tQb3J0ID09PSAnbG9jYXRpb24nKSB7XG4gICAgc29ja1BvcnQgPSBsb2MucG9ydDtcbiAgfVxuXG4gIHJldHVybiB1cmwuZm9ybWF0KHtcbiAgICBwcm90b2NvbDogcHJvdG9jb2wsXG4gICAgYXV0aDogYXV0aCxcbiAgICBob3N0bmFtZTogc29ja0hvc3QsXG4gICAgcG9ydDogc29ja1BvcnQsXG4gICAgLy8gSWYgc29ja1BhdGggaXMgcHJvdmlkZWQgaXQnbGwgYmUgcGFzc2VkIGluIHZpYSB0aGUgcmVzb3VyY2VRdWVyeSBhcyBhXG4gICAgLy8gcXVlcnkgcGFyYW0gc28gaXQgaGFzIHRvIGJlIHBhcnNlZCBvdXQgb2YgdGhlIHF1ZXJ5c3RyaW5nIGluIG9yZGVyIGZvciB0aGVcbiAgICAvLyBjbGllbnQgdG8gb3BlbiB0aGUgc29ja2V0IHRvIHRoZSBjb3JyZWN0IGxvY2F0aW9uLlxuICAgIHBhdGhuYW1lOiBzb2NrUGF0aFxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTb2NrZXRVcmw7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0U291cmNlKCkge1xuICAvLyBgZG9jdW1lbnQuY3VycmVudFNjcmlwdGAgaXMgdGhlIG1vc3QgYWNjdXJhdGUgd2F5IHRvIGZpbmQgdGhlIGN1cnJlbnQgc2NyaXB0LFxuICAvLyBidXQgaXMgbm90IHN1cHBvcnRlZCBpbiBhbGwgYnJvd3NlcnMuXG4gIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgfSAvLyBGYWxsIGJhY2sgdG8gZ2V0dGluZyBhbGwgc2NyaXB0cyBpbiB0aGUgZG9jdW1lbnQuXG5cblxuICB2YXIgc2NyaXB0RWxlbWVudHMgPSBkb2N1bWVudC5zY3JpcHRzIHx8IFtdO1xuICB2YXIgY3VycmVudFNjcmlwdCA9IHNjcmlwdEVsZW1lbnRzW3NjcmlwdEVsZW1lbnRzLmxlbmd0aCAtIDFdO1xuXG4gIGlmIChjdXJyZW50U2NyaXB0KSB7XG4gICAgcmV0dXJuIGN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgfSAvLyBGYWlsIGFzIHRoZXJlIHdhcyBubyBzY3JpcHQgdG8gdXNlLlxuXG5cbiAgdGhyb3cgbmV3IEVycm9yKCdbV0RTXSBGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgc2NyaXB0IHNvdXJjZS4nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRDdXJyZW50U2NyaXB0U291cmNlOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGxvZyA9IHJlcXVpcmUoJ2xvZ2xldmVsJykuZ2V0TG9nZ2VyKCd3ZWJwYWNrLWRldi1zZXJ2ZXInKTtcblxudmFyIElORk8gPSAnaW5mbyc7XG52YXIgV0FSTiA9ICd3YXJuJztcbnZhciBFUlJPUiA9ICdlcnJvcic7XG52YXIgREVCVUcgPSAnZGVidWcnO1xudmFyIFRSQUNFID0gJ3RyYWNlJztcbnZhciBTSUxFTlQgPSAnc2lsZW50JzsgLy8gZGVwcmVjYXRlZFxuLy8gVE9ETzogcmVtb3ZlIHRoZXNlIGF0IG1ham9yIHJlbGVhc2VkXG4vLyBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrLWRldi1zZXJ2ZXIvcHVsbC8xODI1XG5cbnZhciBXQVJOSU5HID0gJ3dhcm5pbmcnO1xudmFyIE5PTkUgPSAnbm9uZSc7IC8vIFNldCB0aGUgZGVmYXVsdCBsb2cgbGV2ZWxcblxubG9nLnNldERlZmF1bHRMZXZlbChJTkZPKTtcblxuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWwpIHtcbiAgc3dpdGNoIChsZXZlbCkge1xuICAgIGNhc2UgSU5GTzpcbiAgICBjYXNlIFdBUk46XG4gICAgY2FzZSBFUlJPUjpcbiAgICBjYXNlIERFQlVHOlxuICAgIGNhc2UgVFJBQ0U6XG4gICAgICBsb2cuc2V0TGV2ZWwobGV2ZWwpO1xuICAgICAgYnJlYWs7XG4gICAgLy8gZGVwcmVjYXRlZFxuXG4gICAgY2FzZSBXQVJOSU5HOlxuICAgICAgLy8gbG9nbGV2ZWwncyB3YXJuaW5nIG5hbWUgaXMgZGlmZmVyZW50IGZyb20gd2VicGFjaydzXG4gICAgICBsb2cuc2V0TGV2ZWwoJ3dhcm4nKTtcbiAgICAgIGJyZWFrO1xuICAgIC8vIGRlcHJlY2F0ZWRcblxuICAgIGNhc2UgTk9ORTpcbiAgICBjYXNlIFNJTEVOVDpcbiAgICAgIGxvZy5kaXNhYmxlQWxsKCk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBsb2cuZXJyb3IoXCJbV0RTXSBVbmtub3duIGNsaWVudExvZ0xldmVsICdcIi5jb25jYXQobGV2ZWwsIFwiJ1wiKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvZzogbG9nLFxuICBzZXRMb2dMZXZlbDogc2V0TG9nTGV2ZWxcbn07IiwiJ3VzZSBzdHJpY3QnO1xuLyogZ2xvYmFsIFdvcmtlckdsb2JhbFNjb3BlIHNlbGYgKi9cblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9sb2cnKSxcbiAgICBsb2cgPSBfcmVxdWlyZS5sb2c7XG5cbmZ1bmN0aW9uIHJlbG9hZEFwcChfcmVmLCBfcmVmMikge1xuICB2YXIgaG90UmVsb2FkID0gX3JlZi5ob3RSZWxvYWQsXG4gICAgICBob3QgPSBfcmVmLmhvdCxcbiAgICAgIGxpdmVSZWxvYWQgPSBfcmVmLmxpdmVSZWxvYWQ7XG4gIHZhciBpc1VubG9hZGluZyA9IF9yZWYyLmlzVW5sb2FkaW5nLFxuICAgICAgY3VycmVudEhhc2ggPSBfcmVmMi5jdXJyZW50SGFzaDtcblxuICBpZiAoaXNVbmxvYWRpbmcgfHwgIWhvdFJlbG9hZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChob3QpIHtcbiAgICBsb2cuaW5mbygnW1dEU10gQXBwIGhvdCB1cGRhdGUuLi4nKTtcblxuICAgIHZhciBob3RFbWl0dGVyID0gcmVxdWlyZSgnd2VicGFjay9ob3QvZW1pdHRlcicpO1xuXG4gICAgaG90RW1pdHRlci5lbWl0KCd3ZWJwYWNrSG90VXBkYXRlJywgY3VycmVudEhhc2gpO1xuXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLndpbmRvdykge1xuICAgICAgLy8gYnJvYWRjYXN0IHVwZGF0ZSB0byB3aW5kb3dcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2UoXCJ3ZWJwYWNrSG90VXBkYXRlXCIuY29uY2F0KGN1cnJlbnRIYXNoKSwgJyonKTtcbiAgICB9XG4gIH0gLy8gYWxsb3cgcmVmcmVzaGluZyB0aGUgcGFnZSBvbmx5IGlmIGxpdmVSZWxvYWQgaXNuJ3QgZGlzYWJsZWRcbiAgZWxzZSBpZiAobGl2ZVJlbG9hZCkge1xuICAgICAgdmFyIHJvb3RXaW5kb3cgPSBzZWxmOyAvLyB1c2UgcGFyZW50IHdpbmRvdyBmb3IgcmVsb2FkIChpbiBjYXNlIHdlJ3JlIGluIGFuIGlmcmFtZSB3aXRoIG5vIHZhbGlkIHNyYylcblxuICAgICAgdmFyIGludGVydmFsSWQgPSBzZWxmLnNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHJvb3RXaW5kb3cubG9jYXRpb24ucHJvdG9jb2wgIT09ICdhYm91dDonKSB7XG4gICAgICAgICAgLy8gcmVsb2FkIGltbWVkaWF0ZWx5IGlmIHByb3RvY29sIGlzIHZhbGlkXG4gICAgICAgICAgYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm9vdFdpbmRvdyA9IHJvb3RXaW5kb3cucGFyZW50O1xuXG4gICAgICAgICAgaWYgKHJvb3RXaW5kb3cucGFyZW50ID09PSByb290V2luZG93KSB7XG4gICAgICAgICAgICAvLyBpZiBwYXJlbnQgZXF1YWxzIGN1cnJlbnQgd2luZG93IHdlJ3ZlIHJlYWNoZWQgdGhlIHJvb3Qgd2hpY2ggd291bGQgY29udGludWUgZm9yZXZlciwgc28gdHJpZ2dlciBhIHJlbG9hZCBhbnl3YXlzXG4gICAgICAgICAgICBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICBmdW5jdGlvbiBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKSB7XG4gICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICBsb2cuaW5mbygnW1dEU10gQXBwIHVwZGF0ZWQuIFJlbG9hZGluZy4uLicpO1xuICAgIHJvb3RXaW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWxvYWRBcHA7IiwiJ3VzZSBzdHJpY3QnO1xuLyogZ2xvYmFsIF9fcmVzb3VyY2VRdWVyeSBXb3JrZXJHbG9iYWxTY29wZSBzZWxmICovXG4vLyBTZW5kIG1lc3NhZ2VzIHRvIHRoZSBvdXRzaWRlLCBzbyBwbHVnaW5zIGNhbiBjb25zdW1lIGl0LlxuXG5mdW5jdGlvbiBzZW5kTXNnKHR5cGUsIGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlID09PSAndW5kZWZpbmVkJyB8fCAhKHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSkpKSB7XG4gICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICB0eXBlOiBcIndlYnBhY2tcIi5jb25jYXQodHlwZSksXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSwgJyonKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNlbmRNc2c7IiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiAvW1xcdTAwMWJcXHUwMDliXVtbKCkjOz9dKig/OlswLTldezEsNH0oPzo7WzAtOV17MCw0fSkqKT9bMC05QS1QUlpjZi1ucXJ5PT48XS9nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbnNpUmVnZXggPSByZXF1aXJlKCdhbnNpLXJlZ2V4JykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdHJldHVybiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHN0ci5yZXBsYWNlKGFuc2lSZWdleCwgJycpIDogc3RyO1xufTtcbiIsInZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4iLCIvKiogQHR5cGVkZWYge1wiaW5mb1wiIHwgXCJ3YXJuaW5nXCIgfCBcImVycm9yXCJ9IExvZ0xldmVsICovXG5cbi8qKiBAdHlwZSB7TG9nTGV2ZWx9ICovXG52YXIgbG9nTGV2ZWwgPSBcImluZm9cIjtcblxuZnVuY3Rpb24gZHVtbXkoKSB7fVxuXG4vKipcbiAqIEBwYXJhbSB7TG9nTGV2ZWx9IGxldmVsIGxvZyBsZXZlbFxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUsIGlmIHNob3VsZCBsb2dcbiAqL1xuZnVuY3Rpb24gc2hvdWxkTG9nKGxldmVsKSB7XG5cdHZhciBzaG91bGRMb2cgPVxuXHRcdChsb2dMZXZlbCA9PT0gXCJpbmZvXCIgJiYgbGV2ZWwgPT09IFwiaW5mb1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcIndhcm5pbmdcIikgfHxcblx0XHQoW1wiaW5mb1wiLCBcIndhcm5pbmdcIiwgXCJlcnJvclwiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSBcImVycm9yXCIpO1xuXHRyZXR1cm4gc2hvdWxkTG9nO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7KG1zZz86IHN0cmluZykgPT4gdm9pZH0gbG9nRm4gbG9nIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7KGxldmVsOiBMb2dMZXZlbCwgbXNnPzogc3RyaW5nKSA9PiB2b2lkfSBmdW5jdGlvbiB0aGF0IGxvZ3Mgd2hlbiBsb2cgbGV2ZWwgaXMgc3VmZmljaWVudFxuICovXG5mdW5jdGlvbiBsb2dHcm91cChsb2dGbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGxldmVsLCBtc2cpIHtcblx0XHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdFx0bG9nRm4obXNnKTtcblx0XHR9XG5cdH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtMb2dMZXZlbH0gbGV2ZWwgbG9nIGxldmVsXG4gKiBAcGFyYW0ge3N0cmluZ3xFcnJvcn0gbXNnIG1lc3NhZ2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGV2ZWwsIG1zZykge1xuXHRpZiAoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdGlmIChsZXZlbCA9PT0gXCJpbmZvXCIpIHtcblx0XHRcdGNvbnNvbGUubG9nKG1zZyk7XG5cdFx0fSBlbHNlIGlmIChsZXZlbCA9PT0gXCJ3YXJuaW5nXCIpIHtcblx0XHRcdGNvbnNvbGUud2Fybihtc2cpO1xuXHRcdH0gZWxzZSBpZiAobGV2ZWwgPT09IFwiZXJyb3JcIikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihtc2cpO1xuXHRcdH1cblx0fVxufTtcblxudmFyIGdyb3VwID0gY29uc29sZS5ncm91cCB8fCBkdW1teTtcbnZhciBncm91cENvbGxhcHNlZCA9IGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQgfHwgZHVtbXk7XG52YXIgZ3JvdXBFbmQgPSBjb25zb2xlLmdyb3VwRW5kIHx8IGR1bW15O1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cCA9IGxvZ0dyb3VwKGdyb3VwKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBDb2xsYXBzZWQgPSBsb2dHcm91cChncm91cENvbGxhcHNlZCk7XG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwRW5kID0gbG9nR3JvdXAoZ3JvdXBFbmQpO1xuXG4vKipcbiAqIEBwYXJhbSB7TG9nTGV2ZWx9IGxldmVsIGxvZyBsZXZlbFxuICovXG5tb2R1bGUuZXhwb3J0cy5zZXRMb2dMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuXHRsb2dMZXZlbCA9IGxldmVsO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnIgZXJyb3JcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGZvcm1hdHRlZCBlcnJvclxuICovXG5tb2R1bGUuZXhwb3J0cy5mb3JtYXRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0dmFyIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcblx0dmFyIHN0YWNrID0gZXJyLnN0YWNrO1xuXHRpZiAoIXN0YWNrKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH0gZWxzZSBpZiAoc3RhY2suaW5kZXhPZihtZXNzYWdlKSA8IDApIHtcblx0XHRyZXR1cm4gbWVzc2FnZSArIFwiXFxuXCIgKyBzdGFjaztcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gc3RhY2s7XG5cdH1cbn07XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vbG9nXCI6IFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLmpzXCJcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90IHN5bmMgXlxcXFwuXFxcXC9sb2ckXCI7IiwiLyogKGlnbm9yZWQpICovIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiaW1wb3J0ICd1dGlscy9wb2x5ZmlsbCdcbmltcG9ydCAndXRpbHMvc2Nyb2xsJ1xuaW1wb3J0ICd1dGlscy9zdydcblxuaW1wb3J0IEF1dG9CaW5kIGZyb20gJ2F1dG8tYmluZCdcbmltcG9ydCBGb250RmFjZU9ic2VydmVyIGZyb20gJ2ZvbnRmYWNlb2JzZXJ2ZXIvZm9udGZhY2VvYnNlcnZlci5zdGFuZGFsb25lJ1xuaW1wb3J0IFN0YXRzIGZyb20gJ3N0YXRzLmpzJ1xuXG5pbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gvZWFjaCdcblxuaW1wb3J0IERldGVjdGlvbiBmcm9tICdjbGFzc2VzL0RldGVjdGlvbidcblxuXG5pbXBvcnQgRGFya3Jvb20gZnJvbSAncGFnZXMvRGFya3Jvb20nXG5pbXBvcnQgQWJvdXQgZnJvbSAncGFnZXMvQWJvdXQnXG5pbXBvcnQgQmxvZ3MgZnJvbSAncGFnZXMvQmxvZ3MnXG5pbXBvcnQgUHJvamVjdHMgZnJvbSAncGFnZXMvUHJvamVjdHMnXG5pbXBvcnQgSG9tZSBmcm9tICdwYWdlcy9Ib21lJ1xuXG5jbGFzcyBBcHAge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgaWYgKElTX0RFVkVMT1BNRU5UICYmIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guaW5kZXhPZignZnBzJykgPiAtMSkge1xuICAgICAgdGhpcy5jcmVhdGVTdGF0cygpXG4gICAgfVxuXG4gICAgQXV0b0JpbmQodGhpcylcblxuICAgIHRoaXMuY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50JylcbiAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy5jb250ZW50LmRhdGFzZXQudGVtcGxhdGVcblxuICAgIHRoaXMucGFnZXMgPSBuZXcgTWFwKClcbiAgICB0aGlzLnBhZ2VzLnNldCgnZGFya3Jvb20nLCBuZXcgRGFya3Jvb20oKSlcbiAgICB0aGlzLnBhZ2VzLnNldCgnYWJvdXQnLCBuZXcgQWJvdXQoKSlcbiAgICB0aGlzLnBhZ2VzLnNldCgnYmxvZ3MnLCBuZXcgQmxvZ3MoKSlcbiAgICB0aGlzLnBhZ2VzLnNldCgncHJvamVjdHMnLCBuZXcgUHJvamVjdHMoKSlcbiAgICB0aGlzLnBhZ2VzLnNldCgnaG9tZScsIG5ldyBIb21lKCkpXG5cbiAgICB0aGlzLnBhZ2UgPSB0aGlzLnBhZ2VzLmdldCh0aGlzLnRlbXBsYXRlKVxuICAgIHRoaXMucGFnZS5jcmVhdGUoKVxuICAgIHRoaXMucGFnZS5zaG93KClcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKVxuICAgIHRoaXMuYWRkTGlua3NFdmVudHNMaXN0ZW5lcnMoKVxuICB9XG5cbiAgY3JlYXRlQW5hbHl0aWNzICgpIHtcbiAgICBjb25zdCBnb29nbGVBbmFseXRpY3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuXG4gICAgZ29vZ2xlQW5hbHl0aWNzLm9ubG9hZCA9IF8gPT4ge1xuICAgICAgZnVuY3Rpb24gZ3RhZyAoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgICBkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpXG4gICAgICB9XG5cbiAgICAgIHdpbmRvdy5kYXRhTGF5ZXIgPSB3aW5kb3cuZGF0YUxheWVyIHx8IFtdXG5cbiAgICAgIGd0YWcoJ2pzJywgbmV3IERhdGUoKSlcbiAgICAgIGd0YWcoJ2NvbmZpZycsICdHT09HTEVfQU5BTFlUSUNTJylcbiAgICB9XG5cbiAgICBnb29nbGVBbmFseXRpY3Muc3JjID0gJ2h0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9R09PR0xFX0FOQUxZVElDUydcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZ29vZ2xlQW5hbHl0aWNzKVxuICB9XG5cbiAgY3JlYXRlU3RhdHMgKCkge1xuICAgIHRoaXMuc3RhdHMgPSBuZXcgU3RhdHMoKVxuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnN0YXRzLmRvbSlcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2RzLlxuICAgKi9cbiAgYXN5bmMgb25DaGFuZ2UgKHsgcHVzaCA9IHRydWUsIHVybCA9IG51bGwgfSkge1xuICAgIGlmICh0aGlzLmlzTG9hZGluZyB8fCB0aGlzLnVybCA9PT0gdXJsKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSdcblxuICAgIHRoaXMudXJsID0gdXJsXG5cbiAgICB0aGlzLmlzTG9hZGluZyA9IHRydWVcblxuICAgIGNvbnN0IHJlcXVlc3QgPSBhd2FpdCB3aW5kb3cuZmV0Y2godXJsLCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0J1xuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QudGV4dCgpXG5cbiAgICB0aGlzLm9uUmVxdWVzdCh7XG4gICAgICBwdXNoLFxuICAgICAgcmVzcG9uc2UsXG4gICAgICB1cmxcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgb25SZXF1ZXN0ICh7IHB1c2gsIHJlc3BvbnNlLCB1cmwgfSkge1xuICAgIGNvbnN0IGh0bWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXG4gICAgaHRtbC5pbm5lckhUTUwgPSByZXNwb25zZVxuXG4gICAgY29uc3QgY29udGVudCA9IGh0bWwucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKVxuXG4gICAgaWYgKHRoaXMucGFnZSkge1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICB0aGlzLnBhZ2UuaGlkZShjb250ZW50LmRhdGFzZXQudGVtcGxhdGUpXG4gICAgICBdKVxuICAgIH1cblxuICAgIGRvY3VtZW50LnRpdGxlID0gaHRtbC5xdWVyeVNlbGVjdG9yKCd0aXRsZScpLnRleHRDb250ZW50XG5cbiAgICBpZiAocHVzaCkge1xuICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHt9LCBkb2N1bWVudC50aXRsZSwgdXJsKVxuICAgIH1cblxuICAgIHRoaXMuY29udGVudC5pbm5lckhUTUwgPSBjb250ZW50LmlubmVySFRNTFxuICAgIHRoaXMuY29udGVudC5kYXRhc2V0LnRlbXBsYXRlID0gY29udGVudC5kYXRhc2V0LnRlbXBsYXRlXG5cbiAgICB0aGlzLnRlbXBsYXRlID0gY29udGVudC5kYXRhc2V0LnRlbXBsYXRlXG5cbiAgICB0aGlzLnBhZ2UgPSB0aGlzLnBhZ2VzLmdldCh0aGlzLnRlbXBsYXRlKVxuICAgIHRoaXMucGFnZS5jcmVhdGUoKVxuXG4gICAgdGhpcy5hZGRMaW5rc0V2ZW50c0xpc3RlbmVycygpXG5cbiAgICBhd2FpdCB0aGlzLnBhZ2Uuc2hvdygpXG5cbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnJ1xuXG4gICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIExvb3AuXG4gICAqL1xuICB1cGRhdGUgKCkge1xuICAgIGlmICh0aGlzLnN0YXRzKSB7XG4gICAgICB0aGlzLnN0YXRzLmJlZ2luKClcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wYWdlKSB7XG4gICAgICB0aGlzLnBhZ2UudXBkYXRlKClcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGF0cykge1xuICAgICAgdGhpcy5zdGF0cy5lbmQoKVxuICAgIH1cblxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUpXG4gIH1cblxuICAvKipcbiAgICogRXZlbnRzLlxuICAgKi9cbiAgb25Db250ZXh0TWVudSAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgb25Qb3BTdGF0ZSAoKSB7XG4gICAgdGhpcy5vbkNoYW5nZSh7XG4gICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHB1c2g6IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIG9uUmVzaXplICgpIHtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKF8gPT4ge1xuICAgICAgaWYgKHRoaXMucGFnZSkge1xuICAgICAgICB0aGlzLnBhZ2Uub25SZXNpemUoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBvbktleURvd24gKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ1RhYicpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQua2V5ID09PSAnQXJyb3dEb3duJykge1xuICAgICAgdGhpcy5wYWdlLnNjcm9sbC50YXJnZXQgKz0gMTAwXG4gICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09ICdBcnJvd1VwJykge1xuICAgICAgdGhpcy5wYWdlLnNjcm9sbC50YXJnZXQgLT0gMTAwXG4gICAgfVxuICB9XG5cbiAgb25Gb2N1c0luIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIG9uVG91Y2hEb3duIChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBpZiAoIURldGVjdGlvbi5pc01vYmlsZSgpICYmIGV2ZW50LnRhcmdldC50YWdOYW1lID09PSAnQScpIHJldHVyblxuXG4gICAgaWYgKHRoaXMucGFnZSAmJiB0aGlzLnBhZ2Uub25Ub3VjaERvd24pIHtcbiAgICAgIHRoaXMucGFnZS5vblRvdWNoRG93bihldmVudClcbiAgICB9XG4gIH1cblxuICBvblRvdWNoTW92ZSAoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLm9uVG91Y2hEb3duKSB7XG4gICAgICB0aGlzLnBhZ2Uub25Ub3VjaE1vdmUoZXZlbnQpXG4gICAgfVxuICB9XG5cbiAgb25Ub3VjaFVwIChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBpZiAodGhpcy5wYWdlICYmIHRoaXMucGFnZS5vblRvdWNoRG93bikge1xuICAgICAgdGhpcy5wYWdlLm9uVG91Y2hVcChldmVudClcbiAgICB9XG4gIH1cblxuICBvbldoZWVsIChldmVudCkge1xuICAgIGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLm9uV2hlZWwpIHtcbiAgICAgIHRoaXMucGFnZS5vbldoZWVsKGV2ZW50KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0ZW5lcnMuXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVycyAoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgdGhpcy5vblBvcFN0YXRlLCB7IHBhc3NpdmU6IHRydWUgfSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZSwgeyBwYXNzaXZlOiB0cnVlIH0pXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vblRvdWNoRG93biwgeyBwYXNzaXZlOiB0cnVlIH0pXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Ub3VjaE1vdmUsIHsgcGFzc2l2ZTogdHJ1ZSB9KVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vblRvdWNoVXAsIHsgcGFzc2l2ZTogdHJ1ZSB9KVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hEb3duLCB7IHBhc3NpdmU6IHRydWUgfSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vblRvdWNoTW92ZSwgeyBwYXNzaXZlOiB0cnVlIH0pXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vblRvdWNoVXAsIHsgcGFzc2l2ZTogdHJ1ZSB9KVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCB0aGlzLm9uV2hlZWwsIHsgcGFzc2l2ZTogdHJ1ZSB9KVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMub25XaGVlbCwgeyBwYXNzaXZlOiB0cnVlIH0pXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMub25LZXlEb3duKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgdGhpcy5vbkZvY3VzSW4pXG5cbiAgICBpZiAoRGV0ZWN0aW9uLmlzTW9iaWxlKCkpIHtcbiAgICAgIHdpbmRvdy5vbmNvbnRleHRtZW51ID0gdGhpcy5vbkNvbnRleHRNZW51XG4gICAgfVxuICB9XG5cbiAgYWRkTGlua3NFdmVudHNMaXN0ZW5lcnMgKCkge1xuICAgIGNvbnN0IGxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYScpXG5cbiAgICBlYWNoKGxpbmtzLCBsaW5rID0+IHtcbiAgICAgIGNvbnN0IGlzTG9jYWwgPSBsaW5rLmhyZWYuaW5kZXhPZih3aW5kb3cubG9jYXRpb24ub3JpZ2luKSA+IC0xXG4gICAgICBjb25zdCBpc0FuY2hvciA9IGxpbmsuaHJlZi5pbmRleE9mKCcjJykgPiAtMVxuXG4gICAgICBpZiAoaXNMb2NhbCkge1xuICAgICAgICBsaW5rLm9uY2xpY2sgPSBldmVudCA9PiB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgICAgICAgaWYgKCFpc0FuY2hvcikge1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSh7XG4gICAgICAgICAgICAgIHVybDogbGluay5ocmVmXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsaW5rLmhyZWYuaW5kZXhPZignbWFpbHRvJykgPT09IC0xICYmIGxpbmsuaHJlZi5pbmRleE9mKCd0ZWwnKSA9PT0gLTEpIHtcbiAgICAgICAgbGluay5yZWwgPSAnbm9vcGVuZXInXG4gICAgICAgIGxpbmsudGFyZ2V0ID0gJ19ibGFuaydcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbmNvbnN0IGZvbnRQb2x5c2Fuc25ldXRyYWwgPSBuZXcgRm9udEZhY2VPYnNlcnZlcignUG9seXNhbnMgTmV1dHJhbCcpXG5cblByb21pc2UuYWxsKFtcbiAgZm9udFBvbHlzYW5zbmV1dHJhbC5sb2FkKClcbl0pLnRoZW4oXyA9PiB7XG4gIHdpbmRvdy5BUFAgPSBuZXcgQXBwKClcbn0pLmNhdGNoKF8gPT4ge1xuICB3aW5kb3cuQVBQID0gbmV3IEFwcCgpXG59KVxuXG5jb25zb2xlLmxvZygnJWMgRGV2ZWxvcGVkIGJ5IENocmlzdHkgLSBodHRwczovL2NocmlzdHlzaGFmYWNrLmNvbS8nLCAnY29sb3I6ICMwMDA7JylcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnkgV29ya2VyR2xvYmFsU2NvcGUgc2VsZiAqL1xuXG4vKiBlc2xpbnQgcHJlZmVyLWRlc3RydWN0dXJpbmc6IG9mZiAqL1xuXG52YXIgc3RyaXBBbnNpID0gcmVxdWlyZSgnc3RyaXAtYW5zaScpO1xuXG52YXIgc29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxudmFyIG92ZXJsYXkgPSByZXF1aXJlKCcuL292ZXJsYXknKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi91dGlscy9sb2cnKSxcbiAgICBsb2cgPSBfcmVxdWlyZS5sb2csXG4gICAgc2V0TG9nTGV2ZWwgPSBfcmVxdWlyZS5zZXRMb2dMZXZlbDtcblxudmFyIHNlbmRNZXNzYWdlID0gcmVxdWlyZSgnLi91dGlscy9zZW5kTWVzc2FnZScpO1xuXG52YXIgcmVsb2FkQXBwID0gcmVxdWlyZSgnLi91dGlscy9yZWxvYWRBcHAnKTtcblxudmFyIGNyZWF0ZVNvY2tldFVybCA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlU29ja2V0VXJsJyk7XG5cbnZhciBzdGF0dXMgPSB7XG4gIGlzVW5sb2FkaW5nOiBmYWxzZSxcbiAgY3VycmVudEhhc2g6ICcnXG59O1xudmFyIG9wdGlvbnMgPSB7XG4gIGhvdDogZmFsc2UsXG4gIGhvdFJlbG9hZDogdHJ1ZSxcbiAgbGl2ZVJlbG9hZDogZmFsc2UsXG4gIGluaXRpYWw6IHRydWUsXG4gIHVzZVdhcm5pbmdPdmVybGF5OiBmYWxzZSxcbiAgdXNlRXJyb3JPdmVybGF5OiBmYWxzZSxcbiAgdXNlUHJvZ3Jlc3M6IGZhbHNlXG59O1xudmFyIHNvY2tldFVybCA9IGNyZWF0ZVNvY2tldFVybChfX3Jlc291cmNlUXVlcnkpO1xuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbiAoKSB7XG4gIHN0YXR1cy5pc1VubG9hZGluZyA9IHRydWU7XG59KTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHZhciBxcyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gudG9Mb3dlckNhc2UoKTtcbiAgb3B0aW9ucy5ob3RSZWxvYWQgPSBxcy5pbmRleE9mKCdob3RyZWxvYWQ9ZmFsc2UnKSA9PT0gLTE7XG59XG5cbnZhciBvblNvY2tldE1lc3NhZ2UgPSB7XG4gIGhvdDogZnVuY3Rpb24gaG90KCkge1xuICAgIG9wdGlvbnMuaG90ID0gdHJ1ZTtcbiAgICBsb2cuaW5mbygnW1dEU10gSG90IE1vZHVsZSBSZXBsYWNlbWVudCBlbmFibGVkLicpO1xuICB9LFxuICBsaXZlUmVsb2FkOiBmdW5jdGlvbiBsaXZlUmVsb2FkKCkge1xuICAgIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7XG4gICAgbG9nLmluZm8oJ1tXRFNdIExpdmUgUmVsb2FkaW5nIGVuYWJsZWQuJyk7XG4gIH0sXG4gIGludmFsaWQ6IGZ1bmN0aW9uIGludmFsaWQoKSB7XG4gICAgbG9nLmluZm8oJ1tXRFNdIEFwcCB1cGRhdGVkLiBSZWNvbXBpbGluZy4uLicpOyAvLyBmaXhlcyAjMTA0Mi4gb3ZlcmxheSBkb2Vzbid0IGNsZWFyIGlmIGVycm9ycyBhcmUgZml4ZWQgYnV0IHdhcm5pbmdzIHJlbWFpbi5cblxuICAgIGlmIChvcHRpb25zLnVzZVdhcm5pbmdPdmVybGF5IHx8IG9wdGlvbnMudXNlRXJyb3JPdmVybGF5KSB7XG4gICAgICBvdmVybGF5LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoJ0ludmFsaWQnKTtcbiAgfSxcbiAgaGFzaDogZnVuY3Rpb24gaGFzaChfaGFzaCkge1xuICAgIHN0YXR1cy5jdXJyZW50SGFzaCA9IF9oYXNoO1xuICB9LFxuICAnc3RpbGwtb2snOiBmdW5jdGlvbiBzdGlsbE9rKCkge1xuICAgIGxvZy5pbmZvKCdbV0RTXSBOb3RoaW5nIGNoYW5nZWQuJyk7XG5cbiAgICBpZiAob3B0aW9ucy51c2VXYXJuaW5nT3ZlcmxheSB8fCBvcHRpb25zLnVzZUVycm9yT3ZlcmxheSkge1xuICAgICAgb3ZlcmxheS5jbGVhcigpO1xuICAgIH1cblxuICAgIHNlbmRNZXNzYWdlKCdTdGlsbE9rJyk7XG4gIH0sXG4gICdsb2ctbGV2ZWwnOiBmdW5jdGlvbiBsb2dMZXZlbChsZXZlbCkge1xuICAgIHZhciBob3RDdHggPSByZXF1aXJlLmNvbnRleHQoJ3dlYnBhY2svaG90JywgZmFsc2UsIC9eXFwuXFwvbG9nJC8pO1xuXG4gICAgaWYgKGhvdEN0eC5rZXlzKCkuaW5kZXhPZignLi9sb2cnKSAhPT0gLTEpIHtcbiAgICAgIGhvdEN0eCgnLi9sb2cnKS5zZXRMb2dMZXZlbChsZXZlbCk7XG4gICAgfVxuXG4gICAgc2V0TG9nTGV2ZWwobGV2ZWwpO1xuICB9LFxuICBvdmVybGF5OiBmdW5jdGlvbiBvdmVybGF5KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICBvcHRpb25zLnVzZVdhcm5pbmdPdmVybGF5ID0gZmFsc2U7XG4gICAgICAgIG9wdGlvbnMudXNlRXJyb3JPdmVybGF5ID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgIG9wdGlvbnMudXNlV2FybmluZ092ZXJsYXkgPSB2YWx1ZS53YXJuaW5ncztcbiAgICAgICAgb3B0aW9ucy51c2VFcnJvck92ZXJsYXkgPSB2YWx1ZS5lcnJvcnM7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwcm9ncmVzczogZnVuY3Rpb24gcHJvZ3Jlc3MoX3Byb2dyZXNzKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG9wdGlvbnMudXNlUHJvZ3Jlc3MgPSBfcHJvZ3Jlc3M7XG4gICAgfVxuICB9LFxuICAncHJvZ3Jlc3MtdXBkYXRlJzogZnVuY3Rpb24gcHJvZ3Jlc3NVcGRhdGUoZGF0YSkge1xuICAgIGlmIChvcHRpb25zLnVzZVByb2dyZXNzKSB7XG4gICAgICBsb2cuaW5mbyhcIltXRFNdIFwiLmNvbmNhdChkYXRhLnBlcmNlbnQsIFwiJSAtIFwiKS5jb25jYXQoZGF0YS5tc2csIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgc2VuZE1lc3NhZ2UoJ1Byb2dyZXNzJywgZGF0YSk7XG4gIH0sXG4gIG9rOiBmdW5jdGlvbiBvaygpIHtcbiAgICBzZW5kTWVzc2FnZSgnT2snKTtcblxuICAgIGlmIChvcHRpb25zLnVzZVdhcm5pbmdPdmVybGF5IHx8IG9wdGlvbnMudXNlRXJyb3JPdmVybGF5KSB7XG4gICAgICBvdmVybGF5LmNsZWFyKCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5pdGlhbCkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW5pdGlhbCA9IGZhbHNlO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXR1cm4tYXNzaWduXG5cblxuICAgIHJlbG9hZEFwcChvcHRpb25zLCBzdGF0dXMpO1xuICB9LFxuICAnY29udGVudC1jaGFuZ2VkJzogZnVuY3Rpb24gY29udGVudENoYW5nZWQoKSB7XG4gICAgbG9nLmluZm8oJ1tXRFNdIENvbnRlbnQgYmFzZSBjaGFuZ2VkLiBSZWxvYWRpbmcuLi4nKTtcbiAgICBzZWxmLmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9LFxuICB3YXJuaW5nczogZnVuY3Rpb24gd2FybmluZ3MoX3dhcm5pbmdzKSB7XG4gICAgbG9nLndhcm4oJ1tXRFNdIFdhcm5pbmdzIHdoaWxlIGNvbXBpbGluZy4nKTtcblxuICAgIHZhciBzdHJpcHBlZFdhcm5pbmdzID0gX3dhcm5pbmdzLm1hcChmdW5jdGlvbiAod2FybmluZykge1xuICAgICAgcmV0dXJuIHN0cmlwQW5zaSh3YXJuaW5nKTtcbiAgICB9KTtcblxuICAgIHNlbmRNZXNzYWdlKCdXYXJuaW5ncycsIHN0cmlwcGVkV2FybmluZ3MpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpcHBlZFdhcm5pbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsb2cud2FybihzdHJpcHBlZFdhcm5pbmdzW2ldKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy51c2VXYXJuaW5nT3ZlcmxheSkge1xuICAgICAgb3ZlcmxheS5zaG93TWVzc2FnZShfd2FybmluZ3MpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluaXRpYWwpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmluaXRpYWwgPSBmYWxzZTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmV0dXJuLWFzc2lnblxuXG5cbiAgICByZWxvYWRBcHAob3B0aW9ucywgc3RhdHVzKTtcbiAgfSxcbiAgZXJyb3JzOiBmdW5jdGlvbiBlcnJvcnMoX2Vycm9ycykge1xuICAgIGxvZy5lcnJvcignW1dEU10gRXJyb3JzIHdoaWxlIGNvbXBpbGluZy4gUmVsb2FkIHByZXZlbnRlZC4nKTtcblxuICAgIHZhciBzdHJpcHBlZEVycm9ycyA9IF9lcnJvcnMubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmV0dXJuIHN0cmlwQW5zaShlcnJvcik7XG4gICAgfSk7XG5cbiAgICBzZW5kTWVzc2FnZSgnRXJyb3JzJywgc3RyaXBwZWRFcnJvcnMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpcHBlZEVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgbG9nLmVycm9yKHN0cmlwcGVkRXJyb3JzW2ldKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy51c2VFcnJvck92ZXJsYXkpIHtcbiAgICAgIG92ZXJsYXkuc2hvd01lc3NhZ2UoX2Vycm9ycyk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5pbml0aWFsID0gZmFsc2U7XG4gIH0sXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IpIHtcbiAgICBsb2cuZXJyb3IoX2Vycm9yKTtcbiAgfSxcbiAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGxvZy5lcnJvcignW1dEU10gRGlzY29ubmVjdGVkIScpO1xuICAgIHNlbmRNZXNzYWdlKCdDbG9zZScpO1xuICB9XG59O1xuc29ja2V0KHNvY2tldFVybCwgb25Tb2NrZXRNZXNzYWdlKTsiXSwibmFtZXMiOlsiZWFjaCIsIkFuaW1hdGlvbiIsImNhbGN1bGF0ZSIsInNwbGl0IiwiY29uc3RydWN0b3IiLCJlbGVtZW50IiwibGluZXMiLCJwYXJhZ3JhcGhzIiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsInB1c2giLCJlbGVtZW50cyIsIm9uUmVzaXplIiwid2luZG93IiwiYW5pbWF0ZU91dCIsImFuaW1hdGVJbiIsImxpbmUiLCJsaW5lSW5kZXgiLCJ3b3JkIiwic3R5bGUiLCJ0cmFuc2l0aW9uIiwidHJhbnNmb3JtUHJlZml4IiwiUHJlZml4IiwiYW5pbWF0aW9uRGVsYXkiLCJhbmltYXRpb25UYXJnZXQiLCJkYXRhc2V0IiwiZGVsYXkiLCJ0YXJnZXQiLCJjbG9zZXN0IiwiaXNWaXNpYmxlIiwiY3JlYXRlT2JzZXJ2ZXIiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsImZvckVhY2giLCJlbnRyeSIsImlzSW50ZXJzZWN0aW5nIiwib2JzZXJ2ZSIsIkRldGVjdGlvbiIsImlzTW9iaWxlIiwiaXNNb2JpbGVDaGVja2VkIiwiaXNNb2JpbGVDaGVjayIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJpc1dlYlBTdXBwb3J0ZWQiLCJpc1dlYlBDaGVja2VkIiwiY3JlYXRlRWxlbWVudCIsImdldENvbnRleHQiLCJpc1dlYlBDaGVjayIsInRvRGF0YVVSTCIsImluZGV4T2YiLCJEZXRlY3Rpb25NYW5hZ2VyIiwiQXV0b0JpbmQiLCJFdmVudEVtaXR0ZXIiLCJOb3JtYWxpemVXaGVlbCIsIlBhcmFncmFwaCIsIm1hcEVhY2giLCJjbGFtcCIsImxlcnAiLCJjbGFzc2VzIiwiaXNTY3JvbGxhYmxlIiwic2VsZWN0b3JzIiwiYW5pbWF0aW9uc1BhcmFncmFwaHMiLCJzY3JvbGwiLCJlYXNlIiwicG9zaXRpb24iLCJjdXJyZW50IiwibGltaXQiLCJjcmVhdGUiLCJhbmltYXRpb25zIiwicXVlcnlTZWxlY3RvciIsInNlbGVjdG9yIiwia2V5IiwiSFRNTEVsZW1lbnQiLCJOb2RlTGlzdCIsIkFycmF5IiwiaXNBcnJheSIsIndyYXBwZXIiLCJjbGllbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsImNyZWF0ZUFuaW1hdGlvbnMiLCJyZXNldCIsInNldCIsInZhbHVlIiwibGFzdCIsInRyYW5zZm9ybSIsInNob3ciLCJ1cmwiLCJQcm9taXNlIiwicmVzb2x2ZSIsImhpZGUiLCJ5IiwiTWF0aCIsInJvdW5kIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiXyIsImFuaW1hdGlvbiIsIm9uVG91Y2hEb3duIiwiZXZlbnQiLCJpc0Rvd24iLCJzdGFydCIsInRvdWNoZXMiLCJjbGllbnRZIiwib25Ub3VjaE1vdmUiLCJkaXN0YW5jZSIsIm9uVG91Y2hVcCIsIm9uV2hlZWwiLCJub3JtYWxpemVkIiwic3BlZWQiLCJwaXhlbFkiLCJ1cGRhdGUiLCJmbG9vciIsIlBhZ2UiLCJhY3RpdmUiLCJhZGQiLCJyZW1vdmUiLCJtYXAiLCJnZXRPZmZzZXQiLCJ0b3AiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3R0b20iLCJoZWlnaHQiLCJsZWZ0Iiwid2lkdGgiLCJjYWxsYmFjayIsIkdTQVAiLCJwMSIsInAyIiwidCIsInV0aWxzIiwiaW50ZXJwb2xhdGUiLCJtaW4iLCJtYXgiLCJudW1iZXIiLCJyYW5kb20iLCJ2YWx1ZVRvTWFwIiwiaW5NaW4iLCJpbk1heCIsIm91dE1pbiIsIm91dE1heCIsIm1hcFJhbmdlIiwiaGlzdG9yeSIsInNjcm9sbFJlc3RvcmF0aW9uIiwiSVNfREVWRUxPUE1FTlQiLCJuYXZpZ2F0b3IiLCJzZXJ2aWNlV29ya2VyIiwicmVnaXN0ZXIiLCJleHByZXNzaW9uIiwiYXBwZW5kIiwid29yZHMiLCJzcGxpdFRleHQiLCJpbm5lckhUTUwiLCJ0b1N0cmluZyIsInRyaW0iLCJpbmRleCIsInBhcnNlTGluZSIsInNwYW5zIiwic3BhbiIsImlzU2luZ2xlTGV0dGVyIiwidGV4dENvbnRlbnQiLCJpc05vdEVtcHR5IiwiaXNOb3RBbmRDaGFyYWN0ZXIiLCJpc05vdERhc2hDaGFyYWN0ZXIiLCJvZmZzZXRUb3AiLCJ0ZXh0Iiwic3BsaXRzIiwiaXRlbSIsImNvbmNhdCIsImlzTGluayIsImxpbmsiLCJpbmNsdWRlcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJhbnNpSFRNTCIsIl9yZWdBTlNJIiwiX2RlZkNvbG9ycyIsImJsYWNrIiwicmVkIiwiZ3JlZW4iLCJ5ZWxsb3ciLCJibHVlIiwibWFnZW50YSIsImN5YW4iLCJsaWdodGdyZXkiLCJkYXJrZ3JleSIsIl9zdHlsZXMiLCJfb3BlblRhZ3MiLCJfY2xvc2VUYWdzIiwibiIsInRlc3QiLCJhbnNpQ29kZXMiLCJyZXQiLCJyZXBsYWNlIiwibWF0Y2giLCJzZXEiLCJvdCIsInBvcCIsImN0IiwibCIsImpvaW4iLCJzZXRDb2xvcnMiLCJjb2xvcnMiLCJFcnJvciIsIl9maW5hbENvbG9ycyIsImhleCIsImhhc093blByb3BlcnR5Iiwic29tZSIsImgiLCJkZWZIZXhDb2xvciIsInNsaWNlIiwiX3NldFRhZ3MiLCJ0YWdzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJvcGVuIiwiY2xvc2UiLCJjb2RlIiwiY29sb3IiLCJvcmlDb2xvciIsInBhcnNlSW50IiwiZ2V0QWxsUHJvcGVydGllcyIsIm9iamVjdCIsInByb3BlcnRpZXMiLCJTZXQiLCJSZWZsZWN0Iiwib3duS2V5cyIsImdldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwic2VsZiIsImluY2x1ZGUiLCJleGNsdWRlIiwiZmlsdGVyIiwicGF0dGVybiIsImRlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJiaW5kIiwiR2V0SW50cmluc2ljIiwicmVxdWlyZSIsImNhbGxCaW5kIiwiJGluZGV4T2YiLCJjYWxsQm91bmRJbnRyaW5zaWMiLCJuYW1lIiwiYWxsb3dNaXNzaW5nIiwiaW50cmluc2ljIiwic2V0RnVuY3Rpb25MZW5ndGgiLCIkVHlwZUVycm9yIiwiJGFwcGx5IiwiJGNhbGwiLCIkcmVmbGVjdEFwcGx5IiwiY2FsbCIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRtYXgiLCJvcmlnaW5hbEZ1bmN0aW9uIiwiZnVuYyIsImFyZ3VtZW50cyIsImFwcGx5QmluZCIsImFwcGx5IiwiJFN5bnRheEVycm9yIiwiZ29wZCIsImRlZmluZURhdGFQcm9wZXJ0eSIsIm9iaiIsInByb3BlcnR5Iiwibm9uRW51bWVyYWJsZSIsIm5vbldyaXRhYmxlIiwibm9uQ29uZmlndXJhYmxlIiwibG9vc2UiLCJkZXNjIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiZSIsIkV2YWxFcnJvciIsIlJhbmdlRXJyb3IiLCJSZWZlcmVuY2VFcnJvciIsIlN5bnRheEVycm9yIiwiVHlwZUVycm9yIiwiVVJJRXJyb3IiLCJSIiwiUmVmbGVjdEFwcGx5IiwicmVjZWl2ZXIiLCJhcmdzIiwiRnVuY3Rpb24iLCJSZWZsZWN0T3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJQcm9jZXNzRW1pdFdhcm5pbmciLCJ3YXJuaW5nIiwiY29uc29sZSIsIndhcm4iLCJOdW1iZXJJc05hTiIsIk51bWJlciIsImlzTmFOIiwiaW5pdCIsIm9uY2UiLCJfZXZlbnRzIiwidW5kZWZpbmVkIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJjaGVja0xpc3RlbmVyIiwibGlzdGVuZXIiLCJhcmciLCJzZXRNYXhMaXN0ZW5lcnMiLCJfZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsImdldE1heExpc3RlbmVycyIsImVtaXQiLCJ0eXBlIiwiaSIsImRvRXJyb3IiLCJldmVudHMiLCJlcnJvciIsImVyIiwiZXJyIiwibWVzc2FnZSIsImNvbnRleHQiLCJoYW5kbGVyIiwibGVuIiwibGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsIl9hZGRMaXN0ZW5lciIsInByZXBlbmQiLCJtIiwiZXhpc3RpbmciLCJuZXdMaXN0ZW5lciIsInVuc2hpZnQiLCJ3YXJuZWQiLCJ3IiwiU3RyaW5nIiwiZW1pdHRlciIsImNvdW50IiwiYWRkTGlzdGVuZXIiLCJvbiIsInByZXBlbmRMaXN0ZW5lciIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJyZW1vdmVMaXN0ZW5lciIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0Iiwib3JpZ2luYWxMaXN0ZW5lciIsInNoaWZ0Iiwic3BsaWNlT25lIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwia2V5cyIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwicmF3TGlzdGVuZXJzIiwibGlzdGVuZXJDb3VudCIsImV2ZW50TmFtZXMiLCJhcnIiLCJjb3B5IiwicmVqZWN0IiwiZXJyb3JMaXN0ZW5lciIsInJlc29sdmVyIiwiZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyIiwiYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIiLCJmbGFncyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3cmFwTGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicCIsImEiLCJjIiwiYXR0YWNoRXZlbnQiLCJ1IiwiYm9keSIsImIiLCJnIiwicmVhZHlTdGF0ZSIsImRldGFjaEV2ZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImoiLCJjc3NUZXh0IiwieCIsIkIiLCJvZmZzZXRXaWR0aCIsInNjcm9sbExlZnQiLCJzY3JvbGxXaWR0aCIsIkMiLCJwYXJlbnROb2RlIiwiRCIsImZhbWlseSIsIndlaWdodCIsInN0cmV0Y2giLCJFIiwiRiIsIkciLCJIIiwiSSIsIk0iLCJ2ZW5kb3IiLCJleGVjIiwidXNlckFnZW50IiwiZm9udHMiLCJOIiwiZm9udCIsInEiLCJsb2FkIiwiSiIsIkRhdGUiLCJnZXRUaW1lIiwiSyIsIkwiLCJPIiwiciIsInRoZW4iLCJzZXRUaW1lb3V0IiwiUCIsInJhY2UiLCJjbGVhclRpbWVvdXQiLCJkIiwiayIsInoiLCJBIiwiZiIsInJlbW92ZUNoaWxkIiwiaGlkZGVuIiwidiIsImRpciIsIkZvbnRGYWNlT2JzZXJ2ZXIiLCJFUlJPUl9NRVNTQUdFIiwidG9TdHIiLCJmdW5jVHlwZSIsImNvbmNhdHR5Iiwic2xpY3kiLCJhcnJMaWtlIiwib2Zmc2V0Iiwiam9pbnkiLCJqb2luZXIiLCJzdHIiLCJib3VuZCIsImJpbmRlciIsInJlc3VsdCIsImJvdW5kTGVuZ3RoIiwiYm91bmRBcmdzIiwiRW1wdHkiLCJpbXBsZW1lbnRhdGlvbiIsIiRFcnJvciIsIiRFdmFsRXJyb3IiLCIkUmFuZ2VFcnJvciIsIiRSZWZlcmVuY2VFcnJvciIsIiRVUklFcnJvciIsIiRGdW5jdGlvbiIsImdldEV2YWxsZWRDb25zdHJ1Y3RvciIsImV4cHJlc3Npb25TeW50YXgiLCIkZ09QRCIsInRocm93VHlwZUVycm9yIiwiVGhyb3dUeXBlRXJyb3IiLCJjYWxsZWUiLCJjYWxsZWVUaHJvd3MiLCJnT1BEdGhyb3dzIiwiaGFzU3ltYm9scyIsImhhc1Byb3RvIiwiZ2V0UHJvdG8iLCJfX3Byb3RvX18iLCJuZWVkc0V2YWwiLCJUeXBlZEFycmF5IiwiVWludDhBcnJheSIsIklOVFJJTlNJQ1MiLCJBZ2dyZWdhdGVFcnJvciIsIkFycmF5QnVmZmVyIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJBdG9taWNzIiwiQmlnSW50IiwiQmlnSW50NjRBcnJheSIsIkJpZ1VpbnQ2NEFycmF5IiwiQm9vbGVhbiIsIkRhdGFWaWV3IiwiZGVjb2RlVVJJIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZXZhbCIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkZpbmFsaXphdGlvblJlZ2lzdHJ5IiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJpc0Zpbml0ZSIsIkpTT04iLCJNYXAiLCJwYXJzZUZsb2F0IiwiUHJveHkiLCJSZWdFeHAiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIldlYWtNYXAiLCJXZWFrUmVmIiwiV2Vha1NldCIsImVycm9yUHJvdG8iLCJkb0V2YWwiLCJmbiIsImdlbiIsIkxFR0FDWV9BTElBU0VTIiwiaGFzT3duIiwiJGNvbmNhdCIsIiRzcGxpY2VBcHBseSIsInNwbGljZSIsIiRyZXBsYWNlIiwiJHN0clNsaWNlIiwiJGV4ZWMiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwic3RyaW5nVG9QYXRoIiwic3RyaW5nIiwiZmlyc3QiLCJxdW90ZSIsInN1YlN0cmluZyIsImdldEJhc2VJbnRyaW5zaWMiLCJpbnRyaW5zaWNOYW1lIiwiYWxpYXMiLCJwYXJ0cyIsImludHJpbnNpY0Jhc2VOYW1lIiwiaW50cmluc2ljUmVhbE5hbWUiLCJza2lwRnVydGhlckNhY2hpbmciLCJpc093biIsInBhcnQiLCJnc2FwIiwiX2dldFByb3BlcnR5IiwiX251bUV4cCIsIl9udW1XaXRoVW5pdEV4cCIsImdldFVuaXQiLCJfaXNTdHJpbmciLCJfaXNVbmRlZmluZWQiLCJfcmVuZGVyQ29tcGxleFN0cmluZyIsIl9yZWxFeHAiLCJfZm9yRWFjaE5hbWUiLCJfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5IiwiX2NvbG9yU3RyaW5nRmlsdGVyIiwiX2NoZWNrUGx1Z2luIiwiX3JlcGxhY2VSYW5kb20iLCJfcGx1Z2lucyIsIkdTQ2FjaGUiLCJQcm9wVHdlZW4iLCJfY29uZmlnIiwiX3RpY2tlciIsIl9yb3VuZCIsIl9taXNzaW5nUGx1Z2luIiwiX2dldFNldHRlciIsIl9nZXRDYWNoZSIsIl9jb2xvckV4cCIsIl9wYXJzZVJlbGF0aXZlIiwiX3NldERlZmF1bHRzIiwiX3JlbW92ZUxpbmtlZExpc3RJdGVtIiwiX3dpbiIsIl9kb2MiLCJfZG9jRWxlbWVudCIsIl9wbHVnaW5Jbml0dGVkIiwiX3RlbXBEaXYiLCJfdGVtcERpdlN0eWxlciIsIl9yZWNlbnRTZXR0ZXJQbHVnaW4iLCJfcmV2ZXJ0aW5nIiwiX3dpbmRvd0V4aXN0cyIsIl90cmFuc2Zvcm1Qcm9wcyIsIl9SQUQyREVHIiwiUEkiLCJfREVHMlJBRCIsIl9hdGFuMiIsImF0YW4yIiwiX2JpZ051bSIsIl9jYXBzRXhwIiwiX2hvcml6b250YWxFeHAiLCJfY29tcGxleEV4cCIsIl9wcm9wZXJ0eUFsaWFzZXMiLCJhdXRvQWxwaGEiLCJzY2FsZSIsImFscGhhIiwiX3JlbmRlckNTU1Byb3AiLCJyYXRpbyIsImRhdGEiLCJzIiwiX3JlbmRlclByb3BXaXRoRW5kIiwiX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nIiwiX3JlbmRlclJvdW5kZWRDU1NQcm9wIiwiX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCIsIl9zZXR0ZXJDU1NTdHlsZSIsIl9zZXR0ZXJDU1NQcm9wIiwic2V0UHJvcGVydHkiLCJfc2V0dGVyVHJhbnNmb3JtIiwiX2dzYXAiLCJfc2V0dGVyU2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJfc2V0dGVyU2NhbGVXaXRoUmVuZGVyIiwiY2FjaGUiLCJyZW5kZXJUcmFuc2Zvcm0iLCJfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciIsIl90cmFuc2Zvcm1Qcm9wIiwiX3RyYW5zZm9ybU9yaWdpblByb3AiLCJfc2F2ZVN0eWxlIiwiaXNOb3RDU1MiLCJfdGhpcyIsInRmbSIsIl9nZXQiLCJ6T3JpZ2luIiwicHJvcHMiLCJzdmciLCJzdmdvIiwiZ2V0QXR0cmlidXRlIiwiX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyIsInRyYW5zbGF0ZSIsInJlbW92ZVByb3BlcnR5IiwiX3JldmVydFN0eWxlIiwic3Vic3RyIiwidG9Mb3dlckNhc2UiLCJpc1N0YXJ0IiwidW5jYWNoZSIsIl9nZXRTdHlsZVNhdmVyIiwic2F2ZXIiLCJyZXZlcnQiLCJzYXZlIiwiY29yZSIsImdldENhY2hlIiwiX3N1cHBvcnRzM0QiLCJfY3JlYXRlRWxlbWVudCIsIm5zIiwiY3JlYXRlRWxlbWVudE5TIiwiX2dldENvbXB1dGVkUHJvcGVydHkiLCJza2lwUHJlZml4RmFsbGJhY2siLCJjcyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiX2NoZWNrUHJvcFByZWZpeCIsIl9wcmVmaXhlcyIsInByZWZlclByZWZpeCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiX2luaXRDb3JlIiwicmV2ZXJ0aW5nIiwiX2dldEJCb3hIYWNrIiwic3dhcElmUG9zc2libGUiLCJvd25lclNWR0VsZW1lbnQiLCJvbGRQYXJlbnQiLCJvbGRTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJvbGRDU1MiLCJiYm94IiwiZGlzcGxheSIsImdldEJCb3giLCJfZ3NhcEJCb3giLCJpbnNlcnRCZWZvcmUiLCJfZ2V0QXR0cmlidXRlRmFsbGJhY2tzIiwiYXR0cmlidXRlc0FycmF5IiwiaGFzQXR0cmlidXRlIiwiX2dldEJCb3giLCJib3VuZHMiLCJfaXNTVkciLCJnZXRDVE0iLCJfcmVtb3ZlUHJvcGVydHkiLCJmaXJzdDJDaGFycyIsInJlbW92ZUF0dHJpYnV0ZSIsIl9hZGROb25Ud2VlbmluZ1BUIiwicGx1Z2luIiwiYmVnaW5uaW5nIiwiZW5kIiwib25seVNldEF0RW5kIiwicHQiLCJfcHQiLCJfcHJvcHMiLCJfbm9uQ29udmVydGlibGVVbml0cyIsImRlZyIsInJhZCIsInR1cm4iLCJfbm9uU3RhbmRhcmRMYXlvdXRzIiwiZ3JpZCIsImZsZXgiLCJfY29udmVydFRvVW5pdCIsInVuaXQiLCJjdXJWYWx1ZSIsImN1clVuaXQiLCJob3Jpem9udGFsIiwiaXNSb290U1ZHIiwidGFnTmFtZSIsIm1lYXN1cmVQcm9wZXJ0eSIsImFtb3VudCIsInRvUGl4ZWxzIiwidG9QZXJjZW50IiwicHgiLCJwYXJlbnQiLCJpc1NWRyIsInRpbWUiLCJfcGFyc2VUcmFuc2Zvcm0iLCJvcmlnaW4iLCJfZmlyc3RUd29Pbmx5IiwiX3NwZWNpYWxQcm9wcyIsIl90d2VlbkNvbXBsZXhDU1NTdHJpbmciLCJwcm9wIiwibWF0Y2hJbmRleCIsInN0YXJ0VmFsdWVzIiwic3RhcnROdW0iLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmROdW0iLCJjaHVuayIsImVuZFVuaXQiLCJzdGFydFVuaXQiLCJlbmRWYWx1ZXMiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXgiLCJ1bml0cyIsIl9uZXh0IiwiX2tleXdvcmRUb1BlcmNlbnQiLCJyaWdodCIsImNlbnRlciIsIl9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzIiwiX3JlbmRlckNsZWFyUHJvcHMiLCJ0d2VlbiIsIl90aW1lIiwiX2R1ciIsImNsZWFyVHJhbnNmb3JtcyIsImNsZWFyUHJvcHMiLCJwciIsIl9pZGVudGl0eTJETWF0cml4IiwiX3JvdGF0aW9uYWxQcm9wZXJ0aWVzIiwiX2lzTnVsbFRyYW5zZm9ybSIsIl9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkiLCJtYXRyaXhTdHJpbmciLCJfZ2V0TWF0cml4IiwiZm9yY2UyRCIsIm1hdHJpeCIsInRlbXAiLCJhZGRlZFRvRE9NIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiX2FwcGx5U1ZHT3JpZ2luIiwib3JpZ2luSXNBYnNvbHV0ZSIsInNtb290aCIsIm1hdHJpeEFycmF5IiwicGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8iLCJ4T3JpZ2luT2xkIiwieE9yaWdpbiIsInlPcmlnaW5PbGQiLCJ5T3JpZ2luIiwieE9mZnNldE9sZCIsInhPZmZzZXQiLCJ5T2Zmc2V0T2xkIiwieU9mZnNldCIsInR4IiwidHkiLCJvcmlnaW5TcGxpdCIsImRldGVybWluYW50IiwiaW52ZXJ0ZWRTY2FsZVgiLCJyb3RhdGlvbiIsInJvdGF0aW9uWCIsInJvdGF0aW9uWSIsInNrZXdYIiwic2tld1kiLCJwZXJzcGVjdGl2ZSIsImFuZ2xlIiwiY29zIiwic2luIiwiYTEyIiwiYTIyIiwidDEiLCJ0MiIsInQzIiwiYTEzIiwiYTIzIiwiYTMzIiwiYTQyIiwiYTQzIiwiYTMyIiwicm90YXRlIiwic3FydCIsImFicyIsImZvcmNlQ1NTIiwieFBlcmNlbnQiLCJ5UGVyY2VudCIsIm9mZnNldEhlaWdodCIsInRyYW5zZm9ybVBlcnNwZWN0aXZlIiwiZm9yY2UzRCIsIl9yZW5kZXJTVkdUcmFuc2Zvcm1zIiwiX3JlbmRlckNTU1RyYW5zZm9ybXMiLCJfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zIiwiX2FkZFB4VHJhbnNsYXRlIiwiX3plcm9EZWciLCJfemVyb1B4IiwiX2VuZFBhcmVudGhlc2lzIiwiX3JlZiIsInRyYW5zZm9ybXMiLCJ1c2UzRCIsIl9yZWYyIiwiYTExIiwiYTIxIiwidGFuIiwiX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4iLCJjYXAiLCJpc1N0cmluZyIsImNoYW5nZSIsImZpbmFsVmFsdWUiLCJkaXJlY3Rpb24iLCJfYXNzaWduIiwic291cmNlIiwiX2FkZFJhd1RyYW5zZm9ybVBUcyIsInN0YXJ0Q2FjaGUiLCJlbmRDYWNoZSIsInNpZGUiLCJ2YXJzIiwiQ1NTUGx1Z2luIiwidGFyZ2V0VGVzdCIsIm5vZGVUeXBlIiwidGFyZ2V0cyIsInN0YXJ0QXQiLCJzcGVjaWFsUHJvcCIsInJlbGF0aXZlIiwiaXNUcmFuc2Zvcm1SZWxhdGVkIiwidHJhbnNmb3JtUHJvcFR3ZWVuIiwiaGFzUHJpb3JpdHkiLCJpbmxpbmVQcm9wcyIsInN0eWxlcyIsInZpc2liaWxpdHkiLCJwYXJzZVRyYW5zZm9ybSIsInNtb290aE9yaWdpbiIsImRlcCIsImF1dG9Sb3VuZCIsInJlbmRlciIsImFsaWFzZXMiLCJnZXRTZXR0ZXIiLCJjaGVja1ByZWZpeCIsImdldFN0eWxlU2F2ZXIiLCJwb3NpdGlvbkFuZFNjYWxlIiwib3RoZXJzIiwiYWxsIiwicmVnaXN0ZXJQbHVnaW4iLCJkZWZhdWx0IiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiYXV0b1NsZWVwIiwibnVsbFRhcmdldFdhcm4iLCJsaW5lSGVpZ2h0IiwiX2RlZmF1bHRzIiwiZHVyYXRpb24iLCJvdmVyd3JpdGUiLCJfc3VwcHJlc3NPdmVyd3JpdGVzIiwiX2NvbnRleHQiLCJfdGlueU51bSIsIl8yUEkiLCJfSEFMRl9QSSIsIl9nc0lEIiwiX3NxcnQiLCJfY29zIiwiX3NpbiIsIl9pc0Z1bmN0aW9uIiwiX2lzTnVtYmVyIiwiX2lzT2JqZWN0IiwiX2lzTm90RmFsc2UiLCJfaXNGdW5jT3JTdHJpbmciLCJfaXNUeXBlZEFycmF5IiwiaXNWaWV3IiwiX2lzQXJyYXkiLCJfc3RyaWN0TnVtRXhwIiwiX2NvbXBsZXhTdHJpbmdOdW1FeHAiLCJfZGVsaW1pdGVkVmFsdWVFeHAiLCJfdW5pdEV4cCIsIl9nbG9iYWxUaW1lbGluZSIsIl9jb3JlSW5pdHRlZCIsIl9nbG9iYWxzIiwiX2luc3RhbGxTY29wZSIsIl9jb3JlUmVhZHkiLCJfaW5zdGFsbCIsInNjb3BlIiwiX21lcmdlIiwiX3dhcm4iLCJzdXBwcmVzcyIsIl9hZGRHbG9iYWwiLCJfZW1wdHlGdW5jIiwiX3N0YXJ0QXRSZXZlcnRDb25maWciLCJzdXBwcmVzc0V2ZW50cyIsImtpbGwiLCJfcmV2ZXJ0Q29uZmlnTm9LaWxsIiwiX3JldmVydENvbmZpZyIsIl9yZXNlcnZlZFByb3BzIiwiX2xhenlUd2VlbnMiLCJfbGF6eUxvb2t1cCIsIl9sYXN0UmVuZGVyZWRGcmFtZSIsIl9lZmZlY3RzIiwiX25leHRHQ0ZyYW1lIiwiX2hhcm5lc3NQbHVnaW5zIiwiX2NhbGxiYWNrTmFtZXMiLCJfaGFybmVzcyIsImhhcm5lc3NQbHVnaW4iLCJoYXJuZXNzIiwidG9BcnJheSIsIm5hbWVzIiwiX3JvdW5kUHJlY2lzZSIsIm9wZXJhdG9yIiwiX2FycmF5Q29udGFpbnNBbnkiLCJ0b1NlYXJjaCIsInRvRmluZCIsIl9sYXp5UmVuZGVyIiwiX2xhenkiLCJfbGF6eVNhZmVSZW5kZXIiLCJmb3JjZSIsIl9pbml0dGVkIiwiX3N0YXJ0QXQiLCJfbnVtZXJpY0lmUG9zc2libGUiLCJfcGFzc1Rocm91Z2giLCJkZWZhdWx0cyIsIl9zZXRLZXlmcmFtZURlZmF1bHRzIiwiZXhjbHVkZUR1cmF0aW9uIiwiYmFzZSIsInRvTWVyZ2UiLCJfbWVyZ2VEZWVwIiwiX2NvcHlFeGNsdWRpbmciLCJleGNsdWRpbmciLCJfaW5oZXJpdERlZmF1bHRzIiwia2V5ZnJhbWVzIiwiaW5oZXJpdCIsIl9kcCIsIl9hcnJheXNNYXRjaCIsImExIiwiYTIiLCJfYWRkTGlua2VkTGlzdEl0ZW0iLCJjaGlsZCIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwic29ydEJ5IiwicHJldiIsIl9wcmV2IiwibmV4dCIsIl9yZW1vdmVGcm9tUGFyZW50Iiwib25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSIsImF1dG9SZW1vdmVDaGlsZHJlbiIsIl9hY3QiLCJfdW5jYWNoZSIsIl9lbmQiLCJfc3RhcnQiLCJfZGlydHkiLCJfcmVjYWNoZUFuY2VzdG9ycyIsInRvdGFsRHVyYXRpb24iLCJfcmV3aW5kU3RhcnRBdCIsInRvdGFsVGltZSIsImltbWVkaWF0ZVJlbmRlciIsImF1dG9SZXZlcnQiLCJfaGFzTm9QYXVzZWRBbmNlc3RvcnMiLCJfdHMiLCJfZWxhcHNlZEN5Y2xlRHVyYXRpb24iLCJfcmVwZWF0IiwiX2FuaW1hdGlvbkN5Y2xlIiwiX3RUaW1lIiwiX3JEZWxheSIsInRUaW1lIiwiY3ljbGVEdXJhdGlvbiIsIndob2xlIiwiX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUiLCJwYXJlbnRUaW1lIiwiX3REdXIiLCJfc2V0RW5kIiwiX3J0cyIsIl9hbGlnblBsYXloZWFkIiwic21vb3RoQ2hpbGRUaW1pbmciLCJfcG9zdEFkZENoZWNrcyIsInRpbWVsaW5lIiwicmF3VGltZSIsIl9jbGFtcCIsIl96VGltZSIsIl9hZGRUb1RpbWVsaW5lIiwic2tpcENoZWNrcyIsIl9wYXJzZVBvc2l0aW9uIiwiX2RlbGF5IiwidGltZVNjYWxlIiwiX3NvcnQiLCJfaXNGcm9tT3JGcm9tU3RhcnQiLCJfcmVjZW50IiwiX3Njcm9sbFRyaWdnZXIiLCJ0cmlnZ2VyIiwiU2Nyb2xsVHJpZ2dlciIsIl9hdHRlbXB0SW5pdFR3ZWVuIiwiX2luaXRUd2VlbiIsImxhenkiLCJmcmFtZSIsIl9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQiLCJfbG9jayIsIl9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiIsInByZXZSYXRpbyIsInJlcGVhdERlbGF5IiwiaXRlcmF0aW9uIiwicHJldkl0ZXJhdGlvbiIsIl95b3lvIiwicmVwZWF0UmVmcmVzaCIsImludmFsaWRhdGUiLCJfZnJvbSIsIl9vblVwZGF0ZSIsIl9jYWxsYmFjayIsIl9wcm9tIiwiX2ZpbmROZXh0UGF1c2VUd2VlbiIsInByZXZUaW1lIiwiX2ZpcnN0IiwiX2xhc3QiLCJfc2V0RHVyYXRpb24iLCJza2lwVW5jYWNoZSIsImxlYXZlUGxheWhlYWQiLCJyZXBlYXQiLCJkdXIiLCJ0b3RhbFByb2dyZXNzIiwiX29uVXBkYXRlVG90YWxEdXJhdGlvbiIsIlRpbWVsaW5lIiwiX3plcm9Qb3NpdGlvbiIsImVuZFRpbWUiLCJwZXJjZW50QW5pbWF0aW9uIiwibGFiZWxzIiwicmVjZW50IiwiY2xpcHBlZER1cmF0aW9uIiwiaXNQZXJjZW50IiwiX2NyZWF0ZVR3ZWVuVHlwZSIsInBhcmFtcyIsImlzTGVnYWN5IiwidmFyc0luZGV4IiwiaXJWYXJzIiwicnVuQmFja3dhcmRzIiwiVHdlZW4iLCJfY29uZGl0aW9uYWxSZXR1cm4iLCJfc2xpY2UiLCJfaXNBcnJheUxpa2UiLCJub25FbXB0eSIsIl9mbGF0dGVuIiwiYXIiLCJsZWF2ZVN0cmluZ3MiLCJhY2N1bXVsYXRvciIsIl9hY2N1bXVsYXRvciIsIl93YWtlIiwiZWwiLCJuYXRpdmVFbGVtZW50Iiwic2h1ZmZsZSIsInNvcnQiLCJkaXN0cmlidXRlIiwiX3BhcnNlRWFzZSIsImZyb20iLCJpc0RlY2ltYWwiLCJyYXRpb3MiLCJheGlzIiwicmF0aW9YIiwicmF0aW9ZIiwiZWRnZXMiLCJkaXN0YW5jZXMiLCJvcmlnaW5YIiwib3JpZ2luWSIsIndyYXBBdCIsIl9pbnZlcnRFYXNlIiwiX3JvdW5kTW9kaWZpZXIiLCJwb3ciLCJyYXciLCJzbmFwIiwic25hcFRvIiwicmFkaXVzIiwiaXMyRCIsInZhbHVlcyIsImluY3JlbWVudCIsImR4IiwiZHkiLCJyb3VuZGluZ0luY3JlbWVudCIsInJldHVybkZ1bmN0aW9uIiwicGlwZSIsIl9sZW4iLCJmdW5jdGlvbnMiLCJfa2V5IiwicmVkdWNlIiwidW5pdGl6ZSIsIm5vcm1hbGl6ZSIsIl93cmFwQXJyYXkiLCJ3cmFwIiwicmFuZ2UiLCJ3cmFwWW95byIsInRvdGFsIiwibnVtcyIsImluUmFuZ2UiLCJvdXRSYW5nZSIsInByb2dyZXNzIiwibXV0YXRlIiwibWFzdGVyIiwiaW50ZXJwb2xhdG9ycyIsImlsIiwiX2FkZFByb3BUd2VlbiIsIl9yZW5kZXJQcm9wVHdlZW5zIiwiX2dldExhYmVsSW5EaXJlY3Rpb24iLCJmcm9tVGltZSIsImJhY2t3YXJkIiwibGFiZWwiLCJleGVjdXRlTGF6eUZpcnN0IiwicHJldkNvbnRleHQiLCJfY3R4IiwiY2FsbGJhY2tTY29wZSIsIl9pbnRlcnJ1cHQiLCJzY3JvbGxUcmlnZ2VyIiwiX3F1aWNrVHdlZW4iLCJfcmVnaXN0ZXJQbHVnaW5RdWV1ZSIsIl9jcmVhdGVQbHVnaW4iLCJjb25maWciLCJoZWFkbGVzcyIsImlzRnVuYyIsIlBsdWdpbiIsImluc3RhbmNlRGVmYXVsdHMiLCJfa2lsbFByb3BUd2VlbnNPZiIsIm1vZGlmaWVyIiwiX2FkZFBsdWdpbk1vZGlmaWVyIiwicmF3VmFycyIsInN0YXRpY3MiLCJfMjU1IiwiX2NvbG9yTG9va3VwIiwiYXF1YSIsImxpbWUiLCJzaWx2ZXIiLCJtYXJvb24iLCJ0ZWFsIiwibmF2eSIsIndoaXRlIiwib2xpdmUiLCJvcmFuZ2UiLCJncmF5IiwicHVycGxlIiwicGluayIsInRyYW5zcGFyZW50IiwiX2h1ZSIsIm0xIiwibTIiLCJzcGxpdENvbG9yIiwidG9IU0wiLCJmb3JjZUFscGhhIiwid2FzSFNMIiwiX2NvbG9yT3JkZXJEYXRhIiwiX2Zvcm1hdENvbG9ycyIsIm9yZGVyTWF0Y2hEYXRhIiwic2hlbGwiLCJfaHNsRXhwIiwiY29tYmluZWQiLCJfdGlja2VyQWN0aXZlIiwiX2dldFRpbWUiLCJub3ciLCJfbGFnVGhyZXNob2xkIiwiX2FkanVzdGVkTGFnIiwiX3N0YXJ0VGltZSIsIl9sYXN0VXBkYXRlIiwiX2dhcCIsIl9uZXh0VGltZSIsIl9pZCIsIl9yZXEiLCJfcmFmIiwiX3NlbGYiLCJfZGVsdGEiLCJfaSIsIl90aWNrIiwiZWxhcHNlZCIsIm1hbnVhbCIsIm92ZXJsYXAiLCJkaXNwYXRjaCIsInRpY2siLCJkZWx0YVJhdGlvIiwiZnBzIiwid2FrZSIsImdzYXBWZXJzaW9ucyIsInZlcnNpb24iLCJHcmVlblNvY2tHbG9iYWxzIiwic2xlZXAiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImxhZ1Ntb290aGluZyIsInRocmVzaG9sZCIsImFkanVzdGVkTGFnIiwiSW5maW5pdHkiLCJfZnBzIiwicHJpb3JpdGl6ZSIsIl9lYXNlTWFwIiwiX2N1c3RvbUVhc2VFeHAiLCJfcXVvdGVzRXhwIiwiX3BhcnNlT2JqZWN0SW5TdHJpbmciLCJ2YWwiLCJwYXJzZWRWYWwiLCJsYXN0SW5kZXhPZiIsIl92YWx1ZUluUGFyZW50aGVzZXMiLCJuZXN0ZWQiLCJfY29uZmlnRWFzZUZyb21TdHJpbmciLCJfQ0UiLCJfcHJvcGFnYXRlWW95b0Vhc2UiLCJpc1lveW8iLCJ5b3lvRWFzZSIsIl9lYXNlIiwiX3lFYXNlIiwiZGVmYXVsdEVhc2UiLCJfaW5zZXJ0RWFzZSIsImVhc2VJbiIsImVhc2VPdXQiLCJlYXNlSW5PdXQiLCJsb3dlcmNhc2VOYW1lIiwiX2Vhc2VJbk91dEZyb21PdXQiLCJfY29uZmlnRWxhc3RpYyIsImFtcGxpdHVkZSIsInBlcmlvZCIsInAzIiwiYXNpbiIsIl9jb25maWdCYWNrIiwib3ZlcnNob290IiwicG93ZXIiLCJMaW5lYXIiLCJlYXNlTm9uZSIsIm5vbmUiLCJuMSIsIm4yIiwibjMiLCJTdGVwcGVkRWFzZSIsInN0ZXBzIiwiaW1tZWRpYXRlU3RhcnQiLCJpZCIsInlveW8iLCJfcHJvdG8iLCJzdGFydFRpbWUiLCJfdG90YWxUaW1lIiwiX3B0TG9va3VwIiwiX3BUaW1lIiwiX3BzIiwicGF1c2VkIiwiaW5jbHVkZVJlcGVhdHMiLCJ3cmFwUmVwZWF0cyIsInByZXZJc1JldmVydGluZyIsImdsb2JhbFRpbWUiLCJfc2F0Iiwic2VlayIsInJlc3RhcnQiLCJpbmNsdWRlRGVsYXkiLCJwbGF5IiwicmV2ZXJzZWQiLCJyZXZlcnNlIiwicGF1c2UiLCJhdFRpbWUiLCJyZXN1bWUiLCJpc0FjdGl2ZSIsImV2ZW50Q2FsbGJhY2siLCJvbkZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwiX3RoZW4iLCJfQW5pbWF0aW9uIiwic29ydENoaWxkcmVuIiwiX3Byb3RvMiIsInRvIiwiZnJvbVRvIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJkZWxheWVkQ2FsbCIsInN0YWdnZXJUbyIsInN0YWdnZXIiLCJvbkNvbXBsZXRlQWxsIiwib25Db21wbGV0ZUFsbFBhcmFtcyIsIm9uQ29tcGxldGUiLCJvbkNvbXBsZXRlUGFyYW1zIiwic3RhZ2dlckZyb20iLCJzdGFnZ2VyRnJvbVRvIiwidER1ciIsImNyb3NzaW5nU3RhcnQiLCJwcmV2UGF1c2VkIiwicGF1c2VUd2VlbiIsInByZXZTdGFydCIsInJld2luZGluZyIsImRvZXNXcmFwIiwib25SZXBlYXQiLCJfaGFzUGF1c2UiLCJfZm9yY2luZyIsIm9uVXBkYXRlIiwiYWRqdXN0ZWRUaW1lIiwiX3RoaXMyIiwiYWRkTGFiZWwiLCJnZXRDaGlsZHJlbiIsInR3ZWVucyIsInRpbWVsaW5lcyIsImlnbm9yZUJlZm9yZVRpbWUiLCJnZXRCeUlkIiwicmVtb3ZlTGFiZWwiLCJraWxsVHdlZW5zT2YiLCJfdG90YWxUaW1lMiIsImFkZFBhdXNlIiwicmVtb3ZlUGF1c2UiLCJvbmx5QWN0aXZlIiwiZ2V0VHdlZW5zT2YiLCJfb3ZlcndyaXRpbmdUd2VlbiIsInBhcnNlZFRhcmdldHMiLCJpc0dsb2JhbFRpbWUiLCJjaGlsZHJlbiIsIl90YXJnZXRzIiwidHdlZW5UbyIsInRsIiwiX3ZhcnMiLCJfb25TdGFydCIsIm9uU3RhcnQiLCJvblN0YXJ0UGFyYW1zIiwiaW5pdHRlZCIsInR3ZWVuRnJvbVRvIiwiZnJvbVBvc2l0aW9uIiwidG9Qb3NpdGlvbiIsIm5leHRMYWJlbCIsImFmdGVyVGltZSIsInByZXZpb3VzTGFiZWwiLCJiZWZvcmVUaW1lIiwiY3VycmVudExhYmVsIiwic2hpZnRDaGlsZHJlbiIsImFkanVzdExhYmVscyIsInNvZnQiLCJjbGVhciIsImluY2x1ZGVMYWJlbHMiLCJ1cGRhdGVSb290IiwiX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4iLCJzZXR0ZXIiLCJzdHJpbmdGaWx0ZXIiLCJmdW5jUGFyYW0iLCJzdGFydE51bXMiLCJoYXNSYW5kb20iLCJmcCIsIm9wdGlvbmFsIiwiY3VycmVudFZhbHVlIiwicGFyc2VkU3RhcnQiLCJfc2V0dGVyUGxhaW4iLCJfc2V0dGVyRnVuY1dpdGhQYXJhbSIsIl9zZXR0ZXJGdW5jIiwiX2ZvcmNlQWxsUHJvcFR3ZWVucyIsIl9yZW5kZXJCb29sZWFuIiwiX3JlbmRlclBsYWluIiwiX3Byb2Nlc3NWYXJzIiwiX3BhcnNlRnVuY09yU3RyaW5nIiwicHRMb29rdXAiLCJwcmlvcml0eSIsInByZXZTdGFydEF0IiwiZnVsbFRhcmdldHMiLCJhdXRvT3ZlcndyaXRlIiwiX292ZXJ3cml0ZSIsImNsZWFuVmFycyIsImdzRGF0YSIsImhhcm5lc3NWYXJzIiwib3ZlcndyaXR0ZW4iLCJfcHRDYWNoZSIsIl9vcCIsIl9vbkluaXQiLCJfdXBkYXRlUHJvcFR3ZWVucyIsInN0YXJ0SXNSZWxhdGl2ZSIsInNraXBSZWN1cnNpb24iLCJwdENhY2hlIiwicm9vdFBUIiwibG9va3VwIiwiX2FkZEFsaWFzZXNUb1ZhcnMiLCJwcm9wZXJ0eUFsaWFzZXMiLCJfcGFyc2VLZXlmcmFtZSIsImFsbFByb3BzIiwiZWFzZUVhY2giLCJfc3RhZ2dlclR3ZWVuUHJvcHMiLCJfc3RhZ2dlclByb3BzVG9Ta2lwIiwiX0FuaW1hdGlvbjIiLCJza2lwSW5oZXJpdCIsIl90aGlzMyIsIl90aGlzMyR2YXJzIiwiY3VyVGFyZ2V0Iiwic3RhZ2dlckZ1bmMiLCJzdGFnZ2VyVmFyc1RvTWVyZ2UiLCJrZiIsIl9wcm90bzMiLCJpc05lZ2F0aXZlIiwicmVzZXRUbyIsImtpbGxpbmdUYXJnZXRzIiwicHJvcFR3ZWVuTG9va3VwIiwiZmlyc3RQVCIsIm92ZXJ3cml0dGVuUHJvcHMiLCJjdXJMb29rdXAiLCJjdXJPdmVyd3JpdGVQcm9wcyIsIm9uUmV2ZXJzZUNvbXBsZXRlIiwib25SZXZlcnNlQ29tcGxldGVQYXJhbXMiLCJfc2V0dGVyQXR0cmlidXRlIiwiaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nIiwib3AiLCJfc2V0dGVyV2l0aE1vZGlmaWVyIiwibVNldCIsIm10IiwicHQyIiwicmVuZGVyZXIiLCJfcHJvdG80IiwiVHdlZW5NYXgiLCJUd2VlbkxpdGUiLCJUaW1lbGluZUxpdGUiLCJUaW1lbGluZU1heCIsIl9tZWRpYSIsIl9lbXB0eUFycmF5IiwiX2xhc3RNZWRpYVRpbWUiLCJfY29udGV4dElEIiwiX2Rpc3BhdGNoIiwiX29uTWVkaWFDaGFuZ2UiLCJtYXRjaGVzIiwicXVlcmllcyIsImNvbmRpdGlvbnMiLCJhbnlNYXRjaCIsInRvZ2dsZWQiLCJtYXRjaE1lZGlhIiwib25NYXRjaCIsIkNvbnRleHQiLCJfciIsImlzUmV2ZXJ0ZWQiLCJfcHJvdG81IiwicHJldlNlbGVjdG9yIiwiaWdub3JlIiwiZ2V0VHdlZW5zIiwiX3RoaXM0IiwibyIsIk1hdGNoTWVkaWEiLCJjb250ZXh0cyIsIl9wcm90bzYiLCJjb25kIiwibXEiLCJfbGVuMiIsIl9rZXkyIiwiZ2V0UHJvcGVydHkiLCJnZXR0ZXIiLCJmb3JtYXQiLCJxdWlja1NldHRlciIsInNldHRlcnMiLCJxdWlja1RvIiwiX21lcmdlMiIsImlzVHdlZW5pbmciLCJyZWdpc3RlckVmZmVjdCIsIl9yZWYzIiwiZWZmZWN0IiwicGx1Z2lucyIsImV4dGVuZFRpbWVsaW5lIiwicGx1Z2luTmFtZSIsInJlZ2lzdGVyRWFzZSIsInBhcnNlRWFzZSIsImV4cG9ydFJvb3QiLCJpbmNsdWRlRGVsYXllZENhbGxzIiwibWF0Y2hNZWRpYVJlZnJlc2giLCJmb3VuZCIsImluc3RhbGwiLCJlZmZlY3RzIiwidGlja2VyIiwiZ2xvYmFsVGltZWxpbmUiLCJnbG9iYWxzIiwidG9BZGQiLCJzdXBwcmVzc092ZXJ3cml0ZXMiLCJfZ2V0UGx1Z2luUHJvcFR3ZWVuIiwiX2FkZE1vZGlmaWVycyIsIm1vZGlmaWVycyIsIl9idWlsZE1vZGlmaWVyUGx1Z2luIiwiUG93ZXIwIiwiUG93ZXIxIiwiUG93ZXIyIiwiUG93ZXIzIiwiUG93ZXI0IiwiUXVhZCIsIkN1YmljIiwiUXVhcnQiLCJRdWludCIsIlN0cm9uZyIsIkVsYXN0aWMiLCJCYWNrIiwiQm91bmNlIiwiU2luZSIsIkV4cG8iLCJDaXJjIiwiZ3NhcFdpdGhDU1MiLCJUd2Vlbk1heFdpdGhDU1MiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3JzIiwiaGFzQXJyYXlMZW5ndGhEZWZpbmVCdWciLCJmb28iLCIkT2JqZWN0Iiwib3JpZ1N5bWJvbCIsImhhc1N5bWJvbFNoYW0iLCJoYXNOYXRpdmVTeW1ib2xzIiwic3ltIiwic3ltT2JqIiwic3ltVmFsIiwic3ltcyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiJGhhc093biIsInN1cnJvZ2F0ZV9wYWlyc18xIiwiSFRNTF9BTFBIQSIsIkhUTUxfQ09ERVMiLCJhbHBoYUluZGV4IiwibnVtSW5kZXgiLCJmcm9tQ2hhckNvZGUiLCJIdG1sNEVudGl0aWVzIiwiZGVjb2RlIiwiZW50aXR5IiwiY2hyIiwiZnJvbUNvZGVQb2ludCIsImVuY29kZSIsInN0ckxlbmd0aCIsImNoYXJDb2RlQXQiLCJlbmNvZGVOb25VVEYiLCJjYyIsImhpZ2hTdXJyb2dhdGVGcm9tIiwiaGlnaFN1cnJvZ2F0ZVRvIiwiZ2V0Q29kZVBvaW50IiwiZW5jb2RlTm9uQVNDSUkiLCJFTlRJVElFUyIsIkRFQ09ERV9PTkxZX0VOVElUSUVTIiwiY2hhckluZGV4IiwiY3JlYXRlSW5kZXhlcyIsIkh0bWw1RW50aXRpZXMiLCJjaGFySW5mbyIsIl9hIiwiX2IiLCJjaHIyIiwiYWRkQ2hhciIsIl9jIiwiX2QiLCJ4bWxfZW50aXRpZXNfMSIsIlhtbEVudGl0aWVzIiwiaHRtbDRfZW50aXRpZXNfMSIsImh0bWw1X2VudGl0aWVzXzEiLCJBbGxIdG1sRW50aXRpZXMiLCJhc3RyYWxDb2RlUG9pbnQiLCJjb2RlUG9pbnRBdCIsImlucHV0IiwiQUxQSEFfSU5ERVgiLCJDSEFSX0lOREVYIiwiQ0hBUl9TX0lOREVYIiwiZ2V0TmF0aXZlIiwicm9vdCIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJIYXNoIiwiaGFzIiwibGlzdENhY2hlQ2xlYXIiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJMaXN0Q2FjaGUiLCJtYXBDYWNoZUNsZWFyIiwibWFwQ2FjaGVEZWxldGUiLCJtYXBDYWNoZUdldCIsIm1hcENhY2hlSGFzIiwibWFwQ2FjaGVTZXQiLCJNYXBDYWNoZSIsInNldENhY2hlQWRkIiwic2V0Q2FjaGVIYXMiLCJTZXRDYWNoZSIsIl9fZGF0YV9fIiwic3RhY2tDbGVhciIsInN0YWNrRGVsZXRlIiwic3RhY2tHZXQiLCJzdGFja0hhcyIsInN0YWNrU2V0IiwiU3RhY2siLCJzaXplIiwiYXJyYXlFYWNoIiwiYXJyYXkiLCJpdGVyYXRlZSIsImFycmF5RmlsdGVyIiwicHJlZGljYXRlIiwicmVzSW5kZXgiLCJiYXNlVGltZXMiLCJpc0FyZ3VtZW50cyIsImlzQnVmZmVyIiwiaXNJbmRleCIsImlzVHlwZWRBcnJheSIsIm9iamVjdFByb3RvIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImFycmF5TWFwIiwiYXJyYXlQdXNoIiwiYXJyYXlTb21lIiwiZXEiLCJhc3NvY0luZGV4T2YiLCJiYXNlRm9yT3duIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRWFjaCIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlRm9yIiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXQiLCJwYXRoIiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJudWxsVGFnIiwidW5kZWZpbmVkVGFnIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsImJhc2VHZXRUYWciLCJiYXNlSGFzSW4iLCJpc09iamVjdExpa2UiLCJhcmdzVGFnIiwiYmFzZUlzQXJndW1lbnRzIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzRXF1YWwiLCJvdGhlciIsImJpdG1hc2siLCJjdXN0b21pemVyIiwic3RhY2siLCJlcXVhbEFycmF5cyIsImVxdWFsQnlUYWciLCJlcXVhbE9iamVjdHMiLCJnZXRUYWciLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImFycmF5VGFnIiwib2JqZWN0VGFnIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJDT01QQVJFX1VOT1JERVJFRF9GTEFHIiwiYmFzZUlzTWF0Y2giLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJvYmpWYWx1ZSIsInNyY1ZhbHVlIiwiaXNGdW5jdGlvbiIsImlzTWFza2VkIiwiaXNPYmplY3QiLCJ0b1NvdXJjZSIsInJlUmVnRXhwQ2hhciIsInJlSXNIb3N0Q3RvciIsImZ1bmNQcm90byIsImZ1bmNUb1N0cmluZyIsInJlSXNOYXRpdmUiLCJiYXNlSXNOYXRpdmUiLCJpc0xlbmd0aCIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJ0eXBlZEFycmF5VGFncyIsImJhc2VJc1R5cGVkQXJyYXkiLCJiYXNlTWF0Y2hlcyIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJpZGVudGl0eSIsImJhc2VJdGVyYXRlZSIsImlzUHJvdG90eXBlIiwibmF0aXZlS2V5cyIsImJhc2VLZXlzIiwiaXNBcnJheUxpa2UiLCJiYXNlTWFwIiwiY29sbGVjdGlvbiIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJpc0tleSIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImJhc2VQcm9wZXJ0eSIsImJhc2VQcm9wZXJ0eURlZXAiLCJpc1N5bWJvbCIsIklORklOSVRZIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xUb1N0cmluZyIsImJhc2VUb1N0cmluZyIsImJhc2VVbmFyeSIsImNhY2hlSGFzIiwiY2FzdEZ1bmN0aW9uIiwiY29yZUpzRGF0YSIsImVhY2hGdW5jIiwiZnJvbVJpZ2h0IiwiaXRlcmFibGUiLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJvdGhMZW5ndGgiLCJhcnJTdGFja2VkIiwib3RoU3RhY2tlZCIsInNlZW4iLCJhcnJWYWx1ZSIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvdGhJbmRleCIsIm1hcFRvQXJyYXkiLCJzZXRUb0FycmF5Iiwic3ltYm9sVGFnIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJ0YWciLCJieXRlTGVuZ3RoIiwiYnl0ZU9mZnNldCIsImJ1ZmZlciIsImNvbnZlcnQiLCJzdGFja2VkIiwiZ2V0QWxsS2V5cyIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwib3RoUHJvcHMiLCJvYmpTdGFja2VkIiwic2tpcEN0b3IiLCJvYmpDdG9yIiwib3RoQ3RvciIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJnZXRTeW1ib2xzIiwiaXNLZXlhYmxlIiwiZ2V0TWFwRGF0YSIsImdldFZhbHVlIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJ1bm1hc2tlZCIsInN0dWJBcnJheSIsIm5hdGl2ZUdldFN5bWJvbHMiLCJzeW1ib2wiLCJwcm9taXNlVGFnIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwiQ3RvciIsImN0b3JTdHJpbmciLCJoYXNQYXRoIiwiaGFzRnVuYyIsIm5hdGl2ZUNyZWF0ZSIsIkhBU0hfVU5ERUZJTkVEIiwiTUFYX1NBRkVfSU5URUdFUiIsInJlSXNVaW50IiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsIm1hc2tTcmNLZXkiLCJ1aWQiLCJJRV9QUk9UTyIsInByb3RvIiwiYXJyYXlQcm90byIsIm1lbW9pemUiLCJNQVhfTUVNT0laRV9TSVpFIiwibWVtb2l6ZUNhcHBlZCIsIm92ZXJBcmciLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJ0eXBlcyIsImJpbmRpbmciLCJmcmVlU2VsZiIsIkxBUkdFX0FSUkFZX1NJWkUiLCJwYWlycyIsImRlZmF1bHRWYWx1ZSIsInN0dWJGYWxzZSIsIkJ1ZmZlciIsIm5hdGl2ZUlzQnVmZmVyIiwiYXN5bmNUYWciLCJnZW5UYWciLCJwcm94eVRhZyIsIm5vZGVJc1R5cGVkQXJyYXkiLCJGVU5DX0VSUk9SX1RFWFQiLCJtZW1vaXplZCIsIkNhY2hlIiwiZGVmaW5pdGlvbiIsImRlZmluZSIsImFtZCIsImxvZyIsIm5vb3AiLCJ1bmRlZmluZWRUeXBlIiwiaXNJRSIsImxvZ01ldGhvZHMiLCJfbG9nZ2Vyc0J5TmFtZSIsImRlZmF1bHRMb2dnZXIiLCJiaW5kTWV0aG9kIiwibWV0aG9kTmFtZSIsIm1ldGhvZCIsInRyYWNlRm9ySUUiLCJ0cmFjZSIsInJlYWxNZXRob2QiLCJyZXBsYWNlTG9nZ2luZ01ldGhvZHMiLCJsZXZlbCIsImdldExldmVsIiwibWV0aG9kRmFjdG9yeSIsImRlYnVnIiwibGV2ZWxzIiwiU0lMRU5UIiwiZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcyIsImRlZmF1bHRNZXRob2RGYWN0b3J5IiwiX2xldmVsIiwiX2xvZ2dlck5hbWUiLCJMb2dnZXIiLCJmYWN0b3J5IiwiaW5oZXJpdGVkTGV2ZWwiLCJkZWZhdWx0TGV2ZWwiLCJ1c2VyTGV2ZWwiLCJzdG9yYWdlS2V5IiwicGVyc2lzdExldmVsSWZQb3NzaWJsZSIsImxldmVsTnVtIiwibGV2ZWxOYW1lIiwibG9jYWxTdG9yYWdlIiwiY29va2llIiwiZ2V0UGVyc2lzdGVkTGV2ZWwiLCJzdG9yZWRMZXZlbCIsImNvb2tpZU5hbWUiLCJsb2NhdGlvbiIsImNsZWFyUGVyc2lzdGVkTGV2ZWwiLCJyZW1vdmVJdGVtIiwibm9ybWFsaXplTGV2ZWwiLCJzZXRMZXZlbCIsInBlcnNpc3QiLCJzZXREZWZhdWx0TGV2ZWwiLCJyZXNldExldmVsIiwiZW5hYmxlQWxsIiwiVFJBQ0UiLCJkaXNhYmxlQWxsIiwicmVidWlsZCIsImNoaWxkTmFtZSIsImluaXRpYWxMZXZlbCIsImdldExvZ2dlciIsImxvZ2dlciIsIl9sb2ciLCJub0NvbmZsaWN0IiwiZ2V0TG9nZ2VycyIsInRoaXNBcmciLCJjYW5Vc2VET00iLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsIl9wb3B1bGF0ZWQiLCJfaWUiLCJfZmlyZWZveCIsIl9vcGVyYSIsIl93ZWJraXQiLCJfY2hyb21lIiwiX2llX3JlYWxfdmVyc2lvbiIsIl9vc3giLCJfd2luZG93cyIsIl9saW51eCIsIl9hbmRyb2lkIiwiX3dpbjY0IiwiX2lwaG9uZSIsIl9pcGFkIiwiX25hdGl2ZSIsIl9tb2JpbGUiLCJfcG9wdWxhdGUiLCJ1YXMiLCJhZ2VudCIsIm9zIiwiTmFOIiwiZG9jdW1lbnRNb2RlIiwidHJpZGVudCIsInZlciIsIlVzZXJBZ2VudF9ERVBSRUNBVEVEIiwiaWUiLCJpZUNvbXBhdGliaWxpdHlNb2RlIiwiaWU2NCIsImZpcmVmb3giLCJvcGVyYSIsIndlYmtpdCIsInNhZmFyaSIsImNocm9tZSIsIndpbmRvd3MiLCJvc3giLCJsaW51eCIsImlwaG9uZSIsIm1vYmlsZSIsIm5hdGl2ZUFwcCIsImFuZHJvaWQiLCJpcGFkIiwidXNlSGFzRmVhdHVyZSIsImhhc0ZlYXR1cmUiLCJpc0V2ZW50U3VwcG9ydGVkIiwiZXZlbnROYW1lU3VmZml4IiwiY2FwdHVyZSIsImV2ZW50TmFtZSIsImlzU3VwcG9ydGVkIiwiUElYRUxfU1RFUCIsIkxJTkVfSEVJR0hUIiwiUEFHRV9IRUlHSFQiLCJub3JtYWxpemVXaGVlbCIsInNYIiwic1kiLCJwWCIsInBZIiwiZGV0YWlsIiwid2hlZWxEZWx0YSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJIT1JJWk9OVEFMX0FYSVMiLCJkZWx0YVkiLCJkZWx0YVgiLCJkZWx0YU1vZGUiLCJzcGluWCIsInNwaW5ZIiwicGl4ZWxYIiwiZ2V0RXZlbnRUeXBlIiwiaGFzTWFwIiwibWFwU2l6ZURlc2NyaXB0b3IiLCJtYXBTaXplIiwibWFwRm9yRWFjaCIsImhhc1NldCIsInNldFNpemVEZXNjcmlwdG9yIiwic2V0U2l6ZSIsInNldEZvckVhY2giLCJoYXNXZWFrTWFwIiwid2Vha01hcEhhcyIsImhhc1dlYWtTZXQiLCJ3ZWFrU2V0SGFzIiwiaGFzV2Vha1JlZiIsIndlYWtSZWZEZXJlZiIsImRlcmVmIiwiYm9vbGVhblZhbHVlT2YiLCJmdW5jdGlvblRvU3RyaW5nIiwiJG1hdGNoIiwiJHNsaWNlIiwiJHRvVXBwZXJDYXNlIiwiJHRvTG93ZXJDYXNlIiwiJHRlc3QiLCIkam9pbiIsIiRhcnJTbGljZSIsIiRmbG9vciIsImJpZ0ludFZhbHVlT2YiLCJnT1BTIiwic3ltVG9TdHJpbmciLCJoYXNTaGFtbWVkU3ltYm9scyIsImlzRW51bWVyYWJsZSIsImdQTyIsImFkZE51bWVyaWNTZXBhcmF0b3IiLCJudW0iLCJzZXBSZWdleCIsImludCIsImludFN0ciIsImRlYyIsInV0aWxJbnNwZWN0IiwiaW5zcGVjdEN1c3RvbSIsImN1c3RvbSIsImluc3BlY3RTeW1ib2wiLCJpbnNwZWN0XyIsIm9wdGlvbnMiLCJkZXB0aCIsIm9wdHMiLCJxdW90ZVN0eWxlIiwibWF4U3RyaW5nTGVuZ3RoIiwiY3VzdG9tSW5zcGVjdCIsImluZGVudCIsIm51bWVyaWNTZXBhcmF0b3IiLCJpbnNwZWN0U3RyaW5nIiwiYmlnSW50U3RyIiwibWF4RGVwdGgiLCJnZXRJbmRlbnQiLCJpbnNwZWN0Iiwibm9JbmRlbnQiLCJuZXdPcHRzIiwiaXNSZWdFeHAiLCJuYW1lT2YiLCJhcnJPYmpLZXlzIiwic3ltU3RyaW5nIiwibWFya0JveGVkIiwiaXNFbGVtZW50Iiwibm9kZU5hbWUiLCJhdHRycyIsImF0dHJpYnV0ZXMiLCJ3cmFwUXVvdGVzIiwiY2hpbGROb2RlcyIsInhzIiwic2luZ2xlTGluZVZhbHVlcyIsImluZGVudGVkSm9pbiIsImlzRXJyb3IiLCJjYXVzZSIsImlzTWFwIiwibWFwUGFydHMiLCJjb2xsZWN0aW9uT2YiLCJpc1NldCIsInNldFBhcnRzIiwiaXNXZWFrTWFwIiwid2Vha0NvbGxlY3Rpb25PZiIsImlzV2Vha1NldCIsImlzV2Vha1JlZiIsImlzTnVtYmVyIiwiaXNCaWdJbnQiLCJpc0Jvb2xlYW4iLCJpc0RhdGUiLCJ5cyIsImlzUGxhaW5PYmplY3QiLCJwcm90b1RhZyIsImNvbnN0cnVjdG9yVGFnIiwiZGVmYXVsdFN0eWxlIiwicXVvdGVDaGFyIiwicmVtYWluaW5nIiwidHJhaWxlciIsImxvd2J5dGUiLCJqb2luZWRFbnRyaWVzIiwiYmFzZUluZGVudCIsImxpbmVKb2luZXIiLCJzeW1NYXAiLCJwcmVmaXhlcyIsInVwcGVyIiwibWVtbyIsInByZWZpeCIsImNoYXIiLCJLZXkiLCJwcmVmaXhNZW1vemllZCIsInByZWZpeERhc2hlZCIsImRhc2giLCJoYXNEZXNjcmlwdG9ycyIsImdPUEQiLCJmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlIiwiZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlIiwiY2FsbEJvdW5kIiwiJFdlYWtNYXAiLCIkTWFwIiwiJHdlYWtNYXBHZXQiLCIkd2Vha01hcFNldCIsIiR3ZWFrTWFwSGFzIiwiJG1hcEdldCIsIiRtYXBTZXQiLCIkbWFwSGFzIiwibGlzdEdldE5vZGUiLCJjdXJyIiwibGlzdEdldCIsIm9iamVjdHMiLCJub2RlIiwibGlzdFNldCIsImxpc3RIYXMiLCJnZXRTaWRlQ2hhbm5lbCIsIiR3bSIsIiRtIiwiJG8iLCJjaGFubmVsIiwiYXNzZXJ0IiwiU29ja0pTIiwidHJhbnNwb3J0TGlzdCIsIl9zb2NranNfb25sb2FkIiwiaW5oZXJpdHMiLCJFdmVudCIsIkNsb3NlRXZlbnQiLCJpbml0RXZlbnQiLCJ3YXNDbGVhbiIsInJlYXNvbiIsIkV2ZW50VGFyZ2V0IiwiYWkiLCJldmVudFR5cGUiLCJjYW5CdWJibGUiLCJjYW5jZWxhYmxlIiwiYnViYmxlcyIsInRpbWVTdGFtcCIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiQ0FQVFVSSU5HX1BIQVNFIiwiQVRfVEFSR0VUIiwiQlVCQkxJTkdfUEhBU0UiLCJpZHgiLCJkaXNwYXRjaEV2ZW50IiwiVHJhbnNwb3J0TWVzc2FnZUV2ZW50IiwiaWZyYW1lVXRpbHMiLCJGYWNhZGVKUyIsInRyYW5zcG9ydCIsIl90cmFuc3BvcnQiLCJfdHJhbnNwb3J0TWVzc2FnZSIsIl90cmFuc3BvcnRDbG9zZSIsInBvc3RNZXNzYWdlIiwic3RyaW5naWZ5IiwiX3NlbmQiLCJzZW5kIiwiX2Nsb3NlIiwidXJsVXRpbHMiLCJldmVudFV0aWxzIiwiSW5mb0lmcmFtZVJlY2VpdmVyIiwibG9jIiwiZW52IiwiTk9ERV9FTlYiLCJhdmFpbGFibGVUcmFuc3BvcnRzIiwidHJhbnNwb3J0TWFwIiwiYXQiLCJmYWNhZGVUcmFuc3BvcnQiLCJ0cmFuc3BvcnROYW1lIiwicGFyZW50T3JpZ2luIiwiYm9vdHN0cmFwX2lmcmFtZSIsImZhY2FkZSIsImN1cnJlbnRXaW5kb3dJZCIsImhhc2giLCJvbk1lc3NhZ2UiLCJpZnJhbWVNZXNzYWdlIiwicGFyc2UiLCJpZ25vcmVkIiwid2luZG93SWQiLCJ0cmFuc1VybCIsImJhc2VVcmwiLCJpc09yaWdpbkVxdWFsIiwiaHJlZiIsIm9iamVjdFV0aWxzIiwiSW5mb0FqYXgiLCJBamF4T2JqZWN0IiwidDAiLCJ4byIsInN0YXR1cyIsImluZm8iLCJydHQiLCJYSFJMb2NhbE9iamVjdCIsIkluZm9SZWNlaXZlcklmcmFtZSIsImlyIiwiSWZyYW1lVHJhbnNwb3J0IiwiSW5mb0lmcmFtZSIsImdvIiwiaWZyIiwibXNnIiwiZW5hYmxlZCIsIlhEUiIsIlhIUkNvcnMiLCJYSFJMb2NhbCIsIlhIUkZha2UiLCJJbmZvUmVjZWl2ZXIiLCJ1cmxJbmZvIiwiZG9YaHIiLCJfZ2V0UmVjZWl2ZXIiLCJzYW1lT3JpZ2luIiwic2FtZVNjaGVtZSIsImFkZFBhdGgiLCJ0aW1lb3V0UmVmIiwiX2NsZWFudXAiLCJ0aW1lb3V0IiwicHJvdG9jb2wiLCJob3N0IiwicG9ydCIsIlVSTCIsImVzY2FwZSIsImJyb3dzZXIiLCJ0cmFuc3BvcnRzIiwicHJvdG9jb2xzIiwiQ09OTkVDVElORyIsImV4dGVuc2lvbnMiLCJwcm90b2NvbHNfd2hpdGVsaXN0IiwiX3RyYW5zcG9ydHNXaGl0ZWxpc3QiLCJfdHJhbnNwb3J0T3B0aW9ucyIsInRyYW5zcG9ydE9wdGlvbnMiLCJfdGltZW91dCIsInNlc3Npb25JZCIsIl9nZW5lcmF0ZVNlc3Npb25JZCIsIl9zZXJ2ZXIiLCJzZXJ2ZXIiLCJudW1iZXJTdHJpbmciLCJwYXJzZWRVcmwiLCJzZWN1cmUiLCJpc0xvb3BiYWNrQWRkciIsImhvc3RuYW1lIiwic29ydGVkUHJvdG9jb2xzIiwiZ2V0T3JpZ2luIiwiX29yaWdpbiIsInBhdGhuYW1lIiwiX3VybEluZm8iLCJudWxsT3JpZ2luIiwiaGFzRG9tYWluIiwiaXNTY2hlbWVFcXVhbCIsIl9pciIsIl9yZWNlaXZlSW5mbyIsInVzZXJTZXRDb2RlIiwiQ0xPU0lORyIsIkNMT1NFRCIsIk9QRU4iLCJfcnRvIiwiY291bnRSVE8iLCJfdHJhbnNVcmwiLCJiYXNlX3VybCIsImV4dGVuZCIsImVuYWJsZWRUcmFuc3BvcnRzIiwiZmlsdGVyVG9FbmFibGVkIiwiX3RyYW5zcG9ydHMiLCJtYWluIiwiX2Nvbm5lY3QiLCJUcmFuc3BvcnQiLCJuZWVkQm9keSIsInRpbWVvdXRNcyIsInJvdW5kVHJpcHMiLCJfdHJhbnNwb3J0VGltZW91dElkIiwiX3RyYW5zcG9ydFRpbWVvdXQiLCJ0cmFuc3BvcnRVcmwiLCJ0cmFuc3BvcnRPYmoiLCJjb250ZW50IiwicGF5bG9hZCIsIl9vcGVuIiwiZm9yY2VGYWlsIiwib25tZXNzYWdlIiwib25jbG9zZSIsIm9uZXJyb3IiLCJBcnJheVByb3RvdHlwZSIsIk9iamVjdFByb3RvdHlwZSIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiU3RyaW5nUHJvdG90eXBlIiwiYXJyYXlfc2xpY2UiLCJfdG9TdHJpbmciLCJzdXBwb3J0c0Rlc2NyaXB0b3JzIiwiZm9yY2VBc3NpZ24iLCJkZWZpbmVQcm9wZXJ0aWVzIiwidG9PYmplY3QiLCJ0b0ludGVnZXIiLCJUb1VpbnQzMiIsImJveGVkU3RyaW5nIiwic3BsaXRTdHJpbmciLCJwcm9wZXJseUJveGVzQ29udGV4dCIsInByb3Blcmx5Qm94ZWQiLCJwcm9wZXJseUJveGVzTm9uU3RyaWN0IiwicHJvcGVybHlCb3hlc1N0cmljdCIsIl9fIiwiZnVuIiwidGhpc3AiLCJoYXNGaXJlZm94MkluZGV4T2ZCdWciLCJzb3VnaHQiLCJzdHJpbmdfc3BsaXQiLCJjb21wbGlhbnRFeGVjTnBjZyIsInNlcGFyYXRvciIsIm91dHB1dCIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJleHRlbmRlZCIsInN0aWNreSIsImxhc3RMYXN0SW5kZXgiLCJzZXBhcmF0b3IyIiwibGFzdExlbmd0aCIsInN0cmluZ19zdWJzdHIiLCJoYXNOZWdhdGl2ZVN1YnN0ckJ1ZyIsIlhIUiIsIlhNTEh0dHBSZXF1ZXN0IiwiQWJzdHJhY3RYSFJPYmplY3QiLCJ4aHIiLCJhZGRRdWVyeSIsInVubG9hZFJlZiIsInVubG9hZEFkZCIsIm9udGltZW91dCIsIm5vQ3JlZGVudGlhbHMiLCJzdXBwb3J0c0NPUlMiLCJ3aXRoQ3JlZGVudGlhbHMiLCJoZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVGV4dCIsImFib3J0IiwidW5sb2FkRGVsIiwiYXhvIiwiY29ycyIsIkV2ZW50U291cmNlIiwiRHJpdmVyIiwiV2ViU29ja2V0IiwiTW96V2ViU29ja2V0IiwiV2ViU29ja2V0QnJvd3NlckRyaXZlciIsIkFqYXhCYXNlZFRyYW5zcG9ydCIsIkV2ZW50U291cmNlUmVjZWl2ZXIiLCJYSFJDb3JzT2JqZWN0IiwiRXZlbnRTb3VyY2VEcml2ZXIiLCJFdmVudFNvdXJjZVRyYW5zcG9ydCIsIkh0bWxmaWxlUmVjZWl2ZXIiLCJIdG1sRmlsZVRyYW5zcG9ydCIsImlmcmFtZVVybCIsImlmcmFtZU9iaiIsImNyZWF0ZUlmcmFtZSIsIm9ubWVzc2FnZUNhbGxiYWNrIiwiX21lc3NhZ2UiLCJjbGVhbnVwIiwibG9hZGVkIiwiY2RhdGEiLCJwb3N0IiwiaWZyYW1lRW5hYmxlZCIsIlNlbmRlclJlY2VpdmVyIiwiSnNvbnBSZWNlaXZlciIsImpzb25wU2VuZGVyIiwiSnNvblBUcmFuc3BvcnQiLCJjcmVhdGVBamF4U2VuZGVyIiwib3B0IiwiYWpheFVybCIsInVybFN1ZmZpeCIsIlJlY2VpdmVyIiwiQnVmZmVyZWRTZW5kZXIiLCJzZW5kZXIiLCJzZW5kQnVmZmVyIiwic2VuZFN0b3AiLCJzZW5kU2NoZWR1bGUiLCJzZW5kU2NoZWR1bGVXYWl0IiwidHJlZiIsIklmcmFtZVdyYXBUcmFuc3BvcnQiLCJpZnJhbWVJbmZvIiwiUG9sbGluZyIsInJlY2VpdmVVcmwiLCJfc2NoZWR1bGVSZWNlaXZlciIsInBvbGwiLCJwb2xsSXNDbG9zaW5nIiwic2VuZGVyRnVuYyIsInBvbGxVcmwiLCJlcyIsInBvbGx1dGVHbG9iYWxOYW1lc3BhY2UiLCJXUHJlZml4IiwiaHRtbGZpbGVFbmFibGVkIiwiY29uc3RydWN0RnVuYyIsImNyZWF0ZUh0bWxmaWxlIiwic3RvcCIsInVybFdpdGhJZCIsIl9jcmVhdGVTY3JpcHQiLCJ0aW1lb3V0SWQiLCJfYWJvcnQiLCJzY3JpcHRFcnJvclRpbWVvdXQiLCJhYm9ydGluZyIsInNjcmlwdDIiLCJzY3JpcHQiLCJvbmxvYWQiLCJvbmNsaWNrIiwiX3NjcmlwdEVycm9yIiwiZXJyb3JUaW1lciIsImxvYWRlZE9rYXkiLCJzcmMiLCJjaGFyc2V0IiwiaHRtbEZvciIsImFzeW5jIiwiaXNPcGVyYSIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImZpcnN0Q2hpbGQiLCJYaHJSZWNlaXZlciIsImJ1ZmZlclBvc2l0aW9uIiwiX2NodW5rSGFuZGxlciIsImJ1ZiIsImZvcm0iLCJhcmVhIiwiaWZyYW1lIiwiY3JlYXRlRm9ybSIsImVuY3R5cGUiLCJhY2NlcHRDaGFyc2V0IiwiYWN0aW9uIiwic3VibWl0IiwiY29tcGxldGVkIiwiWERST2JqZWN0IiwieGRyIiwiWERvbWFpblJlcXVlc3QiLCJfZXJyb3IiLCJvbnByb2dyZXNzIiwiWGhyRHJpdmVyIiwiV2Vic29ja2V0RHJpdmVyIiwiV2ViU29ja2V0VHJhbnNwb3J0Iiwid3MiLCJYZHJTdHJlYW1pbmdUcmFuc3BvcnQiLCJYZHJQb2xsaW5nVHJhbnNwb3J0IiwiY29va2llX25lZWRlZCIsIlhoclBvbGxpbmdUcmFuc3BvcnQiLCJYaHJTdHJlYW1pbmdUcmFuc3BvcnQiLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJyYW5kb21CeXRlcyIsImJ5dGVzIiwiaXNLb25xdWVyb3IiLCJkb21haW4iLCJleHRyYUVzY2FwYWJsZSIsImV4dHJhTG9va3VwIiwidW5yb2xsTG9va3VwIiwiZXNjYXBhYmxlIiwidW5yb2xsZWQiLCJxdW90ZWQiLCJvblVubG9hZCIsImFmdGVyVW5sb2FkIiwiaXNDaHJvbWVQYWNrYWdlZEFwcCIsImFwcCIsInJ1bnRpbWUiLCJyZWYiLCJ0cmlnZ2VyVW5sb2FkQ2FsbGJhY2tzIiwidW5sb2FkVHJpZ2dlcmVkIiwiZXJyb3JDYWxsYmFjayIsInVuYXR0YWNoIiwiY29udGVudFdpbmRvdyIsImRvYyIsIkNvbGxlY3RHYXJiYWdlIiwid3JpdGUiLCJwYXJlbnRXaW5kb3ciLCJsb2dPYmplY3QiLCJsZXZlbEV4aXN0cyIsIl9yYW5kb21TdHJpbmdDaGFycyIsInRyYW5zcG9ydHNXaGl0ZWxpc3QiLCJ0cmFucyIsIndlYnNvY2tldCIsInJlcyIsInFzIiwiYWRkciIsImxvbmciLCJmbXRMb25nIiwiZm10U2hvcnQiLCJtcyIsIm1zQWJzIiwicGx1cmFsIiwiaXNQbHVyYWwiLCJmb3JtYXRBcmdzIiwidXNlQ29sb3JzIiwic3RvcmFnZSIsImxvY2Fsc3RvcmFnZSIsImRlc3Ryb3kiLCJfX253anMiLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsImV4Y2VwdGlvbiIsInRhYmxlIiwiJDEiLCJuYW1lc3BhY2UiLCJodW1hbml6ZSIsImRpZmYiLCJsYXN0QyIsIm5hbWVzcGFjZXMiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsIkRFQlVHIiwiZm9ybWF0dGVycyIsInNldHVwIiwiY3JlYXRlRGVidWciLCJjb2VyY2UiLCJkaXNhYmxlIiwiZW5hYmxlIiwic2tpcHMiLCJzZWxlY3RDb2xvciIsImVuYWJsZU92ZXJyaWRlIiwibmFtZXNwYWNlc0NhY2hlIiwiZW5hYmxlZENhY2hlIiwiZm9ybWF0dGVyIiwibG9nRm4iLCJkZWxpbWl0ZXIiLCJuZXdEZWJ1ZyIsInRvTmFtZXNwYWNlIiwicmVnZXhwIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwidW5kZWYiLCJxdWVyeXN0cmluZyIsInF1ZXJ5IiwicGFyc2VyIiwicXVlcnlzdHJpbmdpZnkiLCJyZXF1aXJlZCIsImNvbnRyb2xPcldoaXRlc3BhY2UiLCJDUkhUTEYiLCJzbGFzaGVzIiwicHJvdG9jb2xyZSIsIndpbmRvd3NEcml2ZUxldHRlciIsInRyaW1MZWZ0IiwicnVsZXMiLCJzYW5pdGl6ZSIsImFkZHJlc3MiLCJpc1NwZWNpYWwiLCJsb2xjYXRpb24iLCJnbG9iYWxWYXIiLCJmaW5hbGRlc3RpbmF0aW9uIiwiVXJsIiwidW5lc2NhcGUiLCJzY2hlbWUiLCJleHRyYWN0UHJvdG9jb2wiLCJmb3J3YXJkU2xhc2hlcyIsIm90aGVyU2xhc2hlcyIsInNsYXNoZXNDb3VudCIsInJlc3QiLCJ1cCIsImV4dHJhY3RlZCIsImluc3RydWN0aW9uIiwiaW5zdHJ1Y3Rpb25zIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImF1dGgiLCJpbnMiLCJTdGF0cyIsImRvbSIsInBlcmZvcm1hbmNlIiwiUGFuZWwiLCJtZW1vcnkiLCJSRVZJU0lPTiIsImFkZFBhbmVsIiwic2hvd1BhbmVsIiwiYmVnaW4iLCJ1c2VkSlNIZWFwU2l6ZSIsImpzSGVhcFNpemVMaW1pdCIsImRvbUVsZW1lbnQiLCJzZXRNb2RlIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInRleHRCYXNlbGluZSIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiZmlsbFRleHQiLCJnbG9iYWxBbHBoYSIsImRyYXdJbWFnZSIsInB1bnljb2RlIiwibWF4SW50IiwidE1pbiIsInRNYXgiLCJza2V3IiwiZGFtcCIsImluaXRpYWxCaWFzIiwiaW5pdGlhbE4iLCJyZWdleFB1bnljb2RlIiwicmVnZXhOb25BU0NJSSIsInJlZ2V4U2VwYXJhdG9ycyIsImVycm9ycyIsImJhc2VNaW51c1RNaW4iLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJtYXBEb21haW4iLCJlbmNvZGVkIiwidWNzMmRlY29kZSIsImNvdW50ZXIiLCJleHRyYSIsInVjczJlbmNvZGUiLCJiYXNpY1RvRGlnaXQiLCJjb2RlUG9pbnQiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImZsYWciLCJhZGFwdCIsImRlbHRhIiwibnVtUG9pbnRzIiwiZmlyc3RUaW1lIiwiaW5wdXRMZW5ndGgiLCJvdXQiLCJiaWFzIiwiYmFzaWMiLCJvbGRpIiwiYmFzZU1pbnVzVCIsImhhbmRsZWRDUENvdW50IiwiYmFzaWNMZW5ndGgiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxTWludXNUIiwidG9Vbmljb2RlIiwidG9BU0NJSSIsInBlcmNlbnRUd2VudGllcyIsIkZvcm1hdCIsIlJGQzE3MzgiLCJSRkMzOTg2IiwiZm9ybWF0cyIsImFsbG93RG90cyIsImFsbG93UHJvdG90eXBlcyIsImFsbG93U3BhcnNlIiwiYXJyYXlMaW1pdCIsImNoYXJzZXRTZW50aW5lbCIsImNvbW1hIiwiZGVjb2RlciIsImlnbm9yZVF1ZXJ5UHJlZml4IiwiaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzIiwicGFyYW1ldGVyTGltaXQiLCJwYXJzZUFycmF5cyIsInBsYWluT2JqZWN0cyIsInN0cmljdE51bGxIYW5kbGluZyIsIiQwIiwibnVtYmVyU3RyIiwicGFyc2VBcnJheVZhbHVlIiwiaXNvU2VudGluZWwiLCJwYXJzZVZhbHVlcyIsInBhcnNlUXVlcnlTdHJpbmdWYWx1ZXMiLCJjbGVhblN0ciIsInNraXBJbmRleCIsImJyYWNrZXRFcXVhbHNQb3MiLCJwb3MiLCJtYXliZU1hcCIsImVuY29kZWRWYWwiLCJjb21iaW5lIiwicGFyc2VPYmplY3QiLCJjaGFpbiIsInZhbHVlc1BhcnNlZCIsImxlYWYiLCJjbGVhblJvb3QiLCJwYXJzZUtleXMiLCJwYXJzZVF1ZXJ5U3RyaW5nS2V5cyIsImdpdmVuS2V5IiwiYnJhY2tldHMiLCJzZWdtZW50Iiwibm9ybWFsaXplUGFyc2VPcHRpb25zIiwidGVtcE9iaiIsIm5ld09iaiIsIm1lcmdlIiwiY29tcGFjdCIsImFycmF5UHJlZml4R2VuZXJhdG9ycyIsImluZGljZXMiLCJwdXNoVG9BcnJheSIsInZhbHVlT3JBcnJheSIsInRvSVNPIiwidG9JU09TdHJpbmciLCJkZWZhdWx0Rm9ybWF0IiwiYWRkUXVlcnlQcmVmaXgiLCJlbmNvZGVyIiwiZW5jb2RlVmFsdWVzT25seSIsInNlcmlhbGl6ZURhdGUiLCJkYXRlIiwic2tpcE51bGxzIiwiaXNOb25OdWxsaXNoUHJpbWl0aXZlIiwic2VudGluZWwiLCJnZW5lcmF0ZUFycmF5UHJlZml4IiwiY29tbWFSb3VuZFRyaXAiLCJzaWRlQ2hhbm5lbCIsInRtcFNjIiwic3RlcCIsImZpbmRGbGFnIiwia2V5VmFsdWUiLCJvYmpLZXlzIiwiYWRqdXN0ZWRQcmVmaXgiLCJrZXlQcmVmaXgiLCJ2YWx1ZVNpZGVDaGFubmVsIiwibm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyIsImFycmF5Rm9ybWF0Iiwiam9pbmVkIiwiaGV4VGFibGUiLCJjb21wYWN0UXVldWUiLCJxdWV1ZSIsImNvbXBhY3RlZCIsImFycmF5VG9PYmplY3QiLCJtZXJnZVRhcmdldCIsInRhcmdldEl0ZW0iLCJhY2MiLCJhc3NpZ24iLCJhc3NpZ25TaW5nbGVTb3VyY2UiLCJzdHJXaXRob3V0UGx1cyIsImRlZmF1bHRFbmNvZGVyIiwia2luZCIsInJlZnMiLCJtYXBwZWQiLCJzZWFyY2giLCJwcm90b2NvbFBhdHRlcm4iLCJwb3J0UGF0dGVybiIsInNpbXBsZVBhdGhQYXR0ZXJuIiwiZGVsaW1zIiwidW53aXNlIiwiYXV0b0VzY2FwZSIsIm5vbkhvc3RDaGFycyIsImhvc3RFbmRpbmdDaGFycyIsImhvc3RuYW1lTWF4TGVuIiwiaG9zdG5hbWVQYXJ0UGF0dGVybiIsImhvc3RuYW1lUGFydFN0YXJ0IiwidW5zYWZlUHJvdG9jb2wiLCJqYXZhc2NyaXB0IiwiaG9zdGxlc3NQcm90b2NvbCIsInNsYXNoZWRQcm90b2NvbCIsImh0dHAiLCJodHRwcyIsImZ0cCIsImdvcGhlciIsImZpbGUiLCJ1cmxQYXJzZSIsInBhcnNlUXVlcnlTdHJpbmciLCJzbGFzaGVzRGVub3RlSG9zdCIsInF1ZXJ5SW5kZXgiLCJzcGxpdHRlciIsInVTcGxpdCIsInNsYXNoUmVnZXgiLCJzaW1wbGVQYXRoIiwibG93ZXJQcm90byIsImhvc3RFbmQiLCJoZWMiLCJhdFNpZ24iLCJwYXJzZUhvc3QiLCJpcHY2SG9zdG5hbWUiLCJob3N0cGFydHMiLCJuZXdwYXJ0IiwidmFsaWRQYXJ0cyIsIm5vdEhvc3QiLCJiaXQiLCJhZSIsImVzYyIsInFtIiwidXJsRm9ybWF0IiwidXJsUmVzb2x2ZSIsInJlc29sdmVPYmplY3QiLCJ1cmxSZXNvbHZlT2JqZWN0IiwicmVsIiwidGtleXMiLCJ0ayIsInRrZXkiLCJya2V5cyIsInJrIiwicmtleSIsInJlbFBhdGgiLCJpc1NvdXJjZUFicyIsImlzUmVsQWJzIiwibXVzdEVuZEFicyIsInJlbW92ZUFsbERvdHMiLCJzcmNQYXRoIiwicHN5Y2hvdGljIiwiYXV0aEluSG9zdCIsImhhc1RyYWlsaW5nU2xhc2giLCJpc0Fic29sdXRlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiQmFzZUNsaWVudCIsImdldENsaWVudFBhdGgiLCJfdHlwZW9mIiwiX2luaGVyaXRzIiwiX3NldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mIiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzaGFtIiwiX0Jhc2VDbGllbnQiLCJTb2NrSlNDbGllbnQiLCJfc3VwZXIiLCJzb2NrIiwib25PcGVuIiwib25vcGVuIiwib25DbG9zZSIsIl9yZXF1aXJlIiwiZW50aXRpZXMiLCJvdmVybGF5SWZyYW1lIiwib3ZlcmxheURpdiIsImxhc3RPbk92ZXJsYXlEaXZSZWFkeSIsImNyZWF0ZU92ZXJsYXlJZnJhbWUiLCJvbklmcmFtZUxvYWQiLCJib3JkZXIiLCJ6SW5kZXgiLCJhZGRPdmVybGF5RGl2VG8iLCJkaXYiLCJjb250ZW50RG9jdW1lbnQiLCJib3hTaXppbmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJwYWRkaW5nIiwid2hpdGVTcGFjZSIsIm92ZXJmbG93IiwiZW5zdXJlT3ZlcmxheURpdkV4aXN0cyIsIm9uT3ZlcmxheURpdlJlYWR5Iiwic2hvd01lc3NhZ2UiLCJtZXNzYWdlcyIsIkNsaWVudCIsIl9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fIiwicmV0cmllcyIsImNsaWVudCIsInNvY2tldCIsImluaXRTb2NrZXQiLCJoYW5kbGVycyIsInJldHJ5SW5NcyIsImdldEN1cnJlbnRTY3JpcHRTb3VyY2UiLCJjcmVhdGVTb2NrZXRVcmwiLCJyZXNvdXJjZVF1ZXJ5IiwiY3VycmVudExvY2F0aW9uIiwidXJsUGFydHMiLCJzY3JpcHRIb3N0IiwiZ2V0U29ja2V0VXJsIiwic29ja0hvc3QiLCJzb2NrUGF0aCIsInNvY2tQb3J0IiwiY3VycmVudFNjcmlwdCIsInNjcmlwdEVsZW1lbnRzIiwic2NyaXB0cyIsIklORk8iLCJXQVJOIiwiRVJST1IiLCJXQVJOSU5HIiwiTk9ORSIsInNldExvZ0xldmVsIiwicmVsb2FkQXBwIiwiaG90UmVsb2FkIiwiaG90IiwibGl2ZVJlbG9hZCIsImlzVW5sb2FkaW5nIiwiY3VycmVudEhhc2giLCJob3RFbWl0dGVyIiwicm9vdFdpbmRvdyIsImludGVydmFsSWQiLCJzZXRJbnRlcnZhbCIsImFwcGx5UmVsb2FkIiwiY2xlYXJJbnRlcnZhbCIsInJlbG9hZCIsInNlbmRNc2ciLCJXb3JrZXJHbG9iYWxTY29wZSIsImFuc2lSZWdleCIsImxvZ0xldmVsIiwiZHVtbXkiLCJzaG91bGRMb2ciLCJsb2dHcm91cCIsImdyb3VwIiwiZ3JvdXBDb2xsYXBzZWQiLCJncm91cEVuZCIsImZvcm1hdEVycm9yIiwiRGFya3Jvb20iLCJBYm91dCIsIkJsb2dzIiwiUHJvamVjdHMiLCJIb21lIiwiQXBwIiwiY3JlYXRlU3RhdHMiLCJ0ZW1wbGF0ZSIsInBhZ2VzIiwicGFnZSIsImFkZEV2ZW50TGlzdGVuZXJzIiwiYWRkTGlua3NFdmVudHNMaXN0ZW5lcnMiLCJjcmVhdGVBbmFseXRpY3MiLCJnb29nbGVBbmFseXRpY3MiLCJndGFnIiwiZGF0YUxheWVyIiwic3RhdHMiLCJvbkNoYW5nZSIsImlzTG9hZGluZyIsInBvaW50ZXJFdmVudHMiLCJyZXF1ZXN0IiwiZmV0Y2giLCJyZXNwb25zZSIsIm9uUmVxdWVzdCIsImh0bWwiLCJ0aXRsZSIsInB1c2hTdGF0ZSIsIm9uQ29udGV4dE1lbnUiLCJvblBvcFN0YXRlIiwib25LZXlEb3duIiwib25Gb2N1c0luIiwicGFzc2l2ZSIsIm9uY29udGV4dG1lbnUiLCJsaW5rcyIsImlzTG9jYWwiLCJpc0FuY2hvciIsImZvbnRQb2x5c2Fuc25ldXRyYWwiLCJBUFAiLCJjYXRjaCIsInN0cmlwQW5zaSIsIm92ZXJsYXkiLCJzZW5kTWVzc2FnZSIsImluaXRpYWwiLCJ1c2VXYXJuaW5nT3ZlcmxheSIsInVzZUVycm9yT3ZlcmxheSIsInVzZVByb2dyZXNzIiwic29ja2V0VXJsIiwiX19yZXNvdXJjZVF1ZXJ5Iiwib25Tb2NrZXRNZXNzYWdlIiwiaW52YWxpZCIsIl9oYXNoIiwic3RpbGxPayIsImhvdEN0eCIsIndhcm5pbmdzIiwiX3Byb2dyZXNzIiwicHJvZ3Jlc3NVcGRhdGUiLCJwZXJjZW50Iiwib2siLCJjb250ZW50Q2hhbmdlZCIsIl93YXJuaW5ncyIsInN0cmlwcGVkV2FybmluZ3MiLCJfZXJyb3JzIiwic3RyaXBwZWRFcnJvcnMiXSwic291cmNlUm9vdCI6IiJ9